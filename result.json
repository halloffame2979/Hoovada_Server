{
  "question": [
    {
      "question": "Why is processing a sorted array faster than processing an unsorted array?",
      "url": "https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Here is a piece of C++ code that shows some very peculiar behavior. For some strange reason, sorting the data miraculously makes the code almost six times faster:</p>\n<pre class=\"lang-cpp s-code-block hljs\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-comment\">// Generate data</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">unsigned</span> arraySize = <span class=\"hljs-number\">32768</span>;\n    <span class=\"hljs-keyword\">int</span> data[arraySize];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> c = <span class=\"hljs-number\">0</span>; c &lt; arraySize; ++c)\n        data[c] = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">256</span>;\n\n    <span class=\"hljs-comment\">// !!! With this, the next loop runs faster.</span>\n    std::<span class=\"hljs-built_in\">sort</span>(data, data + arraySize);\n\n    <span class=\"hljs-comment\">// Test</span>\n    <span class=\"hljs-keyword\">clock_t</span> start = <span class=\"hljs-built_in\">clock</span>();\n    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> sum = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; ++i)\n    {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> c = <span class=\"hljs-number\">0</span>; c &lt; arraySize; ++c)\n        {   <span class=\"hljs-comment\">// Primary loop</span>\n            <span class=\"hljs-keyword\">if</span> (data[c] &gt;= <span class=\"hljs-number\">128</span>)\n                sum += data[c];\n        }\n    }\n\n    <span class=\"hljs-keyword\">double</span> elapsedTime = <span class=\"hljs-keyword\">static_cast</span>&lt;<span class=\"hljs-keyword\">double</span>&gt;(<span class=\"hljs-built_in\">clock</span>() - start) / CLOCKS_PER_SEC;\n\n    std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">\"sum = \"</span> &lt;&lt; sum &lt;&lt; std::endl;\n}\n</code></pre>\n<ul>\n<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in 11.54 seconds.</li>\n<li>With the sorted data, the code runs in 1.93 seconds.</li>\n</ul>\n<hr>\n<p>Initially, I thought this might be just a language or compiler anomaly, so I tried Java:</p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">import</span> java.util.Arrays;\n<span class=\"hljs-keyword\">import</span> java.util.Random;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span>\n</span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span>\n    </span>{\n        <span class=\"hljs-comment\">// Generate data</span>\n        <span class=\"hljs-keyword\">int</span> arraySize = <span class=\"hljs-number\">32768</span>;\n        <span class=\"hljs-keyword\">int</span> data[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[arraySize];\n\n        Random rnd = <span class=\"hljs-keyword\">new</span> Random(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> c = <span class=\"hljs-number\">0</span>; c &lt; arraySize; ++c)\n            data[c] = rnd.nextInt() % <span class=\"hljs-number\">256</span>;\n\n        <span class=\"hljs-comment\">// !!! With this, the next loop runs faster</span>\n        Arrays.sort(data);\n\n        <span class=\"hljs-comment\">// Test</span>\n        <span class=\"hljs-keyword\">long</span> start = System.nanoTime();\n        <span class=\"hljs-keyword\">long</span> sum = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; ++i)\n        {\n            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> c = <span class=\"hljs-number\">0</span>; c &lt; arraySize; ++c)\n            {   <span class=\"hljs-comment\">// Primary loop</span>\n                <span class=\"hljs-keyword\">if</span> (data[c] &gt;= <span class=\"hljs-number\">128</span>)\n                    sum += data[c];\n            }\n        }\n\n        System.out.println((System.nanoTime() - start) / <span class=\"hljs-number\">1000000000.0</span>);\n        System.out.println(<span class=\"hljs-string\">\"sum = \"</span> + sum);\n    }\n}\n</code></pre>\n<p>With a similar but less extreme result.</p>\n<hr>\n<p>My first thought was that sorting brings the data into the <a href=\"https://en.wikipedia.org/wiki/CPU_cache\" rel=\"noreferrer\">cache</a>, but then I thought how silly that was because the array was just generated.</p>\n<ul>\n<li>What is going on?</li>\n<li>Why is processing a sorted array faster than processing an unsorted array?</li>\n</ul>\n<p>The code is summing up some independent terms, so the order should not matter.</p>\n<hr>\n<p><strong>Related / followup Q&amp;As</strong> about the same effect with different / later compilers and options:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/q/66521344\">Why is processing an unsorted array the same speed as processing a sorted array with modern x86-64 clang?</a></li>\n<li><a href=\"https://stackoverflow.com/q/28875325\">gcc optimization flag -O3 makes code slower than -O2</a></li>\n</ul>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>You are a victim of <a href=\"//en.wikipedia.org/wiki/Branch_predictor\" rel=\"noreferrer\">branch prediction</a> fail.</strong></p>\n<hr>\n<h2>What is Branch Prediction?</h2>\n<p>Consider a railroad junction:</p>\n<p><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/muxnt.jpg\" alt=\"Image showing a railroad junction\"></a>\n<sub><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\" rel=\"noreferrer\">Image</a> by Mecanismo, via Wikimedia Commons. Used under the <a href=\"//creativecommons.org/licenses/by-sa/3.0/deed.en\" rel=\"noreferrer\">CC-By-SA 3.0</a> license.</sub></p>\n<p>Now for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.</p>\n<p>You are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the driver which direction they want. And then you set the switch appropriately.</p>\n<p><em>Trains are heavy and have a lot of inertia. So they take forever to start up and slow down.</em></p>\n<p>Is there a better way? You guess which direction the train will go!</p>\n<ul>\n<li>If you guessed right, it continues on.</li>\n<li>If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.</li>\n</ul>\n<p><strong>If you guess right every time</strong>, the train will never have to stop.<br>\n<strong>If you guess wrong too often</strong>, the train will spend a lot of time stopping, backing up, and restarting.</p>\n<hr>\n<p><strong>Consider an if-statement:</strong> At the processor level, it is a branch instruction:</p>\n<p><img src=\"https://i.stack.imgur.com/pyfwC.png\" alt=\"Screenshot of compiled code containing an if statement\"></p>\n<p>You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.</p>\n<p><em>Modern processors are complicated and have long pipelines. So they take forever to \"warm up\" and \"slow down\".</em></p>\n<p>Is there a better way? You guess which direction the branch will go!</p>\n<ul>\n<li>If you guessed right, you continue executing.</li>\n<li>If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.</li>\n</ul>\n<p><strong>If you guess right every time</strong>, the execution will never have to stop.<br>\n<strong>If you guess wrong too often</strong>, you spend a lot of time stalling, rolling back, and restarting.</p>\n<hr>\n<p>This is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.</p>\n<p>So how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every three times, you guess the same...</p>\n<p><em><strong>In other words, you try to identify a pattern and follow it.</strong></em> This is more or less how branch predictors work.</p>\n<p>Most applications have well-behaved branches. So modern branch predictors will typically achieve &gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.</p>\n<p>Further reading: <a href=\"//en.wikipedia.org/wiki/Branch_predictor\" rel=\"noreferrer\">\"Branch predictor\" article on Wikipedia</a>.</p>\n<hr>\n<h2>As hinted from above, the culprit is this if-statement:</h2>\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c] &gt;= 128)</span>\n    sum += <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c];</span>\n</code></pre>\n<p>Notice that the data is evenly distributed between 0 and 255. When the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.</p>\n<p>This is very friendly to the branch predictor since the branch consecutively goes the same direction many times. Even a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.</p>\n<p><strong>Quick visualization:</strong></p>\n<pre class=\"lang-none s-code-block\"><code>T = branch taken\nN = branch not taken\n\ndata[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\nbranch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\n\n       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\n</code></pre>\n<p>However, when the data is completely random, the branch predictor is rendered useless, because it can't predict random data. Thus there will probably be around 50% misprediction (no better than random guessing).</p>\n<pre class=\"lang-none s-code-block\"><code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, ...\nbranch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T  ...\n\n       = TTNTTTTNTNNTTT ...   (completely random - impossible to predict)\n</code></pre>\n<hr>\n<p><strong>So what can be done?</strong></p>\n<p>If the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.</p>\n<p>Replace:</p>\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c] &gt;= 128)</span>\n    sum += <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c];</span>\n</code></pre>\n<p>with:</p>\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">int</span> t = (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c] - 128) &gt;&gt; 31;</span>\n<span class=\"hljs-title\">sum</span> += ~t &amp; <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c];</span>\n</code></pre>\n<p>This eliminates the branch and replaces it with some bitwise operations.</p>\n<p><sub>(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of <code>data[]</code>.)</sub></p>\n<p><strong>Benchmarks: Core i7 920 @ 3.5 GHz</strong></p>\n<p>C++ - Visual Studio 2010 - x64 Release</p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>Scenario</th>\n<th>Time (seconds)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Branching - Random data</td>\n<td>11.777</td>\n</tr>\n<tr>\n<td>Branching - Sorted data</td>\n<td>2.352</td>\n</tr>\n<tr>\n<td>Branchless - Random data</td>\n<td>2.564</td>\n</tr>\n<tr>\n<td>Branchless - Sorted data</td>\n<td>2.587</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>Java - NetBeans 7.1.1 JDK 7 - x64</p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>Scenario</th>\n<th>Time (seconds)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Branching - Random data</td>\n<td>10.93293813</td>\n</tr>\n<tr>\n<td>Branching - Sorted data</td>\n<td>5.643797077</td>\n</tr>\n<tr>\n<td>Branchless - Random data</td>\n<td>3.113581453</td>\n</tr>\n<tr>\n<td>Branchless - Sorted data</td>\n<td>3.186068823</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>Observations:</p>\n<ul>\n<li><strong>With the Branch:</strong> There is a huge difference between the sorted and unsorted data.</li>\n<li><strong>With the Hack:</strong> There is no difference between sorted and unsorted data.</li>\n<li>In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.</li>\n</ul>\n<p>A general rule of thumb is to avoid data-dependent branching in critical loops (such as in this example).</p>\n<hr>\n<p><strong>Update:</strong></p>\n<ul>\n<li><p>GCC 4.6.1 with <code>-O3</code> or <code>-ftree-vectorize</code> on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.</p>\n<p>(Or somewhat fast: for the already-sorted case, <code>cmov</code> can be slower especially if GCC puts it on the critical path instead of just <code>add</code>, especially on Intel before Broadwell where <code>cmov</code> has 2 cycle latency: <a href=\"https://stackoverflow.com/questions/28875325/gcc-optimization-flag-o3-makes-code-slower-than-o2\">gcc optimization flag -O3 makes code slower than -O2</a>)</p>\n</li>\n<li><p>VC++ 2010 is unable to generate conditional moves for this branch even under <code>/Ox</code>.</p>\n</li>\n<li><p><a href=\"//en.wikipedia.org/wiki/Intel_C++_Compiler\" rel=\"noreferrer\">Intel C++ Compiler</a> (ICC) 11 does something miraculous. It <a href=\"//en.wikipedia.org/wiki/Loop_interchange\" rel=\"noreferrer\">interchanges the two loops</a>, thereby hoisting the unpredictable branch to the outer loop. So not only is it immune to the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...</p>\n</li>\n<li><p>If you give the Intel compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).</p>\n</li>\n</ul>\n<p>This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...</p>\n    </div>",
          "vote": "32986"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Branch prediction.</strong></p>\n<p>With a sorted array, the condition <code>data[c] &gt;= 128</code> is first <code>false</code> for a streak of values, then becomes <code>true</code> for all later values. That's easy to predict. With an unsorted array, you pay for the branching cost.</p>\n    </div>",
          "vote": "4285"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The reason why performance improves drastically when the data is sorted is that the branch prediction penalty is removed, as explained beautifully in <a href=\"//stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array/11227902#11227902\">Mysticial's answer</a>.</p>\n<p>Now, if we look at the code</p>\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c] &gt;= 128)</span>\n    sum += <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c];</span>\n</code></pre>\n<p>we can find that the meaning of this particular <code>if... else...</code> branch is to add something when a condition is satisfied. This type of branch can be easily transformed into a <strong>conditional move</strong> statement, which would be compiled into a conditional move instruction: <code>cmovl</code>, in an <code>x86</code> system. The branch and thus the potential branch prediction penalty is removed.</p>\n<p>In <code>C</code>, thus <code>C++</code>, the statement, which would compile directly (without any optimization) into the conditional move instruction in <code>x86</code>, is the ternary operator <code>... ? ... : ...</code>. So we rewrite the above statement into an equivalent one:</p>\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">sum</span> += <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c] &gt;=128 ? <span class=\"hljs-keyword\">data</span>[c] : 0;</span>\n</code></pre>\n<p>While maintaining readability, we can check the speedup factor.</p>\n<p>On an Intel <a href=\"//en.wikipedia.org/wiki/Intel_Core#Core_i7\" rel=\"noreferrer\">Core i7</a>-2600K @ 3.4&nbsp;GHz and Visual Studio 2010 Release Mode, the benchmark is:</p>\n<p><strong>x86</strong></p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>Scenario</th>\n<th>Time (seconds)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Branching - Random data</td>\n<td>8.885</td>\n</tr>\n<tr>\n<td>Branching - Sorted data</td>\n<td>1.528</td>\n</tr>\n<tr>\n<td>Branchless - Random data</td>\n<td>3.716</td>\n</tr>\n<tr>\n<td>Branchless - Sorted data</td>\n<td>3.71</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>x64</strong></p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>Scenario</th>\n<th>Time (seconds)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Branching - Random data</td>\n<td>11.302</td>\n</tr>\n<tr>\n<td>Branching - Sorted data</td>\n<td>1.830</td>\n</tr>\n<tr>\n<td>Branchless - Random data</td>\n<td>2.736</td>\n</tr>\n<tr>\n<td>Branchless - Sorted data</td>\n<td>2.737</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>The result is robust in multiple tests. We get a great speedup when the branch result is unpredictable, but we suffer a little bit when it is predictable. In fact, when using a conditional move, the performance is the same regardless of the data pattern.</p>\n<p>Now let's look more closely by investigating the <code>x86</code> assembly they generate. For simplicity, we use two functions <code>max1</code> and <code>max2</code>.</p>\n<p><code>max1</code> uses the conditional branch <code>if... else ...</code>:</p>\n<pre class=\"default s-code-block hljs csharp\"><code><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">max1</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> a, <span class=\"hljs-built_in\">int</span> b</span>)</span> {\n    <span class=\"hljs-keyword\">if</span> (a &gt; b)\n        <span class=\"hljs-keyword\">return</span> a;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-keyword\">return</span> b;\n}\n</code></pre>\n<p><code>max2</code> uses the ternary operator <code>... ? ... : ...</code>:</p>\n<pre class=\"default s-code-block hljs css\"><code>int max2(int <span class=\"hljs-selector-tag\">a</span>, int <span class=\"hljs-selector-tag\">b</span>) {\n    return <span class=\"hljs-selector-tag\">a</span> &gt; <span class=\"hljs-selector-tag\">b</span> ? <span class=\"hljs-selector-tag\">a</span> : b;\n}\n</code></pre>\n<p>On a x86-64 machine, <code>GCC -S</code> generates the assembly below.</p>\n<pre class=\"default s-code-block hljs perl\"><code>:max1\n    movl    %edi, -<span class=\"hljs-number\">4</span>(%rbp)\n    movl    %esi, -<span class=\"hljs-number\">8</span>(%rbp)\n    movl    -<span class=\"hljs-number\">4</span>(%rbp), %eax\n    cmpl    -<span class=\"hljs-number\">8</span>(%rbp), %eax\n    jle     .L2\n    movl    -<span class=\"hljs-number\">4</span>(%rbp), %eax\n    movl    %eax, -<span class=\"hljs-number\">12</span>(%rbp)\n    jmp     .L4\n.L2:\n    movl    -<span class=\"hljs-number\">8</span>(%rbp), %eax\n    movl    %eax, -<span class=\"hljs-number\">12</span>(%rbp)\n.L4:\n    movl    -<span class=\"hljs-number\">12</span>(%rbp), %eax\n    leave\n    ret\n\n:max2\n    movl    %edi, -<span class=\"hljs-number\">4</span>(%rbp)\n    movl    %esi, -<span class=\"hljs-number\">8</span>(%rbp)\n    movl    -<span class=\"hljs-number\">4</span>(%rbp), %eax\n    cmpl    %eax, -<span class=\"hljs-number\">8</span>(%rbp)\n    cmovge  -<span class=\"hljs-number\">8</span>(%rbp), %eax\n    leave\n    ret\n</code></pre>\n<p><code>max2</code> uses much less code due to the usage of instruction <code>cmovge</code>. But the real gain is that <code>max2</code> does not involve branch jumps, <code>jmp</code>, which would have a significant performance penalty if the predicted result is not right.</p>\n<p>So why does a conditional move perform better?</p>\n<p>In a typical <code>x86</code> processor, the execution of an instruction is divided into several stages. Roughly, we have different hardware to deal with different stages. So we do not have to wait for one instruction to finish to start a new one. This is called <strong><a href=\"//en.wikipedia.org/wiki/Pipeline_(computing)\" rel=\"noreferrer\">pipelining</a></strong>.</p>\n<p>In a branch case, the following instruction is determined by the preceding one, so we cannot do pipelining. We have to either wait or predict.</p>\n<p>In a conditional move case, the execution conditional move instruction is divided into several stages, but the earlier stages like <code>Fetch</code> and <code>Decode</code> do not depend on the result of the previous instruction; only latter stages need the result. Thus, we wait a fraction of one instruction's execution time. This is why the conditional move version is slower than the branch when the prediction is easy.</p>\n<p>The book <em><a href=\"https://rads.stackoverflow.com/amzn/click/com/0136108040\" rel=\"noreferrer\">Computer Systems: A Programmer's Perspective, second edition</a></em> explains this in detail. You can check Section 3.6.6 for <em>Conditional Move Instructions</em>, entire Chapter 4 for <em>Processor Architecture</em>, and Section 5.11.2 for special treatment for <em>Branch Prediction and Misprediction Penalties</em>.</p>\n<p>Sometimes, some modern compilers can optimize our code to assembly with better performance, sometimes some compilers can't (the code in question is using Visual Studio's native compiler). Knowing the performance difference between a branch and a conditional move when unpredictable can help us write code with better performance when the scenario gets so complex that the compiler can not optimize them automatically.</p>\n    </div>",
          "vote": "3479"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you are curious about even more optimizations that can be done to this code, consider this:</p>\n\n<p>Starting with the original loop:</p>\n\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">for</span> (unsigned i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; ++i)\n{\n    for (unsigned j = <span class=\"hljs-number\">0</span>; j &lt; arraySize; ++j)\n    {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[j] &gt;= 128)</span>\n            sum += <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[j];</span>\n    }\n}\n</code></pre>\n\n<p>With loop interchange, we can safely change this loop to:</p>\n\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">for</span> (unsigned j = <span class=\"hljs-number\">0</span>; j &lt; arraySize; ++j)\n{\n    for (unsigned i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; ++i)\n    {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[j] &gt;= 128)</span>\n            sum += <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[j];</span>\n    }\n}\n</code></pre>\n\n<p>Then, you can see that the <code>if</code> conditional is constant throughout the execution of the <code>i</code> loop, so you can hoist the <code>if</code> out:</p>\n\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">for</span> (unsigned j = <span class=\"hljs-number\">0</span>; j &lt; arraySize; ++j)\n{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[j] &gt;= 128)</span>\n    {\n        for (unsigned i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; ++i)\n        {\n            sum += <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[j];</span>\n        }\n    }\n}\n</code></pre>\n\n<p>Then, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (<code>/fp:fast</code> is thrown, for example)</p>\n\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">for</span> (unsigned j = <span class=\"hljs-number\">0</span>; j &lt; arraySize; ++j)\n{\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[j] &gt;= 128)</span>\n    {\n        sum += <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[j] * 100000;</span>\n    }\n}\n</code></pre>\n\n<p>That one is 100,000 times faster than before.</p>\n    </div>",
          "vote": "2399"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>No doubt some of us would be interested in ways of identifying code that is problematic for the CPU's branch-predictor. The Valgrind tool <code>cachegrind</code> has a branch-predictor simulator, enabled by using the <code>--branch-sim=yes</code> flag. Running it over the examples in this question, with the number of outer loops reduced to 10000 and compiled with <code>g++</code>, gives these results:</p>\n\n<p><strong>Sorted:</strong></p>\n\n<pre class=\"default s-code-block hljs yaml\"><code><span class=\"hljs-string\">==32551==</span> <span class=\"hljs-attr\">Branches:</span>        <span class=\"hljs-number\">656</span><span class=\"hljs-string\">,645,130</span>  <span class=\"hljs-string\">(</span>  <span class=\"hljs-number\">656</span><span class=\"hljs-string\">,609,208</span> <span class=\"hljs-string\">cond</span> <span class=\"hljs-string\">+</span>    <span class=\"hljs-number\">35</span><span class=\"hljs-string\">,922</span> <span class=\"hljs-string\">ind)</span>\n<span class=\"hljs-string\">==32551==</span> <span class=\"hljs-attr\">Mispredicts:</span>         <span class=\"hljs-number\">169</span><span class=\"hljs-string\">,556</span>  <span class=\"hljs-string\">(</span>      <span class=\"hljs-number\">169</span><span class=\"hljs-string\">,095</span> <span class=\"hljs-string\">cond</span> <span class=\"hljs-string\">+</span>       <span class=\"hljs-number\">461</span> <span class=\"hljs-string\">ind)</span>\n<span class=\"hljs-string\">==32551==</span> <span class=\"hljs-attr\">Mispred rate:</span>            <span class=\"hljs-number\">0.0</span><span class=\"hljs-string\">%</span> <span class=\"hljs-string\">(</span>          <span class=\"hljs-number\">0.0</span><span class=\"hljs-string\">%</span>     <span class=\"hljs-string\">+</span>       <span class=\"hljs-number\">1.2</span><span class=\"hljs-string\">%</span>   <span class=\"hljs-string\">)</span>\n</code></pre>\n\n<p><strong>Unsorted:</strong></p>\n\n<pre class=\"default s-code-block hljs yaml\"><code><span class=\"hljs-string\">==32555==</span> <span class=\"hljs-attr\">Branches:</span>        <span class=\"hljs-number\">655</span><span class=\"hljs-string\">,996,082</span>  <span class=\"hljs-string\">(</span>  <span class=\"hljs-number\">655</span><span class=\"hljs-string\">,960,160</span> <span class=\"hljs-string\">cond</span> <span class=\"hljs-string\">+</span>  <span class=\"hljs-number\">35</span><span class=\"hljs-string\">,922</span> <span class=\"hljs-string\">ind)</span>\n<span class=\"hljs-string\">==32555==</span> <span class=\"hljs-attr\">Mispredicts:</span>     <span class=\"hljs-number\">164</span><span class=\"hljs-string\">,073,152</span>  <span class=\"hljs-string\">(</span>  <span class=\"hljs-number\">164</span><span class=\"hljs-string\">,072,692</span> <span class=\"hljs-string\">cond</span> <span class=\"hljs-string\">+</span>     <span class=\"hljs-number\">460</span> <span class=\"hljs-string\">ind)</span>\n<span class=\"hljs-string\">==32555==</span> <span class=\"hljs-attr\">Mispred rate:</span>           <span class=\"hljs-number\">25.0</span><span class=\"hljs-string\">%</span> <span class=\"hljs-string\">(</span>         <span class=\"hljs-number\">25.0</span><span class=\"hljs-string\">%</span>     <span class=\"hljs-string\">+</span>     <span class=\"hljs-number\">1.2</span><span class=\"hljs-string\">%</span>   <span class=\"hljs-string\">)</span>\n</code></pre>\n\n<p>Drilling down into the line-by-line output produced by <code>cg_annotate</code> we see for the loop in question:</p>\n\n<p><strong>Sorted:</strong></p>\n\n<pre class=\"default s-code-block hljs r\"><code>          Bc    Bcm Bi Bim\n      <span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">001</span>      <span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span>      <span class=\"hljs-keyword\">for</span> (unsigned i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10000</span>; ++i)\n           .      .  .   .      {\n           .      .  .   .          // primary loop\n <span class=\"hljs-number\">327</span>,<span class=\"hljs-number\">690</span>,<span class=\"hljs-number\">000</span> <span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">016</span>  <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span>          <span class=\"hljs-keyword\">for</span> (unsigned <span class=\"hljs-built_in\">c</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-built_in\">c</span> &lt; arraySize; ++<span class=\"hljs-built_in\">c</span>)\n           .      .  .   .          {\n <span class=\"hljs-number\">327</span>,<span class=\"hljs-number\">680</span>,<span class=\"hljs-number\">000</span> <span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">006</span>  <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span>              <span class=\"hljs-keyword\">if</span> (data[<span class=\"hljs-built_in\">c</span>] &gt;= <span class=\"hljs-number\">128</span>)\n           <span class=\"hljs-number\">0</span>      <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span>                  <span class=\"hljs-built_in\">sum</span> += data[<span class=\"hljs-built_in\">c</span>];\n           .      .  .   .          }\n           .      .  .   .      }\n</code></pre>\n\n<p><strong>Unsorted:</strong></p>\n\n<pre class=\"default s-code-block hljs r\"><code>          Bc         Bcm Bi Bim\n      <span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">001</span>           <span class=\"hljs-number\">4</span>  <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span>      <span class=\"hljs-keyword\">for</span> (unsigned i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10000</span>; ++i)\n           .           .  .   .      {\n           .           .  .   .          // primary loop\n <span class=\"hljs-number\">327</span>,<span class=\"hljs-number\">690</span>,<span class=\"hljs-number\">000</span>      <span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">038</span>  <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span>          <span class=\"hljs-keyword\">for</span> (unsigned <span class=\"hljs-built_in\">c</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-built_in\">c</span> &lt; arraySize; ++<span class=\"hljs-built_in\">c</span>)\n           .           .  .   .          {\n <span class=\"hljs-number\">327</span>,<span class=\"hljs-number\">680</span>,<span class=\"hljs-number\">000</span> <span class=\"hljs-number\">164</span>,<span class=\"hljs-number\">050</span>,<span class=\"hljs-number\">007</span>  <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span>              <span class=\"hljs-keyword\">if</span> (data[<span class=\"hljs-built_in\">c</span>] &gt;= <span class=\"hljs-number\">128</span>)\n           <span class=\"hljs-number\">0</span>           <span class=\"hljs-number\">0</span>  <span class=\"hljs-number\">0</span>   <span class=\"hljs-number\">0</span>                  <span class=\"hljs-built_in\">sum</span> += data[<span class=\"hljs-built_in\">c</span>];\n           .           .  .   .          }\n           .           .  .   .      }\n</code></pre>\n\n<p>This lets you easily identify the problematic line - in the unsorted version the <code>if (data[c] &gt;= 128)</code> line is causing 164,050,007 mispredicted conditional branches (<code>Bcm</code>) under cachegrind's branch-predictor model, whereas it's only causing 10,006 in the sorted version.</p>\n\n<hr>\n\n<p>Alternatively, on Linux you can use the performance counters subsystem to accomplish the same task, but with native performance using CPU counters.</p>\n\n<pre class=\"default s-code-block hljs bash\"><code>perf <span class=\"hljs-built_in\">stat</span> ./sumtest_sorted\n</code></pre>\n\n<p><strong>Sorted:</strong></p>\n\n<pre class=\"default s-code-block hljs perl\"><code> Performance counter stats <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'./sumtest_sorted'</span>:\n\n  <span class=\"hljs-number\">11808.095776</span> task-clock                <span class=\"hljs-comment\">#    0.998 CPUs utilized          </span>\n         <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">062</span> context-switches          <span class=\"hljs-comment\">#    0.090 K/sec                  </span>\n            <span class=\"hljs-number\">14</span> CPU-migrations            <span class=\"hljs-comment\">#    0.001 K/sec                  </span>\n           <span class=\"hljs-number\">337</span> page-faults               <span class=\"hljs-comment\">#    0.029 K/sec                  </span>\n<span class=\"hljs-number\">26</span>,<span class=\"hljs-number\">487</span>,<span class=\"hljs-number\">882</span>,<span class=\"hljs-number\">764</span> cycles                    <span class=\"hljs-comment\">#    2.243 GHz                    </span>\n<span class=\"hljs-number\">41</span>,<span class=\"hljs-number\">025</span>,<span class=\"hljs-number\">654</span>,<span class=\"hljs-number\">322</span> instructions              <span class=\"hljs-comment\">#    1.55  insns per cycle        </span>\n <span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">558</span>,<span class=\"hljs-number\">871</span>,<span class=\"hljs-number\">379</span> branches                  <span class=\"hljs-comment\">#  555.455 M/sec                  </span>\n       <span class=\"hljs-number\">567</span>,<span class=\"hljs-number\">204</span> branch-misses             <span class=\"hljs-comment\">#    0.01% of all branches        </span>\n\n  <span class=\"hljs-number\">11.827228330</span> seconds <span class=\"hljs-keyword\">time</span> elapsed\n</code></pre>\n\n<p><strong>Unsorted:</strong></p>\n\n<pre class=\"default s-code-block hljs perl\"><code> Performance counter stats <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'./sumtest_unsorted'</span>:\n\n  <span class=\"hljs-number\">28877.954344</span> task-clock                <span class=\"hljs-comment\">#    0.998 CPUs utilized          </span>\n         <span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">584</span> context-switches          <span class=\"hljs-comment\">#    0.089 K/sec                  </span>\n            <span class=\"hljs-number\">18</span> CPU-migrations            <span class=\"hljs-comment\">#    0.001 K/sec                  </span>\n           <span class=\"hljs-number\">335</span> page-faults               <span class=\"hljs-comment\">#    0.012 K/sec                  </span>\n<span class=\"hljs-number\">65</span>,<span class=\"hljs-number\">076</span>,<span class=\"hljs-number\">127</span>,<span class=\"hljs-number\">595</span> cycles                    <span class=\"hljs-comment\">#    2.253 GHz                    </span>\n<span class=\"hljs-number\">41</span>,<span class=\"hljs-number\">032</span>,<span class=\"hljs-number\">528</span>,<span class=\"hljs-number\">741</span> instructions              <span class=\"hljs-comment\">#    0.63  insns per cycle        </span>\n <span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">560</span>,<span class=\"hljs-number\">579</span>,<span class=\"hljs-number\">013</span> branches                  <span class=\"hljs-comment\">#  227.183 M/sec                  </span>\n <span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">646</span>,<span class=\"hljs-number\">394</span>,<span class=\"hljs-number\">749</span> branch-misses             <span class=\"hljs-comment\">#   25.10% of all branches        </span>\n\n  <span class=\"hljs-number\">28.935500947</span> seconds <span class=\"hljs-keyword\">time</span> elapsed\n</code></pre>\n\n<p>It can also do source code annotation with dissassembly.</p>\n\n<pre class=\"default s-code-block hljs delphi\"><code>perf <span class=\"hljs-keyword\">record</span> -e branch-misses ./sumtest_unsorted\nperf annotate -d sumtest_unsorted\n</code></pre>\n\n\n\n<pre class=\"default s-code-block hljs perl\"><code> Percent |      Source code &amp; Disassembly of sumtest_unsorted\n------------------------------------------------\n...\n         :                      sum += data[c];\n    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> :        <span class=\"hljs-number\">400</span>a1a:       mov    -<span class=\"hljs-number\">0x14</span>(%rbp),%eax\n   <span class=\"hljs-number\">39.97</span> :        <span class=\"hljs-number\">400</span>a1d:       mov    %eax,%eax\n    <span class=\"hljs-number\">5.31</span> :        <span class=\"hljs-number\">400</span>a1f:       mov    -<span class=\"hljs-number\">0x20040</span>(%rbp,%rax,<span class=\"hljs-number\">4</span>),%eax\n    <span class=\"hljs-number\">4.60</span> :        <span class=\"hljs-number\">400</span>a26:       cltq   \n    <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">00</span> :        <span class=\"hljs-number\">400</span>a28:       add    %rax,-<span class=\"hljs-number\">0x30</span>(%rbp)\n...\n</code></pre>\n\n<p>See <a href=\"https://perf.wiki.kernel.org/index.php/Tutorial\" rel=\"noreferrer\">the performance tutorial</a> for more details.</p>\n    </div>",
          "vote": "1974"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just read up on this question and its answers, and I feel an answer is missing.</p>\n\n<p>A common way to eliminate branch prediction that I've found to work particularly good in managed languages is a table lookup instead of using a branch (although I haven't tested it in this case).</p>\n\n<p>This approach works in general if:</p>\n\n<ol>\n<li>it's a small table and is likely to be cached in the processor, and</li>\n<li>you are running things in a quite tight loop and/or the processor can preload the data.</li>\n</ol>\n\n<p><strong>Background and why</strong></p>\n\n<p>From a processor perspective, your memory is slow. To compensate for the difference in speed, a couple of caches are built into your processor (L1/L2 cache). So imagine that you're doing your nice calculations and figure out that you need a piece of memory. The processor will get its 'load' operation and loads the piece of memory into cache -- and then uses the cache to do the rest of the calculations. Because memory is relatively slow, this 'load' will slow down your program.</p>\n\n<p>Like branch prediction, this was optimized in the Pentium processors: the processor predicts that it needs to load a piece of data and attempts to load that into the cache before the operation actually hits the cache. As we've already seen, branch prediction sometimes goes horribly wrong -- in the worst case scenario you need to go back and actually wait for a memory load, which will take forever (<strong>in other words: failing branch prediction is bad, a memory load after a branch prediction fail is just horrible!</strong>).</p>\n\n<p>Fortunately for us, if the memory access pattern is predictable, the processor will load it in its fast cache and all is well.</p>\n\n<p>The first thing we need to know is what is <em>small</em>? While smaller is generally better, a rule of thumb is to stick to lookup tables that are &lt;= 4096 bytes in size. As an upper limit: if your lookup table is larger than 64K it's probably worth reconsidering.</p>\n\n<p><strong>Constructing a table</strong></p>\n\n<p>So we've figured out that we can create a small table. Next thing to do is get a lookup function in place. Lookup functions are usually small functions that use a couple of basic integer operations (and, or, xor, shift, add, remove and perhaps multiply). You want to have your input translated by the lookup function to some kind of 'unique key' in your table, which then simply gives you the answer of all the work you wanted it to do.</p>\n\n<p>In this case: &gt;= 128 means we can keep the value, &lt; 128 means we get rid of it. The easiest way to do that is by using an 'AND': if we keep it, we AND it with 7FFFFFFF; if we want to get rid of it, we AND it with 0. Notice also that 128 is a power of 2 -- so we can go ahead and make a table of 32768/128 integers and fill it with one zero and a lot of 7FFFFFFFF's.</p>\n\n<p><strong>Managed languages</strong></p>\n\n<p>You might wonder why this works well in managed languages. After all, managed languages check the boundaries of the arrays with a branch to ensure you don't mess up...</p>\n\n<p>Well, not exactly... :-)</p>\n\n<p>There has been quite some work on eliminating this branch for managed languages. For example:</p>\n\n\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.Length; ++i)\n{\n   <span class=\"hljs-comment\">// Use array[i]</span>\n}\n</code></pre>\n\n<p>In this case, it's obvious to the compiler that the boundary condition will never be hit. At least the Microsoft JIT compiler (but I expect Java does similar things) will notice this and remove the check altogether. WOW, that means no branch. Similarly, it will deal with other obvious cases.</p>\n\n<p>If you run into trouble with lookups in managed languages -- the key is to add a <code>&amp; 0x[something]FFF</code> to your lookup function to make the boundary check predictable -- and watch it going faster.</p>\n\n<p><strong>The result of this case</strong></p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-comment\">// Generate data</span>\n<span class=\"hljs-built_in\">int</span> arraySize = <span class=\"hljs-number\">32768</span>;\n<span class=\"hljs-built_in\">int</span>[] data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[arraySize];\n\nRandom random = <span class=\"hljs-keyword\">new</span> Random(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> c = <span class=\"hljs-number\">0</span>; c &lt; arraySize; ++c)\n{\n    data[c] = random.Next(<span class=\"hljs-number\">256</span>);\n}\n\n<span class=\"hljs-comment\">/*To keep the spirit of the code intact, I'll make a separate lookup table\n(I assume we cannot modify 'data' or the number of loops)*/</span>\n\n<span class=\"hljs-built_in\">int</span>[] lookup = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">int</span>[<span class=\"hljs-number\">256</span>];\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> c = <span class=\"hljs-number\">0</span>; c &lt; <span class=\"hljs-number\">256</span>; ++c)\n{\n    lookup[c] = (c &gt;= <span class=\"hljs-number\">128</span>) ? c : <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">// Test</span>\nDateTime startTime = System.DateTime.Now;\n<span class=\"hljs-built_in\">long</span> sum = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; ++i)\n{\n    <span class=\"hljs-comment\">// Primary loop</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; arraySize; ++j)\n    {\n        <span class=\"hljs-comment\">/* Here you basically want to use simple operations - so no\n        random branches, but things like &amp;, |, *, -, +, etc. are fine. */</span>\n        sum += lookup[data[j]];\n    }\n}\n\nDateTime endTime = System.DateTime.Now;\nConsole.WriteLine(endTime - startTime);\nConsole.WriteLine(<span class=\"hljs-string\">\"sum = \"</span> + sum);\nConsole.ReadLine();\n</code></pre>\n    </div>",
          "vote": "1424"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As data is distributed between 0 and 255 when the array is sorted, around the first half of the iterations will not enter the <code>if</code>-statement (the <code>if</code> statement is shared below).</p>\n\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c] &gt;= 128)</span>\n    sum += <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c];</span>\n</code></pre>\n\n<p>The question is: What makes the above statement not execute in certain cases as in case of sorted data? Here comes the \"branch predictor\". A branch predictor is a digital circuit that tries to guess which way a branch (e.g. an <code>if-then-else</code> structure) will go before this is known for sure. The purpose of the branch predictor is to improve the flow in the instruction pipeline. Branch predictors play a critical role in achieving high effective performance!</p>\n\n<p><strong>Let's do some bench marking to understand it better</strong></p>\n\n<p>The performance of an <code>if</code>-statement depends on whether its condition has a predictable pattern. If the condition is always true or always false, the branch prediction logic in the processor will pick up the pattern. On the other hand, if the pattern is unpredictable, the <code>if</code>-statement will be much more expensive.</p>\n\n<p>Let’s measure the performance of this loop with different conditions:</p>\n\n<pre class=\"default s-code-block hljs python\"><code><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">max</span>; i++)\n    <span class=\"hljs-keyword\">if</span> (condition)\n        <span class=\"hljs-built_in\">sum</span>++;\n</code></pre>\n\n<p>Here are the timings of the loop with different true-false patterns:</p>\n\n<pre class=\"default s-code-block hljs r\"><code>Condition                Pattern             Time (ms)\n-------------------------------------------------------\n(i &amp; <span class=\"hljs-number\">0</span>×<span class=\"hljs-number\">80000000</span>) == <span class=\"hljs-number\">0</span>    <span class=\"hljs-built_in\">T</span> repeated          <span class=\"hljs-number\">322</span>\n\n(i &amp; <span class=\"hljs-number\">0xffffffff</span>) == <span class=\"hljs-number\">0</span>    <span class=\"hljs-built_in\">F</span> repeated          <span class=\"hljs-number\">276</span>\n\n(i &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>             TF alternating      <span class=\"hljs-number\">760</span>\n\n(i &amp; <span class=\"hljs-number\">3</span>) == <span class=\"hljs-number\">0</span>             TFFFTFFF…           <span class=\"hljs-number\">513</span>\n\n(i &amp; <span class=\"hljs-number\">2</span>) == <span class=\"hljs-number\">0</span>             TTFFTTFF…           <span class=\"hljs-number\">1675</span>\n\n(i &amp; <span class=\"hljs-number\">4</span>) == <span class=\"hljs-number\">0</span>             TTTTFFFFTTTTFFFF…   <span class=\"hljs-number\">1275</span>\n\n(i &amp; <span class=\"hljs-number\">8</span>) == <span class=\"hljs-number\">0</span>             <span class=\"hljs-number\">8</span><span class=\"hljs-built_in\">T</span> <span class=\"hljs-number\">8</span><span class=\"hljs-built_in\">F</span> <span class=\"hljs-number\">8</span><span class=\"hljs-built_in\">T</span> <span class=\"hljs-number\">8</span><span class=\"hljs-built_in\">F</span> …       <span class=\"hljs-number\">752</span>\n\n(i &amp; <span class=\"hljs-number\">16</span>) == <span class=\"hljs-number\">0</span>            <span class=\"hljs-number\">16</span><span class=\"hljs-built_in\">T</span> <span class=\"hljs-number\">16</span><span class=\"hljs-built_in\">F</span> <span class=\"hljs-number\">16</span><span class=\"hljs-built_in\">T</span> <span class=\"hljs-number\">16</span><span class=\"hljs-built_in\">F</span> …   <span class=\"hljs-number\">490</span>\n</code></pre>\n\n<p>A “<strong>bad</strong>” true-false pattern can make an <code>if</code>-statement up to six times slower than a “<strong>good</strong>” pattern! Of course, which pattern is good and which is bad depends on the exact instructions generated by the compiler and on the specific processor.</p>\n\n<p>So there is no doubt about the impact of branch prediction on performance!</p>\n    </div>",
          "vote": "1273"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One way to avoid branch prediction errors is to build a lookup table, and index it using the data.  Stefan de Bruijn discussed that in his answer.</p>\n<p>But in this case, we know values are in the range [0, 255] and we only care about values &gt;= 128.  That means we can easily extract a single bit that will tell us whether we want a value or not: by shifting the data to the right 7 bits, we are left with a 0 bit or a 1 bit, and we only want to add the value when we have a 1 bit.  Let's call this bit the \"decision bit\".</p>\n<p>By using the 0/1 value of the decision bit as an index into an array, we can make code that will be equally fast whether the data is sorted or not sorted.  Our code will always add a value, but when the decision bit is 0, we will add the value somewhere we don't care about.  Here's the code:</p>\n<pre class=\"default s-code-block hljs cpp\"><code><span class=\"hljs-comment\">// Test</span>\n<span class=\"hljs-keyword\">clock_t</span> start = <span class=\"hljs-built_in\">clock</span>();\n<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> a[] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>};\n<span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> sum;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; ++i)\n{\n    <span class=\"hljs-comment\">// Primary loop</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> c = <span class=\"hljs-number\">0</span>; c &lt; arraySize; ++c)\n    {\n        <span class=\"hljs-keyword\">int</span> j = (data[c] &gt;&gt; <span class=\"hljs-number\">7</span>);\n        a[j] += data[c];\n    }\n}\n\n<span class=\"hljs-keyword\">double</span> elapsedTime = <span class=\"hljs-keyword\">static_cast</span>&lt;<span class=\"hljs-keyword\">double</span>&gt;(<span class=\"hljs-built_in\">clock</span>() - start) / CLOCKS_PER_SEC;\nsum = a[<span class=\"hljs-number\">1</span>];\n</code></pre>\n<p>This code wastes half of the adds but never has a branch prediction failure.  It's tremendously faster on random data than the version with an actual if statement.</p>\n<p>But in my testing, an explicit lookup table was slightly faster than this, probably because indexing into a lookup table was slightly faster than bit shifting.  This shows how my code sets up and uses the lookup table (unimaginatively called <code>lut</code> for \"LookUp Table\" in the code).  Here's the C++ code:</p>\n<pre class=\"default s-code-block hljs r\"><code>// Declare and then fill <span class=\"hljs-keyword\">in</span> the lookup table\nint lut[<span class=\"hljs-number\">256</span>];\n<span class=\"hljs-keyword\">for</span> (unsigned <span class=\"hljs-built_in\">c</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-built_in\">c</span> &lt; <span class=\"hljs-number\">256</span>; ++<span class=\"hljs-built_in\">c</span>)\n    lut[<span class=\"hljs-built_in\">c</span>] = (<span class=\"hljs-built_in\">c</span> &gt;= <span class=\"hljs-number\">128</span>) ? <span class=\"hljs-built_in\">c</span> : <span class=\"hljs-number\">0</span>;\n\n// Use the lookup table after it is built\n<span class=\"hljs-keyword\">for</span> (unsigned i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; ++i)\n{\n    // Primary loop\n    <span class=\"hljs-keyword\">for</span> (unsigned <span class=\"hljs-built_in\">c</span> = <span class=\"hljs-number\">0</span>; <span class=\"hljs-built_in\">c</span> &lt; arraySize; ++<span class=\"hljs-built_in\">c</span>)\n    {\n        <span class=\"hljs-built_in\">sum</span> += lut[data[<span class=\"hljs-built_in\">c</span>]];\n    }\n}\n</code></pre>\n<p>In this case, the lookup table was only 256 bytes, so it fits nicely in a cache and all was fast.  This technique wouldn't work well if the data was 24-bit values and we only wanted half of them... the lookup table would be far too big to be practical.  On the other hand, we can combine the two techniques shown above: first shift the bits over, then index a lookup table.  For a 24-bit value that we only want the top half value, we could potentially shift the data right by 12 bits, and be left with a 12-bit value for a table index.  A 12-bit table index implies a table of 4096 values, which might be practical.</p>\n<p>The technique of indexing into an array, instead of using an <code>if</code> statement, can be used for deciding which pointer to use.  I saw a library that implemented binary trees, and instead of having two named pointers (<code>pLeft</code> and <code>pRight</code> or whatever) had a length-2 array of pointers and used the \"decision bit\" technique to decide which one to follow.  For example, instead of:</p>\n<pre class=\"default s-code-block hljs php\"><code><span class=\"hljs-keyword\">if</span> (x &lt; node-&gt;value)\n    node = node-&gt;pLeft;\n<span class=\"hljs-keyword\">else</span>\n    node = node-&gt;pRight;\n</code></pre>\n<p>this library would do something like:</p>\n<pre class=\"default s-code-block hljs ini\"><code><span class=\"hljs-attr\">i</span> = (x &lt; node-&gt;value)<span class=\"hljs-comment\">;</span>\n<span class=\"hljs-attr\">node</span> = node-&gt;link[i]<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p>Here's a link to this code: <a href=\"https://web.archive.org/web/20190207151651/https://www.eternallyconfuzzled.com/tuts/datastructures/jsw_tut_rbtree.aspx\" rel=\"noreferrer\">Red Black Trees</a>, <em>Eternally Confuzzled</em></p>\n    </div>",
          "vote": "1204"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the sorted case, you can do better than relying on successful branch prediction or any branchless comparison trick: completely remove the branch.</p>\n\n<p>Indeed, the array is partitioned in a contiguous zone with <code>data &lt; 128</code> and another with <code>data &gt;= 128</code>. So you should find the partition point with a <a href=\"https://en.wikipedia.org/wiki/Dichotomic_search\" rel=\"noreferrer\">dichotomic search</a> (using <code>Lg(arraySize) = 15</code> comparisons), then do a straight accumulation from that point.</p>\n\n<p>Something like (unchecked)</p>\n\n<pre class=\"default s-code-block hljs python\"><code><span class=\"hljs-built_in\">int</span> i= <span class=\"hljs-number\">0</span>, j, k= arraySize;\n<span class=\"hljs-keyword\">while</span> (i &lt; k)\n{\n  j= (i + k) &gt;&gt; <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">if</span> (data[j] &gt;= <span class=\"hljs-number\">128</span>)\n    k= j;\n  <span class=\"hljs-keyword\">else</span>\n    i= j;\n}\n<span class=\"hljs-built_in\">sum</span>= <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> (; i &lt; arraySize; i++)\n  <span class=\"hljs-built_in\">sum</span>+= data[i];\n</code></pre>\n\n<p>or, slightly more obfuscated</p>\n\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">int</span> i, k, j= (i + k) &gt;&gt; <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-title\">for</span> (i= <span class=\"hljs-number\">0</span>, k= arraySize; i &lt; k; (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[j] &gt;= 128 ? k : i)= j)</span>\n  j= (i + k) &gt;&gt; <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-title\">for</span> (sum= <span class=\"hljs-number\">0</span>; i &lt; arraySize; i++)\n  sum+= <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[i];</span>\n</code></pre>\n\n<p>A yet faster approach, that gives an <strong>approximate</strong> solution for both sorted or unsorted is: <code>sum= 3137536;</code> (assuming a truly uniform distribution, 16384 samples with expected value 191.5) <strong>:-)</strong></p>\n    </div>",
          "vote": "1086"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The above behavior is happening because of Branch prediction.</p>\n\n<p>To understand branch prediction one must first understand <strong>Instruction Pipeline</strong>:</p>\n\n<p>Any instruction is broken into a sequence of steps so that different steps can be executed concurrently in parallel. This technique is known as instruction pipeline and this is used to increase throughput in modern processors. To understand this better please see this <a href=\"https://en.wikipedia.org/wiki/Pipeline_(computing)#Concept_and_motivation\" rel=\"noreferrer\">example on Wikipedia</a>.</p>\n\n<p>Generally, modern processors have quite long pipelines, but for ease let's consider these 4 steps only.</p>\n\n<ol>  \n  <li>IF -- Fetch the instruction from memory \n  </li><li>ID -- Decode the instruction\n  </li><li>EX -- Execute the instruction \n  </li><li>WB -- Write back to CPU register\n</li></ol>\n\n<p><strong><em>4-stage pipeline in general for 2 instructions.</em></strong>\n<img src=\"https://i.stack.imgur.com/PqBBR.png\" alt=\"4-stage pipeline in general\"></p>\n\n<p>Moving back to the above question let's consider the following instructions:</p>\n\n<pre class=\"default s-code-block hljs haskell\"><code>                        <span class=\"hljs-type\">A</span>) <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c] &gt;= 128)</span>\n                                /\\\n                               /  \\\n                              /    \\\n                        true /      \\ false\n                            /        \\\n                           /          \\\n                          /            \\\n                         /              \\\n              <span class=\"hljs-type\">B</span>) sum += <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c];          <span class=\"hljs-type\">C</span>) for loop or print().</span>\n</code></pre>\n\n<p>Without branch prediction, the following would occur:</p>\n\n<p>To execute instruction B or instruction C the processor will have to wait till the instruction A doesn't reach till EX stage in the pipeline, as the decision to go to instruction B or instruction C depends on the result of instruction A. So the pipeline will look like this.</p>\n\n<p><strong><em>when if condition returns true:</em></strong>\n<img src=\"https://i.stack.imgur.com/0H4gP.png\" alt=\"enter image description here\"></p>\n\n<p><strong><em>When if condition returns false:</em></strong>\n<img src=\"https://i.stack.imgur.com/APpca.png\" alt=\"enter image description here\"></p>\n\n<p>As a result of waiting for the result of instruction A, the total CPU cycles spent in the above case (without branch prediction; for both true and false) is 7.</p>\n\n<p><strong>So what is branch prediction?</strong></p>\n\n<p>Branch predictor will try to guess which way a branch (an if-then-else structure) will go before this is known for sure. It will not wait for the instruction A to reach the EX stage of the pipeline, but it will guess the decision and go to that instruction (B or C in case of our example).</p>\n\n<p><strong><em>In case of a correct guess, the pipeline looks something like this:</em></strong>\n<img src=\"https://i.stack.imgur.com/ZYUbs.png\" alt=\"enter image description here\"></p>\n\n<p>If it is later detected that the guess was wrong then the partially executed instructions are discarded and the pipeline starts over with the correct branch, incurring a delay. \nThe time that is wasted in case of a branch misprediction is equal to the number of stages in the pipeline from the fetch stage to the execute stage. Modern microprocessors tend to have quite long pipelines so that the misprediction delay is between 10 and 20 clock cycles. The longer the pipeline the greater the need for a good <a href=\"https://en.wikipedia.org/wiki/Branch_predictor\" rel=\"noreferrer\">branch predictor</a>.</p>\n\n<p>In the OP's code, the first time when the conditional, the branch predictor does not have any information to base up prediction, so the first time it will randomly choose the next instruction. Later in the for loop, it can base the prediction on the history. \nFor an array sorted in ascending order, there are three possibilities:</p>\n\n<ol>\n<li> All the elements are less than 128\n</li><li> All the elements are greater than 128\n</li><li> Some starting new elements are less than 128 and later it become greater than 128\n</li></ol>\n\n<p>Let us assume that the predictor will always assume the true branch on the first run.</p>\n\n<p>So in the first case, it will always take the true branch since historically all its predictions are correct.\nIn the 2nd case, initially it will predict wrong, but after a few iterations, it will predict correctly.\nIn the 3rd case, it will initially predict correctly till the elements are less than 128. After which it will fail for some time and the correct itself when it sees branch prediction failure in history. </p>\n\n<p>In all these cases the failure will be too less in number and as a result, only a few times it will need to discard the partially executed instructions and start over with the correct branch, resulting in fewer CPU cycles. </p>\n\n<p>But in case of a random unsorted array, the prediction will need to discard the partially executed instructions and start over with the correct branch most of the time and result in more CPU cycles compared to the sorted array.</p>\n    </div>",
          "vote": "886"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An official answer would be from</p>\n\n<ol>\n<li><a href=\"https://software.intel.com/en-us/articles/avoiding-the-cost-of-branch-misprediction\" rel=\"noreferrer\">Intel - Avoiding the Cost of Branch Misprediction</a></li>\n<li><a href=\"https://software.intel.com/en-us/articles/branch-and-loop-reorganization-to-prevent-mispredicts\" rel=\"noreferrer\">Intel - Branch and Loop Reorganization to Prevent Mispredicts</a></li>\n<li><a href=\"https://scholar.google.com/scholar?q=branch%20prediction%20computer%20architecture&amp;hl=da&amp;as_sdt=0&amp;as_vis=1&amp;oi=scholart\" rel=\"noreferrer\">Scientific papers - branch prediction computer architecture</a></li>\n<li>Books: J.L. Hennessy, D.A. Patterson: Computer architecture: a quantitative approach</li>\n<li>Articles in scientific publications: T.Y. Yeh, Y.N. Patt made a lot of these on branch predictions.</li>\n</ol>\n\n<p>You can also see from this lovely <a href=\"https://en.wikipedia.org/wiki/Branch_predictor#/media/File:Branch_prediction_2bit_saturating_counter-dia.svg\" rel=\"noreferrer\">diagram</a> why the branch predictor gets confused.</p>\n\n<p><a href=\"https://i.stack.imgur.com/pBMV2.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/pBMV2.png\" alt=\"2-bit state diagram\"></a></p>\n\n<p>Each element in the original code is a random value</p>\n\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c] = std::rand() % 256;</span>\n</code></pre>\n\n<p>so the predictor will change sides as the <code>std::rand()</code> blow.</p>\n\n<p>On the other hand, once it's sorted, the predictor will first move into a state of strongly not taken and when the values change to the high value the predictor will in three runs through change all the way from strongly not taken to strongly taken.</p>\n\n<hr>\n    </div>",
          "vote": "780"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the same line (I think this was not highlighted by any answer) it's good to mention that sometimes (specially in software where the performance matters—like in the Linux kernel) you can find some if statements like the following:</p>\n\n<pre class=\"default s-code-block hljs less\"><code><span class=\"hljs-selector-tag\">if</span> (likely( everything_is_ok ))\n{\n    <span class=\"hljs-comment\">/* Do something */</span>\n}\n</code></pre>\n\n<p>or similarly:</p>\n\n<pre class=\"default s-code-block hljs less\"><code><span class=\"hljs-selector-tag\">if</span> (unlikely(very_improbable_condition))\n{\n    <span class=\"hljs-comment\">/* Do something */</span>    \n}\n</code></pre>\n\n<p>Both <code>likely()</code> and <code>unlikely()</code> are in fact macros that are defined by using something like the GCC's <code>__builtin_expect</code> to help the compiler insert prediction code to favour the condition taking into account the information provided by the user. GCC supports other builtins that could change the behavior of the running program or emit low level instructions like clearing the cache, etc. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\" rel=\"noreferrer\">this documentation</a> that goes through the available GCC's builtins.</p>\n\n<p>Normally this kind of optimizations are mainly found in hard-real time applications or embedded systems where execution time matters and it's critical. For example, if you are checking for some error condition that only happens 1/10000000 times, then why not inform the compiler about this? This way, by default, the branch prediction would assume that the condition is false.</p>\n    </div>",
          "vote": "750"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Frequently used Boolean operations in C++ produce many branches in the compiled program. If these branches are inside loops and are hard to predict they can slow down execution significantly. Boolean variables are stored as 8-bit integers with the value <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>.</p>\n\n<p>Boolean variables are overdetermined in the sense that all operators that have Boolean variables as input check if the inputs have any other value than <code>0</code> or <code>1</code>, but operators that have Booleans as output can produce no other value than <code>0</code> or <code>1</code>. This makes operations with Boolean variables as input less efficient than necessary.\nConsider example:</p>\n\n<pre class=\"default s-code-block hljs makefile\"><code>bool a, b, c, d;\nc = a &amp;&amp; b;\nd = a || b;\n</code></pre>\n\n<p>This is typically implemented by the compiler in the following way:</p>\n\n<pre class=\"default s-code-block hljs objectivec\"><code><span class=\"hljs-keyword\">bool</span> a, b, c, d;\n<span class=\"hljs-keyword\">if</span> (a != <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">if</span> (b != <span class=\"hljs-number\">0</span>) {\n        c = <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">goto</span> <span class=\"hljs-built_in\">CFALSE</span>;\n    }\n}\n<span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-built_in\">CFALSE</span>:\n    c = <span class=\"hljs-number\">0</span>;\n}\n<span class=\"hljs-keyword\">if</span> (a == <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">if</span> (b == <span class=\"hljs-number\">0</span>) {\n        d = <span class=\"hljs-number\">0</span>;\n    }\n    <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">goto</span> DTRUE;\n    }\n}\n<span class=\"hljs-keyword\">else</span> {\n    DTRUE:\n    d = <span class=\"hljs-number\">1</span>;\n}\n</code></pre>\n\n<p>This code is far from optimal. The branches may take a long time in case of mispredictions. The Boolean operations can be made much more efficient if it is known with certainty that the operands have no other values than <code>0</code> and <code>1</code>. The reason why the compiler does not make such an assumption is that the variables might have other values if they are uninitialized or come from unknown sources. The above code can be optimized if <code>a</code> and <code>b</code> has been initialized to valid values or if they come from operators that produce Boolean output. The optimized code looks like this:</p>\n\n<pre class=\"default s-code-block hljs makefile\"><code>char a = 0, b = 1, c, d;\nc = a &amp; b;\nd = a | b;\n</code></pre>\n\n<p><code>char</code> is used instead of <code>bool</code> in order to make it possible to use the bitwise operators (<code>&amp;</code> and <code>|</code>) instead of the Boolean operators (<code>&amp;&amp;</code> and <code>||</code>). The bitwise operators are single instructions that take only one clock cycle. The OR operator (<code>|</code>) works even if <code>a</code> and <code>b</code> have other values than <code>0</code> or <code>1</code>. The AND operator (<code>&amp;</code>) and the EXCLUSIVE OR operator (<code>^</code>) may give inconsistent results if the operands have other values than <code>0</code> and <code>1</code>.</p>\n\n<p><code>~</code> can not be used for NOT. Instead, you can make a Boolean NOT on a variable which is known to be <code>0</code> or <code>1</code> by XOR'ing it with <code>1</code>:</p>\n\n<pre class=\"default s-code-block hljs csharp\"><code><span class=\"hljs-built_in\">bool</span> a, b;\nb = !a;\n</code></pre>\n\n<p>can be optimized to:</p>\n\n<pre class=\"default s-code-block hljs csharp\"><code><span class=\"hljs-built_in\">char</span> a = <span class=\"hljs-number\">0</span>, b;\nb = a ^ <span class=\"hljs-number\">1</span>;\n</code></pre>\n\n<p><code>a &amp;&amp; b</code> cannot be replaced with <code>a &amp; b</code> if <code>b</code> is an expression that should not be evaluated if <code>a</code> is <code>false</code> ( <code>&amp;&amp;</code> will not evaluate <code>b</code>, <code>&amp;</code> will). Likewise, <code>a || b</code> can not be replaced with <code>a | b</code> if <code>b</code> is an expression that should not be evaluated if <code>a</code> is <code>true</code>.</p>\n\n<p>Using bitwise operators is more advantageous if the operands are variables than if the operands are comparisons:</p>\n\n<pre class=\"default s-code-block hljs csharp\"><code><span class=\"hljs-built_in\">bool</span> a; <span class=\"hljs-built_in\">double</span> x, y, z;\na = x &gt; y &amp;&amp; z &lt; <span class=\"hljs-number\">5.0</span>;\n</code></pre>\n\n<p>is optimal in most cases (unless you expect the <code>&amp;&amp;</code> expression to generate many branch mispredictions).</p>\n    </div>",
          "vote": "738"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>That's for sure!...</p>\n<p><strong>Branch prediction</strong> makes the logic run slower, because of the switching which happens in your code! It's like you are going a straight street or a street with a lot of turnings, for sure the straight one is going to be done quicker!...</p>\n<p>If the array is sorted, your condition is false at the first step: <code>data[c] &gt;= 128</code>, then becomes a true value for the whole way to the end of the street. That's how you get to the end of the logic faster. On the other hand, using an unsorted array, you need a lot of turning and processing which make your code run slower for sure...</p>\n<p>Look at the image I created for you below. Which street is going to be finished faster?</p>\n<p><a href=\"https://i.stack.imgur.com/cSmCa.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/cSmCa.jpg\" alt=\"Branch Prediction\"></a></p>\n<p>So programmatically, <strong>branch prediction</strong> causes the process to be slower...</p>\n<p>Also at the end, it's good to know we have two kinds of branch predictions that each is going to affect your code differently:</p>\n<p><strong>1. Static</strong></p>\n<p><strong>2. Dynamic</strong></p>\n<p><a href=\"https://i.stack.imgur.com/ZfhDu.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/ZfhDu.jpg\" alt=\"Branch Prediction\"></a></p>\n<blockquote>\n<p>Static branch prediction is used by the microprocessor the first time\na conditional branch is encountered, and dynamic branch prediction is\nused for succeeding executions of the conditional branch code.</p>\n<p>In order to effectively write your code to take advantage of these\nrules, when writing <strong>if-else</strong> or <strong>switch</strong> statements, check the most\ncommon cases first and work progressively down to the least common.\nLoops do not necessarily require any special ordering of code for\nstatic branch prediction, as only the condition of the loop iterator\nis normally used.</p>\n</blockquote>\n    </div>",
          "vote": "393"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This question has already been answered excellently many times over. Still I'd like to draw the group's attention to yet another interesting analysis.</p>\n<p>Recently this example (modified very slightly) was also used as a way to demonstrate how a piece of code can be profiled within the program itself on Windows. Along the way, the author also shows how to use the results to determine where the code is spending most of its time in both the sorted &amp; unsorted case. Finally the piece also shows how to use a little known feature of the HAL (Hardware Abstraction Layer) to determine just how much branch misprediction is happening in the unsorted case.</p>\n<p>The link is here:\n<a href=\"//www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/profile/demo.htm\" rel=\"noreferrer\"><strong>A Demonstration of Self-Profiling</strong></a></p>\n    </div>",
          "vote": "353"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As what has already been mentioned by others, what behind the mystery is <a href=\"https://en.wikipedia.org/wiki/Branch_predictor\" rel=\"noreferrer\">Branch Predictor</a>. </p>\n\n<p>I'm not trying to add something but explaining the concept in another way. \nThere is a concise introduction on the wiki which contains text and diagram.\nI do like the explanation below which uses a diagram to elaborate the Branch Predictor intuitively.</p>\n\n<blockquote>\n  <p>In computer architecture, a branch predictor is a\n  digital circuit that tries to guess which way a branch (e.g. an\n  if-then-else structure) will go before this is known for sure. The\n  purpose of the branch predictor is to improve the flow in the\n  instruction pipeline. Branch predictors play a critical role in\n  achieving high effective performance in many modern pipelined\n  microprocessor architectures such as x86.</p>\n  \n  <p>Two-way branching is usually implemented with a conditional jump\n  instruction. A conditional jump can either be \"not taken\" and continue\n  execution with the first branch of code which follows immediately\n  after the conditional jump, or it can be \"taken\" and jump to a\n  different place in program memory where the second branch of code is\n  stored. It is not known for certain whether a conditional jump will be\n  taken or not taken until the condition has been calculated and the\n  conditional jump has passed the execution stage in the instruction\n  pipeline (see fig. 1).</p>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/unxnb.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/unxnb.png\" alt=\"figure 1\"></a></p>\n\n<p>Based on the described scenario, I have written an animation demo to show how instructions are executed in a pipeline in different situations.</p>\n\n<ol>\n<li>Without the Branch Predictor. </li>\n</ol>\n\n<blockquote>\n  <p>Without branch prediction, the processor would have to wait until the\n  conditional jump instruction has passed the execute stage before the\n  next instruction can enter the fetch stage in the pipeline.</p>\n</blockquote>\n\n<p>The example contains three instructions and the first one is a conditional jump instruction. The latter two instructions can go into the pipeline until the conditional jump instruction is executed. </p>\n\n<p><a href=\"https://i.stack.imgur.com/GMFQ6.gif\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/GMFQ6.gif\" alt=\"without branch predictor\"></a></p>\n\n<p>It will take 9 clock cycles for 3 instructions to be completed.</p>\n\n<ol start=\"2\">\n<li>Use Branch Predictor and don't take a conditional jump. Let's assume that the predict is <strong>not</strong> taking the conditional jump.</li>\n</ol>\n\n<p><a href=\"https://i.stack.imgur.com/Ms5p1.gif\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Ms5p1.gif\" alt=\"enter image description here\"></a></p>\n\n<p>It will take 7 clock cycles for 3 instructions to be completed.</p>\n\n<ol start=\"3\">\n<li>Use Branch Predictor and take a conditional jump. Let's assume that the predict is <strong>not</strong> taking the conditional jump.</li>\n</ol>\n\n<p><a href=\"https://i.stack.imgur.com/HIpG3.gif\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/HIpG3.gif\" alt=\"enter image description here\"></a></p>\n\n<p>It will take 9 clock cycles for 3 instructions to be completed.</p>\n\n<blockquote>\n  <p>The time that is wasted in case of a branch misprediction is equal to\n  the number of stages in the pipeline from the fetch stage to the\n  execute stage. Modern microprocessors tend to have quite long\n  pipelines so that the misprediction delay is between 10 and 20 clock\n  cycles. As a result, making a pipeline longer increases the need for a\n  more advanced branch predictor.</p>\n</blockquote>\n\n<p>As you can see, it seems we don't have a reason not to use Branch Predictor.</p>\n\n<p>It's quite a simple demo that clarifies the very basic part of Branch Predictor. If those gifs are annoying, please feel free to remove them from the answer and visitors can also get the live demo source code from <a href=\"https://github.com/Eugene-Mark/BranchPredictorDemo\" rel=\"noreferrer\">BranchPredictorDemo</a></p>\n    </div>",
          "vote": "322"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Branch-prediction gain!</strong></p>\n<p>It is important to understand that branch misprediction doesn't slow down programs. The cost of a missed prediction is just as if branch prediction didn't exist and you waited for the evaluation of the expression to decide what code to run (further explanation in the next paragraph).</p>\n<pre class=\"default s-code-block hljs csharp\"><code><span class=\"hljs-keyword\">if</span> (expression)\n{\n    <span class=\"hljs-comment\">// Run 1</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// Run 2</span>\n}\n</code></pre>\n<p>Whenever there's an <code>if-else</code> \\ <code>switch</code> statement, the expression has to be evaluated to determine which block should be executed. In the assembly code generated by the compiler, conditional <a href=\"https://en.wikipedia.org/wiki/Branch_(computer_science)\" rel=\"noreferrer\">branch</a> instructions are inserted.</p>\n<p>A branch instruction can cause a computer to begin executing a different instruction sequence and thus deviate from its default behavior of executing instructions in order (i.e. if the expression is false, the program skips the code of the <code>if</code> block) depending on some condition, which is the expression evaluation in our case.</p>\n<p>That being said, the compiler tries to predict the outcome prior to it being actually evaluated. It will fetch instructions from the <code>if</code> block, and if the expression turns out to be true, then wonderful! We gained the time it took to evaluate it and made progress in the code; if not then we are running the wrong code, the pipeline is flushed, and the correct block is run.</p>\n<h3>Visualization:</h3>\n<p>Let's say you need to pick route 1 or route 2. Waiting for your partner to check the map, you have stopped at ## and waited, or you could just pick route1 and if you were lucky (route 1 is the correct route), then great you didn't have to wait for your partner to check the map (you saved the time it would have taken him to check the map), otherwise you will just turn back.</p>\n<p>While flushing pipelines is super fast, nowadays taking this gamble is worth it. Predicting sorted data or a data that changes slowly is always easier and better than predicting fast changes.</p>\n<pre class=\"default s-code-block hljs lua\"><code> O      Route <span class=\"hljs-number\">1</span>  /<span class=\"hljs-comment\">-------------------------------</span>\n/|\\             /\n |  <span class=\"hljs-comment\">---------##/</span>\n/ \\            \\\n                \\\n        Route <span class=\"hljs-number\">2</span>  \\<span class=\"hljs-comment\">--------------------------------</span>\n</code></pre>\n    </div>",
          "vote": "248"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>On ARM, there is no branch needed, because every instruction has a 4-bit condition field, which tests (at zero cost) any of <a href=\"https://community.arm.com/developer/ip-products/processors/b/processors-ip-blog/posts/condition-codes-1-condition-flags-and-codes\" rel=\"noreferrer\">16 different different conditions</a> that may arise in the Processor Status Register, and if the condition on an instruction is false, the instruction is skipped. This eliminates the need for short branches, and there would be no branch prediction hit for this algorithm. <b>Therefore, the sorted version of this algorithm would run slower than the unsorted version on ARM, because of the extra overhead of sorting.</b></p>\n<p>The inner loop for this algorithm would look something like the following in ARM assembly language:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>MOV R0, #<span class=\"hljs-number\">0</span>   <span class=\"hljs-comment\">// R0 = sum = 0</span>\nMOV R1, #<span class=\"hljs-number\">0</span>   <span class=\"hljs-comment\">// R1 = c = 0</span>\nADR R2, data <span class=\"hljs-comment\">// R2 = addr of data array (put this instruction outside outer loop)</span>\n.inner_loop  <span class=\"hljs-comment\">// Inner loop branch label</span>\n    LDRB R3, [R2, R1]   <span class=\"hljs-comment\">// R3 = data[c]</span>\n    CMP R3, #<span class=\"hljs-number\">128</span>        <span class=\"hljs-comment\">// compare R3 to 128</span>\n    ADDGE R0, R0, R3    <span class=\"hljs-comment\">// if R3 &gt;= 128, then sum += data[c] -- no branch needed!</span>\n    ADD R1, R1, #<span class=\"hljs-number\">1</span>      <span class=\"hljs-comment\">// c++</span>\n    CMP R1, #arraySize  <span class=\"hljs-comment\">// compare c to arraySize</span>\n    BLT inner_loop      <span class=\"hljs-comment\">// Branch to inner_loop if c &lt; arraySize</span>\n</code></pre>\n<p><em><strong>But this is actually part of a bigger picture:</strong></em></p>\n<p><code>CMP</code> opcodes always update the status bits in the Processor Status Register (PSR), because that is their purpose, but most other instructions do not touch the PSR unless you add an optional <code>S</code> suffix to the instruction, specifying that the PSR should be updated based on the result of the instruction. <strong>Just like the 4-bit condition suffix, being able to execute instructions without affecting the PSR is a mechanism that reduces the need for branches on ARM, and also facilitates out of order dispatch at the hardware level</strong>, because after performing some operation X that updates the status bits, subsequently (or in parallel) you can do a bunch of other work that explicitly should not affect (or be affected by) the status bits, then you can test the state of the status bits set earlier by X.</p>\n<p>The condition testing field and the optional \"set status bit\" field can be combined, for example:</p>\n<ul>\n<li><code>ADD R1, R2, R3</code> performs <code>R1 = R2 + R3</code> without updating any status bits.</li>\n<li><code>ADDGE R1, R2, R3</code> performs the same operation only if a previous instruction that affected the status bits resulted in a Greater than or Equal condition.</li>\n<li><code>ADDS R1, R2, R3</code> performs the addition and then updates the <code>N</code>, <code>Z</code>, <code>C</code> and <code>V</code> flags in the Processor Status Register based on whether the result was Negative, Zero, Carried (for unsigned addition), or oVerflowed (for signed addition).</li>\n<li><code>ADDSGE R1, R2, R3</code> performs the addition only if the <code>GE</code> test is true, and then subsequently updates the status bits based on the result of the addition.</li>\n</ul>\n<p>Most processor architectures do not have this ability to specify whether or not the status bits should be updated for a given operation, which can necessitate writing additional code to save and later restore status bits, or may require additional branches, or may limit the processor's out of order execution efficiency: one of the side effects of most CPU instruction set architectures forcibly updating status bits after most instructions is that it is much harder to tease apart which instructions can be run in parallel without interfering with each other. Updating status bits has side effects, therefore has a linearizing effect on code. <strong>ARM's ability to mix and match branch-free condition testing on any instruction with the option to either update or not update the status bits after any instruction is extremely powerful, for both assembly language programmers and compilers, and produces very efficient code.</strong></p>\n<p>When you don't have to branch, you can avoid the time cost of flushing the pipeline for what would otherwise be short branches, and you can avoid the design complexity of many forms of speculative evalution. The performance impact of the initial naive imlementations of the mitigations for many recently discovered processor vulnerabilities (Spectre etc.) shows you just how much the performance of modern processors depends upon complex speculative evaluation logic. With a short pipeline and the dramatically reduced need for branching, ARM just doesn't need to rely on speculative evaluation as much as CISC processors. (Of course high-end ARM implementations do include speculative evaluation, but it's a smaller part of the performance story.)</p>\n<p>If you have ever wondered why ARM has been so phenomenally successful, the brilliant effectiveness and interplay of these two mechanisms (combined with another mechanism that lets you \"barrel shift\" left or right one of the two arguments of any arithmetic operator or offset memory access operator at zero additional cost) are a big part of the story, because they are some of the greatest sources of the ARM architecture's efficiency. The brilliance of the original designers of the ARM ISA back in 1983, Steve Furber and Roger (now Sophie) Wilson, cannot be overstated.</p>\n    </div>",
          "vote": "211"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Besides the fact that the branch prediction may slow you down, a sorted array has another advantage:   </p>\n\n<p>You can have a stop condition instead of just checking the value, this way you only loop over the relevant data, and ignore the rest.<br>\nThe branch prediction will miss only once.</p>\n\n<pre class=\"default s-code-block hljs haskell\"><code> // sort backwards (higher values first), may be <span class=\"hljs-keyword\">in</span> some other part <span class=\"hljs-keyword\">of</span> the code\n std::sort(<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>, <span class=\"hljs-keyword\">data</span> + arraySize, std::greater&lt;int&gt;());</span>\n\n for (unsigned c = <span class=\"hljs-number\">0</span>; c &lt; arraySize; ++c) {\n       <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c] &lt; 128) {\n              <span class=\"hljs-title\">break</span>;\n       }</span>\n       sum += <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c];               </span>\n }\n</code></pre>\n    </div>",
          "vote": "181"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's about branch prediction. What is it?</p>\n<ul>\n<li><p>A branch predictor is one of the ancient performance improving techniques which still finds relevance into modern architectures. While the simple prediction techniques provide fast lookup and power efficiency they suffer from a high misprediction rate.</p>\n</li>\n<li><p>On the other hand, complex branch predictions –either neural based or variants of two-level branch prediction –provide better prediction accuracy, but they consume more power and complexity increases exponentially.</p>\n</li>\n<li><p>In addition to this, in complex prediction techniques the time taken to predict the branches is itself very high –ranging from 2 to 5 cycles –which is comparable to the execution time of actual branches.</p>\n</li>\n<li><p>Branch prediction is essentially an optimization (minimization) problem where the emphasis is on to achieve lowest possible miss rate, low power consumption, and low complexity with minimum resources.</p>\n</li>\n</ul>\n<p>There really are three different kinds of branches:</p>\n<p><strong>Forward conditional branches</strong> - based on a run-time condition, the PC (program counter) is changed to point to an address forward in the instruction stream.</p>\n<p><strong>Backward conditional branches</strong> - the PC is changed to point backward in the instruction stream. The branch is based on some condition, such as branching backwards to the beginning of a program loop when a test at the end of the loop states the loop should be executed again.</p>\n<p><strong>Unconditional branches</strong> - this includes jumps, procedure calls and returns that have no specific condition. For example, an unconditional jump instruction might be coded in assembly language as simply \"jmp\", and the instruction stream must immediately be directed to the target location pointed to by the jump instruction, whereas a conditional jump that might be coded as \"jmpne\" would redirect the instruction stream only if the result of a comparison of two values in a previous \"compare\" instructions shows the values to not be equal. (The segmented addressing scheme used by the x86 architecture adds extra complexity, since jumps can be either \"near\" (within a segment) or \"far\" (outside the segment). Each type has different effects on branch prediction algorithms.)</p>\n<p><strong>Static/dynamic Branch Prediction</strong>: Static branch prediction is used by the microprocessor the first time a conditional branch is encountered, and dynamic branch prediction is used for succeeding executions of the conditional branch code.</p>\n<p>References:</p>\n<ul>\n<li><p><em><a href=\"//en.wikipedia.org/wiki/Branch_predictor\" rel=\"noreferrer\">Branch predictor</a></em></p>\n</li>\n<li><p><em><a href=\"//www.geoffchappell.com/studies/windows/km/ntoskrnl/api/ex/profile/demo.htm\" rel=\"noreferrer\">A Demonstration of Self-Profiling</a></em></p>\n</li>\n<li><p><em><a href=\"//courses.cs.washington.edu/courses/csep548/06au/lectures/branchPred.pdf\" rel=\"noreferrer\">Branch Prediction Review</a></em></p>\n</li>\n<li><p><em><a href=\"https://web.archive.org/web/20190601170841/https://web.njit.edu/%7Erlopes/Mod5.3.pdf\" rel=\"noreferrer\">Branch Prediction</a> (Using wayback machine)</em></p>\n</li>\n</ul>\n    </div>",
          "vote": "178"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sorted arrays are processed faster than an unsorted array, due to a phenomena called branch prediction.</p>\n<p>The branch predictor is a digital circuit (in computer architecture) trying to predict which way a branch will go, improving the flow in the instruction pipeline. The circuit/computer predicts the next step and executes it.</p>\n<p>Making a wrong prediction leads to going back to the previous step, and executing with another prediction. Assuming the prediction is correct, the code will continue to the next step. A wrong prediction results in repeating the same step, until a correct prediction occurs.</p>\n<p>The answer to your question is very simple.</p>\n<p>In an unsorted array, the computer makes multiple predictions, leading to an increased chance of errors.\nWhereas, in a sorted array, the computer makes fewer predictions, reducing the chance of errors.\nMaking more predictions requires more time.</p>\n<p>Sorted Array: Straight Road</p>\n<pre class=\"lang-none s-code-block\"><code>____________________________________________________________________________________\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\n</code></pre>\n<p>Unsorted Array: Curved Road</p>\n<pre class=\"default s-code-block hljs markdown\"><code><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">__   __</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">__\n|     |__</span>|\n</code></pre>\n<p>Branch prediction: Guessing/predicting which road is straight and following it without checking</p>\n<pre class=\"default s-code-block hljs markdown\"><code><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">__<span class=\"hljs-emphasis\">_ Straight road\n |<span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span><span class=\"hljs-strong\">____</span>_</span>|Longer road\n</span></code></pre>\n<p>Although both the roads reach the same destination, the straight road is shorter, and the other is longer. If then you choose the other by mistake, there is no turning back, and so you will waste some extra time if you choose the longer road. This is similar to what happens in the computer, and I hope this helped you understand better.</p>\n<hr>\n<p>Also I want to cite <a href=\"/u/16940\">@Simon_Weaver</a> from the comments:</p>\n<blockquote>\n<p>It doesn’t make fewer predictions - it makes fewer incorrect predictions. It still has to predict for each time through the loop...</p>\n</blockquote>\n    </div>",
          "vote": "160"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I tried the same code with MATLAB 2011b with my MacBook Pro (Intel i7, 64 bit, 2.4 GHz) for the following MATLAB code:</p>\n\n<pre class=\"default s-code-block hljs haskell\"><code>% <span class=\"hljs-type\">Processing</span> time with <span class=\"hljs-type\">Sorted</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> vs unsorted <span class=\"hljs-keyword\">data</span></span>\n%==========================================================================\n% <span class=\"hljs-type\">Generate</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span></span>\n<span class=\"hljs-title\">arraySize</span> = <span class=\"hljs-number\">32768</span>\n<span class=\"hljs-title\">sum</span> = <span class=\"hljs-number\">0</span>;\n% <span class=\"hljs-type\">Generate</span> random integer <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> from range 0 to 255</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> = randi(256, <span class=\"hljs-title\">arraySize</span>, 1);</span>\n\n\n%<span class=\"hljs-type\">Sort</span> the <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span></span>\n<span class=\"hljs-title\">data1</span>= sort(<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>); % data1= <span class=\"hljs-keyword\">data</span>  when no sorting done</span>\n\n\n%<span class=\"hljs-type\">Start</span> a stopwatch timer to measure the execution time\n<span class=\"hljs-title\">tic</span>;\n\n<span class=\"hljs-title\">for</span> i=<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">100000</span>\n\n    for j=<span class=\"hljs-number\">1</span>:arraySize\n\n        <span class=\"hljs-keyword\">if</span> data1(j)&gt;=<span class=\"hljs-number\">128</span>\n            sum=sum + data1(j);\n        end\n    end\n<span class=\"hljs-title\">end</span>\n\n<span class=\"hljs-title\">toc</span>;\n\n<span class=\"hljs-type\">ExeTimeWithSorting</span> = toc - tic;\n</code></pre>\n\n<p>The results for the above MATLAB code are as follows:</p>\n\n<pre class=\"default s-code-block hljs sql\"><code>  a: Elapsed <span class=\"hljs-type\">time</span> (<span class=\"hljs-keyword\">without</span> sorting) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3479.880861</span> seconds.\n  b: Elapsed <span class=\"hljs-type\">time</span> (<span class=\"hljs-keyword\">with</span> sorting ) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2377.873098</span> seconds.\n</code></pre>\n\n<p>The results of the C code as in @GManNickG I get:</p>\n\n<pre class=\"default s-code-block hljs sql\"><code>  a: Elapsed <span class=\"hljs-type\">time</span> (<span class=\"hljs-keyword\">without</span> sorting) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">19.8761</span> sec.\n  b: Elapsed <span class=\"hljs-type\">time</span> (<span class=\"hljs-keyword\">with</span> sorting ) <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">7.37778</span> sec.\n</code></pre>\n\n<p>Based on this, it looks MATLAB is almost <em>175 times</em> slower than the C implementation without sorting and <em>350 times</em> slower with sorting. In other words, the effect (of branch prediction) is <em>1.46x</em> for MATLAB implementation and <em>2.7x</em> for the C implementation.</p>\n    </div>",
          "vote": "149"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The assumption by other answers that one needs to sort the data is not correct.</p>\n\n<p>The following code does not sort the entire array, but only 200-element segments of it, and thereby runs the fastest.</p>\n\n<p>Sorting only k-element sections completes the pre-processing in linear time, <code>O(n)</code>, rather than the <code>O(n.log(n))</code> time needed to sort the entire array.</p>\n\n<pre class=\"default s-code-block hljs cpp\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;algorithm&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;ctime&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> data[<span class=\"hljs-number\">32768</span>]; <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> l = <span class=\"hljs-keyword\">sizeof</span> data / <span class=\"hljs-keyword\">sizeof</span> data[<span class=\"hljs-number\">0</span>];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> c = <span class=\"hljs-number\">0</span>; c &lt; l; ++c)\n        data[c] = std::<span class=\"hljs-built_in\">rand</span>() % <span class=\"hljs-number\">256</span>;\n\n    <span class=\"hljs-comment\">// sort 200-element segments, not the whole array</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> c = <span class=\"hljs-number\">0</span>; c + <span class=\"hljs-number\">200</span> &lt;= l; c += <span class=\"hljs-number\">200</span>)\n        std::<span class=\"hljs-built_in\">sort</span>(&amp;data[c], &amp;data[c + <span class=\"hljs-number\">200</span>]);\n\n    <span class=\"hljs-keyword\">clock_t</span> start = <span class=\"hljs-built_in\">clock</span>();\n    <span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> sum = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">100000</span>; ++i) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">unsigned</span> c = <span class=\"hljs-number\">0</span>; c &lt; <span class=\"hljs-keyword\">sizeof</span> data / <span class=\"hljs-built_in\"><span class=\"hljs-keyword\">sizeof</span></span>(<span class=\"hljs-keyword\">int</span>); ++c) {\n            <span class=\"hljs-keyword\">if</span> (data[c] &gt;= <span class=\"hljs-number\">128</span>)\n                sum += data[c];\n        }\n    }\n\n    std::cout &lt;&lt; <span class=\"hljs-keyword\">static_cast</span>&lt;<span class=\"hljs-keyword\">double</span>&gt;(<span class=\"hljs-built_in\">clock</span>() - start) / CLOCKS_PER_SEC &lt;&lt; std::endl;\n    std::cout &lt;&lt; <span class=\"hljs-string\">\"sum = \"</span> &lt;&lt; sum &lt;&lt; std::endl;\n}\n</code></pre>\n\n<p>This also \"proves\" that it has nothing to do with any algorithmic issue such as sort order, and it is indeed branch prediction.</p>\n    </div>",
          "vote": "85"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em><a href=\"//stackoverflow.blog/2019/10/11/c-creator-bjarne-stroustrup-answers-our-top-five-c-questions/\">Bjarne Stroustrup's Answer</a> to this question:</em></p>\n<p>That sounds like an interview question. Is it true? How would you know? It is a bad idea to answer questions about efficiency without first doing some measurements, so it is important to know how to measure.</p>\n<p>So, I tried with a vector of a million integers and got:</p>\n<pre class=\"lang-none s-code-block\"><code>Already sorted    32995 milliseconds\nShuffled          125944 milliseconds\n\nAlready sorted    18610 milliseconds\nShuffled          133304 milliseconds\n\nAlready sorted    17942 milliseconds\nShuffled          107858 milliseconds\n</code></pre>\n<p>I ran that a few times to be sure. Yes, the phenomenon is real. My key code was:</p>\n<pre class=\"lang-cpp s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(vector&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; v, <span class=\"hljs-keyword\">const</span> string&amp; label)</span>\n</span>{\n    <span class=\"hljs-keyword\">auto</span> t0 = system_clock::<span class=\"hljs-built_in\">now</span>();\n    <span class=\"hljs-built_in\">sort</span>(v.<span class=\"hljs-built_in\">begin</span>(), v.<span class=\"hljs-built_in\">end</span>());\n    <span class=\"hljs-keyword\">auto</span> t1 = system_clock::<span class=\"hljs-built_in\">now</span>();\n    cout &lt;&lt; label\n         &lt;&lt; duration_cast&lt;microseconds&gt;(t1 — t0).<span class=\"hljs-built_in\">count</span>()\n         &lt;&lt; <span class=\"hljs-string\">\" milliseconds\\n\"</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">tst</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-function\">vector&lt;<span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-title\">v</span><span class=\"hljs-params\">(<span class=\"hljs-number\">1'000'000</span>)</span></span>;\n    <span class=\"hljs-built_in\">iota</span>(v.<span class=\"hljs-built_in\">begin</span>(), v.<span class=\"hljs-built_in\">end</span>(), <span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-built_in\">run</span>(v, <span class=\"hljs-string\">\"already sorted \"</span>);\n    std::<span class=\"hljs-built_in\">shuffle</span>(v.<span class=\"hljs-built_in\">begin</span>(), v.<span class=\"hljs-built_in\">end</span>(), std::mt19937{ std::random_device{}() });\n    <span class=\"hljs-built_in\">run</span>(v, <span class=\"hljs-string\">\"shuffled    \"</span>);\n}\n</code></pre>\n<p>At least the phenomenon is real with this compiler, standard library, and optimizer settings. Different implementations can and do give different answers. In fact, someone did do a more systematic study (a quick web search will find it) and most implementations show that effect.</p>\n<p>One reason is branch prediction: the key operation in the sort algorithm is <code>“if(v[i] &lt; pivot]) …”</code> or equivalent. For a sorted sequence that test is always true whereas, for a random sequence, the branch chosen varies randomly.</p>\n<p>Another reason is that when the vector is already sorted, we never need to move elements to their correct position. The effect of these little details is the factor of five or six that we saw.</p>\n<p>Quicksort (and sorting in general) is a complex study that has attracted some of the greatest minds of computer science. A good sort function is a result of both choosing a good algorithm and paying attention to hardware performance in its implementation.</p>\n<p>If you want to write efficient code, you need to know a bit about machine architecture.</p>\n    </div>",
          "vote": "70"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This question is rooted in <em>branch prediction models</em> on CPUs. I'd recommend reading this paper:</p>\n<p><a href=\"https://pdfs.semanticscholar.org/5634/4be375cfed0f79cb9d009ac838682e1bace3.pdf\" rel=\"noreferrer\"><strong>Increasing the Instruction Fetch Rate via Multiple Branch Prediction and a Branch Address Cache</strong></a></p>\n<p>When you have sorted elements, the <a href=\"https://en.wikipedia.org/wiki/Instruction_register\" rel=\"noreferrer\">IR</a> can not be bothered to fetch all CPU instructions, again and again. It fetches them from the cache.</p>\n    </div>",
          "vote": "65"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong><a href=\"https://www.computerhope.com/jargon/b/branch-prediction.htm#:%7E:text=Branch%20prediction%20is%20a%20technique,architectures%2C%20such%20as%20the%20x86.\" rel=\"nofollow noreferrer\">BRANCH PREDICTION</a></strong></p>\n<p>This is called <strong>branch prediction</strong>. Without branch prediction, the processor would have to wait until the conditional jump instruction has passed the execute stage before the next instruction can enter the fetch stage in the pipeline. The branch predictor attempts to avoid this waste of time by trying to guess whether the conditional jump is most likely to be taken or not taken. The branch that is guessed to be the most likely is then fetched and speculatively executed. If it is later detected that the guess was wrong, then the speculatively executed, incurring a delay.</p>\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>[c] &gt;= 128</span>\n</code></pre>\n<p>Take more help from this link: <a href=\"https://www.semanticscholar.org/paper/Multiple-Branch-Prediction-for-Wide-Issue-Hwang-Chen/432c5b138f2c14a9e625fc11e6fd2fcc053707bd\" rel=\"nofollow noreferrer\">Multiple Branch Prediction for Wide-Issue Superscalar</a></p>\n    </div>",
          "vote": "2"
        }
      ]
    },
    {
      "question": "How do I undo the most recent local commits in Git?",
      "url": "https://stackoverflow.com/questions/927358/how-do-i-undo-the-most-recent-local-commits-in-git",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I accidentally <strong>committed the wrong files</strong> to <a href=\"https://en.wikipedia.org/wiki/Git\" rel=\"noreferrer\">Git</a>, but didn't push the commit to the server yet.</p>\n<p>How can I <strong>undo those commits from the local repository</strong>?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Undo a commit &amp; redo</h1>\n<pre class=\"lang-sh s-code-block hljs bash\"><code>$ git commit -m <span class=\"hljs-string\">\"Something terribly misguided\"</span> <span class=\"hljs-comment\"># (0: Your Accident)</span>\n$ git reset HEAD~                              <span class=\"hljs-comment\"># (1)</span>\n[ edit files as necessary ]                    <span class=\"hljs-comment\"># (2)</span>\n$ git add .                                    <span class=\"hljs-comment\"># (3)</span>\n$ git commit -c ORIG_HEAD                      <span class=\"hljs-comment\"># (4)</span>\n</code></pre>\n<ol>\n<li><p>This command is responsible for the <strong>undo</strong>. It will undo your last commit while <strong>leaving your working tree (the state of your files on disk) untouched.</strong> You'll need to add them again before you can commit them again).</p>\n</li>\n<li><p>Make corrections to working tree files.</p>\n</li>\n<li><p><code>git add</code> anything that you want to include in your new commit.</p>\n</li>\n<li><p>Commit the changes, reusing the old commit message. <code>reset</code> copied the old head to <code>.git/ORIG_HEAD</code>; <code>commit</code> with <code>-c ORIG_HEAD</code> will open an editor, which initially contains the log message from the old commit and allows you to edit it. If you do not need to edit the message, you could use the <code>-C</code> option.</p>\n</li>\n</ol>\n<p><strong>Alternatively, to edit the previous commit (or just its commit message)</strong>, <code>commit --amend</code> will add changes within the current index to the previous commit.</p>\n<p><strong>To remove (not revert) a commit that has been pushed to the server</strong>, rewriting history with <code>git push origin master --force</code> is necessary.</p>\n<hr>\n<h2>Further Reading</h2>\n<p><a href=\"https://stackoverflow.com/questions/34519665/how-to-move-head-back-to-a-previous-location-detached-head/34519716#34519716\">How can I move HEAD back to a previous location? (Detached head) &amp; Undo commits</a></p>\n<p>The above answer will show you <code>git reflog</code>, which you can use to determine the SHA-1 for the commit to which you wish to revert. Once you have this value, use the sequence of commands as explained above.</p>\n<hr>\n<p><code>HEAD~</code> is the same as <code>HEAD~1</code>. The article <a href=\"https://stackoverflow.com/a/46350644/5175709\">What is the HEAD in git?</a> is helpful if you want to uncommit multiple commits.</p>\n    </div>",
          "vote": "24529"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand. I'll show you the 4 different ways you can undo a commit.</p>\n<h3>option 1: <code>git reset --hard</code></h3>\n<p>Say you have this, where C is your HEAD and (F) is the state of your files.</p>\n<pre><code>   (F)\nA-B-C\n    ↑\n  master\n</code></pre>\n<p>You want to <strong>nuke commit C and never see it again and lose all the changes in locally modified files</strong>.  You do this:</p>\n<pre><code>git reset --hard HEAD~1\n</code></pre>\n<p>The result is:</p>\n<pre><code> (F)\nA-B\n  ↑\nmaster\n</code></pre>\n<p>Now B is the HEAD.  Because you used <code>--hard</code>, your files are reset to their state at commit B.</p>\n<h3>option 2: <code>git reset</code></h3>\n<p>Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to <strong>undo the commit but keep your changes</strong> for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:</p>\n<pre><code>   (F)\nA-B-C\n    ↑\n  master\n</code></pre>\n<p>You can do this, leaving off the <code>--hard</code>:</p>\n<pre><code>git reset HEAD~1\n</code></pre>\n<p>In this case the result is:</p>\n<pre><code>   (F)\nA-B-C\n  ↑\nmaster\n</code></pre>\n<p>In both cases, HEAD is just a pointer to the latest commit.  When you do a <code>git reset HEAD~1</code>, you tell Git to move the HEAD pointer back one commit.  But (unless you use <code>--hard</code>) you leave your files as they were.  So now <code>git status</code> shows the changes you had checked into C.  You haven't lost a thing!</p>\n<h3>option 3: <code>git reset --soft</code></h3>\n<p>For the lightest touch, you can even <strong>undo your commit but leave your files and your <a href=\"https://git.wiki.kernel.org/index.php/WhatIsTheIndex\" rel=\"noreferrer\">index</a></strong>:</p>\n<pre><code>git reset --soft HEAD~1\n</code></pre>\n<p>This not only leaves your files alone, it even leaves your <em>index</em> alone.  When you do <code>git status</code>, you'll see that the same files are in the index as before.  In fact, right after this command, you could do <code>git commit</code> and you'd be redoing the same commit you just had.</p>\n<h3>option 4: you did <code>git reset --hard</code> and need to get that code back</h3>\n<p>One more thing: <strong>Suppose you destroy a commit</strong> as in the first example, <strong>but then discover you needed it after all</strong>?  Tough luck, right?</p>\n<p>Nope, there's <em>still</em> a way to get it back.  Type <code>git reflog</code> and you'll see a list of (partial) commit <a href=\"https://en.wikipedia.org/wiki/SHA-1#Data_integrity\" rel=\"noreferrer\">shas</a> (that is, hashes) that you've moved around in.  Find the commit you destroyed, and do this:</p>\n<pre><code>git checkout -b someNewBranchName shaYouDestroyed\n</code></pre>\n<p>You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of.</p>\n    </div>",
          "vote": "11250"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are two ways to \"undo\" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):</p>\n<h2>How to undo a local commit</h2>\n<p>Let's say I committed locally, but now I want to remove that commit.</p>\n<pre><code>git log\n    commit 101: bad commit    # Latest commit. This would be called 'HEAD'.\n    commit 100: good commit   # Second to last commit. This is the one we want.\n</code></pre>\n<p>To restore everything back to the way it was prior to the last commit, we need to <code>reset</code> to the commit before <code>HEAD</code>:</p>\n<pre><code>git reset --soft HEAD^     # Use --soft if you want to keep your changes\ngit reset --hard HEAD^     # Use --hard if you don't care about keeping the changes you made\n</code></pre>\n<p>Now <code>git log</code> will show that our last commit has been removed.</p>\n<h2>How to undo a public commit</h2>\n<p>If you have already made your commits public, you will want to create a new commit which will \"revert\" the changes you made in your previous commit (current HEAD).</p>\n<pre><code>git revert HEAD\n</code></pre>\n<p>Your changes will now be reverted and ready for you to commit:</p>\n<pre><code>git commit -m 'restoring the file I removed by accident'\ngit log\n    commit 102: restoring the file I removed by accident\n    commit 101: removing a file we don't need\n    commit 100: adding a file that we need\n</code></pre>\n<p>For more information, check out <em><a href=\"https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things\" rel=\"noreferrer\">Git Basics - Undoing Things</a></em>.</p>\n    </div>",
          "vote": "2303"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Add/remove files to get things the way you want:</p>\n\n<pre><code>git rm classdir\ngit add sourcedir\n</code></pre>\n\n<p>Then amend the commit:</p>\n\n<pre><code>git commit --amend\n</code></pre>\n\n<p>The previous, erroneous commit will be edited to reflect the new index state - in other words, it'll be like you never made the mistake in the first place.</p>\n\n<p>Note that you should only do this if you haven't pushed yet. If you have pushed, then you'll just have to commit a fix normally.</p>\n    </div>",
          "vote": "1806"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-bash s-code-block hljs\"><code>git rm yourfiles/*.class\ngit commit -a -m <span class=\"hljs-string\">\"deleted all class files in folder 'yourfiles'\"</span>\n</code></pre>\n\n<p>or</p>\n\n<pre><code>git reset --hard HEAD~1\n</code></pre>\n\n<p><strong>Warning: The above command will permanently remove the modifications to the <code>.java</code> files (and any other files) that you wanted to commit.</strong></p>\n\n<p>The <code>hard reset</code> to <code>HEAD-1</code> will set your working copy to the state of the commit before your wrong commit.</p>\n    </div>",
          "vote": "1080"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>To change the last commit</h2>\n\n<p>Replace the files in the index:</p>\n\n<pre><code>git rm --cached *.class\ngit add *.java\n</code></pre>\n\n<p>Then, if it's a private branch, <strong>amend</strong> the commit:</p>\n\n<pre><code>git commit --amend\n</code></pre>\n\n<p>Or, if it's a shared branch, make a new commit:</p>\n\n<pre><code>git commit -m 'Replace .class files with .java files'\n</code></pre>\n\n<p><br></p>\n\n<p><em>(<strong>To change a previous commit</strong>, use the awesome <a href=\"https://stackoverflow.com/a/28421811/405550\">interactive rebase</a>.)</em></p>\n\n<hr>\n\n<p>ProTip™: Add <code>*.class</code> to a <a href=\"https://help.github.com/articles/ignoring-files\" rel=\"noreferrer\">gitignore</a> to stop this happening again.</p>\n\n<hr>\n\n<h2>To revert a commit</h2>\n\n<p>Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is <code>reset</code>.</p>\n\n<p>You can reset Git to any commit with:</p>\n\n<pre><code>git reset @~N\n</code></pre>\n\n<p>Where <code>N</code> is the number of commits before <code>HEAD</code>, and <code>@~</code> resets to the previous commit.</p>\n\n<p>So, instead of amending the commit, you could use:</p>\n\n<pre><code>git reset @~\ngit add *.java\ngit commit -m \"Add .java files\"\n</code></pre>\n\n<p>Check out <code>git help reset</code>, specifically the sections on <code>--soft</code> <code>--mixed</code> and <code>--hard</code>, for a better understanding of what this does.</p>\n\n<h2>Reflog</h2>\n\n<p>If you mess up, you can always use the reflog to find dropped commits:</p>\n\n<pre><code>$ git reset @~\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~\n2c52489 HEAD@{1}: commit: added some .class files\n$ git reset 2c52489\n... and you're back where you started\n</code></pre>\n\n<p><br></p>\n    </div>",
          "vote": "828"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use <code>git revert &lt;commit-id&gt;</code>.</p>\n\n<p>To get the commit ID, just use <code>git log</code>.</p>\n    </div>",
          "vote": "733"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you are planning to undo a local commit entirely, whatever you change you did on the commit, and if you don't worry anything about that, just do the following command.</p>\n<pre><code>git reset --hard HEAD^1\n</code></pre>\n<p>(This command will ignore your entire commit and your changes will be lost completely from your local working tree). If you want to undo your commit, but you want your changes in the staging area (before commit just like after <code>git add</code>) then do the following command.</p>\n<pre><code>git reset --soft HEAD^1\n</code></pre>\n<p>Now your committed files come into the staging area. Suppose if you want to upstage the files, because you need to edit some wrong content, then do the following command</p>\n<pre><code>git reset HEAD\n</code></pre>\n<p>Now committed files to come from the staged area into the unstaged area. Now files are ready to edit, so whatever you change, you want to go edit and added it and make a fresh/new commit.</p>\n<p><a href=\"http://madhan-tech-updates.blogspot.in/2013/01/how-to-undo-your-local-git-commit.html\" rel=\"noreferrer\">More (link broken)</a> (<a href=\"https://web.archive.org/web/20170410191943/http://madhan-tech-updates.blogspot.in/2013/01/how-to-undo-your-local-git-commit.html\" rel=\"noreferrer\">Archived version</a>)</p>\n    </div>",
          "vote": "586"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have <a href=\"https://github.com/visionmedia/git-extras\" rel=\"noreferrer\">Git Extras</a> installed, you can run <code>git undo</code> to undo the latest commit. <code>git undo 3</code> will undo the last three commits.</p>\n    </div>",
          "vote": "543"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wanted to undo the latest five commits in our shared repository. I looked up the revision id that I wanted to rollback to. Then I typed in the following.</p>\n\n<pre><code>prompt&gt; git reset --hard 5a7404742c85\nHEAD is now at 5a74047 Added one more page to catalogue\nprompt&gt; git push origin master --force\nTotal 0 (delta 0), reused 0 (delta 0)\nremote: bb/acl: neoneye is allowed. accepted payload.\nTo git@bitbucket.org:thecompany/prometheus.git\n + 09a6480...5a74047 master -&gt; master (forced update)\nprompt&gt;\n</code></pre>\n    </div>",
          "vote": "506"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I prefer to use <code>git rebase -i</code> for this job, because a nice list pops up where I can choose the commits to get rid of. It might not be as direct as some other answers here, but it just <em>feels right</em>.</p>\n\n<p>Choose how many commits you want to list, then invoke like this (to enlist last three)</p>\n\n<pre><code>git rebase -i HEAD~3\n</code></pre>\n\n<p>Sample list</p>\n\n<pre><code>pick aa28ba7 Sanity check for RtmpSrv port\npick c26c541 RtmpSrv version option\npick 58d6909 Better URL decoding support\n</code></pre>\n\n<p>Then Git will remove commits for any line that you remove.</p>\n    </div>",
          "vote": "477"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>How to fix the previous local commit</h2>\n\n<p>Use git-gui (or similar) to perform a <code>git commit --amend</code>. From the GUI you can add or remove individual files from the commit. You can also modify the commit message. </p>\n\n<h2>How to undo the previous local commit</h2>\n\n<p>Just reset your branch to the previous location (for example, using <code>gitk</code> or <code>git rebase</code>). Then reapply your changes from a saved copy. After garbage collection in your local repository, it will be like the unwanted commit never happened. To do all of that in a single command, use <code>git reset HEAD~1</code>.</p>\n\n<p><strong>Word of warning</strong>: <em>Careless use of <code>git reset</code> is a good way to get your working copy into a confusing state. I recommend that Git novices avoid this if they can.</em></p>\n\n<h2>How to undo a public commit</h2>\n\n<p>Perform a <a href=\"https://stackoverflow.com/a/1624724/86967\">reverse cherry pick</a> (<a href=\"http://git-scm.com/docs/git-revert.html\" rel=\"noreferrer\">git-revert</a>) to undo the changes.</p>\n\n<p>If you haven't yet pulled other changes onto your branch, you can simply do...</p>\n\n<pre><code>git revert --no-edit HEAD\n</code></pre>\n\n<p>Then push your updated branch to the shared repository.</p>\n\n<p><em>The commit history will show both commits, separately</em>.</p>\n\n<hr>\n\n<h2>Advanced: Correction of the <em>private</em> branch in public repository</h2>\n\n<h3><em>This can be dangerous -- be sure you have a local copy of the branch to repush.</em></h3>\n\n<p><em>Also note: You don't want to do this if someone else may be working on the branch.</em></p>\n\n<pre><code>git push --delete (branch_name) ## remove public version of branch\n</code></pre>\n\n<p>Clean up your branch locally then repush...</p>\n\n<pre><code>git push origin (branch_name)\n</code></pre>\n\n<p><em>In the normal case, you probably needn't worry about your private-branch commit history being pristine.  Just push a followup commit (see 'How to undo a public commit' above), and later, do a <a href=\"https://stackoverflow.com/a/22417539/86967\">squash-merge</a> to hide the history.</em></p>\n    </div>",
          "vote": "454"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want to permanently undo it and you have cloned some repository.</p>\n<p>The commit id can be seen by:</p>\n<pre><code>git log \n</code></pre>\n<p>Then you can do like:</p>\n<pre><code>git reset --hard &lt;commit_id&gt;\n\ngit push origin &lt;branch_name&gt; -f\n</code></pre>\n    </div>",
          "vote": "368"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have committed junk but not pushed,</p>\n\n<pre><code>git reset --soft HEAD~1\n</code></pre>\n\n<blockquote>\n  <p><strong>HEAD~1</strong> is a shorthand for the commit before head. Alternatively you can refer to the <strong>SHA-1</strong> of the hash if you want to reset to. <em>--soft</em> option will delete the commit but it will leave all your changed files \"Changes to be committed\", as git status would put it.</p>\n  \n  <p>If you want to get rid of any changes to tracked files in the working tree since the commit before head use \"<strong>--hard</strong>\" instead.</p>\n</blockquote>\n\n<p>OR</p>\n\n<blockquote>\n  <p>If you already pushed and someone pulled which is usually my case, you can't use <em>git reset</em>. You can however do a <em>git revert</em>,</p>\n</blockquote>\n\n<pre><code>git revert HEAD\n</code></pre>\n\n<blockquote>\n  <p>This will create a new commit that reverses everything introduced by the accidental commit.</p>\n</blockquote>\n    </div>",
          "vote": "363"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>On <a href=\"https://www.atlassian.com/software/sourcetree/overview\">SourceTree</a> (GUI for GitHub), you may right-click the commit and do a 'Reverse Commit'. This should undo your changes.</p>\n\n<p>On the terminal:</p>\n\n<p>You may alternatively use:</p>\n\n<pre><code>git revert\n</code></pre>\n\n<p>Or:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git reset --soft HEAD^ <span class=\"hljs-comment\"># Use --soft if you want to keep your changes.</span>\ngit reset --hard HEAD^ <span class=\"hljs-comment\"># Use --hard if you don't care about keeping your changes.</span>\n</code></pre>\n    </div>",
          "vote": "311"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A single command:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git reset --soft <span class=\"hljs-string\">'HEAD^'</span> \n</code></pre>\n\n<p>It works great to undo the last local commit!</p>\n    </div>",
          "vote": "290"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just reset it doing the command below using <code>git</code>:</p>\n\n<pre><code>git reset --soft HEAD~1\n</code></pre>\n\n<p><strong>Explain:</strong> what <code>git reset</code> does, it's basically <code>reset</code> to any commit you'd like to go back to, then if you combine it with <code>--soft</code> key, it will go back, but keep the  changes in your file(s), so you get back to the stage which the file was just added, <code>HEAD</code> is the head of the branch and if you combine with <code>~1</code> (in this case you also use <code>HEAD^</code>), it will go back only one commit which what you want...</p>\n\n<p>I create the steps in the image below in more details for you, including all steps that may happens in real situations and committing the code:</p>\n\n<p><a href=\"https://i.stack.imgur.com/7zrzb.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/7zrzb.jpg\" alt=\"How to undo the last commits in Git?\"></a></p>\n    </div>",
          "vote": "274"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>How to undo the last Git commit?</strong></p>\n\n<p>To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD.</p>\n\n<ol>\n<li><p>If you don't want to keep your changes that you made:</p>\n\n<pre><code>git reset --hard HEAD^\n</code></pre></li>\n<li><p>If you want to keep your changes:</p>\n\n<pre><code>git reset --soft HEAD^\n</code></pre></li>\n</ol>\n\n<p>Now check your git log. It will show that our last commit has been removed.</p>\n    </div>",
          "vote": "255"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>\"Reset the working tree to the last commit\"</p>\n\n<pre><code>git reset --hard HEAD^ \n</code></pre>\n\n<p>\"Clean unknown files from the working tree\"</p>\n\n<pre><code>git clean    \n</code></pre>\n\n<p>see - <a href=\"http://jonas.nitro.dk/git/quick-reference.html\" rel=\"noreferrer\">Git Quick Reference</a></p>\n\n<p><strong>NOTE:</strong> This command will delete your previous commit, so use with caution! <code>git reset --hard</code> is safer.</p>\n    </div>",
          "vote": "211"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use reflog to find a correct state</p>\n\n<pre><code>git reflog\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/c7e7D.png\" alt=\"reflog before\">\n<em>REFLOG BEFORE RESET</em></p>\n\n<p>Select the correct reflog (f3cb6e2 in my case) and type </p>\n\n<pre><code>git reset --hard f3cb6e2\n</code></pre>\n\n<p>After that the repo HEAD will be reset to that HEADid\n<img src=\"https://i.stack.imgur.com/GdnDT.png\" alt=\"reset effect\">\n<em>LOG AFTER RESET</em></p>\n\n<p>Finally the reflog looks like the picture below</p>\n\n<p><img src=\"https://i.stack.imgur.com/Fhhub.png\" alt=\"reflog after\">\n<em>REFLOG FINAL</em></p>\n    </div>",
          "vote": "203"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First run: </p>\n\n<pre><code>git reflog\n</code></pre>\n\n<p>It will show you all the possible actions you have performed on your repository, for example, commit, merge, pull, etc.</p>\n\n<p>Then do:</p>\n\n<pre><code>git reset --hard ActionIdFromRefLog\n</code></pre>\n    </div>",
          "vote": "177"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Undo last commit:</h2>\n\n<p><code>git reset --soft HEAD^</code> or <code>git reset --soft HEAD~</code></p>\n\n<p>This will undo the last commit.</p>\n\n<p>Here <code>--soft</code> means reset into staging.</p>\n\n<p><code>HEAD~</code> or <code>HEAD^</code> means to move to commit before HEAD.</p>\n\n<hr>\n\n<h2>Replace last commit to new commit:</h2>\n\n<pre><code>git commit --amend -m \"message\"\n</code></pre>\n\n<p>It will replace the last commit with the new commit.</p>\n    </div>",
          "vote": "169"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another way:</p>\n\n<p>Checkout the branch you want to revert, then reset your local working copy back to the commit that you want to be the latest one on the remote server (everything after it will go bye-bye). To do this, in SourceTree I right-clicked on the and selected \"Reset BRANCHNAME to this commit\".</p>\n\n<p>Then navigate to your repository's local directory and run this command:</p>\n\n<pre><code>git -c diff.mnemonicprefix=false -c core.quotepath=false push -v -f --tags REPOSITORY_NAME BRANCHNAME:BRANCHNAME\n</code></pre>\n\n<p>This will erase all commits after the current one in your local repository but only for that one branch.</p>\n    </div>",
          "vote": "166"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Type <code>git log</code> and find the last commit hash code and then enter:</p>\n\n<pre><code>git reset &lt;the previous co&gt;\n</code></pre>\n    </div>",
          "vote": "156"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In my case I accidentally committed some files I did not want to. So I did the following and it worked:</p>\n\n<pre><code>git reset --soft HEAD^\ngit rm --cached [files you do not need]\ngit add [files you need]\ngit commit -c ORIG_HEAD\n</code></pre>\n\n<p>Verify the results with gitk or git log --stat</p>\n    </div>",
          "vote": "150"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Simple, run this in your command line:</p>\n\n<pre><code>git reset --soft HEAD~ \n</code></pre>\n    </div>",
          "vote": "145"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are two main scenarios</p>\n\n<p><strong>You haven't pushed the commit yet</strong></p>\n\n<p>If the problem was extra files you commited (and you don't want those on repository), you can remove them using <code>git rm</code> and then commiting with <code>--amend</code></p>\n\n<pre><code>git rm &lt;pathToFile&gt;\n</code></pre>\n\n<p>You can also remove entire directories with <code>-r</code>, or even combine with other <a href=\"http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\">Bash</a> commands</p>\n\n<pre><code>git rm -r &lt;pathToDirectory&gt;\ngit rm $(find -name '*.class')\n</code></pre>\n\n<p>After removing the files, you can commit, with <strong>--amend</strong> option</p>\n\n<pre><code>git commit --amend -C HEAD # the -C option is to use the same commit message\n</code></pre>\n\n<p>This will rewrite your recent local commit removing the extra files, so, these files will never be sent on push and also will be removed from your local .git repository by GC.</p>\n\n<p><strong>You already pushed the commit</strong></p>\n\n<p>You can apply the same solution of the other scenario and then doing <code>git push</code> with the <code>-f</code> option, but it is <strong>not recommended</strong> since it overwrites the remote history with a divergent change (it can mess your repository).</p>\n\n<p>Instead, you have to do the commit without <code>--amend</code> (remember this about -amend`: That option rewrites the history on the last commit).</p>\n    </div>",
          "vote": "135"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h3>For a local commit</h3>\n\n<pre><code>git reset --soft HEAD~1\n</code></pre>\n\n<p>or if you do not remember exactly in which commit it is, you might use</p>\n\n<pre><code>git rm --cached &lt;file&gt;\n</code></pre>\n\n<h3>For a pushed commit</h3>\n\n<p>The proper way of removing files from the repository history is using <code>git filter-branch</code>. That is,</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git filter-branch --index-filter <span class=\"hljs-string\">'git rm --cached &lt;file&gt;'</span> HEAD\n</code></pre>\n\n<p>But I recomnend you use this command with care. Read more at <em><a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html\">git-filter-branch(1) Manual Page</a></em>.</p>\n    </div>",
          "vote": "134"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To reset to the previous revision, permanently deleting all uncommitted changes: </p>\n\n<pre><code>git reset --hard HEAD~1\n</code></pre>\n    </div>",
          "vote": "133"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are many ways to do it:</p>\n\n<p>Git command to undo the last commit/ previous commits:</p>\n\n<p><strong>Warning:</strong> Do Not use --hard if you do not know what you are doing.\n--hard is too <strong>dangerous</strong>, and it might <strong>delete your files.</strong></p>\n\n<p><strong>Basic command to revert the commit in Git is:</strong></p>\n\n<pre><code>$ git reset --hard &lt;COMMIT -ID&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$ git reset --hard HEAD~&lt;n&gt;\n</code></pre>\n\n<p><strong>COMMIT-ID</strong>: ID for the commit</p>\n\n<p><strong>n:</strong>  is number of last commits you want to revert</p>\n\n<p>You can get the commit id as shown below:</p>\n\n<pre><code>$ **git log --oneline**\n\nd81d3f1 function to subtract two numbers\n\nbe20eb8 function to add two numbers\n\nbedgfgg function to mulitply two numbers\n</code></pre>\n\n<p>where <strong>d81d3f1</strong> and <strong>be20eb8</strong> are commit id.</p>\n\n<p><strong>Now let's see some cases:</strong></p>\n\n<p><em>Suppose you want to revert the last commit 'd81d3f1'.  Here are two options:</em></p>\n\n<pre><code>$ git reset --hard d81d3f1\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$ git reset --hard HEAD~1\n</code></pre>\n\n<p><em>Suppose you want to revert the commit 'be20eb8':</em></p>\n\n<pre><code>$ git reset --hard be20eb8\n</code></pre>\n\n<p>For more detailed information you can refer and try out some other commands too for resetting head to a specified state:</p>\n\n<pre><code>$ git reset --help\n</code></pre>\n    </div>",
          "vote": "133"
        }
      ]
    },
    {
      "question": "How do I delete a Git branch locally and remotely?",
      "url": "https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I want to delete a branch both locally and remotely.</p>\n<h2>Failed Attempts to Delete a Remote Branch</h2>\n<pre class=\"lang-sh s-code-block hljs bash\"><code>$ git branch -d remotes/origin/bugfix\nerror: branch <span class=\"hljs-string\">'remotes/origin/bugfix'</span> not found.\n\n$ git branch -d origin/bugfix\nerror: branch <span class=\"hljs-string\">'origin/bugfix'</span> not found.\n\n$ git branch -rd origin/bugfix\nDeleted remote branch origin/bugfix (was 2a14ef7).\n\n$ git push\nEverything up-to-date\n\n$ git pull\nFrom github.com:gituser/gitproject\n\n* [new branch] bugfix -&gt; origin/bugfix\nAlready up-to-date.\n</code></pre>\n<p>What should I do differently to successfully delete the <code>remotes/origin/bugfix</code> branch both locally and remotely?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Executive Summary</h1>\n<pre><code>$ git push -d &lt;remote_name&gt; &lt;branch_name&gt;\n$ git branch -d &lt;branch_name&gt;\n</code></pre>\n<p>Note that in most cases the remote name is <code>origin</code>.\nIn such a case you'll have to use the command like so.</p>\n<pre><code>$ git push -d origin &lt;branch_name&gt;\n</code></pre>\n<h1>Delete Local Branch</h1>\n<p>To delete the <em>local</em> branch use one of the following:</p>\n<pre><code>$ git branch -d branch_name\n$ git branch -D branch_name\n</code></pre>\n<p><strong>Note:</strong> The <code>-d</code> option is an alias for <code>--delete</code>, which only deletes the branch if it has already been fully merged in its upstream branch. You could also use <code>-D</code>, which is an alias for <code>--delete --force</code>, which deletes the branch \"irrespective of its merged status.\" [Source: <code>man git-branch</code>]<br>\nAlso note that <code>git branch -d branch_name</code> will fail if you are currently\nin the branch you want to remove. The message starts with\n<code>error: Cannot delete the branch 'branch_name'</code>. If so, first switch\nto some other branch, for example: <code>git checkout master</code>.</p>\n<h1>Delete Remote Branch [Updated on 8-Sep-2017]</h1>\n<p>As of <a href=\"https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.7.0.txt\" rel=\"noreferrer\">Git v1.7.0</a>, you can delete a <em><strong>remote</strong></em> branch using</p>\n<pre><code>$ git push &lt;remote_name&gt; --delete &lt;branch_name&gt;\n</code></pre>\n<p>which might be easier to remember than</p>\n<pre><code>$ git push &lt;remote_name&gt; :&lt;branch_name&gt;\n</code></pre>\n<p>which was added in <a href=\"https://github.com/gitster/git/blob/master/Documentation/RelNotes/1.5.0.txt\" rel=\"noreferrer\">Git v1.5.0</a> \"to delete a remote branch or a tag.\"</p>\n<p>Starting on <a href=\"https://github.com/git/git/blob/master/Documentation/RelNotes/2.8.0.txt\" rel=\"noreferrer\">Git v2.8.0</a> you can also use <code>git push</code> with the <code>-d</code> option as an alias for <code>--delete</code>.</p>\n<p>Therefore, the version of Git you have installed will dictate whether you need to use the easier or harder syntax.</p>\n<h2>Delete Remote Branch [Original Answer from 5-Jan-2010]</h2>\n<p>From Chapter 3 of <a href=\"http://git-scm.com/book/en/Git-Branching-Remote-Branches\" rel=\"noreferrer\"><em>Pro Git</em></a> by Scott Chacon:</p>\n<blockquote>\n<h3>Deleting Remote Branches</h3>\n<p>Suppose you’re done with a remote branch — say, you and your collaborators are finished with a feature and have merged it into your remote’s master branch (or whatever branch your stable code-line is in). You can delete a remote branch using the rather obtuse syntax <code>git push [remotename] :[branch]</code>. If you want to delete your server-fix branch from the server, you run the following:</p>\n</blockquote>\n<pre><code>$ git push origin :serverfix\nTo git@github.com:schacon/simplegit.git\n - [deleted]         serverfix\n</code></pre>\n<blockquote>\n<p>Boom. No more branches on your server. You may want to dog-ear this page, because you’ll need that command, and you’ll likely forget the syntax. A way to remember this command is by recalling the <code>git push [remotename] [localbranch]:[remotebranch]</code> syntax that we went over a bit earlier. If you leave off the <code>[localbranch]</code> portion, then you’re basically saying, “Take nothing on my side and make it be <code>[remotebranch]</code>.”</p>\n</blockquote>\n<p>I issued <code>git push origin: bugfix</code> and it worked beautifully. Scott Chacon was right—I will want to <a href=\"http://en.wiktionary.org/wiki/dogear#Verb\" rel=\"noreferrer\">dog ear</a> that page (or virtually dog ear by answering this on Stack&nbsp;Overflow).</p>\n<p>Then you should execute this on other machines</p>\n<pre><code># Fetch changes from all remotes and locally delete \n# remote deleted branches/tags etc\n# --prune will do the job :-;\ngit fetch --all --prune\n</code></pre>\n<p>to propagate changes.</p>\n    </div>",
          "vote": "22469"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://stackoverflow.com/a/2003515/2637261\">Matthew's answer</a> is great for removing <em>remote</em> branches and I also appreciate the explanation, but to make a simple distinction between the two commands:</p>\n\n<p>To remove a <strong><em>local branch</em></strong> from your machine:</p>\n\n<p><code>git branch -d {the_local_branch}</code> (use <code>-D</code> instead to force deleting the branch without checking merged status)</p>\n\n<p>To remove a <strong><em>remote branch</em></strong> from the server:</p>\n\n<p><code>git push origin --delete {the_remote_branch}</code></p>\n\n<p>Reference: <em><a href=\"https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote\" rel=\"noreferrer\">Git: Delete a branch (local or remote)</a></em></p>\n    </div>",
          "vote": "3440"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>The <em>short answers</em></h2>\n\n<p>If you want more detailed explanations of the following commands, then see the long answers in the next section.</p>\n\n<h3>Deleting a remote branch</h3>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git push origin --delete &lt;branch&gt;  <span class=\"hljs-comment\"># Git version 1.7.0 or newer</span>\ngit push origin -d &lt;branch&gt;        <span class=\"hljs-comment\"># Shorter version (Git 1.7.0 or newer)</span>\ngit push origin :&lt;branch&gt;          <span class=\"hljs-comment\"># Git versions older than 1.7.0</span>\n</code></pre>\n\n<h3>Deleting a local branch</h3>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git branch --delete &lt;branch&gt;\ngit branch -d &lt;branch&gt; <span class=\"hljs-comment\"># Shorter version</span>\ngit branch -D &lt;branch&gt; <span class=\"hljs-comment\"># Force-delete un-merged branches</span>\n</code></pre>\n\n<h3>Deleting a local remote-tracking branch</h3>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git branch --delete --remotes &lt;remote&gt;/&lt;branch&gt;\ngit branch -dr &lt;remote&gt;/&lt;branch&gt; <span class=\"hljs-comment\"># Shorter</span>\n\ngit fetch &lt;remote&gt; --prune <span class=\"hljs-comment\"># Delete multiple obsolete remote-tracking branches</span>\ngit fetch &lt;remote&gt; -p      <span class=\"hljs-comment\"># Shorter</span>\n</code></pre>\n\n<hr>\n\n<h2>The <em>long answer</em>: there are three different branches to delete!</h2>\n\n<p>When you're dealing with deleting branches both locally and remotely, keep in mind that <strong>there are three different branches involved</strong>:</p>\n\n<ol>\n<li>The local branch <code>X</code>.</li>\n<li>The remote origin branch <code>X</code>.</li>\n<li>The local remote-tracking branch <code>origin/X</code> that tracks the remote branch <code>X</code>.</li>\n</ol>\n\n<p><img src=\"https://i.stack.imgur.com/NLAqw.png\" alt=\"Visualization of three branches\"></p>\n\n<p>The original poster used:</p>\n\n<pre><code>git branch -rd origin/bugfix\n</code></pre>\n\n<p>Which only deleted his <strong>local remote-tracking branch</strong> <code>origin/bugfix</code>, and not the actual remote branch <code>bugfix</code> on <code>origin</code>.</p>\n\n<p><img src=\"https://i.stack.imgur.com/iCOnz.png\" alt=\"Diagram 2\"></p>\n\n<p><strong>To delete that actual remote branch</strong>, you need</p>\n\n<pre><code>git push origin --delete bugfix\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/6Z3GY.png\" alt=\"Diagram 3\"></p>\n\n<h3>Additional details</h3>\n\n<p>The following sections describe additional details to consider when deleting your remote and remote-tracking branches.</p>\n\n<h2>Pushing to delete remote branches also removes remote-tracking branches</h2>\n\n<p>Note that deleting the remote branch <code>X</code> from the command line using a <code>git push</code> <strong>will also remove the local remote-tracking branch</strong> <code>origin/X</code>, so it is not necessary to prune the obsolete remote-tracking branch with <code>git fetch --prune</code> or <code>git fetch -p</code>. However, it wouldn't hurt if you did it anyway.</p>\n\n<p>You can verify that the remote-tracking branch <code>origin/X</code> was also deleted by running the following:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code><span class=\"hljs-comment\"># View just remote-tracking branches</span>\ngit branch --remotes\ngit branch -r\n\n<span class=\"hljs-comment\"># View both strictly local as well as remote-tracking branches</span>\ngit branch --all\ngit branch -a\n</code></pre>\n\n<h2>Pruning the obsolete local remote-tracking branch origin/X</h2>\n\n<p>If you didn't delete your remote branch <code>X</code> from the command line (like above), then your local repository will still contain (a now obsolete) remote-tracking branch <code>origin/X</code>. This can happen if you deleted a remote branch directly through GitHub's web interface, for example.</p>\n\n<p>A typical way to remove these obsolete remote-tracking branches (since Git version 1.6.6) is to simply run <code>git fetch</code> with the <code>--prune</code> or shorter <code>-p</code>. <strong>Note that this removes all obsolete local remote-tracking branches for any remote branches that no longer exist on the remote</strong>:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git fetch origin --prune\ngit fetch origin -p <span class=\"hljs-comment\"># Shorter</span>\n</code></pre>\n\n<p>Here is the relevant quote from the <a href=\"https://github.com/git/git/blob/v2.0.0/Documentation/RelNotes/1.6.6.txt#L162-L166\" rel=\"noreferrer\">1.6.6 release notes</a> (emphasis mine):</p>\n\n<blockquote>\n  <p><strong>\"git fetch\" learned</strong> <code>--all</code> and <code>--multiple</code>options, to run fetch from\n  many repositories, and <strong><code>--prune</code> option to remove remote tracking\n  branches that went stale.</strong>  These make \"git remote update\" and \"git\n  remote prune\" less necessary (there is no plan to remove \"remote\n  update\" nor \"remote prune\", though).</p>\n</blockquote>\n\n<h3>Alternative to above automatic pruning for obsolete remote-tracking branches</h3>\n\n<p>Alternatively, instead of pruning your obsolete local remote-tracking branches through <code>git fetch -p</code>, <em>you can avoid making the extra network operation</em> by just manually removing the branch(es) with the <code>--remote</code> or <code>-r</code> flags:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git branch --delete --remotes origin/X\ngit branch -dr origin/X <span class=\"hljs-comment\"># Shorter</span>\n</code></pre>\n\n<h2>See Also</h2>\n\n<ul>\n<li><a href=\"https://jk.gs/git-branch.html\" rel=\"noreferrer\">git-branch(1) Manual Page</a>.</li>\n<li><a href=\"https://jk.gs/git-fetch.html\" rel=\"noreferrer\">git-fetch(1) Manual Page</a>.</li>\n<li><a href=\"https://git-scm.com/book/en/Git-Branching-Remote-Branches\" rel=\"noreferrer\">Pro Git § 3.5 Git Branching - Remote Branches</a>.</li>\n</ul>\n    </div>",
          "vote": "2165"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h3>Steps for deleting a branch:</h3>\n\n<p>For deleting the <strong>remote branch:</strong></p>\n\n<pre><code>git push origin --delete &lt;your_branch&gt;\n</code></pre>\n\n<p>For deleting the <strong>local branch</strong>, you have <strong>three ways</strong>:</p>\n\n<pre><code>1: git branch -D &lt;branch_name&gt;\n\n2: git branch --delete --force &lt;branch_name&gt;  # Same as -D\n\n3: git branch --delete  &lt;branch_name&gt;         # Error on unmerge\n</code></pre>\n\n<p><strong>Explain:</strong> OK, just explain what's going on here!</p>\n\n<p>Simply do <code>git push origin --delete</code> to <strong>delete your remote branch <em>only</em></strong>, add the name of the branch at the end and this will delete and <strong>push it to remote</strong> at the same time...</p>\n\n<p>Also, <code>git branch -D</code>, which simply delete the local branch <strong><em>only</em></strong>!...</p>\n\n<p><code>-D</code> stands for <code>--delete --force</code> which will delete the branch even it's not merged (force delete), but you can also use <code>-d</code> which stands for <code>--delete</code> which throw an error respective of the branch merge status...</p>\n\n<p>I also create the <strong>image below</strong> to show the steps:</p>\n\n<p><a href=\"https://i.stack.imgur.com/AKWYx.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/AKWYx.jpg\" alt=\"Delete a remote and local branch in git\"></a></p>\n    </div>",
          "vote": "1588"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can also use the following to delete the remote branch</p>\n\n<pre><code>git push --delete origin serverfix\n</code></pre>\n\n<p>Which does the same thing as</p>\n\n<pre><code>git push origin :serverfix\n</code></pre>\n\n<p>but it may be easier to remember.</p>\n    </div>",
          "vote": "827"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Tip: When you delete branches using</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git branch -d &lt;branchname&gt; <span class=\"hljs-comment\"># Deletes local branch</span>\n</code></pre>\n\n<p>or</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git push origin :&lt;branchname&gt; <span class=\"hljs-comment\"># Deletes remote branch</span>\n</code></pre>\n\n<p>only the references are deleted. Even though the branch is actually removed on the remote, the references to it still exists in the local repositories of your team members. This means that for other team members the deleted branches are still visible when they do a <code>git branch -a</code>.</p>\n\n<p>To solve this, your team members can prune the deleted branches with</p>\n\n<pre><code>git remote prune &lt;repository&gt;\n</code></pre>\n\n<p>This is typically <code>git remote prune origin</code>.</p>\n    </div>",
          "vote": "386"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want to delete a branch, first checkout to the branch other than the branch to be deleted.</p>\n\n<pre><code>git checkout other_than_branch_to_be_deleted\n</code></pre>\n\n<p>Deleting the local branch:</p>\n\n<pre><code>git branch -D branch_to_be_deleted\n</code></pre>\n\n<p>Deleting the remote branch:</p>\n\n<pre><code>git push origin --delete branch_to_be_deleted\n</code></pre>\n    </div>",
          "vote": "374"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's very simple:</p>\n<p><strong>To delete the remote branch</strong></p>\n<pre><code>git push -d origin &lt;branch-name&gt;\n</code></pre>\n<p><em>Or</em></p>\n<pre><code>git push origin :&lt;branch-name&gt;\n</code></pre>\n<p><strong>To forcefully delete local branch</strong></p>\n<pre><code>git branch -D &lt;branch-name&gt;\n</code></pre>\n<p>Happy Coding :)</p>\n    </div>",
          "vote": "316"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>git branch -D &lt;name-of-branch&gt;\ngit branch -D -r origin/&lt;name-of-branch&gt;\ngit push origin :&lt;name-of-branch&gt;\n</code></pre>\n    </div>",
          "vote": "272"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is simple: Just run the following command:</p>\n\n<p>To delete a Git branch both locally and remotely, first delete the local branch using this command:</p>\n\n<pre><code>git branch -d example\n</code></pre>\n\n<p>(Here <code>example</code> is the branch name.)</p>\n\n<p>And after that, delete the remote branch using this command:</p>\n\n<pre><code>git push origin :example\n</code></pre>\n    </div>",
          "vote": "232"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another approach is:</p>\n\n<pre><code>git push --prune origin\n</code></pre>\n\n<p><strong><em>WARNING:</em></strong> <em>This will delete all remote branches that do not exist locally.</em> Or more comprehensively,</p>\n\n<pre><code>git push --mirror\n</code></pre>\n\n<p>will effectively make the remote repository look like the local copy of the repository (local heads, remotes and tags are mirrored on remote).</p>\n    </div>",
          "vote": "208"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I use the following in my <a href=\"http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\" rel=\"noreferrer\">Bash</a> settings:</p>\n\n<pre><code>alias git-shoot=\"git push origin --delete\"\n</code></pre>\n\n<p>Then you can call:</p>\n\n<pre><code>git-shoot branchname\n</code></pre>\n    </div>",
          "vote": "175"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Delete locally:</strong></p>\n\n<p>To delete a local branch, you can use:</p>\n\n<pre><code>git branch -d &lt;branch_name&gt;\n</code></pre>\n\n<p>To delete a branch forcibly, use <code>-D</code> instead of <code>-d</code>.</p>\n\n<pre><code>git branch -D &lt;branch_name&gt;\n</code></pre>\n\n<p><strong>Delete remotely:</strong></p>\n\n<p>There are two options:</p>\n\n<pre><code>git push origin :branchname\n\ngit push origin --delete branchname\n</code></pre>\n\n<p>I would suggest you use the second way as it is more intuitive.</p>\n    </div>",
          "vote": "139"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since January 2013, GitHub included a <kbd>Delete branch</kbd> button next to each branch in your \"Branches\" page.</p>\n\n<p>Relevant blog post: <a href=\"https://github.com/blog/1377-create-and-delete-branches\" rel=\"noreferrer\">Create and delete branches</a></p>\n    </div>",
          "vote": "136"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want to complete both these steps with a single command, you can make an alias for it by adding the below to your <code>~/.gitconfig</code>:</p>\n\n<pre class=\"lang-none s-code-block\"><code>[alias]\n    rmbranch = \"!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f\"\n</code></pre>\n\n<p>Alternatively, you can add this to your global configuration from the command line using</p>\n\n<pre class=\"lang-none s-code-block\"><code>git config --global alias.rmbranch \\\n'!f(){ git branch -d ${1} &amp;&amp; git push origin --delete ${1}; };f'\n</code></pre>\n\n<p><strong>NOTE</strong>: If using <code>-d</code> (lowercase d), the branch will only be deleted if it has been merged. To force the delete to happen, you will need to use <code>-D</code> (uppercase D).</p>\n    </div>",
          "vote": "136"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To delete your branch locally and remotely </p>\n\n<ul>\n<li><p>Checkout to master branch -  <code>git checkout master</code></p></li>\n<li><p>Delete your remote branch - <code>git push origin --delete &lt;branch-name&gt;</code></p></li>\n<li><p>Delete your local branch - <code>git branch --delete &lt;branch-name&gt;</code></p></li>\n</ul>\n    </div>",
          "vote": "121"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can also do this using <code>git remote prune origin</code></p>\n\n<pre><code>$ git remote prune origin\nPruning origin\nURL: git@example.com/yourrepo.git\n * [pruned] origin/some-branchs\n</code></pre>\n\n<p>It prunes and deletes remote-tracking branches from a <code>git branch -r</code> listing.</p>\n    </div>",
          "vote": "118"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In addition to the other answers, I often use the <a href=\"https://github.com/webmat/git_remote_branch\" rel=\"noreferrer\">git_remote_branch</a> tool. It's an extra install, but it gets you a convenient way to interact with remote branches. In this case, to delete:</p>\n\n<pre><code>grb delete branch\n</code></pre>\n\n<p>I find that I also use the <code>publish</code> and <code>track</code> commands quite often.</p>\n    </div>",
          "vote": "113"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A <strong>one-liner</strong> command to delete <em>both local, and remote</em>:</p>\n\n<pre><code>D=branch-name; git branch -D $D; git push origin :$D\n</code></pre>\n\n<p>Or add the alias below to your <em>~/.gitconfig</em>. Usage: <code>git kill branch-name</code></p>\n\n<pre><code>[alias]\n    kill = \"!f(){ git branch -D \\\"$1\\\";  git push origin --delete \\\"$1\\\"; };f\"\n</code></pre>\n    </div>",
          "vote": "104"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://www.git-tower.com/learn/git/ebook/command-line/remote-repositories/deleting-branches\" rel=\"noreferrer\">Deleting Branches</a></p>\n<blockquote>\n<p>Let's assume our work on branch \"contact-form\" is done and we've already integrated it into \"master\". Since we don't need it anymore, we can delete it (locally):</p>\n<pre><code>$ git branch -d contact-form\n</code></pre>\n</blockquote>\n<p>And for deleting the remote branch:</p>\n<pre><code>git push origin --delete contact-form\n</code></pre>\n    </div>",
          "vote": "98"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Delete remote branch</p>\n\n<p><code>git push origin :&lt;branchname&gt;</code></p>\n\n<p>Delete local branch</p>\n\n<p><code>git branch -D &lt;branchname&gt;</code></p>\n\n<p>Delete local branch steps:</p>\n\n<ol>\n<li>checkout to another branch</li>\n<li>delete local branch</li>\n</ol>\n    </div>",
          "vote": "91"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Simply say:</p>\n\n<pre><code>git branch -d &lt;branch-name&gt;\ngit push origin :&lt;branch-name&gt;\n</code></pre>\n    </div>",
          "vote": "90"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>git push origin --delete &lt;branch Name&gt;\n</code></pre>\n\n<p>is easier to remember than</p>\n\n<pre><code>git push origin :branchName\n</code></pre>\n    </div>",
          "vote": "87"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Now you can do it with the <a href=\"https://desktop.github.com/\" rel=\"noreferrer\">GitHub Desktop</a> application.</p>\n\n<p>After launching the application</p>\n\n<ol>\n<li>Click on the project containing the branch</li>\n<li><p>Switch to the branch you would like to delete</p>\n\n<p><a href=\"https://i.stack.imgur.com/c0ged.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/c0ged.png\" alt=\"Switching branch\"></a></p></li>\n<li><p>From the \"Branch\" menu, select, \"Unpublish...\", to have the branch deleted from the GitHub servers.</p>\n\n<p><a href=\"https://i.stack.imgur.com/1u8oS.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/1u8oS.png\" alt=\"Unpublish branch\"></a></p></li>\n<li><p>From the \"Branch\" menu, select, 'Delete \"<em>branch_name</em>\"...', to have the branch deleted off of your local machine (AKA the machine you are currently working on)</p>\n\n<p><a href=\"https://i.stack.imgur.com/TTuLO.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/TTuLO.png\" alt=\"Delete local branch\"></a></p></li>\n</ol>\n    </div>",
          "vote": "85"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>To delete <em>locally</em> - (normal)</strong></p>\n\n<pre><code>git branch -d my_branch\n</code></pre>\n\n<p>If your branch is in a rebasing/merging progress and that was not done properly, it means you will get an error, <code>Rebase/Merge in progress</code>, so in that case, you won't be able to delete your branch.</p>\n\n<p>So either you need to solve the rebasing/merging. Otherwise, you can do force <em>delete</em> by using,</p>\n\n<pre><code>git branch -D my_branch\n</code></pre>\n\n<p><strong>To delete in <em>remote</em>:</strong></p>\n\n<pre><code>git push --delete origin my_branch\n</code></pre>\n\n<p><strong>You can do the same using:</strong></p>\n\n<pre><code>git push origin :my_branch   # Easy to remember both will do the same.\n</code></pre>\n\n<p><strong>Graphical representation:</strong></p>\n\n<p><a href=\"https://i.stack.imgur.com/Y7NmS.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Y7NmS.png\" alt=\"Enter image description here\"></a></p>\n    </div>",
          "vote": "84"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong><em>This won't work if you have a tag with the same name as the branch on the remote:</em></strong></p>\n\n<pre><code>$ git push origin :branch-or-tag-name\nerror: dst refspec branch-or-tag-name matches more than one.\nerror: failed to push some refs to 'git@github.com:SomeName/some-repo.git'\n</code></pre>\n\n<p>In that case you need to specify that you want to delete the branch, not the tag:</p>\n\n<pre><code>git push origin :refs/heads/branch-or-tag-name\n</code></pre>\n\n<p>Similarly, to delete the tag instead of the branch you would use:</p>\n\n<pre><code>git push origin :refs/tags/branch-or-tag-name\n</code></pre>\n    </div>",
          "vote": "74"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Many of the other answers will lead to errors/warnings. This approach is relatively fool proof although you may still need <code>git branch -D branch_to_delete</code> if it's not fully merged into <code>some_other_branch</code>, for example.</p>\n\n<pre><code>git checkout some_other_branch\ngit push origin :branch_to_delete\ngit branch -d branch_to_delete\n</code></pre>\n\n<p>Remote pruning isn't needed if you deleted the remote branch. It's only used to get the most up-to-date remotes available on a repository you're tracking. I've observed <code>git fetch</code> will add remotes, not remove them. Here's an example of when <code>git remote prune origin</code> will actually do something:</p>\n\n<p>User A does the steps above. User B would run the following commands to see the most up-to-date remote branches:</p>\n\n<pre><code>git fetch\ngit remote prune origin\ngit branch -r\n</code></pre>\n    </div>",
          "vote": "57"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I got sick of googling for this answer, so I took a similar approach to <a href=\"https://stackoverflow.com/a/15775364/551436\">the answer that crizCraig posted</a> earlier.</p>\n\n<p>I added the following to my Bash profile:</p>\n\n<pre><code>function gitdelete(){\n    git push origin --delete $1\n    git branch -D $1\n}\n</code></pre>\n\n<p>Then every time I'm done with a branch (merged into <code>master</code>, for example) I run the following in my terminal:</p>\n\n<pre><code>gitdelete my-branch-name\n</code></pre>\n\n<p>...which then deletes <code>my-branch-name</code> from <code>origin</code> as as well as locally.</p>\n    </div>",
          "vote": "55"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Before executing</p>\n\n<pre><code>git branch --delete &lt;branch&gt;\n</code></pre>\n\n<p>make sure you determine first what the <em>exact</em> name of the remote branch is by executing:</p>\n\n<pre><code>git ls-remote\n</code></pre>\n\n<p>This will tell you what to enter <em>exactly</em> for <code>&lt;branch&gt;</code> value. (<code>branch</code> is case sensitive!)</p>\n    </div>",
          "vote": "53"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use:</p>\n\n<pre><code>git push origin :bugfix  # Deletes remote branch\ngit branch -d bugfix     # Must delete local branch manually\n</code></pre>\n\n<p>If you are sure you want to delete it, run</p>\n\n<pre><code>git branch -D bugfix\n</code></pre>\n\n<p>Now to clean up deleted remote branches run</p>\n\n<pre><code>git remote prune origin\n</code></pre>\n    </div>",
          "vote": "52"
        }
      ]
    },
    {
      "question": "What is the difference between 'git pull' and 'git fetch'?",
      "url": "https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Want to improve this post?</b> Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n</aside>\n\n    </div>\n\n<p>What are the differences between <code>git pull</code> and <code>git fetch</code>?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the simplest terms, <code>git pull</code> does a <code>git fetch</code> followed by a <code>git merge</code>.</p>\n<p>You can do a <code>git fetch</code> at any time to update your remote-tracking branches under <code>refs/remotes/&lt;remote&gt;/</code>.</p>\n<p>This operation never changes any of your own local branches under <code>refs/heads</code>, and is safe to do without changing your working copy. I have even heard of people running <code>git fetch</code> periodically in a cron job in the background (although I wouldn't recommend doing this).</p>\n<p>A <code>git pull</code> is what you would do to bring a local branch up-to-date with its remote version, while also updating your other remote-tracking branches.</p>\n<p>From the Git documentation for <a href=\"http://git-scm.com/docs/git-pull\" rel=\"noreferrer\"><strong>git pull</strong></a>:</p>\n<blockquote>\n<p>In its default mode, <code>git pull</code> is shorthand for <code>git fetch</code> followed by <code>git merge FETCH_HEAD</code>.</p>\n</blockquote>\n    </div>",
          "vote": "10394"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ul>\n<li><p>When you use <code>pull</code>, Git tries to automatically do your work for you. <strong>It is context sensitive</strong>, so Git will merge any pulled commits into the branch you are currently working in.  <code>pull</code> <strong>automatically merges the commits without letting you review them first</strong>. If you don’t closely manage your branches, you may run into frequent conflicts.</p></li>\n<li><p>When you <code>fetch</code>, Git gathers any commits from the target branch that do not exist in your current branch and <strong>stores them in your local repository</strong>. However, <strong>it does not merge them with your current branch</strong>. This is particularly useful if you need to keep your repository up to date, but are working on something that might break if you update your files. \nTo integrate the commits into your master branch, you use <code>merge</code>.</p></li>\n</ul>\n    </div>",
          "vote": "2269"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is important to contrast the design philosophy of git with the philosophy of a more traditional source control tool like SVN.</p>\n\n<p>Subversion was designed and built with a client/server model. There is a single repository that is the server, and several clients can fetch code from the server, work on it, then commit it back to the server. The assumption is that the client can always contact the server when it needs to perform an operation.</p>\n\n<p>Git was designed to support a more distributed model with no need for a central repository (though you can certainly use one if you like). Also git was designed so that the client and the \"server\" don't need to be online at the same time. Git was designed so that people on an unreliable link could exchange code via email, even. It is possible to work completely disconnected and burn a CD to exchange code via git.</p>\n\n<p>In order to support this model git maintains a local repository with your code and also an additional local repository that mirrors the state of the remote repository. By keeping a copy of the remote repository locally, git can figure out the changes needed even when the remote repository is not reachable.  Later when you need to send the changes to someone else, git can transfer them as a set of changes from a point in time known to the remote repository.</p>\n\n<ul>\n<li><p><strong><code>git fetch</code></strong> is the command that says \"bring my local copy of the remote repository up to date.\" </p></li>\n<li><p><strong><code>git pull</code></strong> says \"bring the changes in the remote repository to where I keep my own code.\"</p></li>\n</ul>\n\n<p>Normally <strong><code>git pull</code></strong> does this by doing a <strong><code>git fetch</code></strong> to bring the local copy of the remote repository up to date, and then merging the changes into your own code repository and possibly your working copy.</p>\n\n<p>The take away is to keep in mind that there are often at least <strong>three copies</strong> of a project on your workstation. One copy is your own repository with your own commit history. The second copy is your working copy where you are editing and building. The third copy is your local \"cached\" copy of a remote repository.</p>\n    </div>",
          "vote": "1263"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is <a href=\"http://blog.osteele.com/2008/05/my-git-workflow/\" rel=\"noreferrer\">Oliver Steele's image of how all it all fits together</a>:</p>\n\n<p><img src=\"https://i.stack.imgur.com/XwVzT.png\" alt=\"enter image description here\"></p>\n\n<p>If there is sufficient interest, I suppose I could update the image to add <code>git clone</code> and <code>git merge</code>... </p>\n    </div>",
          "vote": "945"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One use case of <code>git fetch</code> is that the following will tell you any changes in the remote branch since your last pull... so you can check before doing an actual pull, which could change files in your current branch and working copy.</p>\n\n<pre><code>git fetch\ngit diff ...origin\n</code></pre>\n\n<p>See: <a href=\"https://git-scm.com/docs/git-diff\" rel=\"noreferrer\">https://git-scm.com/docs/git-diff</a> regarding double- and triple-dot syntax in the diff command</p>\n    </div>",
          "vote": "512"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It cost me a little bit to understand what was the difference, but this is a simple explanation. <code>master</code> in your localhost is a branch.</p>\n\n<p>When you clone a repository you fetch the entire repository to you local host. This means that at that time you have an origin/master pointer to <code>HEAD</code> and master pointing to the same <code>HEAD</code>.</p>\n\n<p>when you start working and do commits you advance the master pointer to <code>HEAD</code> + your commits. But the origin/master pointer is still pointing to what it was when you cloned.</p>\n\n<p>So the difference will be:</p>\n\n<ul>\n<li>If you do a <code>git fetch</code> it will just fetch all the changes in the remote repository (<a href=\"http://en.wikipedia.org/wiki/GitHub\" rel=\"noreferrer\">GitHub</a>) and move the origin/master pointer to <code>HEAD</code>. Meanwhile your local branch master will keep pointing to where it has.</li>\n<li>If you do a <code>git pull</code>, it will do basically fetch (as explained previously) and merge any new changes to your master branch and move the pointer to <code>HEAD</code>.</li>\n</ul>\n    </div>",
          "vote": "386"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Briefly</strong></p>\n<p><code>git fetch</code> is similar to <code>pull</code> but doesn't merge. i.e. it fetches remote updates (<code>refs</code> and <code>objects</code>) but your local stays the same (i.e. <code>origin/master</code> gets updated but <code>master</code> stays the same) .</p>\n<p><code>git pull</code> pulls down from a remote and instantly merges.</p>\n<p><strong>More</strong></p>\n<p><code>git clone</code> clones a repo.</p>\n<p><code>git rebase</code> saves stuff from your current branch that isn't in the upstream branch to a temporary area. Your branch is now the same as before you started your changes. So, <code>git pull -rebase</code> will pull down the remote changes, rewind your local branch, replay your changes over the top of your current branch one by one until you're up-to-date.</p>\n<p>Also, <code>git branch -a</code> will show you exactly what’s going on with all your branches - local and remote.</p>\n<p>This blog post was useful:</p>\n<p><a href=\"https://web.archive.org/web/20190711105239/http://blog.mikepearce.net/2010/05/18/the-difference-between-git-pull-git-fetch-and-git-clone-and-git-rebase/\" rel=\"noreferrer\">The difference between git pull, git fetch and git clone (and git rebase) - Mike Pearce</a></p>\n<p>and covers <code>git pull</code>, <code>git fetch</code>, <code>git clone</code> and <code>git rebase</code>.</p>\n<h2>UPDATE</h2>\n<p>I thought I'd update this to show how you'd actually use this in practice.</p>\n<ol>\n<li><p>Update your local repo from the remote (but don't merge):</p>\n<pre><code> git fetch \n</code></pre>\n</li>\n<li><p>After downloading the updates, let's see the differences:</p>\n<pre><code> git diff master origin/master \n</code></pre>\n</li>\n<li><p>If you're happy with those updates, then merge:</p>\n<pre><code> git pull\n</code></pre>\n</li>\n</ol>\n<p>Notes:</p>\n<p>On step 2: For more on diffs between local and remotes, see: <a href=\"https://stackoverflow.com/questions/1800783/compare-local-git-branch-with-remote-branch\">How to compare a local git branch with its remote branch?</a></p>\n<p>On step 3: It's probably more accurate (e.g. on a fast changing repo) to do a <code>git rebase origin</code> here. See <a href=\"https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch#comment16374948_5376768\">@Justin Ohms comment</a> in another answer.</p>\n<p>See also: <a href=\"http://longair.net/blog/2009/04/16/git-fetch-and-merge/\" rel=\"noreferrer\">http://longair.net/blog/2009/04/16/git-fetch-and-merge/</a></p>\n    </div>",
          "vote": "241"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Sometimes a visual representation helps.</p>\n\n<p><a href=\"https://i.stack.imgur.com/zUInQ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/zUInQ.png\" alt=\"enter image description here\"></a></p>\n    </div>",
          "vote": "239"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre>git-pull - Fetch from and merge with another repository or a local branch\nSYNOPSIS\n\ngit pull   …\nDESCRIPTION\n\nRuns git-fetch with the given parameters, and calls git-merge to merge the \nretrieved head(s) into the current branch. With --rebase, calls git-rebase \ninstead of git-merge.\n\nNote that you can use . (current directory) as the &lt;repository&gt; to pull \nfrom the local repository — this is useful when merging local branches \ninto the current branch.\n\nAlso note that options meant for git-pull itself and underlying git-merge \nmust be given before the options meant for git-fetch.\n</pre>\n\n<p>You would pull if you want the histories merged, you'd fetch if you just 'want the codez' as some person has been tagging some articles around here.</p>\n    </div>",
          "vote": "186"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can fetch from a remote repository, see the differences and then pull or merge.</p>\n\n<p>This is an example for a remote repository called <code>origin</code> and a branch called <code>master</code> tracking the remote branch <code>origin/master</code>:</p>\n\n<pre><code>git checkout master                                                  \ngit fetch                                        \ngit diff origin/master\ngit rebase origin master\n</code></pre>\n    </div>",
          "vote": "169"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The short and easy answer is that <code>git pull</code> is simply <code>git fetch</code> followed by <code>git merge</code>.</p>\n\n<p>It is very important to note that <code>git pull</code> will <strong>automatically merge whether you like it or not</strong>. This could, of course, result in merge conflicts. Let's say your remote is <code>origin</code> and your branch is <code>master</code>. If you <code>git diff origin/master</code> before pulling, you should have some idea of potential merge conflicts and could prepare your local branch accordingly. </p>\n\n<p>In addition to pulling and pushing, <a href=\"https://web.archive.org/web/20150321185928/http://mettadore.com/2011/09/07/the-ever-deployable-github-workflow//\" rel=\"noreferrer\">some workflows</a> involve <code>git rebase</code>, such as this one, which I paraphrase from the linked article:</p>\n\n<pre><code>git pull origin master\ngit checkout foo-branch\ngit rebase master\ngit push origin foo-branch\n</code></pre>\n\n<p>If you find yourself in such a situation, you may be tempted to <code>git pull --rebase</code>. Unless you really, really know what you are doing, I would advise against that. This warning is from the <code>man</code> page for <code>git-pull</code>, version <code>2.3.5</code>:</p>\n\n<blockquote>\n  <p>This is a potentially dangerous mode of operation. It rewrites\n  history, which does not bode well when you published that history\n  already. Do not use this option unless you have read git-rebase(1)\n  carefully.</p>\n</blockquote>\n    </div>",
          "vote": "165"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>OK</strong>, here is some information about <code>git pull</code> and <code>git fetch</code>, so you can understand the actual differences... in few simple words, <strong>fetch</strong> gets the latest data, but not the code changes and not going to mess with your current  local branch code, but <strong>pull</strong> get the code changes and merge it your local branch, read on to get more details about each:</p>\n<h2>git fetch</h2>\n<p>It will download all <strong>refs</strong> and <strong>objects</strong> and any new branches to your local Repository...</p>\n<blockquote>\n<p>Fetch branches and/or tags (collectively, \"refs\") from one or more\nother repositories, along with the objects necessary to complete their\nhistories. Remote-tracking branches are updated (see the description\nof  below for ways to control this behavior).</p>\n<p>By default, any tag that points into the histories being fetched is\nalso fetched; the effect is to fetch tags that point at branches that\nyou are interested in. This default behavior can be changed by using\nthe --tags or --no-tags options or by configuring\nremote..tagOpt. By using a refspec that fetches tags explicitly,\nyou can fetch tags that do not point into branches you are interested\nin as well.</p>\n<p>git fetch can fetch from either a single named repository or URL or\nfrom several repositories at once if  is given and there is a\nremotes. entry in the configuration file. (See git-config<a href=\"https://i.stack.imgur.com/nWYnQ.png\" rel=\"nofollow noreferrer\">1</a>).</p>\n<p>When no remote is specified, by default the origin remote will be\nused, unless there’s an upstream branch configured for the current\nbranch.</p>\n<p>The names of refs that are fetched, together with the object names\nthey point at, are written to .git/FETCH_HEAD. This information may be\nused by scripts or other git commands, such as git-pull.</p>\n</blockquote>\n<hr>\n<h2>git pull</h2>\n<p>It will apply the changes from <strong>remote</strong> to the <strong>current branch</strong> in local...</p>\n<blockquote>\n<p>Incorporates changes from a remote repository into the current branch.\nIn its default mode, git pull is shorthand for git fetch followed by\ngit merge FETCH_HEAD.</p>\n<p>More precisely, git pull runs git fetch with the given parameters and\ncalls git merge to merge the retrieved branch heads into the current\nbranch. With --rebase, it runs git rebase instead of git merge.</p>\n<p> should be the name of a remote repository as passed to\ngit-fetch<a href=\"https://i.stack.imgur.com/nWYnQ.png\" rel=\"nofollow noreferrer\">1</a>.  can name an arbitrary remote ref (for example,\nthe name of a tag) or even a collection of refs with corresponding\nremote-tracking branches (e.g., refs/heads/<em>:refs/remotes/origin/</em>),\nbut usually it is the name of a branch in the remote repository.</p>\n<p>Default values for  and  are read from the\n\"remote\" and \"merge\" configuration for the current branch as set by\ngit-branch --track.</p>\n</blockquote>\n<hr>\n<p>I also create the <strong>visual</strong> below to show you how <code>git fetch</code> and <code>git pull</code> working together...</p>\n<p><a href=\"https://i.stack.imgur.com/nWYnQ.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/nWYnQ.png\" alt=\"git pull and git fetch\"></a></p>\n    </div>",
          "vote": "162"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><img src=\"https://i.stack.imgur.com/aiQDJ.png\" alt=\"enter image description here\"></p>\n\n<p>This interactive graphical representation is very helpful in understanging git: <a href=\"http://ndpsoftware.com/git-cheatsheet.html\">http://ndpsoftware.com/git-cheatsheet.html</a> </p>\n\n<p><code>git fetch</code> just \"downloads\" the changes from the remote to your local repository. <code>git pull</code> downloads the changes and merges them into your current branch. \"In its default mode, <code>git pull</code> is shorthand for <code>git fetch</code> followed by <code>git merge FETCH_HEAD</code>.\"</p>\n    </div>",
          "vote": "144"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h3>Bonus:</h3>\n<p>In speaking of pull &amp; fetch in the above answers, I would like to share an interesting trick,</p>\n<h1><strong><code>git pull --rebase</code></strong></h1>\n<p>This above command is the most useful command in my git life which saved a lots of time.</p>\n<p>Before pushing your new commits to server, try this command and it will automatically sync latest server changes (with a fetch + merge) and will place your commit at the top in git log. No need to worry about manual pull/merge.</p>\n<p>Find details at: <a href=\"http://gitolite.com/git-pull--rebase\" rel=\"noreferrer\">http://gitolite.com/git-pull--rebase</a></p>\n    </div>",
          "vote": "130"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I like to have some visual representation of the situation to grasp these things. Maybe other developers would like to see it too, so here's my addition. I'm not totally sure that it all is correct, so please comment if you find any mistakes.</p>\n\n<pre><code>                                         LOCAL SYSTEM\n                  . =====================================================    \n================= . =================  ===================  =============\nREMOTE REPOSITORY . REMOTE REPOSITORY  LOCAL REPOSITORY     WORKING COPY\n(ORIGIN)          . (CACHED)           \nfor example,      . mirror of the      \na github repo.    . remote repo\nCan also be       .\nmultiple repo's   .\n                  .\n                  .\nFETCH  *------------------&gt;*\nYour local cache of the remote is updated with the origin (or multiple\nexternal sources, that is git's distributed nature)\n                  .\nPULL   *--------------------------------------------------------&gt;*\nchanges are merged directly into your local copy. when conflicts occur, \nyou are asked for decisions.\n                  .\nCOMMIT            .                             *&lt;---------------*\nWhen coming from, for example, subversion, you might think that a commit\nwill update the origin. In git, a commit is only done to your local repo.\n                  .\nPUSH   *&lt;---------------------------------------*\nSynchronizes your changes back into the origin.\n</code></pre>\n\n<p>Some major advantages for having a fetched mirror of the remote are:</p>\n\n<ul>\n<li><strong>Performance</strong> (scroll through all commits and messages without trying to squeeze it through the network)</li>\n<li><strong>Feedback</strong> about the state of your local repo (for example, I use Atlassian's SourceTree, which will give me a bulb indicating if I'm commits ahead or behind compared to the origin. This information can be updated with a GIT FETCH).</li>\n</ul>\n    </div>",
          "vote": "121"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have struggled with this as well.  In fact I got here with a google search of exactly the same question.  Reading all these answers finally painted a picture in my head and I decided to try to get this down looking at the state of the 2 repositories and 1 sandbox and actions performed over time while watching the version of them.  So here is what I came up with.  Please correct me if I messed up anywhere.</p>\n\n<p>The three repos with a fetch:</p>\n\n<pre><code>---------------------     -----------------------     -----------------------\n- Remote Repo       -     - Remote Repo         -     - Remote Repo         -\n-                   -     - gets pushed         -     -                     -\n- @ R01             -     - @ R02               -     - @ R02               -\n---------------------     -----------------------     -----------------------\n\n---------------------     -----------------------     -----------------------\n- Local Repo        -     - Local Repo          -     - Local Repo          -\n- pull              -     -                     -     - fetch               -\n- @ R01             -     - @ R01               -     - @ R02               -\n---------------------     -----------------------     -----------------------\n\n---------------------     -----------------------     -----------------------\n- Local Sandbox     -     - Local Sandbox       -     - Local Sandbox       -\n- Checkout          -     - new work done       -     -                     -\n- @ R01             -     - @ R01+              -     - @R01+               -\n---------------------     -----------------------     -----------------------\n</code></pre>\n\n<p>The three repos with a pull</p>\n\n<pre><code>---------------------     -----------------------     -----------------------\n- Remote Repo       -     - Remote Repo         -     - Remote Repo         -\n-                   -     - gets pushed         -     -                     -\n- @ R01             -     - @ R02               -     - @ R02               -\n---------------------     -----------------------     -----------------------\n\n---------------------     -----------------------     -----------------------\n- Local Repo        -     - Local Repo          -     - Local Repo          -\n- pull              -     -                     -     - pull                -\n- @ R01             -     - @ R01               -     - @ R02               -\n---------------------     -----------------------     -----------------------\n\n---------------------     -----------------------     -----------------------\n- Local Sandbox     -     - Local Sandbox       -     - Local Sandbox       -\n- Checkout          -     - new work done       -     - merged with R02     -\n- @ R01             -     - @ R01+              -     - @R02+               -\n---------------------     -----------------------     -----------------------\n</code></pre>\n\n<p>This helped me understand why a fetch is pretty important.</p>\n    </div>",
          "vote": "111"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The Difference between <strong>GIT Fetch</strong> and <strong>GIT Pull</strong> can be explained with the following scenario:\n<em>(Keeping in mind that pictures speak louder than words!, I have provided pictorial representation)</em></p>\n<p>Let's take an example that you are working on a project with your team members. So there will be one main Branch of the project and all the contributors must fork it to their own local repository and then work on this local branch to modify/Add modules then push back to the main branch.</p>\n<p>So,\n<strong>Initial State</strong> of the two Branches when you forked the main project on your local repository will be like this- (<code>A</code>, <code>B</code> and <code>C</code> are Modules already completed of the project)</p>\n<p><a href=\"https://i.stack.imgur.com/SPky3.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/SPky3.png\" alt=\"enter image description here\"></a></p>\n<p>Now, you have started working on the new module (suppose <code>D</code>)  and when you have completed the <code>D</code> module you want to push it to the main branch, But meanwhile what happens is that one of your teammates has developed new Module <code>E</code>, <code>F</code> and modified <code>C</code>.<br>\nSo now what has happened is that your local repository is lacking behind the original progress of the project and thus pushing of your changes to the main branch can lead to conflict and may cause your Module <code>D</code> to malfunction.</p>\n<p><a href=\"https://i.stack.imgur.com/SpIlX.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/SpIlX.png\" alt=\"enter image description here\"></a></p>\n<p>To avoid such issues and to work parallel with the original progress of the project there are Two ways:</p>\n<p><strong>1. Git Fetch-</strong> This will Download all the changes that have been made to the origin/main branch project which are not present in your local branch. And will wait for the Git Merge command to apply the changes that have been fetched to your Repository or branch.</p>\n<p><a href=\"https://i.stack.imgur.com/8qhgH.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/8qhgH.png\" alt=\"enter image description here\"></a></p>\n<p>So now You can carefully monitor the files before merging it to your repository. And you can also modify <code>D</code> if required because of Modified <code>C</code>.</p>\n<p><a href=\"https://i.stack.imgur.com/JYA7S.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/JYA7S.png\" alt=\"enter image description here\"></a></p>\n<p><strong>2. Git Pull-</strong> This will update your local branch with the origin/main branch i.e. actually what it does is a combination of Git Fetch and Git merge one after another.\n<em>But this may Cause Conflicts to occur, so it’s recommended to use Git Pull with a clean copy.</em></p>\n<p><a href=\"https://i.stack.imgur.com/O1vk0.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/O1vk0.png\" alt=\"enter image description here\"></a></p>\n    </div>",
          "vote": "111"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>We simply say:</p>\n\n<pre><code>git pull == git fetch + git merge\n</code></pre>\n\n<p>If you run <code>git pull</code>, you do not need to merge the data to local. If you run <code>git fetch</code>, it means you must run <code>git merge</code> for getting the latest code to your local machine. Otherwise, the local machine code would not be changed without merge. </p>\n\n<p>So in the Git Gui, when you do fetch, you have to merge the data. Fetch itself won't make the code changes at your local. You can check that when you update the code by fetching\nonce fetch and see; the code it won't change. Then you merge... You will see the changed code.</p>\n    </div>",
          "vote": "90"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>git fetch</code> pulls down the code from the remote server to your tracking branches in your local repository.  If your remote is named <code>origin</code> (the default) then these branches will be within <code>origin/</code>, for example <code>origin/master</code>, <code>origin/mybranch-123</code>, etc.  These are not your current branches, they are <em>local</em> copies of those branches from the server.</p>\n\n<p><code>git pull</code> does a <code>git fetch</code> but then <strong>also</strong> merges the code from the tracking branch into your current local version of that branch.  If you're not ready for that changes yet, just <code>git fetch</code> first.</p>\n    </div>",
          "vote": "84"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>git fetch</code> will retrieve remote branches so that you can <code>git diff</code> or <code>git merge</code> them with the current branch. <code>git pull</code> will run fetch on the remote brach tracked by the current branch and then merge the result. You can use <code>git fetch</code> to see if there are any updates to the remote branch without necessary merging them with your local branch.</p>\n    </div>",
          "vote": "79"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Git Fetch</strong></p>\n\n<p>You download changes to your local branch from origin through fetch. Fetch asks the remote repo for all commits that others have made but you don't have on your local repo. Fetch downloads these commits and adds them to the local repository.</p>\n\n<p><strong>Git Merge</strong></p>\n\n<p>You can apply changes downloaded through fetch using the merge command. Merge will take the commits retrieved from fetch and try to add them to your local branch. The merge will keep the commit history of your local changes so that when you share your branch with push, Git will know how others can merge your changes.</p>\n\n<p><strong>Git Pull</strong></p>\n\n<p>Fetch and merge run together often enough that a command that combines the two, pull, was created. Pull does a fetch and then a merge to add the downloaded commits into your local branch.</p>\n    </div>",
          "vote": "75"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In simple terms, if you were about to hop onto a plane without any Internet connection...before departing you could just do <code>git fetch origin &lt;branch&gt;</code>. It would fetch all the changes into your computer, but keep it separate from your local development/workspace.</p>\n<p>On the plane, you could make changes to your local workspace and then merge it with what you've previously fetched and then resolve potential merge conflicts all without a connection to the Internet. And unless someone had made <em>new</em> changes to the remote repository then once you arrive at the destination you would do <code>git push origin &lt;branch&gt;</code> and go get your coffee.</p>\n<hr>\n<p>From this awesome <a href=\"https://www.atlassian.com/git/tutorials/syncing/git-fetch\" rel=\"nofollow noreferrer\">Atlassian tutorial</a>:</p>\n<blockquote>\n<p>The <code>git fetch</code> command downloads commits, files, and refs from a\nremote repository into your local repository.</p>\n<p>Fetching is what you do when you want to see what everybody <em>else</em> has\nbeen working on. It’s similar to SVN update in that it lets you see\nhow the central history has progressed, but it doesn’t force you to\nactually merge the changes into your repository. Git <strong>isolates\nfetched content as a from existing local content</strong>, it has absolutely\n<strong>no effect on your local development work</strong>. Fetched content has to be explicitly checked out using the <code>git checkout</code> command. This makes\nfetching a safe way to review commits before integrating them with\nyour local repository.</p>\n<p>When downloading content from a remote repository, <code>git pull</code> and <code>git fetch</code> commands are available to accomplish the task. You can consider\n<code>git fetch</code> the 'safe' version of the two commands. It will download\nthe remote content, but not update your local repository's working state,\nleaving your current work intact. <code>git pull</code> is the more aggressive\nalternative, it will download the remote content for the active local\nbranch and immediately execute <code>git merge</code> to create a merge commit\nfor the new remote content. If you have pending changes in progress\nthis will cause conflicts and kickoff the merge conflict resolution\nflow.</p>\n</blockquote>\n<hr>\n<p>With <code>git pull</code>:</p>\n<ul>\n<li>You don't get any isolation.</li>\n<li>It doesn't need to be explicitly checked out. Because it implicitly does a <code>git merge</code>.</li>\n<li>The merging step will affect your local development and <em>may</em> cause conflicts</li>\n<li>It's basically NOT safe. It's aggressive.</li>\n<li>Unlike <code>git fetch</code> where it only affects your <code>.git/refs/remotes</code>, git pull will affect both your <code>.git/refs/remotes</code> <strong>and</strong> <code>.git/refs/heads/</code></li>\n</ul>\n<hr>\n<p><strong>Hmmm...so if I'm not updating the working copy with <code>git fetch</code>, then where am I making changes? Where does Git fetch store the new commits?</strong></p>\n<p>Great question. First and foremost, the <code>heads</code> or <code>remotes</code> don't store the new commits. They just have <a href=\"https://stackoverflow.com/questions/3965676/why-did-my-git-repo-enter-a-detached-head-state/65847406#65847406\">pointers</a> to commits. So with <code>git fetch</code> you download the latest <a href=\"https://matthew-brett.github.io/curious-git/git_object_types.html\" rel=\"nofollow noreferrer\">git objects</a> (blob, tree, commits. To fully understand the objects watch <a href=\"https://www.youtube.com/watch?v=lG90LZotrpo0f\" rel=\"nofollow noreferrer\">this video on git internals</a>), but only update your <code>remotes</code> pointer to point to the latest commit of that branch.  It's still isolated from your working copy, because your branch's pointer in the <code>heads</code> directory hasn't updated. It will only update upon a <code>merge</code>/<code>pull</code>. But again where? Let's find out.</p>\n<p>In your project directory (i.e., where you do your <code>git</code> commands) do:</p>\n<ol>\n<li><p><code>ls</code>. This will show the files &amp; directories. Nothing cool, I know.</p>\n</li>\n<li><p>Now do <code>ls -a</code>. This will show <a href=\"https://unix.stackexchange.com/questions/21778/whats-so-special-about-directories-whose-names-begin-with-a-dot\">dot files</a>, i.e., files beginning with <code>.</code> You will then be able to see a directory named: <code>.git</code>.</p>\n</li>\n<li><p>Do <code>cd .git</code>. This will obviously change your directory.</p>\n</li>\n<li><p>Now comes the fun part; do <code>ls</code>. You will see a list of directories. We're looking for <code>refs</code>. Do <code>cd refs</code>.</p>\n</li>\n<li><p>It's interesting to see what's inside all directories, but let's focus on two of them. <code>heads</code> and <code>remotes</code>. Use <code>cd</code> to check inside them too.</p>\n</li>\n<li><p><em>Any</em> <code>git fetch</code> that you do will update the pointer in the <code>/.git/refs/remotes</code> directory. It won't update anything in the <code>/.git/refs/heads</code> directory.</p>\n</li>\n<li><p><em>Any</em> <code>git pull</code> will first do the <code>git fetch</code>, update items in the <code>/.git/refs/remotes</code> directory, then merge with your local and then change the head inside the <code>/.git/refs/heads</code> directory.</p>\n</li>\n</ol>\n<hr>\n<p>A very good related answer can also be found in <em><a href=\"https://stackoverflow.com/questions/27554859/where-does-git-fetch-place-itself/27555444#27555444\">Where does 'git fetch' place itself?</a></em>.</p>\n<p>Also, look for \"Slash notation\" from the <a href=\"http://www.guyroutledge.co.uk/blog/git-branch-naming-conventions/\" rel=\"nofollow noreferrer\">Git branch naming conventions</a> post. It helps you better understand how Git places things in different directories.</p>\n<hr>\n<h2>To see the actual difference</h2>\n<p>Just do:</p>\n<pre><code>git fetch origin master\ngit checkout master\n</code></pre>\n<p>If the remote master was updated you'll get a message like this:</p>\n<pre><code>Your branch is behind 'origin/master' by 2 commits, and can be fast-forwarded.\n  (use \"git pull\" to update your local branch)\n</code></pre>\n<p>If you didn't <code>fetch</code> and just did <code>git checkout master</code> then your local git wouldn't know that there are 2 commits added. And it would just say:</p>\n<pre><code>Already on 'master'\nYour branch is up to date with 'origin/master'.\n</code></pre>\n<p>But that's outdated and incorrect. It's because git will give you feedback solely based on what it knows. It's oblivious to new commits that it hasn't pulled down yet...</p>\n<hr>\n<h2>Is there any way to see the new changes made in remote while working on the branch locally?</h2>\n<p>Some IDEs (e.g. Xcode) are super smart and use the result of a <code>git fetch</code> and can annotate the lines of code that have been changed in remote branch of your current working branch. If that line has been changed by both local changes and remote branch, then that line gets annotated with red. This isn't a merge conflict. It's a <em>potential</em> merge conflict. It's a headsup that you can use to resolve the future merge conflict before doing <code>git pull</code> from the remote branch.</p>\n<p><a href=\"https://i.stack.imgur.com/OEl72.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/OEl72.png\" alt=\"enter image description here\"></a></p>\n<hr>\n<h2>Fun tip:</h2>\n<p>If you fetched a remote branch e.g. did:</p>\n<pre><code>git fetch origin feature/123\n</code></pre>\n<p>Then this would go into your remotes directory. It's still not available to your local directory. However, it simplifies your checkout to that remote branch by DWIM (Do what I mean):</p>\n<pre><code>git checkout feature/123\n</code></pre>\n<p>you no longer need to do:</p>\n<pre><code>git checkout -b feature/123 origin/feature/123\n</code></pre>\n<p>For more on that read <a href=\"https://stackoverflow.com/a/56464547/5175709\">here</a></p>\n    </div>",
          "vote": "75"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The only difference between <code>git pull</code> and <code>git fetch</code> is that :</p>\n\n<p><code>git pull</code> pulls from a remote branch and merges it.</p>\n\n<p><code>git fetch</code> only fetches from the remote branch but it does not merge</p>\n\n<p>i.e. git pull = git fetch + git merge ...</p>\n    </div>",
          "vote": "51"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Git allows chronologically older commits to be applied after newer commits.\nBecause of this, the act of transferring commits between repositories is split into two steps:</p>\n\n<ol>\n<li><p>Copying new commits from remote branch to copy of this remote branch inside local repo.  </p>\n\n<p>(repo to repo operation) <code>master@remote &gt;&gt; remote/origin/master@local</code></p></li>\n<li><p>Integrating new commits to local branch</p>\n\n<p>(inside-repo operation) <code>remote/origin/master@local &gt;&gt; master@local</code></p></li>\n</ol>\n\n<p>There are two ways of doing step 2. You can:</p>\n\n<ol>\n<li>Fork local branch after last common ancestor and add new commits parallel to commits which are unique to local repository, finalized by merging commit, closing the fork. </li>\n<li>Insert new commits after last common ancestor and reapply commits unique to local repository.</li>\n</ol>\n\n<p>In <code>git</code> terminology, step 1 is <code>git fetch</code>, step 2 is <code>git merge</code> or <code>git rebase</code></p>\n\n<p><code>git pull</code> is <code>git fetch</code> and <code>git merge</code></p>\n    </div>",
          "vote": "44"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Git obtains the branch of the latest version from the remote to the local using two commands: </p>\n\n<ol>\n<li><p>git fetch: Git is going to get the latest version from remote to local,  but it do not automatically merge.\n&nbsp;&nbsp;&nbsp;&nbsp;\n<code>git fetch origin master</code>\n<code>git log -p master..origin/master</code>\n<code>git merge origin/master</code></p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp; The commands above mean that download latest version of the main branch from origin from the remote to origin master branch. And then compares the local master branch and origin master branch. Finally, merge. </p></li>\n<li><p>git pull: Git is going to get the latest version from the remote and merge into the local.</p>\n\n<p>&nbsp;&nbsp;&nbsp;\n<code>git pull origin master</code></p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp; The command above is the equivalent to <code>git fetch</code> and <code>git merge</code>. In practice, <code>git fetch</code> maybe more secure because before the merge we can see the changes and decide whether to merge.</p></li>\n</ol>\n    </div>",
          "vote": "37"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>What is the difference between <code>git pull</code> and <code>git fetch</code>?</p>\n</blockquote>\n\n<p>To understand this, you first need to understand that your local git maintains not only your local repository, but it also maintains a local copy of the remote repository.</p>\n\n<p><code>git fetch</code> brings your local copy of the remote repository up to date. For example, if your remote repository is GitHub - you may want to fetch any changes made in the remote repository to your local copy of it the remote repository. This will allow you to perform operations such as compare or merge.</p>\n\n<p><code>git pull</code> on the other hand will bring down the changes in the remote repository to where you keep your own code. Typically, <code>git pull</code> will do a <code>git fetch</code> first to bring the local copy of the remote repository up to date, and then it will merge the changes into your own code repository and possibly your working copy. </p>\n    </div>",
          "vote": "37"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>git pull == ( git fetch + git merge) </p>\n\n<p>git fetch does not changes to local branches.</p>\n\n<p>If you already have a local repository with a remote set up for the desired project, you can grab all branches and tags for the existing remote using git fetch . ... Fetch does not make any changes to local branches, so you will need to merge a remote branch with a paired local branch to incorporate newly fetch changes. <a href=\"https://help.github.com/articles/fetching-a-remote\">from github</a></p>\n    </div>",
          "vote": "35"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Trying to be clear and simple.</p>\n\n<p>The <strong>git pull</strong> command is actually a <code>shortcut</code> for <strong>git fetch</strong> followed by the <strong>git merge</strong> or the <strong>git rebase</strong> command depending on your configuration. You can configure your Git repository so that <strong>git pull</strong> is a fetch followed by a rebase.</p>\n    </div>",
          "vote": "35"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A simple Graphical Representation for Beginners,</p>\n\n<p><a href=\"https://i.stack.imgur.com/fEvk2.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/fEvk2.jpg\" alt=\"enter image description here\"></a></p>\n\n<p>here,</p>\n\n<pre><code>git pull  \n</code></pre>\n\n<p>will fetch code from repository and rebase with your local... in git pull there is possibility of new commits getting created.</p>\n\n<p>but in , </p>\n\n<p>git fetch </p>\n\n<p>will fetch code from repository and we need to rebase it manually by using <code>git rebase</code></p>\n\n<p>eg: i am going to fetch from server master and rebase it in my local master.</p>\n\n<p>1) git pull ( rebase will done automatically):</p>\n\n<pre><code>git pull origin master\n</code></pre>\n\n<p>here <strong>origin</strong> is your remote repo <strong>master</strong> is your branch</p>\n\n<p>2) git fetch (need to rebase manually):</p>\n\n<pre><code>git fetch origin master\n</code></pre>\n\n<p>it will fetch server changes from origin. and it will be in your local until you rebase it on your own. we need to fix conflicts manually by checking codes.</p>\n\n<pre><code>git rebase origin/master\n</code></pre>\n\n<p>this will rebase code into local. before that ensure you're in right branch.</p>\n    </div>",
          "vote": "35"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Actually Git maintains a copy of your own code and \nthe remote repository.</p>\n\n<p>The command <code>git fetch</code> makes your local copy up to date by getting data from remote repository. The reason we need this is because somebody else might have made some changes to the code and you want to keep yourself updated.  </p>\n\n<p>The command <code>git pull</code> brings the changes in the remote repository to where you keep your own code. Normally, <code>git pull</code> does this by doing a ‘git fetch’ first to bring the local copy of the remote repository up to date, and then it merges the changes into your own code repository and possibly your working copy.</p>\n    </div>",
          "vote": "34"
        }
      ]
    },
    {
      "question": "What does the “yield” keyword do?",
      "url": "https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Want to improve this post?</b> Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n</aside>\n\n    </div>\n\n<p>What is the use of the <code>yield</code> keyword in Python, and what does it do?</p>\n\n<p>For example, I'm trying to understand this code<sup><strong>1</strong></sup>:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">_get_child_candidates</span>(<span class=\"hljs-params\">self, distance, min_dist, max_dist</span>):</span>\n    <span class=\"hljs-keyword\">if</span> self._leftchild <span class=\"hljs-keyword\">and</span> distance - max_dist &lt; self._median:\n        <span class=\"hljs-keyword\">yield</span> self._leftchild\n    <span class=\"hljs-keyword\">if</span> self._rightchild <span class=\"hljs-keyword\">and</span> distance + max_dist &gt;= self._median:\n        <span class=\"hljs-keyword\">yield</span> self._rightchild  \n</code></pre>\n\n<p>And this is the caller:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>result, candidates = [], [self]\n<span class=\"hljs-keyword\">while</span> candidates:\n    node = candidates.pop()\n    distance = node._get_dist(obj)\n    <span class=\"hljs-keyword\">if</span> distance &lt;= max_dist <span class=\"hljs-keyword\">and</span> distance &gt;= min_dist:\n        result.extend(node._values)\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\n<span class=\"hljs-keyword\">return</span> result\n</code></pre>\n\n<p>What happens when the method <code>_get_child_candidates</code> is called?\nIs a list returned? A single element? Is it called again? When will subsequent calls stop?</p>\n\n<hr>\n\n<p><sub>\n1. This piece of code was written by Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: <a href=\"http://well-adjusted.de/~jrschulz/mspace/\" rel=\"noreferrer\">Module mspace</a>.</sub></p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before you can understand generators, you must understand <em>iterables</em>.</p>\n<h2>Iterables</h2>\n<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>mylist = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> mylist:\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-built_in\">print</span>(i)\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n</code></pre>\n<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>mylist = [x*x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">3</span>)]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> mylist:\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-built_in\">print</span>(i)\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">4</span>\n</code></pre>\n<p>Everything you can use \"<code>for... in...</code>\" on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>\n<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>\n<h2>Generators</h2>\n<p>Generators are iterators, a kind of iterable <strong>you can only iterate over once</strong>. Generators do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>mygenerator = (x*x <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">3</span>))\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> mygenerator:\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-built_in\">print</span>(i)\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">4</span>\n</code></pre>\n<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>\n<h2>Yield</h2>\n<p><code>yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create_generator</span>():</span>\n<span class=\"hljs-meta\">... </span>   mylist = <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">3</span>)\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> mylist:\n<span class=\"hljs-meta\">... </span>       <span class=\"hljs-keyword\">yield</span> i*i\n...\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>mygenerator = create_generator() <span class=\"hljs-comment\"># create a generator</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(mygenerator) <span class=\"hljs-comment\"># mygenerator is an object!</span>\n&lt;generator <span class=\"hljs-built_in\">object</span> create_generator at <span class=\"hljs-number\">0xb7555c34</span>&gt;\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> mygenerator:\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-built_in\">print</span>(i)\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">4</span>\n</code></pre>\n<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>\n<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky.</p>\n<p>Then, your code will continue from where it left off each time <code>for</code> uses the generator.</p>\n<p>Now the hard part:</p>\n<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each subsequent call will run another iteration of the loop you have written in the function and return the next value. This will continue until the generator is considered empty, which happens when the function runs without hitting <code>yield</code>. That can be because the loop has come to an end, or because you no longer satisfy an <code>\"if/else\"</code>.</p>\n<hr>\n<h2>Your code explained</h2>\n<p><em>Generator:</em></p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Here you create the method of the node object that will return the generator</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">_get_child_candidates</span>(<span class=\"hljs-params\">self, distance, min_dist, max_dist</span>):</span>\n\n    <span class=\"hljs-comment\"># Here is the code that will be called each time you use the generator object:</span>\n\n    <span class=\"hljs-comment\"># If there is still a child of the node object on its left</span>\n    <span class=\"hljs-comment\"># AND if the distance is ok, return the next child</span>\n    <span class=\"hljs-keyword\">if</span> self._leftchild <span class=\"hljs-keyword\">and</span> distance - max_dist &lt; self._median:\n        <span class=\"hljs-keyword\">yield</span> self._leftchild\n\n    <span class=\"hljs-comment\"># If there is still a child of the node object on its right</span>\n    <span class=\"hljs-comment\"># AND if the distance is ok, return the next child</span>\n    <span class=\"hljs-keyword\">if</span> self._rightchild <span class=\"hljs-keyword\">and</span> distance + max_dist &gt;= self._median:\n        <span class=\"hljs-keyword\">yield</span> self._rightchild\n\n    <span class=\"hljs-comment\"># If the function arrives here, the generator will be considered empty</span>\n    <span class=\"hljs-comment\"># there is no more than two values: the left and the right children</span>\n</code></pre>\n<p><em>Caller:</em></p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Create an empty list and a list with the current object reference</span>\nresult, candidates = <span class=\"hljs-built_in\">list</span>(), [self]\n\n<span class=\"hljs-comment\"># Loop on candidates (they contain only one element at the beginning)</span>\n<span class=\"hljs-keyword\">while</span> candidates:\n\n    <span class=\"hljs-comment\"># Get the last candidate and remove it from the list</span>\n    node = candidates.pop()\n\n    <span class=\"hljs-comment\"># Get the distance between obj and the candidate</span>\n    distance = node._get_dist(obj)\n\n    <span class=\"hljs-comment\"># If distance is ok, then you can fill the result</span>\n    <span class=\"hljs-keyword\">if</span> distance &lt;= max_dist <span class=\"hljs-keyword\">and</span> distance &gt;= min_dist:\n        result.extend(node._values)\n\n    <span class=\"hljs-comment\"># Add the children of the candidate in the candidate's list</span>\n    <span class=\"hljs-comment\"># so the loop will keep running until it will have looked</span>\n    <span class=\"hljs-comment\"># at all the children of the children of the children, etc. of the candidate</span>\n    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\n\n<span class=\"hljs-keyword\">return</span> result\n</code></pre>\n<p>This code contains several smart parts:</p>\n<ul>\n<li><p>The loop iterates on a list, but the list expands while the loop is being iterated. It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhaust all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p>\n</li>\n<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p>\n</li>\n</ul>\n<p>Usually we pass a list to it:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>b = [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a.extend(b)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(a)\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n</code></pre>\n<p>But in your code, it gets a generator, which is good because:</p>\n<ol>\n<li>You don't need to read the values twice.</li>\n<li>You may have a lot of children and you don't want them all stored in memory.</li>\n</ol>\n<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples, and generators! This is called duck typing and is one of the reasons why Python is so cool. But this is another story, for another question...</p>\n<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>\n<h2>Controlling a generator exhaustion</h2>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Bank</span>():</span> <span class=\"hljs-comment\"># Let's create a bank, building ATMs</span>\n<span class=\"hljs-meta\">... </span>   crisis = <span class=\"hljs-literal\">False</span>\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">create_atm</span>(<span class=\"hljs-params\">self</span>):</span>\n<span class=\"hljs-meta\">... </span>       <span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> self.crisis:\n<span class=\"hljs-meta\">... </span>           <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">\"$100\"</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>hsbc = Bank() <span class=\"hljs-comment\"># When everything's ok the ATM gives you as much as you want</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>corner_street_atm = hsbc.create_atm()\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(corner_street_atm.<span class=\"hljs-built_in\">next</span>())\n$<span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(corner_street_atm.<span class=\"hljs-built_in\">next</span>())\n$<span class=\"hljs-number\">100</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>([corner_street_atm.<span class=\"hljs-built_in\">next</span>() <span class=\"hljs-keyword\">for</span> cash <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>)])\n[<span class=\"hljs-string\">'$100'</span>, <span class=\"hljs-string\">'$100'</span>, <span class=\"hljs-string\">'$100'</span>, <span class=\"hljs-string\">'$100'</span>, <span class=\"hljs-string\">'$100'</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>hsbc.crisis = <span class=\"hljs-literal\">True</span> <span class=\"hljs-comment\"># Crisis is coming, no more money!</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(corner_street_atm.<span class=\"hljs-built_in\">next</span>())\n&lt;<span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">'exceptions.StopIteration'</span>&gt;\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>wall_street_atm = hsbc.create_atm() <span class=\"hljs-comment\"># It's even true for new ATMs</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(wall_street_atm.<span class=\"hljs-built_in\">next</span>())\n&lt;<span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">'exceptions.StopIteration'</span>&gt;\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>hsbc.crisis = <span class=\"hljs-literal\">False</span> <span class=\"hljs-comment\"># The trouble is, even post-crisis the ATM remains empty</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(corner_street_atm.<span class=\"hljs-built_in\">next</span>())\n&lt;<span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">'exceptions.StopIteration'</span>&gt;\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>brand_new_atm = hsbc.create_atm() <span class=\"hljs-comment\"># Build a new one to get back in business</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> cash <span class=\"hljs-keyword\">in</span> brand_new_atm:\n<span class=\"hljs-meta\">... </span>   <span class=\"hljs-built_in\">print</span> cash\n$<span class=\"hljs-number\">100</span>\n$<span class=\"hljs-number\">100</span>\n$<span class=\"hljs-number\">100</span>\n$<span class=\"hljs-number\">100</span>\n$<span class=\"hljs-number\">100</span>\n$<span class=\"hljs-number\">100</span>\n$<span class=\"hljs-number\">100</span>\n$<span class=\"hljs-number\">100</span>\n$<span class=\"hljs-number\">100</span>\n...\n</code></pre>\n<p><strong>Note:</strong> For Python 3, use<code>print(corner_street_atm.__next__())</code> or <code>print(next(corner_street_atm))</code></p>\n<p>It can be useful for various things like controlling access to a resource.</p>\n<h2>Itertools, your best friend</h2>\n<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?\nChain two generators? Group values in a nested list with a one-liner? <code>Map / Zip</code> without creating another list?</p>\n<p>Then just <code>import itertools</code>.</p>\n<p>An example? Let's see the possible orders of arrival for a four-horse race:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>horses = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>races = itertools.permutations(horses)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(races)\n&lt;itertools.permutations <span class=\"hljs-built_in\">object</span> at <span class=\"hljs-number\">0xb754f1dc</span>&gt;\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">list</span>(itertools.permutations(horses)))\n[(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>),\n (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>),\n (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>),\n (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>),\n (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>),\n (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>),\n (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>),\n (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>),\n (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>),\n (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>),\n (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>),\n (<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>),\n (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>),\n (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>),\n (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>),\n (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>),\n (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>),\n (<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>),\n (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>),\n (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>),\n (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>),\n (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>),\n (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>),\n (<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>)]\n</code></pre>\n<h2>Understanding the inner mechanisms of iteration</h2>\n<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).\nIterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>\n<p>There is more about it in this article about <a href=\"https://web.archive.org/web/20201109034340/http://effbot.org/zone/python-for-statement.htm\" rel=\"noreferrer\">how <code>for</code> loops work</a>.</p>\n    </div>",
          "vote": "15752"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Shortcut to understanding <code>yield</code></h2>\n\n<p>When you see a function with <code>yield</code> statements, apply this easy trick to understand what will happen:</p>\n\n<ol>\n<li>Insert a line <code>result = []</code> at the start of the function.</li>\n<li>Replace each <code>yield expr</code> with <code>result.append(expr)</code>.</li>\n<li>Insert a line <code>return result</code> at the bottom of the function.</li>\n<li>Yay - no more <code>yield</code> statements! Read and figure out code.</li>\n<li>Compare function to the original definition.</li>\n</ol>\n\n<p>This trick may give you an idea of the logic behind the function, but what actually happens with <code>yield</code> is significantly different than what happens in the list based approach. In many cases, the yield approach will be a lot more memory efficient and faster too. In other cases, this trick will get you stuck in an infinite loop, even though the original function works just fine. Read on to learn more...</p>\n\n<h2>Don't confuse your Iterables, Iterators, and Generators</h2>\n\n<p>First, the <strong>iterator protocol</strong> - when you write</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> mylist:\n    ...loop body...\n</code></pre>\n\n<p>Python performs the following two steps:</p>\n\n<ol>\n<li><p>Gets an iterator for <code>mylist</code>:</p>\n\n<p>Call <code>iter(mylist)</code> -&gt; this returns an object with a <code>next()</code> method (or <code>__next__()</code> in Python 3).</p>\n\n<p>[This is the step most people forget to tell you about]</p></li>\n<li><p>Uses the iterator to loop over items:</p>\n\n<p>Keep calling the <code>next()</code> method on the iterator returned from step 1. The return value from <code>next()</code> is assigned to <code>x</code> and the loop body is executed. If an exception <code>StopIteration</code> is raised from within <code>next()</code>, it means there are no more values in the iterator and the loop is exited.</p></li>\n</ol>\n\n<p>The truth is Python performs the above two steps anytime it wants to <em>loop over</em> the contents of an object - so it could be a for loop, but it could also be code like <code>otherlist.extend(mylist)</code> (where <code>otherlist</code> is a Python list).</p>\n\n<p>Here <code>mylist</code> is an <em>iterable</em> because it implements the iterator protocol. In a user-defined class, you can implement the <code>__iter__()</code> method to make instances of your class iterable. This method should return an <em>iterator</em>. An iterator is an object with a <code>next()</code> method. It is possible to implement both <code>__iter__()</code> and <code>next()</code> on the same class, and have <code>__iter__()</code> return <code>self</code>. This will work for simple cases, but not when you want two iterators looping over the same object at the same time.</p>\n\n<p>So that's the iterator protocol, many objects implement this protocol:</p>\n\n<ol>\n<li>Built-in lists, dictionaries, tuples, sets, files.</li>\n<li>User-defined classes that implement <code>__iter__()</code>.</li>\n<li>Generators.</li>\n</ol>\n\n<p>Note that a <code>for</code> loop doesn't know what kind of object it's dealing with - it just follows the iterator protocol, and is happy to get item after item as it calls <code>next()</code>. Built-in lists return their items one by one, dictionaries return the <em>keys</em> one by one, files return the <em>lines</em> one by one, etc. And generators return... well that's where <code>yield</code> comes in:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f123</span>():</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> f123():\n    <span class=\"hljs-built_in\">print</span> item\n</code></pre>\n\n<p>Instead of <code>yield</code> statements, if you had three <code>return</code> statements in <code>f123()</code> only the first would get executed, and the function would exit. But <code>f123()</code> is no ordinary function. When <code>f123()</code> is called, it <em>does not</em> return any of the values in the yield statements! It returns a generator object. Also, the function does not really exit - it goes into a suspended state. When the <code>for</code> loop tries to loop over the generator object, the function resumes from its suspended state at the very next line after the <code>yield</code> it previously returned from, executes the next line of code, in this case, a <code>yield</code> statement, and returns that as the next item. This happens until the function exits, at which point the generator raises <code>StopIteration</code>, and the loop exits. </p>\n\n<p>So the generator object is sort of like an adapter - at one end it exhibits the iterator protocol, by exposing <code>__iter__()</code> and <code>next()</code> methods to keep the <code>for</code> loop happy. At the other end, however, it runs the function just enough to get the next value out of it, and puts it back in suspended mode.</p>\n\n<h2>Why Use Generators?</h2>\n\n<p>Usually, you can write code that doesn't use generators but implements the same logic. One option is to use the temporary list 'trick' I mentioned before. That will not work in all cases, for e.g. if you have infinite loops, or it may make inefficient use of memory when you have a really long list. The other approach is to implement a new iterable class SomethingIter that keeps the state in instance members and performs the next logical step in it's <code>next()</code> (or <code>__next__()</code> in Python 3) method. Depending on the logic, the code inside the <code>next()</code> method may end up looking very complex and be prone to bugs. Here generators provide a clean and easy solution.</p>\n    </div>",
          "vote": "2173"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Think of it this way:</p>\n\n<p>An iterator is just a fancy sounding term for an object that has a <code>next()</code> method.  So a yield-ed function ends up being something like this:</p>\n\n<p>Original version:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">some_function</span>():</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> xrange(<span class=\"hljs-number\">4</span>):\n        <span class=\"hljs-keyword\">yield</span> i\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> some_function():\n    <span class=\"hljs-built_in\">print</span> i\n</code></pre>\n\n<p>This is basically what the Python interpreter does with the above code:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">it</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span>\n        <span class=\"hljs-comment\"># Start at -1 so that we get 0 when we add 1 below.</span>\n        self.count = -<span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-comment\"># The __iter__ method will be called once by the 'for' loop.</span>\n    <span class=\"hljs-comment\"># The rest of the magic happens on the object returned by this method.</span>\n    <span class=\"hljs-comment\"># In this case it is the object itself.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__iter__</span>(<span class=\"hljs-params\">self</span>):</span>\n        <span class=\"hljs-keyword\">return</span> self\n\n    <span class=\"hljs-comment\"># The next method will be called repeatedly by the 'for' loop</span>\n    <span class=\"hljs-comment\"># until it raises StopIteration.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">next</span>(<span class=\"hljs-params\">self</span>):</span>\n        self.count += <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">if</span> self.count &lt; <span class=\"hljs-number\">4</span>:\n            <span class=\"hljs-keyword\">return</span> self.count\n        <span class=\"hljs-keyword\">else</span>:\n            <span class=\"hljs-comment\"># A StopIteration exception is raised</span>\n            <span class=\"hljs-comment\"># to signal that the iterator is done.</span>\n            <span class=\"hljs-comment\"># This is caught implicitly by the 'for' loop.</span>\n            <span class=\"hljs-keyword\">raise</span> StopIteration\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">some_func</span>():</span>\n    <span class=\"hljs-keyword\">return</span> it()\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> some_func():\n    <span class=\"hljs-built_in\">print</span> i\n</code></pre>\n\n<p>For more insight as to what's happening behind the scenes, the <code>for</code> loop can be rewritten to this:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>iterator = some_func()\n<span class=\"hljs-keyword\">try</span>:\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-built_in\">print</span> iterator.<span class=\"hljs-built_in\">next</span>()\n<span class=\"hljs-keyword\">except</span> StopIteration:\n    <span class=\"hljs-keyword\">pass</span>\n</code></pre>\n\n<p>Does that make more sense or just confuse you more?  :)</p>\n\n<p>I should note that this <em>is</em> an oversimplification for illustrative purposes. :)</p>\n    </div>",
          "vote": "613"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>yield</code> keyword is reduced to two simple facts:</p>\n\n<ol>\n<li>If the compiler detects the <code>yield</code> keyword <em>anywhere</em> inside a function, that function no longer returns via the <code>return</code> statement. <strong><em>Instead</em></strong>, it <strong>immediately</strong> returns a <strong>lazy \"pending list\" object</strong> called a generator</li>\n<li>A generator is iterable. What is an <em>iterable</em>? It's anything like a <code>list</code> or <code>set</code> or <code>range</code> or dict-view, with a <em>built-in protocol for visiting each element in a certain order</em>.</li>\n</ol>\n\n<p>In a nutshell: <strong>a generator is a lazy, incrementally-pending list</strong>, and <strong><code>yield</code> statements allow you to use function notation to program the list values</strong> the generator should incrementally spit out.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>generator = myYieldingFunction(...)\nx = <span class=\"hljs-built_in\">list</span>(generator)\n\n   generator\n       v\n[x[<span class=\"hljs-number\">0</span>], ..., ???]\n\n         generator\n             v\n[x[<span class=\"hljs-number\">0</span>], x[<span class=\"hljs-number\">1</span>], ..., ???]\n\n               generator\n                   v\n[x[<span class=\"hljs-number\">0</span>], x[<span class=\"hljs-number\">1</span>], x[<span class=\"hljs-number\">2</span>], ..., ???]\n\n                       StopIteration exception\n[x[<span class=\"hljs-number\">0</span>], x[<span class=\"hljs-number\">1</span>], x[<span class=\"hljs-number\">2</span>]]     done\n\n<span class=\"hljs-built_in\">list</span>==[x[<span class=\"hljs-number\">0</span>], x[<span class=\"hljs-number\">1</span>], x[<span class=\"hljs-number\">2</span>]]\n</code></pre>\n\n<hr>\n\n<h2>Example</h2>\n\n<p>Let's define a function <code>makeRange</code> that's just like Python's <code>range</code>. Calling <code>makeRange(n)</code> RETURNS A GENERATOR:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">makeRange</span>(<span class=\"hljs-params\">n</span>):</span>\n    <span class=\"hljs-comment\"># return 0,1,2,...,n-1</span>\n    i = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> i &lt; n:\n        <span class=\"hljs-keyword\">yield</span> i\n        i += <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>makeRange(<span class=\"hljs-number\">5</span>)\n&lt;generator <span class=\"hljs-built_in\">object</span> makeRange at <span class=\"hljs-number\">0x19e4aa0</span>&gt;\n</code></pre>\n\n<p>To force the generator to immediately return its pending values, you can pass it into <code>list()</code> (just like you could any iterable):</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">list</span>(makeRange(<span class=\"hljs-number\">5</span>))\n[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n</code></pre>\n\n<hr>\n\n<h2>Comparing example to \"just returning a list\"</h2>\n\n<p>The above example can be thought of as merely creating a list which you append to and return:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># list-version                   #  # generator-version</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">makeRange</span>(<span class=\"hljs-params\">n</span>):</span>                <span class=\"hljs-comment\">#  def makeRange(n):</span>\n    <span class=\"hljs-string\">\"\"\"return [0,1,2,...,n-1]\"\"\"</span> <span class=\"hljs-comment\">#~     \"\"\"return 0,1,2,...,n-1\"\"\"</span>\n    TO_RETURN = []               <span class=\"hljs-comment\">#&gt;</span>\n    i = <span class=\"hljs-number\">0</span>                        <span class=\"hljs-comment\">#      i = 0</span>\n    <span class=\"hljs-keyword\">while</span> i &lt; n:                 <span class=\"hljs-comment\">#      while i &lt; n:</span>\n        TO_RETURN += [i]         <span class=\"hljs-comment\">#~         yield i</span>\n        i += <span class=\"hljs-number\">1</span>                   <span class=\"hljs-comment\">#          i += 1  ## indented</span>\n    <span class=\"hljs-keyword\">return</span> TO_RETURN             <span class=\"hljs-comment\">#&gt;</span>\n\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>makeRange(<span class=\"hljs-number\">5</span>)\n[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n</code></pre>\n\n<p>There is one major difference, though; see the last section.</p>\n\n<hr>\n\n<h2>How you might use generators</h2>\n\n<p>An iterable is the last part of a list comprehension, and all generators are iterable, so they're often used like so:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\">#                   _ITERABLE_</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>[x+<span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> makeRange(<span class=\"hljs-number\">5</span>)]\n[<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">11</span>, <span class=\"hljs-number\">12</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">14</span>]\n</code></pre>\n\n<p>To get a better feel for generators, you can play around with the <code>itertools</code> module (be sure to use <code>chain.from_iterable</code> rather than <code>chain</code> when warranted). For example, you might even use generators to implement infinitely-long lazy lists like <code>itertools.count()</code>. You could implement your own <code>def enumerate(iterable): zip(count(), iterable)</code>, or alternatively do so with the <code>yield</code> keyword in a while-loop.</p>\n\n<p>Please note: generators can actually be used for many more things, such as <a href=\"http://www.dabeaz.com/coroutines/index.html\" rel=\"noreferrer\">implementing coroutines</a> or non-deterministic programming or other elegant things. However, the \"lazy lists\" viewpoint I present here is the most common use you will find.</p>\n\n<hr>\n\n<h2>Behind the scenes</h2>\n\n<p>This is how the \"Python iteration protocol\" works. That is, what is going on when you do <code>list(makeRange(5))</code>. This is what I describe earlier as a \"lazy, incremental list\".</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>x=<span class=\"hljs-built_in\">iter</span>(<span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>))\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(x)\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(x)\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(x)\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(x)\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(x)\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(x)\nTraceback (most recent call last):\n  File <span class=\"hljs-string\">\"&lt;stdin&gt;\"</span>, line <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">in</span> &lt;module&gt;\nStopIteration\n</code></pre>\n\n<p>The built-in function <code>next()</code> just calls the objects <code>.next()</code> function, which is a part of the \"iteration protocol\" and is found on all iterators. You can manually use the <code>next()</code> function (and other parts of the iteration protocol) to implement fancy things, usually at the expense of readability, so try to avoid doing that...</p>\n\n<hr>\n\n<h2>Minutiae</h2>\n\n<p>Normally, most people would not care about the following distinctions and probably want to stop reading here.</p>\n\n<p>In Python-speak, an <em>iterable</em> is any object which \"understands the concept of a for-loop\" like a list <code>[1,2,3]</code>, and an <em>iterator</em> is a specific instance of the requested for-loop like <code>[1,2,3].__iter__()</code>. A <em>generator</em> is exactly the same as any iterator, except for the way it was written (with function syntax).</p>\n\n<p>When you request an iterator from a list, it creates a new iterator. However, when you request an iterator from an iterator (which you would rarely do), it just gives you a copy of itself.</p>\n\n<p>Thus, in the unlikely event that you are failing to do something like this...</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>&gt; x = myRange(<span class=\"hljs-number\">5</span>)\n&gt; <span class=\"hljs-built_in\">list</span>(x)\n[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n&gt; <span class=\"hljs-built_in\">list</span>(x)\n[]\n</code></pre>\n\n<p>... then remember that a generator is an <em>iterator</em>; that is, it is one-time-use. If you want to reuse it, you should call <code>myRange(...)</code> again. If you need to use the result twice, convert the result to a list and store it in a variable <code>x = list(myRange(5))</code>. Those who absolutely need to clone a generator (for example, who are doing terrifyingly hackish metaprogramming) can use <a href=\"https://docs.python.org/2/library/itertools.html#itertools.tee\" rel=\"noreferrer\"><code>itertools.tee</code></a> if absolutely necessary, since the copyable iterator Python <a href=\"http://en.wikipedia.org/wiki/Python_Enhancement_Proposal#Development\" rel=\"noreferrer\">PEP</a> standards proposal has been deferred.</p>\n    </div>",
          "vote": "497"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p><strong>What does the <code>yield</code> keyword do in Python?</strong></p>\n</blockquote>\n<h1>Answer Outline/Summary</h1>\n<ul>\n<li>A function with <a href=\"https://docs.python.org/reference/expressions.html#yieldexpr\" rel=\"noreferrer\"><strong><code>yield</code></strong></a>, when called, <strong>returns a <a href=\"https://docs.python.org/2/tutorial/classes.html#generators\" rel=\"noreferrer\">Generator</a>.</strong></li>\n<li>Generators are iterators because they implement the <a href=\"https://docs.python.org/2/library/stdtypes.html#iterator-types\" rel=\"noreferrer\"><strong>iterator protocol</strong></a>, so you can iterate over them.</li>\n<li>A generator can also be <strong>sent information</strong>, making it conceptually a <strong>coroutine</strong>.</li>\n<li>In Python 3, you can <strong>delegate</strong> from one generator to another in both directions with <strong><code>yield from</code></strong>.</li>\n<li>(Appendix critiques a couple of answers, including the top one, and discusses the use of <code>return</code> in a generator.)</li>\n</ul>\n<h1>Generators:</h1>\n<p><strong><code>yield</code></strong> is only legal inside of a function definition, and <strong>the inclusion of <code>yield</code> in a function definition makes it return a generator.</strong></p>\n<p>The idea for generators comes from other languages (see footnote 1) with varying implementations. In Python's Generators, the execution of the code is <a href=\"https://docs.python.org/3.5/glossary.html#term-generator-iterator\" rel=\"noreferrer\">frozen</a> at the point of the yield. When the generator is called (methods are discussed below) execution resumes and then freezes at the next yield.</p>\n<p><code>yield</code> provides an\neasy way of <a href=\"https://docs.python.org/2/library/stdtypes.html#generator-types\" rel=\"noreferrer\">implementing the iterator protocol</a>, defined by the following two methods:\n<code>__iter__</code> and <code>next</code> (Python 2) or <code>__next__</code> (Python 3).  Both of those methods\nmake an object an iterator that you could type-check with the <code>Iterator</code> Abstract Base\nClass from the <code>collections</code> module.</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>():</span>\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">'I am'</span>\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">'a generator!'</span>\n<span class=\"hljs-meta\">... </span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">type</span>(func)                 <span class=\"hljs-comment\"># A function with yield is still a function</span>\n&lt;<span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">'function'</span>&gt;\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>gen = func()\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">type</span>(gen)                  <span class=\"hljs-comment\"># but it returns a generator</span>\n&lt;<span class=\"hljs-built_in\">type</span> <span class=\"hljs-string\">'generator'</span>&gt;\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">hasattr</span>(gen, <span class=\"hljs-string\">'__iter__'</span>)   <span class=\"hljs-comment\"># that's an iterable</span>\n<span class=\"hljs-literal\">True</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">hasattr</span>(gen, <span class=\"hljs-string\">'next'</span>)       <span class=\"hljs-comment\"># and with .next (.__next__ in Python 3)</span>\n<span class=\"hljs-literal\">True</span>                           <span class=\"hljs-comment\"># implements the iterator protocol.</span>\n</code></pre>\n<p>The generator type is a sub-type of iterator:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">import</span> collections, types\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">issubclass</span>(types.GeneratorType, collections.Iterator)\n<span class=\"hljs-literal\">True</span>\n</code></pre>\n<p>And if necessary, we can type-check like this:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>(gen, types.GeneratorType)\n<span class=\"hljs-literal\">True</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">isinstance</span>(gen, collections.Iterator)\n<span class=\"hljs-literal\">True</span>\n</code></pre>\n<p>A feature of an <code>Iterator</code> <a href=\"https://docs.python.org/2/glossary.html#term-iterator\" rel=\"noreferrer\">is that once exhausted</a>, you can't reuse or reset it:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">list</span>(gen)\n[<span class=\"hljs-string\">'I am'</span>, <span class=\"hljs-string\">'a generator!'</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">list</span>(gen)\n[]\n</code></pre>\n<p>You'll have to make another if you want to use its functionality again (see footnote 2):</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">list</span>(func())\n[<span class=\"hljs-string\">'I am'</span>, <span class=\"hljs-string\">'a generator!'</span>]\n</code></pre>\n<p>One can yield data programmatically, for example:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">an_iterable</span>):</span>\n    <span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> an_iterable:\n        <span class=\"hljs-keyword\">yield</span> item\n</code></pre>\n<p>The above simple generator is also equivalent to the below - as of Python 3.3 (and not available in Python 2), you can use <a href=\"https://www.python.org/dev/peps/pep-0380/\" rel=\"noreferrer\"><code>yield from</code></a>:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\">an_iterable</span>):</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> an_iterable\n</code></pre>\n<p>However, <code>yield from</code> also allows for delegation to subgenerators,\nwhich will be explained in the following section on cooperative delegation with sub-coroutines.</p>\n<h1>Coroutines:</h1>\n<p><code>yield</code> forms an expression that allows data to be sent into the generator (see footnote 3)</p>\n<p>Here is an example, take note of the <code>received</code> variable, which will point to the data that is sent to the generator:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bank_account</span>(<span class=\"hljs-params\">deposited, interest_rate</span>):</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        calculated_interest = interest_rate * deposited \n        received = <span class=\"hljs-keyword\">yield</span> calculated_interest\n        <span class=\"hljs-keyword\">if</span> received:\n            deposited += received\n\n\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>my_account = bank_account(<span class=\"hljs-number\">1000</span>, <span class=\"hljs-number\">.05</span>)\n</code></pre>\n<p>First, we must queue up the generator with the builtin function, <a href=\"https://docs.python.org/2/library/functions.html#next\" rel=\"noreferrer\"><code>next</code></a>. It will\ncall the appropriate <code>next</code> or <code>__next__</code> method, depending on the version of\nPython you are using:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>first_year_interest = <span class=\"hljs-built_in\">next</span>(my_account)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>first_year_interest\n<span class=\"hljs-number\">50.0</span>\n</code></pre>\n<p>And now we can send data into the generator. (<a href=\"https://www.python.org/dev/peps/pep-0342/#specification-sending-values-into-generators\" rel=\"noreferrer\">Sending <code>None</code> is\nthe same as calling <code>next</code></a>.) :</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>next_year_interest = my_account.send(first_year_interest + <span class=\"hljs-number\">1000</span>)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>next_year_interest\n<span class=\"hljs-number\">102.5</span>\n</code></pre>\n<h2>Cooperative Delegation to Sub-Coroutine with <code>yield from</code></h2>\n<p>Now, recall that <code>yield from</code> is available in Python 3. This allows us to delegate coroutines to a subcoroutine:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">money_manager</span>(<span class=\"hljs-params\">expected_rate</span>):</span>\n    <span class=\"hljs-comment\"># must receive deposited value from .send():</span>\n    under_management = <span class=\"hljs-keyword\">yield</span>                   <span class=\"hljs-comment\"># yield None to start.</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        <span class=\"hljs-keyword\">try</span>:\n            additional_investment = <span class=\"hljs-keyword\">yield</span> expected_rate * under_management \n            <span class=\"hljs-keyword\">if</span> additional_investment:\n                under_management += additional_investment\n        <span class=\"hljs-keyword\">except</span> GeneratorExit:\n            <span class=\"hljs-string\">'''TODO: write function to send unclaimed funds to state'''</span>\n            <span class=\"hljs-keyword\">raise</span>\n        <span class=\"hljs-keyword\">finally</span>:\n            <span class=\"hljs-string\">'''TODO: write function to mail tax info to client'''</span>\n        \n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">investment_account</span>(<span class=\"hljs-params\">deposited, manager</span>):</span>\n    <span class=\"hljs-string\">'''very simple model of an investment account that delegates to a manager'''</span>\n    <span class=\"hljs-comment\"># must queue up manager:</span>\n    <span class=\"hljs-built_in\">next</span>(manager)      <span class=\"hljs-comment\"># &lt;- same as manager.send(None)</span>\n    <span class=\"hljs-comment\"># This is where we send the initial deposit to the manager:</span>\n    manager.send(deposited)\n    <span class=\"hljs-keyword\">try</span>:\n        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> manager\n    <span class=\"hljs-keyword\">except</span> GeneratorExit:\n        <span class=\"hljs-keyword\">return</span> manager.close()  <span class=\"hljs-comment\"># delegate?</span>\n</code></pre>\n<p>And now we can delegate functionality to a sub-generator and it can be used\nby a generator just as above:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>my_manager = money_manager(<span class=\"hljs-number\">.06</span>)\nmy_account = investment_account(<span class=\"hljs-number\">1000</span>, my_manager)\nfirst_year_return = <span class=\"hljs-built_in\">next</span>(my_account) <span class=\"hljs-comment\"># -&gt; 60.0</span>\n</code></pre>\n<p>Now simulate adding another 1,000 to the account plus the return on the account (60.0):</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>next_year_return = my_account.send(first_year_return + <span class=\"hljs-number\">1000</span>)\nnext_year_return <span class=\"hljs-comment\"># 123.6</span>\n</code></pre>\n<p>You can read more about the precise semantics of <code>yield from</code> in <a href=\"https://www.python.org/dev/peps/pep-0380/#formal-semantics\" rel=\"noreferrer\">PEP 380.</a></p>\n<h2>Other Methods: close and throw</h2>\n<p>The <code>close</code> method raises <code>GeneratorExit</code> at the point the function\nexecution was frozen. This will also be called by <code>__del__</code> so you\ncan put any cleanup code where you handle the <code>GeneratorExit</code>:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>my_account.close()\n</code></pre>\n<p>You can also throw an exception which can be handled in the generator\nor propagated back to the user:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">import</span> sys\n<span class=\"hljs-keyword\">try</span>:\n    <span class=\"hljs-keyword\">raise</span> ValueError\n<span class=\"hljs-keyword\">except</span>:\n    my_manager.throw(*sys.exc_info())\n</code></pre>\n<p>Raises:</p>\n<pre class=\"lang-none s-code-block\"><code>Traceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 4, in &lt;module&gt;\n  File \"&lt;stdin&gt;\", line 6, in money_manager\n  File \"&lt;stdin&gt;\", line 2, in &lt;module&gt;\nValueError\n</code></pre>\n<h1>Conclusion</h1>\n<p>I believe I have covered all aspects of the following question:</p>\n<blockquote>\n<p><strong>What does the <code>yield</code> keyword do in Python?</strong></p>\n</blockquote>\n<p>It turns out that <code>yield</code> does a lot. I'm sure I could add even more\nthorough examples to this. If you want more or have some constructive criticism, let me know by commenting\nbelow.</p>\n<hr>\n<h1>Appendix:</h1>\n<h2>Critique of the Top/Accepted Answer**</h2>\n<ul>\n<li>It is confused on what makes an <strong>iterable</strong>, just using a list as an example. See my references above, but in summary: an iterable has an <code>__iter__</code> method returning an <strong>iterator</strong>. An <strong>iterator</strong> provides a <code>.next</code> (Python 2 or <code>.__next__</code> (Python 3) method, which is implicitly called by <code>for</code> loops until it raises <code>StopIteration</code>, and once it does, it will continue to do so.</li>\n<li>It then uses a generator expression to describe what a generator is. Since a generator is simply a convenient way to create an <strong>iterator</strong>, it only confuses the matter, and we still have not yet gotten to the <code>yield</code> part.</li>\n<li>In <strong>Controlling a generator exhaustion</strong> he calls the <code>.next</code> method, when instead he should use the builtin function, <code>next</code>. It would be an appropriate layer of indirection, because his code does not work in Python 3.</li>\n<li>Itertools? This was not relevant to what <code>yield</code> does at all.</li>\n<li>No discussion of the methods that <code>yield</code> provides along with the new functionality <code>yield from</code> in Python 3. <strong>The top/accepted answer is a very incomplete answer.</strong></li>\n</ul>\n<h2>Critique of answer suggesting <code>yield</code> in a generator expression or comprehension.</h2>\n<p>The grammar currently allows any expression in a list comprehension.</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>expr_stmt: testlist_star_expr (annassign | augassign (yield_expr|testlist) |\n                     (<span class=\"hljs-string\">'='</span> (yield_expr|testlist_star_expr))*)\n...\nyield_expr: <span class=\"hljs-string\">'yield'</span> [yield_arg]\nyield_arg: <span class=\"hljs-string\">'from'</span> test | testlist\n</code></pre>\n<p>Since yield is an expression, it has been touted by some as interesting to use it in comprehensions or generator expression - in spite of citing no particularly good use-case.</p>\n<p>The CPython core developers are <a href=\"https://mail.python.org/pipermail/python-dev/2017-January/147301.html\" rel=\"noreferrer\">discussing deprecating its allowance</a>.\nHere's a relevant post from the mailing list:</p>\n<blockquote>\n<p>On 30 January 2017 at 19:05, Brett Cannon  wrote:</p>\n<blockquote>\n<p>On Sun, 29 Jan 2017 at 16:39 Craig Rodrigues  wrote:</p>\n<blockquote>\n<p>I'm OK with either approach.  Leaving things the way they are in Python 3\nis no good, IMHO.</p>\n</blockquote>\n<p>My vote is it be a SyntaxError since you're not getting what you expect from\nthe syntax.</p>\n</blockquote>\n<p>I'd agree that's a sensible place for us to end up, as any code\nrelying on the current behaviour is really too clever to be\nmaintainable.</p>\n<p>In terms of getting there, we'll likely want:</p>\n<ul>\n<li>SyntaxWarning or DeprecationWarning in 3.7</li>\n<li>Py3k warning in 2.7.x</li>\n<li>SyntaxError in 3.8</li>\n</ul>\n<p>Cheers, Nick.</p>\n<p>--  Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, Australia</p>\n</blockquote>\n<p>Further, there is an <a href=\"http://bugs.python.org/issue10544\" rel=\"noreferrer\">outstanding issue (10544)</a> which seems to be pointing in the direction of this <em>never</em> being a good idea (PyPy, a Python implementation written in Python, is already raising syntax warnings.)</p>\n<p>Bottom line, until the developers of CPython tell us otherwise: <strong>Don't put <code>yield</code> in a generator expression or comprehension.</strong></p>\n<h2>The <code>return</code> statement in a generator</h2>\n<p>In <a href=\"https://docs.python.org/2/reference/simple_stmts.html#the-return-statement\" rel=\"noreferrer\">Python 2</a>:</p>\n<blockquote>\n<p>In a generator function, the <code>return</code> statement is not allowed to include an <code>expression_list</code>. In that context, a bare <code>return</code> indicates that the generator is done and will cause <code>StopIteration</code> to be raised.</p>\n</blockquote>\n<p>An <code>expression_list</code> is basically any number of expressions separated by commas - essentially, in Python 2, you can stop the generator with <code>return</code>, but you can't return a value.</p>\n<p>In <a href=\"https://docs.python.org/3/reference/simple_stmts.html#the-return-statement\" rel=\"noreferrer\">Python 3</a>:</p>\n<blockquote>\n<p>In a generator function, the <code>return</code> statement indicates that the generator is done and will cause <code>StopIteration</code> to be raised. The returned value (if any) is used as an argument to construct <code>StopIteration</code> and becomes the <code>StopIteration.value</code> attribute.</p>\n</blockquote>\n<h2>Footnotes</h2>\n<ol>\n<li><p><sub>The languages CLU, Sather, and Icon were referenced in the proposal\nto introduce the concept of generators to Python. The general idea is\nthat a function can maintain internal state and yield intermediate\ndata points on demand by the user. This promised to be <a href=\"https://www.python.org/dev/peps/pep-0255/\" rel=\"noreferrer\">superior in performance\nto other approaches, including Python threading</a>, which isn't even available on some systems.</sub></p>\n</li>\n<li><p><sub> This means, for example, that <code>range</code> objects aren't <code>Iterator</code>s, even though they are iterable, because they can be reused. Like lists, their <code>__iter__</code> methods return iterator objects.</sub></p>\n</li>\n<li><sub> \n</sub></li>\n</ol>\n<p><code>yield</code> was originally introduced as a statement, meaning that it\ncould only appear at the beginning of a line in a code block.\nNow <code>yield</code> creates a yield expression.\n<a href=\"https://docs.python.org/2/reference/simple_stmts.html#grammar-token-yield_stmt\" rel=\"noreferrer\">https://docs.python.org/2/reference/simple_stmts.html#grammar-token-yield_stmt</a>\nThis change was <a href=\"https://www.python.org/dev/peps/pep-0342/#specification-sending-values-into-generators\" rel=\"noreferrer\">proposed</a> to allow a user to send data into the generator just as\none might receive it. To send data, one must be able to assign it to something, and\nfor that, a statement just won't work.</p>\n    </div>",
          "vote": "438"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>yield</code> is just like <code>return</code> - it returns whatever you tell it to (as a generator). The difference is that the next time you call the generator, execution starts from the last call to the <code>yield</code> statement. Unlike return, <strong>the stack frame is not cleaned up when a yield occurs, however control is transferred back to the caller, so its state will resume the next time the function is called.</strong></p>\n\n<p>In the case of your code, the function <code>get_child_candidates</code> is acting like an iterator so that when you extend your list, it adds one element at a time to the new list.</p>\n\n<p><code>list.extend</code> calls an iterator until it's exhausted. In the case of the code sample you posted, it would be much clearer to just return a tuple and append that to the list.</p>\n    </div>",
          "vote": "364"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There's one extra thing to mention: a function that yields doesn't actually have to terminate. I've written code like this:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fib</span>():</span>\n    last, cur = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>: \n        <span class=\"hljs-keyword\">yield</span> cur\n        last, cur = cur, last + cur\n</code></pre>\n\n<p>Then I can use it in other code like this:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">for</span> f <span class=\"hljs-keyword\">in</span> fib():\n    <span class=\"hljs-keyword\">if</span> some_condition: <span class=\"hljs-keyword\">break</span>\n    coolfuncs(f);\n</code></pre>\n\n<p>It really helps simplify some problems, and makes some things easier to work with. </p>\n    </div>",
          "vote": "265"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For those who prefer a minimal working example, meditate on this interactive Python session:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span>():</span>\n<span class=\"hljs-meta\">... </span>  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">... </span>  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">... </span>  <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">3</span>\n<span class=\"hljs-meta\">... </span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>g = f()\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> g:\n<span class=\"hljs-meta\">... </span>  <span class=\"hljs-built_in\">print</span>(i)\n<span class=\"hljs-meta\">... </span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> g:\n<span class=\"hljs-meta\">... </span>  <span class=\"hljs-built_in\">print</span>(i)\n<span class=\"hljs-meta\">... </span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-comment\"># Note that this time nothing was printed</span>\n</code></pre>\n    </div>",
          "vote": "260"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>TL;DR</strong></p>\n\n<h1>Instead of this:</h1>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">square_list</span>(<span class=\"hljs-params\">n</span>):</span>\n    the_list = []                         <span class=\"hljs-comment\"># Replace</span>\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n        y = x * x\n        the_list.append(y)                <span class=\"hljs-comment\"># these</span>\n    <span class=\"hljs-keyword\">return</span> the_list                       <span class=\"hljs-comment\"># lines</span>\n</code></pre>\n\n<h1>do this:</h1>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">square_yield</span>(<span class=\"hljs-params\">n</span>):</span>\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n        y = x * x\n        <span class=\"hljs-keyword\">yield</span> y                           <span class=\"hljs-comment\"># with this one.</span>\n</code></pre>\n\n<p>Whenever you find yourself building a list from scratch, <code>yield</code> each piece instead. </p>\n\n<p>This was my first \"aha\" moment with yield.</p>\n\n<hr>\n\n<p><code>yield</code> is a <a href=\"https://en.wikipedia.org/wiki/Syntactic_sugar\" rel=\"noreferrer\">sugary</a> way to say </p>\n\n<blockquote>\n  <p>build a series of stuff</p>\n</blockquote>\n\n<p>Same behavior:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> square <span class=\"hljs-keyword\">in</span> square_list(<span class=\"hljs-number\">4</span>):\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-built_in\">print</span>(square)\n...\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">9</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> square <span class=\"hljs-keyword\">in</span> square_yield(<span class=\"hljs-number\">4</span>):\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-built_in\">print</span>(square)\n...\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">9</span>\n</code></pre>\n\n<p>Different behavior:</p>\n\n<p>Yield is <strong>single-pass</strong>: you can only iterate through once. When a function has a yield in it we call it a <a href=\"https://stackoverflow.com/a/1756342/673991\">generator function</a>. And an <a href=\"https://stackoverflow.com/a/9884501/673991\">iterator</a> is what it returns. Those terms are revealing. We lose the convenience of a container, but gain the power of a series that's computed as needed, and arbitrarily long.</p>\n\n<p>Yield is <strong>lazy</strong>, it puts off computation. A function with a yield in it <em>doesn't actually execute at all when you call it.</em> It returns an <a href=\"https://docs.python.org/3/reference/expressions.html#yieldexpr\" rel=\"noreferrer\">iterator object</a> that remembers where it left off. Each time you call <code>next()</code> on the iterator (this happens in a for-loop) execution inches forward to the next yield. <code>return</code> raises StopIteration and ends the series (this is the natural end of a for-loop).</p>\n\n<p>Yield is <strong>versatile</strong>. Data doesn't have to be stored all together, it can be made available one at a time. It can be infinite.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">squares_all_of_them</span>():</span>\n<span class=\"hljs-meta\">... </span>    x = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n<span class=\"hljs-meta\">... </span>        <span class=\"hljs-keyword\">yield</span> x * x\n<span class=\"hljs-meta\">... </span>        x += <span class=\"hljs-number\">1</span>\n...\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>squares = squares_all_of_them()\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">4</span>):\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">next</span>(squares))\n...\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">4</span>\n<span class=\"hljs-number\">9</span>\n</code></pre>\n\n<hr>\n\n<p>If you need <strong>multiple passes</strong> and the series isn't too long, just call <code>list()</code> on it:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">list</span>(square_yield(<span class=\"hljs-number\">4</span>))\n[<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>]\n</code></pre>\n\n<hr>\n\n<p>Brilliant choice of the word <code>yield</code> because <a href=\"https://www.google.com/search?q=yield+meaning\" rel=\"noreferrer\">both meanings</a> apply:</p>\n\n<blockquote>\n  <p><strong>yield</strong> — produce or provide (as in agriculture)</p>\n</blockquote>\n\n<p>...provide the next data in the series.</p>\n\n<blockquote>\n  <p><strong>yield</strong> — give way or relinquish (as in political power)</p>\n</blockquote>\n\n<p>...relinquish CPU execution until the iterator advances.</p>\n    </div>",
          "vote": "234"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yield gives you a generator. </p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_odd_numbers</span>(<span class=\"hljs-params\">i</span>):</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, i, <span class=\"hljs-number\">2</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">yield_odd_numbers</span>(<span class=\"hljs-params\">i</span>):</span>\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, i, <span class=\"hljs-number\">2</span>):\n       <span class=\"hljs-keyword\">yield</span> x\nfoo = get_odd_numbers(<span class=\"hljs-number\">10</span>)\nbar = yield_odd_numbers(<span class=\"hljs-number\">10</span>)\nfoo\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">9</span>]\nbar\n&lt;generator <span class=\"hljs-built_in\">object</span> yield_odd_numbers at <span class=\"hljs-number\">0x1029c6f50</span>&gt;\nbar.<span class=\"hljs-built_in\">next</span>()\n<span class=\"hljs-number\">1</span>\nbar.<span class=\"hljs-built_in\">next</span>()\n<span class=\"hljs-number\">3</span>\nbar.<span class=\"hljs-built_in\">next</span>()\n<span class=\"hljs-number\">5</span>\n</code></pre>\n\n<p>As you can see, in the first case <code>foo</code> holds the entire list in memory at once. It's not a big deal for a list with 5 elements, but what if you want a list of 5 million? Not only is this a huge memory eater, it also costs a lot of time to build at the time that the function is called.</p>\n\n<p>In the second case, <code>bar</code> just gives you a generator. A generator is an iterable--which means you can use it in a <code>for</code> loop, etc, but each value can only be accessed once. All the values are also not stored in memory at the same time; the generator object \"remembers\" where it was in the looping the last time you called it--this way, if you're using an iterable to (say) count to 50 billion, you don't have to count to 50 billion all at once and store the 50 billion numbers to count through.</p>\n\n<p>Again, this is a pretty contrived example, you probably would use itertools if you really wanted to count to 50 billion. :)</p>\n\n<p>This is the most simple use case of generators. As you said, it can be used to write efficient permutations, using yield to push things up through the call stack instead of using some sort of stack variable. Generators can also be used for specialized tree traversal, and all manner of other things.</p>\n    </div>",
          "vote": "210"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's returning a generator. I'm not particularly familiar with Python, but I believe it's the same kind of thing as <a href=\"http://csharpindepth.com/Articles/Chapter11/StreamingAndIterators.aspx\" rel=\"noreferrer\">C#'s iterator blocks</a> if you're familiar with those.</p>\n\n<p>The key idea is that the compiler/interpreter/whatever does some trickery so that as far as the caller is concerned, they can keep calling next() and it will keep returning values - <em>as if the generator method was paused</em>. Now obviously you can't really \"pause\" a method, so the compiler builds a state machine for you to remember where you currently are and what the local variables etc look like. This is much easier than writing an iterator yourself.</p>\n    </div>",
          "vote": "206"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is one type of answer that I don't feel has been given yet, among the many great answers that describe how to use generators. Here is the programming language theory answer:</p>\n\n<p>The <code>yield</code> statement in Python returns a generator. A generator in Python is a function that returns <i>continuations</i> (and specifically a type of coroutine, but continuations represent the more general mechanism to understand what is going on).</p>\n\n<p>Continuations in programming languages theory are a much more fundamental kind of computation, but they are not often used, because they are extremely hard to reason about and also very difficult to implement. But the idea of what a continuation is, is straightforward: it is the state of a computation that has not yet finished. In this state, the current values of variables, the operations that have yet to be performed, and so on, are saved. Then at some point later in the program the continuation can be invoked, such that the program's variables are reset to that state and the operations that were saved are carried out.</p>\n\n<p>Continuations, in this more general form, can be implemented in two ways. In the <code>call/cc</code> way, the program's stack is literally saved and then when the continuation is invoked, the stack is restored.</p>\n\n<p>In continuation passing style (CPS), continuations are just normal functions (only in languages where functions are first class) which the programmer explicitly manages and passes around to subroutines. In this style, program state is represented by closures (and the variables that happen to be encoded in them) rather than variables that reside somewhere on the stack. Functions that manage control flow accept continuation as arguments (in some variations of CPS, functions may accept multiple continuations) and manipulate control flow by invoking them by simply calling them and returning afterwards. A very simple example of continuation passing style is as follows:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">save_file</span>(<span class=\"hljs-params\">filename</span>):</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">write_file_continuation</span>():</span>\n    write_stuff_to_file(filename)\n\n  check_if_file_exists_and_user_wants_to_overwrite(write_file_continuation)\n</code></pre>\n\n<p>In this (very simplistic) example, the programmer saves the operation of actually writing the file into a continuation (which can potentially be a very complex operation with many details to write out), and then passes that continuation (i.e, as a first-class closure) to another operator which does some more processing, and then calls it if necessary. (I use this design pattern a lot in actual GUI programming, either because it saves me lines of code or, more importantly, to manage control flow after GUI events trigger.)</p>\n\n<p>The rest of this post will, without loss of generality, conceptualize continuations as CPS, because it is a hell of a lot easier to understand and read.</p>\n\n<p><br></p>\n\n<p>Now let's talk about generators in Python. Generators are a specific subtype of continuation. Whereas <strong>continuations are able in general to save the state of a <em>computation</em></strong> (i.e., the program's call stack), <strong>generators are only able to save the state of iteration over an <em>iterator</em></strong>. Although, this definition is slightly misleading for certain use cases of generators. For instance:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f</span>():</span>\n  <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n\n<p>This is clearly a reasonable iterable whose behavior is well defined -- each time the generator iterates over it, it returns 4 (and does so forever). But it isn't probably the prototypical type of iterable that comes to mind when thinking of iterators (i.e., <code>for x in collection: do_something(x)</code>). This example illustrates the power of generators: if anything is an iterator, a generator can save the state of its iteration.</p>\n\n<p>To reiterate: Continuations can save the state of a program's stack and generators can save the state of iteration. This means that continuations are more a lot powerful than generators, but also that generators are a lot, lot easier. They are easier for the language designer to implement, and they are easier for the programmer to use (if you have some time to burn, try to read and understand <a href=\"http://www.madore.org/~david/computers/callcc.html\" rel=\"noreferrer\">this page about continuations and call/cc</a>).</p>\n\n<p>But you could easily implement (and conceptualize) generators as a simple, specific case of continuation passing style:</p>\n\n<p>Whenever <code>yield</code> is called, it tells the function to return a continuation.  When the function is called again, it starts from wherever it left off. So, in pseudo-pseudocode (i.e., not pseudocode, but not code) the generator's <code>next</code> method is basically as follows:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Generator</span>():</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self,iterable,generatorfun</span>):</span>\n    self.next_continuation = <span class=\"hljs-keyword\">lambda</span>:generatorfun(iterable)\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">next</span>(<span class=\"hljs-params\">self</span>):</span>\n    value, next_continuation = self.next_continuation()\n    self.next_continuation = next_continuation\n    <span class=\"hljs-keyword\">return</span> value\n</code></pre>\n\n<p>where the <code>yield</code> keyword is actually syntactic sugar for the real generator function, basically something like:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">generatorfun</span>(<span class=\"hljs-params\">iterable</span>):</span>\n  <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(iterable) == <span class=\"hljs-number\">0</span>:\n    <span class=\"hljs-keyword\">raise</span> StopIteration\n  <span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-keyword\">return</span> (iterable[<span class=\"hljs-number\">0</span>], <span class=\"hljs-keyword\">lambda</span>:generatorfun(iterable[<span class=\"hljs-number\">1</span>:]))\n</code></pre>\n\n<p>Remember that this is just pseudocode and the actual implementation of generators in Python is more complex. But as an exercise to understand what is going on, try to use continuation passing style to implement generator objects without use of the <code>yield</code> keyword.</p>\n    </div>",
          "vote": "185"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is an example in plain language. I will provide a correspondence between high-level human concepts to low-level Python concepts.</p>\n\n<p>I want to operate on a sequence of numbers, but I don't want to bother my self with the creation of that sequence, I want only to focus on the operation I want to do. So, I do the following:</p>\n\n<ul>\n<li>I call you and tell you that I want a sequence of numbers which is produced in a specific way, and I let you know what the algorithm is. <br>\n<b>This step corresponds to <code>def</code>ining the generator function, i.e. the function containing a <code>yield</code>.</b></li>\n<li>Sometime later, I tell you, \"OK, get ready to tell me the sequence of numbers\". <br>\n<b>This step corresponds to calling the generator function which returns a generator object.</b> Note that you don't tell me any numbers yet; you just grab your paper and pencil.</li>\n<li>I ask you, \"tell me the next number\", and you tell me the first number; after that, you wait for me to ask you for the next number. It's your job to remember where you were, what numbers you have already said, and what is the next number. I don't care about the details. <br>\n<b>This step corresponds to calling <code>.next()</code> on the generator object.</b></li>\n<li>… repeat previous step, until…</li>\n<li>eventually, you might come to an end. You don't tell me a number; you just shout, \"hold your horses! I'm done! No more numbers!\" <br>\n<b>This step corresponds to the generator object ending its job, and raising a <code>StopIteration</code> exception</b> The generator function does not need to raise the exception. It's raised automatically when the function ends or issues a <code>return</code>.</li>\n</ul>\n\n<p>This is what a generator does (a function that contains a <code>yield</code>); it starts executing, pauses whenever it does a <code>yield</code>, and when asked for a <code>.next()</code> value it continues from the point it was last. It fits perfectly by design with the iterator protocol of Python, which describes how to sequentially request values.</p>\n\n<p>The most famous user of the iterator protocol is the <code>for</code> command in Python. So, whenever you do a:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">for</span> item <span class=\"hljs-keyword\">in</span> sequence:\n</code></pre>\n\n<p>it doesn't matter if <code>sequence</code> is a list, a string, a dictionary or a generator <em>object</em> like described above; the result is the same: you read items off a sequence one by one.</p>\n\n<p>Note that <code>def</code>ining a function which contains a <code>yield</code> keyword is not the only way to create a generator; it's just the easiest way to create one.</p>\n\n<p>For more accurate information, read about <a href=\"http://docs.python.org/library/stdtypes.html#iterator-types\" rel=\"noreferrer\">iterator types</a>, the <a href=\"http://docs.python.org/reference/simple_stmts.html#yield\" rel=\"noreferrer\">yield statement</a> and <a href=\"http://docs.python.org/glossary.html#term-generator\" rel=\"noreferrer\">generators</a> in the Python documentation.</p>\n    </div>",
          "vote": "168"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>While a lot of answers show why you'd use a <code>yield</code> to create a generator, there are more uses for <code>yield</code>.  It's quite easy to make a coroutine, which enables the passing of information between two blocks of code.  I won't repeat any of the fine examples that have already been given about using <code>yield</code> to create a generator.</p>\n\n<p>To help understand what a <code>yield</code> does in the following code, you can use your finger to trace the cycle through any code that has a <code>yield</code>.  Every time your finger hits the <code>yield</code>, you have to wait for a <code>next</code> or a <code>send</code> to be entered.  When a <code>next</code> is called, you trace through the code until you hit the <code>yield</code>… the code on the right of the <code>yield</code> is evaluated and returned to the caller… then you wait.  When <code>next</code> is called again, you perform another loop through the code.  However, you'll note that in a coroutine, <code>yield</code> can also be used with a <code>send</code>… which will send a value from the caller <em>into</em> the yielding function. If a <code>send</code> is given, then <code>yield</code> receives the value sent, and spits it out the left hand side… then the trace through the code progresses until you hit the <code>yield</code> again (returning the value at the end, as if <code>next</code> was called).</p>\n\n<p>For example:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">coroutine</span>():</span>\n<span class=\"hljs-meta\">... </span>    i = -<span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">... </span>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n<span class=\"hljs-meta\">... </span>        i += <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">... </span>        val = (<span class=\"hljs-keyword\">yield</span> i)\n<span class=\"hljs-meta\">... </span>        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Received %s\"</span> % val)\n...\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>sequence = coroutine()\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>sequence.<span class=\"hljs-built_in\">next</span>()\n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>sequence.<span class=\"hljs-built_in\">next</span>()\nReceived <span class=\"hljs-literal\">None</span>\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>sequence.send(<span class=\"hljs-string\">'hello'</span>)\nReceived hello\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>sequence.close()\n</code></pre>\n    </div>",
          "vote": "146"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is another <code>yield</code> use and meaning (since Python 3.3):</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">yield</span> <span class=\"hljs-keyword\">from</span> &lt;expr&gt;\n</code></pre>\n<p>From <em><a href=\"http://www.python.org/dev/peps/pep-0380/\" rel=\"noreferrer\">PEP 380 -- Syntax for Delegating to a Subgenerator</a></em>:</p>\n<blockquote>\n<p>A syntax is proposed for a generator to delegate part of its operations to another generator. This allows a section of code containing 'yield' to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.</p>\n<p>The new syntax also opens up some opportunities for optimisation when one generator re-yields values produced by another.</p>\n</blockquote>\n<p>Moreover <a href=\"https://www.python.org/dev/peps/pep-0492/\" rel=\"noreferrer\">this</a> will introduce (since Python 3.5):</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">new_coroutine</span>(<span class=\"hljs-params\">data</span>):</span>\n   ...\n   <span class=\"hljs-keyword\">await</span> blocking_action()\n</code></pre>\n<p>to avoid coroutines being confused with a regular generator (today <code>yield</code> is used in both).</p>\n    </div>",
          "vote": "143"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>All great answers, however a bit difficult for newbies.</p>\n\n<p>I assume you have learned the <code>return</code> statement.</p>\n\n<p>As an analogy, <code>return</code> and <code>yield</code> are twins. <code>return</code> means 'return and stop' whereas 'yield` means 'return, but continue'</p>\n\n<blockquote>\n  <ol>\n  <li>Try to get a num_list with <code>return</code>.</li>\n  </ol>\n</blockquote>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">num_list</span>(<span class=\"hljs-params\">n</span>):</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n        <span class=\"hljs-keyword\">return</span> i\n</code></pre>\n\n<p>Run it:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>In [<span class=\"hljs-number\">5</span>]: num_list(<span class=\"hljs-number\">3</span>)\nOut[<span class=\"hljs-number\">5</span>]: <span class=\"hljs-number\">0</span>\n</code></pre>\n\n<p>See, you get only a single number rather than a list of them. <code>return</code> never allows you prevail happily, just implements once and quit.</p>\n\n<blockquote>\n  <ol start=\"2\">\n  <li>There comes <code>yield</code></li>\n  </ol>\n</blockquote>\n\n<p>Replace <code>return</code> with <code>yield</code>:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>In [<span class=\"hljs-number\">10</span>]: <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">num_list</span>(<span class=\"hljs-params\">n</span>):</span>\n    ...:     <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n    ...:         <span class=\"hljs-keyword\">yield</span> i\n    ...:\n\nIn [<span class=\"hljs-number\">11</span>]: num_list(<span class=\"hljs-number\">3</span>)\nOut[<span class=\"hljs-number\">11</span>]: &lt;generator <span class=\"hljs-built_in\">object</span> num_list at <span class=\"hljs-number\">0x10327c990</span>&gt;\n\nIn [<span class=\"hljs-number\">12</span>]: <span class=\"hljs-built_in\">list</span>(num_list(<span class=\"hljs-number\">3</span>))\nOut[<span class=\"hljs-number\">12</span>]: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n</code></pre>\n\n<p>Now, you win to get all the numbers.</p>\n\n<p>Comparing to <code>return</code> which runs once and stops, <code>yield</code> runs times you planed.\nYou can interpret <code>return</code> as <code>return one of them</code>, and <code>yield</code> as <code>return all of them</code>. This is called <code>iterable</code>.</p>\n\n<blockquote>\n  <ol start=\"3\">\n  <li>One more step we can rewrite <code>yield</code> statement with <code>return</code></li>\n  </ol>\n</blockquote>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>In [<span class=\"hljs-number\">15</span>]: <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">num_list</span>(<span class=\"hljs-params\">n</span>):</span>\n    ...:     result = []\n    ...:     <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(n):\n    ...:         result.append(i)\n    ...:     <span class=\"hljs-keyword\">return</span> result\n\nIn [<span class=\"hljs-number\">16</span>]: num_list(<span class=\"hljs-number\">3</span>)\nOut[<span class=\"hljs-number\">16</span>]: [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]\n</code></pre>\n\n<p>It's the core about <code>yield</code>.</p>\n\n<p>The difference between a list <code>return</code> outputs and the object <code>yield</code> output is:</p>\n\n<p>You will always get [0, 1, 2] from a list object but only could retrieve them from 'the object <code>yield</code> output' once. So, it has a new name <code>generator</code> object as displayed in <code>Out[11]: &lt;generator object num_list at 0x10327c990&gt;</code>.</p>\n\n<p>In conclusion, as a metaphor to grok it:</p>\n\n<ul>\n<li><code>return</code> and <code>yield</code> are twins</li>\n<li><code>list</code> and <code>generator</code> are twins</li>\n</ul>\n    </div>",
          "vote": "130"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From a programming viewpoint, the iterators are implemented as <a href=\"http://en.wikipedia.org/wiki/Thunk_(functional_programming)\" rel=\"noreferrer\">thunks</a>.</p>\n<p>To implement iterators, generators, and thread pools for concurrent execution, etc. as thunks, one uses <a href=\"https://wiki.c2.com/?ClosuresAndObjectsAreEquivalent\" rel=\"noreferrer\">messages sent to a closure object</a>, which has a dispatcher, and the <a href=\"http://en.wikipedia.org/wiki/Message_passing\" rel=\"noreferrer\">dispatcher answers to \"messages\"</a>.</p>\n<p><a href=\"https://docs.python.org/3/library/functions.html#next\" rel=\"noreferrer\">\"<em>next</em>\"</a> is a message sent to a closure, created by the \"<em>iter</em>\" call.</p>\n<p>There are lots of ways to implement this computation. I used mutation, but it is possible to do this kind of computation without mutation, by returning the current value and the next yielder (making it <a href=\"https://en.wikipedia.org/wiki/Referential_transparency\" rel=\"noreferrer\">referential transparent</a>).  Racket uses a sequence of transformations of the initial program in some intermediary languages, one of such rewriting making the yield operator to be transformed in some language with simpler operators.</p>\n<p>Here is a demonstration of how yield could be rewritten, which uses the structure of R6RS, but the semantics is identical to Python's. It's the same model of computation, and only a change in syntax is required to rewrite it using yield of Python.</p>\n<blockquote>\n<pre class=\"lang-py s-code-block hljs python\"><code>Welcome to Racket v6<span class=\"hljs-number\">.5</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.3</span>.\n\n-&gt; (define gen\n     (<span class=\"hljs-keyword\">lambda</span> (l)\n       (define <span class=\"hljs-keyword\">yield</span>\n         (<span class=\"hljs-keyword\">lambda</span> ()\n           (<span class=\"hljs-keyword\">if</span> (null? l)\n               <span class=\"hljs-string\">'END\n               (let ((v (car l)))\n                 (set! l (cdr l))\n                 v))))\n       (lambda(m)\n         (case m\n           ('</span><span class=\"hljs-keyword\">yield</span> (<span class=\"hljs-keyword\">yield</span>))\n           (<span class=\"hljs-string\">'init  (lambda (data)\n                     (set! l data)\n                     '</span>OK))))))\n-&gt; (define stream (gen <span class=\"hljs-string\">'(1 2 3)))\n-&gt; (stream '</span><span class=\"hljs-keyword\">yield</span>)\n<span class=\"hljs-number\">1</span>\n-&gt; (stream <span class=\"hljs-string\">'yield)\n2\n-&gt; (stream '</span><span class=\"hljs-keyword\">yield</span>)\n<span class=\"hljs-number\">3</span>\n-&gt; (stream <span class=\"hljs-string\">'yield)\n'</span>END\n-&gt; ((stream <span class=\"hljs-string\">'init) '</span>(a b))\n<span class=\"hljs-string\">'OK\n-&gt; (stream '</span><span class=\"hljs-keyword\">yield</span>)\n<span class=\"hljs-string\">'a\n-&gt; (stream '</span><span class=\"hljs-keyword\">yield</span>)\n<span class=\"hljs-string\">'b\n-&gt; (stream '</span><span class=\"hljs-keyword\">yield</span>)\n<span class=\"hljs-string\">'END\n-&gt; (stream '</span><span class=\"hljs-keyword\">yield</span>)\n<span class=\"hljs-string\">'END\n-&gt;\n</span></code></pre>\n</blockquote>\n    </div>",
          "vote": "119"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here are some Python examples of how to actually implement generators as if Python did not provide syntactic sugar for them:</p>\n\n<p><strong>As a Python generator:</strong></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">from</span> itertools <span class=\"hljs-keyword\">import</span> islice\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fib_gen</span>():</span>\n    a, b = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        <span class=\"hljs-keyword\">yield</span> a\n        a, b = b, a + b\n\n<span class=\"hljs-keyword\">assert</span> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>] == <span class=\"hljs-built_in\">list</span>(islice(fib_gen(), <span class=\"hljs-number\">5</span>))\n</code></pre>\n\n<p><strong>Using lexical closures instead of generators</strong></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">ftake</span>(<span class=\"hljs-params\">fnext, last</span>):</span>\n    <span class=\"hljs-keyword\">return</span> [fnext() <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> xrange(last)]\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fib_gen2</span>():</span>\n    <span class=\"hljs-comment\">#funky scope due to python2.x workaround</span>\n    <span class=\"hljs-comment\">#for python 3.x use nonlocal</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">_</span>():</span>\n        _.a, _.b = _.b, _.a + _.b\n        <span class=\"hljs-keyword\">return</span> _.a\n    _.a, _.b = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> _\n\n<span class=\"hljs-keyword\">assert</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>] == ftake(fib_gen2(), <span class=\"hljs-number\">5</span>)\n</code></pre>\n\n<p><strong>Using object closures instead of generators</strong> (because <a href=\"http://c2.com/cgi/wiki?ClosuresAndObjectsAreEquivalent\" rel=\"noreferrer\">ClosuresAndObjectsAreEquivalent</a>)</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">fib_gen3</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span>\n        self.a, self.b = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__call__</span>(<span class=\"hljs-params\">self</span>):</span>\n        r = self.a\n        self.a, self.b = self.b, self.a + self.b\n        <span class=\"hljs-keyword\">return</span> r\n\n<span class=\"hljs-keyword\">assert</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>] == ftake(fib_gen3(), <span class=\"hljs-number\">5</span>)\n</code></pre>\n    </div>",
          "vote": "115"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was going to post \"read page 19 of Beazley's 'Python: Essential Reference' for a quick description of generators\", but so many others have posted good descriptions already.</p>\n\n<p>Also, note that <code>yield</code> can be used in coroutines as the dual of their use in generator functions.  Although it isn't the same use as your code snippet, <code>(yield)</code> can be used as an expression in a function.  When a caller sends a value to the method using the <code>send()</code> method, then the coroutine will execute until the next <code>(yield)</code> statement is encountered.</p>\n\n<p>Generators and coroutines are a cool way to set up data-flow type applications.  I thought it would be worthwhile knowing about the other use of the <code>yield</code> statement in functions.</p>\n    </div>",
          "vote": "104"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is a simple example:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">isPrimeNumber</span>(<span class=\"hljs-params\">n</span>):</span>\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"isPrimeNumber({}) call\"</span>.<span class=\"hljs-built_in\">format</span>(n)\n    <span class=\"hljs-keyword\">if</span> n==<span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">for</span> x <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">2</span>,n):\n        <span class=\"hljs-keyword\">if</span> n % x == <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">primes</span> (<span class=\"hljs-params\">n=<span class=\"hljs-number\">1</span></span>):</span>\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">True</span>):\n        <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"loop step ---------------- {}\"</span>.<span class=\"hljs-built_in\">format</span>(n)\n        <span class=\"hljs-keyword\">if</span> isPrimeNumber(n): <span class=\"hljs-keyword\">yield</span> n\n        n += <span class=\"hljs-number\">1</span>\n\n<span class=\"hljs-keyword\">for</span> n <span class=\"hljs-keyword\">in</span> primes():\n    <span class=\"hljs-keyword\">if</span> n&gt; <span class=\"hljs-number\">10</span>:<span class=\"hljs-keyword\">break</span>\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"wiriting result {}\"</span>.<span class=\"hljs-built_in\">format</span>(n)\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>loop step ---------------- <span class=\"hljs-number\">1</span>\nisPrimeNumber(<span class=\"hljs-number\">1</span>) call\nloop step ---------------- <span class=\"hljs-number\">2</span>\nisPrimeNumber(<span class=\"hljs-number\">2</span>) call\nloop step ---------------- <span class=\"hljs-number\">3</span>\nisPrimeNumber(<span class=\"hljs-number\">3</span>) call\nwiriting result <span class=\"hljs-number\">3</span>\nloop step ---------------- <span class=\"hljs-number\">4</span>\nisPrimeNumber(<span class=\"hljs-number\">4</span>) call\nloop step ---------------- <span class=\"hljs-number\">5</span>\nisPrimeNumber(<span class=\"hljs-number\">5</span>) call\nwiriting result <span class=\"hljs-number\">5</span>\nloop step ---------------- <span class=\"hljs-number\">6</span>\nisPrimeNumber(<span class=\"hljs-number\">6</span>) call\nloop step ---------------- <span class=\"hljs-number\">7</span>\nisPrimeNumber(<span class=\"hljs-number\">7</span>) call\nwiriting result <span class=\"hljs-number\">7</span>\nloop step ---------------- <span class=\"hljs-number\">8</span>\nisPrimeNumber(<span class=\"hljs-number\">8</span>) call\nloop step ---------------- <span class=\"hljs-number\">9</span>\nisPrimeNumber(<span class=\"hljs-number\">9</span>) call\nloop step ---------------- <span class=\"hljs-number\">10</span>\nisPrimeNumber(<span class=\"hljs-number\">10</span>) call\nloop step ---------------- <span class=\"hljs-number\">11</span>\nisPrimeNumber(<span class=\"hljs-number\">11</span>) call\n</code></pre>\n\n<p>I am not a Python developer, but it looks to me <code>yield</code> holds the position of program flow and the next loop start from \"yield\" position. It seems like it is waiting at that position, and just before that, returning a value outside, and next time continues to work.</p>\n\n<p>It seems to be an interesting and nice ability :D</p>\n    </div>",
          "vote": "91"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is a mental image of what <code>yield</code> does.</p>\n\n<p>I like to think of a thread as having a stack (even when it's not implemented that way).</p>\n\n<p>When a normal function is called, it puts its local variables on the stack, does some computation, then clears the stack and returns. The values of its local variables are never seen again.</p>\n\n<p>With a <code>yield</code> function, when its code begins to run (i.e. after the function is called, returning a generator object, whose <code>next()</code> method is then invoked), it similarly puts its local variables onto the stack and computes for a while. But then, when it hits the <code>yield</code> statement, before clearing its part of the stack and returning, it takes a snapshot of its local variables and stores them in the generator object. It also writes down the place where it's currently up to in its code (i.e. the particular <code>yield</code> statement).</p>\n\n<p>So it's a kind of a frozen function that the generator is hanging onto.</p>\n\n<p>When <code>next()</code> is called subsequently, it retrieves the function's belongings onto the stack and re-animates it. The function continues to compute from where it left off, oblivious to the fact that it had just spent an eternity in cold storage.</p>\n\n<p>Compare the following examples:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">normalFunction</span>():</span>\n    <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">False</span>:\n        <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">yielderFunction</span>():</span>\n    <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">False</span>:\n        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">12</span>\n</code></pre>\n\n<p>When we call the second function, it behaves very differently to the first. The <code>yield</code> statement might be unreachable, but if it's present anywhere, it changes the nature of what we're dealing with.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>yielderFunction()\n&lt;generator <span class=\"hljs-built_in\">object</span> yielderFunction at <span class=\"hljs-number\">0x07742D28</span>&gt;\n</code></pre>\n\n<p>Calling <code>yielderFunction()</code> doesn't run its code, but makes a generator out of the code. (Maybe it's a good idea to name such things with the <code>yielder</code> prefix for readability.)</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>gen = yielderFunction()\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">dir</span>(gen)\n[<span class=\"hljs-string\">'__class__'</span>,\n ...\n <span class=\"hljs-string\">'__iter__'</span>,    <span class=\"hljs-comment\">#Returns gen itself, to make it work uniformly with containers</span>\n ...            <span class=\"hljs-comment\">#when given to a for loop. (Containers return an iterator instead.)</span>\n <span class=\"hljs-string\">'close'</span>,\n <span class=\"hljs-string\">'gi_code'</span>,\n <span class=\"hljs-string\">'gi_frame'</span>,\n <span class=\"hljs-string\">'gi_running'</span>,\n <span class=\"hljs-string\">'next'</span>,        <span class=\"hljs-comment\">#The method that runs the function's body.</span>\n <span class=\"hljs-string\">'send'</span>,\n <span class=\"hljs-string\">'throw'</span>]\n</code></pre>\n\n<p>The <code>gi_code</code> and <code>gi_frame</code> fields are where the frozen state is stored. Exploring them with <code>dir(..)</code>, we can confirm that our mental model above is credible.</p>\n    </div>",
          "vote": "75"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An easy example to understand what it is: <code>yield</code></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">f123</span>():</span>\n    <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">4</span>):\n        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-number\">2</span>\n\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> f123():\n    <span class=\"hljs-built_in\">print</span> (i)\n</code></pre>\n\n<p>The output is: </p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">2</span>\n</code></pre>\n    </div>",
          "vote": "67"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Like every answer suggests, <code>yield</code> is used for creating a sequence generator. It's used for generating some sequence dynamically. For example, while reading a file line by line on a network, you can use the <code>yield</code> function as follows:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">getNextLines</span>():</span>\n   <span class=\"hljs-keyword\">while</span> con.isOpen():\n       <span class=\"hljs-keyword\">yield</span> con.read()\n</code></pre>\n\n<p>You can use it in your code as follows:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">for</span> line <span class=\"hljs-keyword\">in</span> getNextLines():\n    doSomeThing(line)\n</code></pre>\n\n<p><strong><em>Execution Control Transfer gotcha</em></strong></p>\n\n<p>The execution control will be transferred from getNextLines() to the <code>for</code> loop when yield is executed. Thus, every time getNextLines() is invoked, execution begins from the point where it was paused last time.</p>\n\n<p>Thus in short, a function with the following code</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">simpleYield</span>():</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">\"first time\"</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">\"second time\"</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">\"third time\"</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">\"Now some useful value {}\"</span>.<span class=\"hljs-built_in\">format</span>(<span class=\"hljs-number\">12</span>)\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> simpleYield():\n    <span class=\"hljs-built_in\">print</span> i\n</code></pre>\n\n<p>will print</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-string\">\"first time\"</span>\n<span class=\"hljs-string\">\"second time\"</span>\n<span class=\"hljs-string\">\"third time\"</span>\n<span class=\"hljs-string\">\"Now some useful value 12\"</span>\n</code></pre>\n    </div>",
          "vote": "66"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>(My below answer only speaks from the perspective of using Python generator, not the <a href=\"https://stackoverflow.com/questions/8389812/how-are-generators-and-coroutines-implemented-in-cpython\">underlying implementation of generator mechanism</a>, which involves some tricks of stack and heap manipulation.)</p>\n\n<p>When <code>yield</code> is used instead of a <code>return</code> in a python function, that function is turned into something special called <code>generator function</code>. That function will return an object of <code>generator</code> type. <strong>The <code>yield</code> keyword is a flag to notify the python compiler to treat such function specially.</strong> Normal functions will terminate once some value is returned from it. But with the help of the compiler, the generator function <strong>can be thought of</strong> as resumable. That is, the execution context will be restored and the execution will continue from last run. Until you explicitly call return, which will raise a <code>StopIteration</code> exception (which is also part of the iterator protocol), or reach the end of the function. I found a lot of references about <code>generator</code> but this <a href=\"https://docs.python.org/dev/howto/functional.html#generators\" rel=\"noreferrer\">one</a> from the <code>functional programming perspective</code> is the most digestable.</p>\n\n<p>(Now I want to talk about the rationale behind <code>generator</code>, and the <code>iterator</code> based on my own understanding. I hope this can help you grasp the <strong><em>essential motivation</em></strong> of iterator and generator. Such concept shows up in other languages as well such as C#.)</p>\n\n<p>As I understand, when we want to process a bunch of data, we usually first store the data somewhere and then process it one by one. But this <em>naive</em> approach is problematic. If the data volume is huge, it's expensive to store them as a whole beforehand. <strong>So instead of storing the <code>data</code> itself directly, why not store some kind of <code>metadata</code> indirectly, i.e. <code>the logic how the data is computed</code></strong>. </p>\n\n<p>There are 2 approaches to wrap such metadata.</p>\n\n<ol>\n<li>The OO approach, we wrap the metadata <code>as a class</code>. This is the so-called <code>iterator</code> who implements the iterator protocol (i.e. the <code>__next__()</code>, and <code>__iter__()</code> methods). This is also the commonly seen <a href=\"https://en.wikipedia.org/wiki/Iterator_pattern#Python\" rel=\"noreferrer\">iterator design pattern</a>.</li>\n<li>The functional approach, we wrap the metadata <code>as a function</code>. This is\nthe so-called <code>generator function</code>. But under the hood, the returned <code>generator object</code> still <code>IS-A</code> iterator because it also implements the iterator protocol.</li>\n</ol>\n\n<p>Either way, an iterator is created, i.e. some object that can give you the data you want. The OO approach may be a bit complex. Anyway, which one to use is up to you.</p>\n    </div>",
          "vote": "63"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In summary, the <code>yield</code> statement transforms your function into a factory that produces a special object called a <code>generator</code> which wraps around the body of your original function. When the <code>generator</code> is iterated, it executes your function  until it reaches the next <code>yield</code> then suspends execution and evaluates to the value passed to <code>yield</code>. It repeats this process on each iteration until the path of execution exits the function. For instance,</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">simple_generator</span>():</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">'one'</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">'two'</span>\n    <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">'three'</span>\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> simple_generator():\n    <span class=\"hljs-built_in\">print</span> i\n</code></pre>\n\n<p>simply outputs</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>one\ntwo\nthree\n</code></pre>\n\n<p>The power comes from using the generator with a loop that calculates a sequence, the generator executes the loop stopping each time to 'yield' the next result of the calculation, in this way it calculates a list on the fly, the benefit being the memory saved for especially large calculations</p>\n\n<p>Say you wanted to create a your own <code>range</code> function that produces an iterable range of numbers, you could do it like so,</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">myRangeNaive</span>(<span class=\"hljs-params\">i</span>):</span>\n    n = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-built_in\">range</span> = []\n    <span class=\"hljs-keyword\">while</span> n &lt; i:\n        <span class=\"hljs-built_in\">range</span>.append(n)\n        n = n + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">range</span>\n</code></pre>\n\n<p>and use it like this;</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> myRangeNaive(<span class=\"hljs-number\">10</span>):\n    <span class=\"hljs-built_in\">print</span> i\n</code></pre>\n\n<p>But this is inefficient because</p>\n\n<ul>\n<li>You create an array that you only use once (this wastes memory)</li>\n<li>This code actually loops over that array twice! :(</li>\n</ul>\n\n<p>Luckily Guido and his team were generous enough to develop generators so we could just do this;</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">myRangeSmart</span>(<span class=\"hljs-params\">i</span>):</span>\n    n = <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-keyword\">while</span> n &lt; i:\n       <span class=\"hljs-keyword\">yield</span> n\n       n = n + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">return</span>\n\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> myRangeSmart(<span class=\"hljs-number\">10</span>):\n    <span class=\"hljs-built_in\">print</span> i\n</code></pre>\n\n<p>Now upon each iteration a function on the generator called <code>next()</code> executes the function until it either reaches a 'yield' statement in which it stops and  'yields' the value or reaches the end of the function. In this case on the first call, <code>next()</code> executes up to the yield statement and yield 'n', on the next call it will execute the  increment statement, jump back to the 'while', evaluate it, and if true, it will stop and yield 'n' again, it will continue that way until the while condition returns false and the generator jumps to the end of the function.</p>\n    </div>",
          "vote": "61"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Yield is an object</strong></p>\n\n<p>A <code>return</code> in a function will return a single value.</p>\n\n<p>If you want <strong>a function to return a huge set of values</strong>, use <code>yield</code>.</p>\n\n<p>More importantly, <code>yield</code> is a <strong>barrier</strong>.</p>\n\n<blockquote>\n  <p>like barrier in the CUDA language, it will not transfer control until it gets\n  completed.</p>\n</blockquote>\n\n<p>That is, it will run the code in your function from the beginning until it hits <code>yield</code>. Then, it’ll return the first value of the loop.</p>\n\n<p>Then, every other call will run the loop you have written in the function one more time, returning the next value until there isn't any value to return.</p>\n    </div>",
          "vote": "58"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Many people use <code>return</code> rather than <code>yield</code>, but in some cases <code>yield</code> can be more efficient and easier to work with.</p>\n\n<p>Here is an example which <code>yield</code> is definitely best for:</p>\n\n<blockquote>\n  <p><strong>return</strong> (in function)</p>\n</blockquote>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">import</span> random\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">return_dates</span>():</span>\n    dates = [] <span class=\"hljs-comment\"># With 'return' you need to create a list then return it</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):\n        date = random.choice([<span class=\"hljs-string\">\"1st\"</span>, <span class=\"hljs-string\">\"2nd\"</span>, <span class=\"hljs-string\">\"3rd\"</span>, <span class=\"hljs-string\">\"4th\"</span>, <span class=\"hljs-string\">\"5th\"</span>, <span class=\"hljs-string\">\"6th\"</span>, <span class=\"hljs-string\">\"7th\"</span>, <span class=\"hljs-string\">\"8th\"</span>, <span class=\"hljs-string\">\"9th\"</span>, <span class=\"hljs-string\">\"10th\"</span>])\n        dates.append(date)\n    <span class=\"hljs-keyword\">return</span> dates\n</code></pre>\n\n<blockquote>\n  <p><strong>yield</strong> (in function)</p>\n</blockquote>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">yield_dates</span>():</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):\n        date = random.choice([<span class=\"hljs-string\">\"1st\"</span>, <span class=\"hljs-string\">\"2nd\"</span>, <span class=\"hljs-string\">\"3rd\"</span>, <span class=\"hljs-string\">\"4th\"</span>, <span class=\"hljs-string\">\"5th\"</span>, <span class=\"hljs-string\">\"6th\"</span>, <span class=\"hljs-string\">\"7th\"</span>, <span class=\"hljs-string\">\"8th\"</span>, <span class=\"hljs-string\">\"9th\"</span>, <span class=\"hljs-string\">\"10th\"</span>])\n        <span class=\"hljs-keyword\">yield</span> date <span class=\"hljs-comment\"># 'yield' makes a generator automatically which works</span>\n                   <span class=\"hljs-comment\"># in a similar way. This is much more efficient.</span>\n</code></pre>\n\n<blockquote>\n  <p><strong>Calling functions</strong></p>\n</blockquote>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>dates_list = return_dates()\n<span class=\"hljs-built_in\">print</span>(dates_list)\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> dates_list:\n    <span class=\"hljs-built_in\">print</span>(i)\n\ndates_generator = yield_dates()\n<span class=\"hljs-built_in\">print</span>(dates_generator)\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> dates_generator:\n    <span class=\"hljs-built_in\">print</span>(i)\n</code></pre>\n\n<p>Both functions do the same thing, but <code>yield</code> uses three lines instead of five and has one less variable to worry about.</p>\n\n<blockquote>\n  <blockquote>\n    <p><strong>This is the result from the code:</strong></p>\n  </blockquote>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/iUFNJ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/iUFNJ.png\" alt=\"Output\"></a></p>\n\n<p>As you can see both functions do the same thing. The only difference is <code>return_dates()</code> gives a list and <code>yield_dates()</code> gives a generator.</p>\n\n<p>A real life example would be something like reading a file line by line or if you just want to make a generator.</p>\n    </div>",
          "vote": "57"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>yield</code> is like a return element for a function. The difference is, that the <code>yield</code> element turns a function into a generator. A generator behaves just like a function until something is 'yielded'. The generator stops until it is next called, and continues from exactly the same point as it started. You can get a sequence of all the 'yielded' values in one, by calling <code>list(generator())</code>.</p>\n    </div>",
          "vote": "46"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>yield</code> keyword simply collects returning results. Think of <code>yield</code> like <code>return +=</code></p>\n    </div>",
          "vote": "46"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's a simple <code>yield</code> based approach, to compute the fibonacci series, explained:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">limit=<span class=\"hljs-number\">50</span></span>):</span>\n    a, b = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(limit):\n       <span class=\"hljs-keyword\">yield</span> b\n       a, b = b, a+b\n</code></pre>\n\n<p>When you enter this into your REPL and then try and call it, you'll get a mystifying result:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>fib()\n&lt;generator <span class=\"hljs-built_in\">object</span> fib at <span class=\"hljs-number\">0x7fa38394e3b8</span>&gt;\n</code></pre>\n\n<p>This is because the presence of <code>yield</code> signaled to Python that you want to create a <em>generator</em>, that is, an object that generates values on demand.</p>\n\n<p>So, how do you generate these values? This can either be done directly by using the built-in function <code>next</code>, or, indirectly by feeding it to a construct that consumes values. </p>\n\n<p>Using the built-in <code>next()</code> function, you directly invoke <code>.next</code>/<code>__next__</code>, forcing the generator to produce a value:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>g = fib()\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(g)\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(g)\n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(g)\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(g)\n<span class=\"hljs-number\">3</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(g)\n<span class=\"hljs-number\">5</span>\n</code></pre>\n\n<p>Indirectly, if you provide <code>fib</code> to a <code>for</code> loop, a <code>list</code> initializer, a <code>tuple</code> initializer, or anything else that expects an object that generates/produces values, you'll \"consume\" the generator until no more values can be produced by it (and it returns):</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>results = []\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> fib(<span class=\"hljs-number\">30</span>):       <span class=\"hljs-comment\"># consumes fib</span>\n    results.append(i) \n<span class=\"hljs-comment\"># can also be accomplished with</span>\nresults = <span class=\"hljs-built_in\">list</span>(fib(<span class=\"hljs-number\">30</span>)) <span class=\"hljs-comment\"># consumes fib</span>\n</code></pre>\n\n<p>Similarly, with a <code>tuple</code> initializer: </p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">tuple</span>(fib(<span class=\"hljs-number\">5</span>))       <span class=\"hljs-comment\"># consumes fib</span>\n(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)\n</code></pre>\n\n<p>A generator differs from a function in the sense that it is lazy. It accomplishes this by maintaining it's local state and allowing you to resume whenever you need to. </p>\n\n<p>When you first invoke <code>fib</code> by calling it:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>f = fib()\n</code></pre>\n\n<p>Python compiles the function, encounters the <code>yield</code> keyword and simply returns a generator object back at you. Not very helpful it seems. </p>\n\n<p>When you then request it generates the first value, directly or indirectly, it executes all statements that it finds, until it encounters a <code>yield</code>, it then yields back the value you supplied to <code>yield</code> and pauses. For an example that better demonstrates this, let's use some <code>print</code> calls (replace with <code>print \"text\"</code> if on Python 2):</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">yielder</span>(<span class=\"hljs-params\">value</span>):</span>\n    <span class=\"hljs-string\">\"\"\" This is an infinite generator. Only use next on it \"\"\"</span> \n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-number\">1</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"I'm going to generate the value for you\"</span>)\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Then I'll pause for a while\"</span>)\n        <span class=\"hljs-keyword\">yield</span> value\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Let's go through it again.\"</span>)\n</code></pre>\n\n<p>Now, enter in the REPL:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>gen = yielder(<span class=\"hljs-string\">\"Hello, yield!\"</span>)\n</code></pre>\n\n<p>you have a generator object now waiting for a command for it to generate a value. Use <code>next</code> and see what get's printed:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(gen) <span class=\"hljs-comment\"># runs until it finds a yield</span>\nI<span class=\"hljs-string\">'m going to generate the value for you\nThen I'</span>ll pause <span class=\"hljs-keyword\">for</span> a <span class=\"hljs-keyword\">while</span>\n<span class=\"hljs-string\">'Hello, yield!'</span>\n</code></pre>\n\n<p>The unquoted results are what's printed. The quoted result is what is returned from <code>yield</code>. Call <code>next</code> again now:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">next</span>(gen) <span class=\"hljs-comment\"># continues from yield and runs again</span>\nLet<span class=\"hljs-string\">'s go through it again.\nI'</span>m going to generate the value <span class=\"hljs-keyword\">for</span> you\nThen I<span class=\"hljs-string\">'ll pause for a while\n'</span>Hello, <span class=\"hljs-keyword\">yield</span>!<span class=\"hljs-string\">'\n</span></code></pre>\n\n<p>The generator remembers it was paused at <code>yield value</code> and resumes from there. The next message is printed and the search for the <code>yield</code> statement to pause at it performed again (due to the <code>while</code> loop).</p>\n    </div>",
          "vote": "40"
        }
      ]
    },
    {
      "question": "What is the correct JSON content type?",
      "url": "https://stackoverflow.com/questions/477816/what-is-the-correct-json-content-type",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I've been messing around with <a href=\"http://en.wikipedia.org/wiki/JSON\" rel=\"noreferrer\">JSON</a> for some time, just pushing it out as text and it hasn't hurt anybody (that I know of), but I'd like to start doing things properly.</p>\n\n<p>I have seen <em>so</em> many purported \"standards\" for the JSON content type:</p>\n\n<pre class=\"default s-code-block hljs vbnet\"><code>application/json\napplication/x-javascript\n<span class=\"hljs-keyword\">text</span>/javascript\n<span class=\"hljs-keyword\">text</span>/x-javascript\n<span class=\"hljs-keyword\">text</span>/x-json\n</code></pre>\n\n<p>But which one is correct, or best? I gather that there are security and browser support issues varying between them.</p>\n\n<p>I know there's a similar question, <em><a href=\"https://stackoverflow.com/questions/404470/what-mime-type-if-json-is-being-returned-by-a-rest-api\">What MIME type if JSON is being returned by a REST API?</a></em>, but I'd like a slightly more targeted answer.</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For JSON text:</p>\n<p><strong><code>application/json</code></strong></p>\n<blockquote>\n<p>The MIME media type for JSON text is <strong><code>application/json</code></strong>. The default encoding is UTF-8. (Source: <a href=\"http://www.ietf.org/rfc/rfc4627.txt\" rel=\"noreferrer\">RFC 4627</a>).</p>\n</blockquote>\n<p>For <a href=\"http://en.wikipedia.org/wiki/JSONP\" rel=\"noreferrer\">JSONP</a> (runnable JavaScript) with callback:</p>\n<p><strong><code>application/javascript</code></strong></p>\n<p>Here are some blog posts that were mentioned in the relevant comments:</p>\n<ul>\n<li><a href=\"http://jibbering.com/blog/?p=514\" rel=\"noreferrer\">Why you shouldn't use <code>text/html</code> for JSON</a></li>\n<li><a href=\"https://web.archive.org/web/20180102070201/www.entwicklungsgedanken.de/2008/06/06/problems-with-internet-explorer-and-applicationjson/\" rel=\"noreferrer\">Internet&nbsp;Explorer sometimes has issues with <code>application/json</code></a></li>\n<li><a href=\"https://github.com/h5bp/server-configs-nginx/blob/master/mime.types\" rel=\"noreferrer\">A rather complete list of Mimetypes and what to use them for</a></li>\n<li><a href=\"http://www.iana.org/assignments/media-types/application/\" rel=\"noreferrer\">The official mime type list at IANA</a> from @gnrfan's answer below</li>\n</ul>\n    </div>",
          "vote": "10730"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://www.iana.org\" rel=\"noreferrer\">IANA</a> has registered the official MIME Type for JSON as <strong><code>application/json</code></strong>.</p>\n\n<p>When asked about why not <code>text/json</code>, Crockford seems to have said JSON is not really JavaScript nor text and also IANA was more likely to hand out <code>application/*</code> than <code>text/*</code>.</p>\n\n<p>More resources:</p>\n\n<ul>\n<li><a href=\"http://www.iana.org/assignments/media-types/application/\" rel=\"noreferrer\">Media Types</a></li>\n<li><a href=\"http://www.ietf.org/rfc/rfc4627.txt\" rel=\"noreferrer\">Request for Comments 4627</a></li>\n<li><a href=\"http://bluesmoon.livejournal.com/227190.html\" rel=\"noreferrer\">bluesmoon: JSON has a type</a></li>\n</ul>\n    </div>",
          "vote": "1673"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>For JSON:</strong></p>\n\n\n\n<pre class=\"lang-none s-code-block\"><code>Content-Type: application/json\n</code></pre>\n\n<p><strong>For <a href=\"http://en.wikipedia.org/wiki/JSONP\" rel=\"noreferrer\">JSON-P</a>:</strong></p>\n\n<pre class=\"lang-none s-code-block\"><code>Content-Type: application/javascript\n</code></pre>\n    </div>",
          "vote": "935"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Of course, the correct MIME media type for JSON is <code>application/json</code>, but it's necessary to realize what type of data is expected in your application.</p>\n\n<p>For example, I use <a href=\"http://www.sencha.com/products/extgwt/\" rel=\"noreferrer\">Ext GWT</a> and the server response must go as <strong>text/html</strong> but contains JSON data.</p>\n\n<p><em>Client side, Ext GWT form listener</em></p>\n\n<pre class=\"default s-code-block hljs typescript\"><code>uploadForm.getForm().addListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-function\"><span class=\"hljs-title\">FormListenerAdapter</span>(<span class=\"hljs-params\"></span>)</span>\n{\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-function\"><span class=\"hljs-title\">onActionFailed</span>(<span class=\"hljs-params\">Form form, int httpStatus, <span class=\"hljs-built_in\">String</span> responseText</span>)</span> \n    {\n        MessageBox.alert(<span class=\"hljs-string\">\"Error\"</span>);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-function\"><span class=\"hljs-title\">onActionComplete</span>(<span class=\"hljs-params\">Form form, int httpStatus, <span class=\"hljs-built_in\">String</span> responseText</span>)</span> \n    {\n        MessageBox.alert(<span class=\"hljs-string\">\"Success\"</span>);\n    }\n});\n</code></pre>\n\n<p>In case of using <strong>application/json</strong> response type, the browser suggests me to save the file.</p>\n\n<p><em>Server side source code snippet using <a href=\"http://en.wikipedia.org/wiki/Spring_Framework#Model-view-controller_framework\" rel=\"noreferrer\">Spring MVC</a></em></p>\n\n<pre class=\"default s-code-block hljs less\"><code><span class=\"hljs-selector-tag\">return</span> <span class=\"hljs-selector-tag\">new</span> <span class=\"hljs-selector-tag\">AbstractUrlBasedView</span>() \n{\n    <span class=\"hljs-variable\">@SuppressWarnings</span>(<span class=\"hljs-string\">\"unchecked\"</span>)\n    <span class=\"hljs-variable\">@Override</span>\n    protected void renderMergedOutputModel(Map model, HttpServletRequest request,\n                                           HttpServletResponse response) throws Exception \n    {\n        <span class=\"hljs-selector-tag\">response</span><span class=\"hljs-selector-class\">.setContentType</span>(<span class=\"hljs-string\">\"text/html\"</span>);\n        <span class=\"hljs-selector-tag\">response</span><span class=\"hljs-selector-class\">.getWriter</span>()<span class=\"hljs-selector-class\">.write</span>(json);\n    }\n};\n</code></pre>\n    </div>",
          "vote": "650"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2><strong>JSON:</strong></h2>\n\n<p>Response is dynamically generated data, according to the query parameters passed in the URL.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre class=\"default s-code-block hljs json\"><code>{ <span class=\"hljs-attr\">\"Name\"</span>: <span class=\"hljs-string\">\"Foo\"</span>, <span class=\"hljs-attr\">\"Id\"</span>: <span class=\"hljs-number\">1234</span>, <span class=\"hljs-attr\">\"Rank\"</span>: <span class=\"hljs-number\">7</span> }\n</code></pre>\n\n<p><strong>Content-Type:</strong> <code>application/json</code></p>\n\n<hr>\n\n<h2><strong>JSON-P:</strong></h2>\n\n<p>JSON with padding.\nResponse is JSON data, with a function call wrapped around it.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre class=\"default s-code-block hljs lisp\"><code>functionCall({<span class=\"hljs-string\">\"Name\"</span>: <span class=\"hljs-string\">\"Foo\"</span>, <span class=\"hljs-string\">\"Id\"</span>: <span class=\"hljs-number\">1234</span>, <span class=\"hljs-string\">\"Rank\"</span>: <span class=\"hljs-number\">7</span>})<span class=\"hljs-comment\">;</span>\n</code></pre>\n\n<p><strong>Content-Type:</strong> <code>application/javascript</code></p>\n    </div>",
          "vote": "476"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you are using Ubuntu or Debian and you serve .json files through Apache, you might want to serve the files with the correct content type. I am doing this primarily because I want to use the Firefox extension <a href=\"https://addons.mozilla.org/en-US/firefox/addon/10869/\">JSONView</a></p>\n\n<p>The Apache module <a href=\"http://httpd.apache.org/docs/current/mod/mod_mime.html\">mod_mime</a> will help to do this easily. However, with Ubuntu you need to edit the file <em>/etc/mime.types</em> and add the line</p>\n\n<pre class=\"default s-code-block hljs\"><code>application/json json\n</code></pre>\n\n<p>Then restart Apache:</p>\n\n<pre class=\"default s-code-block hljs protobuf\"><code>sudo <span class=\"hljs-class\"><span class=\"hljs-keyword\">service</span> <span class=\"hljs-title\">apache2</span> restart\n</span></code></pre>\n    </div>",
          "vote": "412"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you're calling ASP.NET Web Services from the client-side you have to use <code>application/json</code> for it to work. I believe this is the same for the <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"noreferrer\">jQuery</a> and <a href=\"http://en.wikipedia.org/wiki/Ext_%28JavaScript_library%29\" rel=\"noreferrer\">Ext</a> frameworks. </p>\n    </div>",
          "vote": "394"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The right content type for JSON is <code>application/json</code> UNLESS you're using <a href=\"http://en.wikipedia.org/wiki/JSONP\">JSONP</a>, also known as JSON with Padding, which is actually JavaScript and so the right content type would be <code>application/javascript</code>.</p>\n    </div>",
          "vote": "313"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is no doubt that <code>application/json</code> is the best <a href=\"http://en.wikipedia.org/wiki/MIME\" rel=\"noreferrer\">MIME</a> type for a JSON response.</p>\n\n<p>But I had some experience where I had to use <code>application/x-javascript</code> because of some compression issues. My hosting environment is shared hosting with <a href=\"http://en.wikipedia.org/wiki/Go_Daddy\" rel=\"noreferrer\">GoDaddy</a>. They do not allow me to change server configurations. I had added the following code to my <code>web.config</code> file for compressing responses.</p>\n\n<pre class=\"default s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">httpCompression</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scheme</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"gzip\"</span> <span class=\"hljs-attr\">dll</span>=<span class=\"hljs-string\">\"%Windir%\\system32\\inetsrv\\gzip.dll\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dynamicTypes</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">mimeType</span>=<span class=\"hljs-string\">\"text/*\"</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">mimeType</span>=<span class=\"hljs-string\">\"message/*\"</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">mimeType</span>=<span class=\"hljs-string\">\"application/javascript\"</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">mimeType</span>=<span class=\"hljs-string\">\"*/*\"</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"false\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dynamicTypes</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">staticTypes</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">mimeType</span>=<span class=\"hljs-string\">\"text/*\"</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">mimeType</span>=<span class=\"hljs-string\">\"message/*\"</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">mimeType</span>=<span class=\"hljs-string\">\"application/javascript\"</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">add</span> <span class=\"hljs-attr\">mimeType</span>=<span class=\"hljs-string\">\"*/*\"</span> <span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-string\">\"false\"</span>/&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">staticTypes</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">httpCompression</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">urlCompression</span> <span class=\"hljs-attr\">doStaticCompression</span>=<span class=\"hljs-string\">\"true\"</span> <span class=\"hljs-attr\">doDynamicCompression</span>=<span class=\"hljs-string\">\"true\"</span>/&gt;</span>\n</code></pre>\n\n<p>By using this, the .aspx pages was compressed with g-zip but JSON responses were not. I added</p>\n\n<pre class=\"default s-code-block hljs csharp\"><code>&lt;<span class=\"hljs-keyword\">add</span> mimeType=<span class=\"hljs-string\">\"application/json\"</span> enabled=<span class=\"hljs-string\">\"true\"</span>/&gt;\n</code></pre>\n\n<p>in the static and dynamic types sections. <strong>But this does not compress JSON responses at all.</strong></p>\n\n<p>After that I removed this newly added type and added</p>\n\n<pre class=\"default s-code-block hljs csharp\"><code>&lt;<span class=\"hljs-keyword\">add</span> mimeType=<span class=\"hljs-string\">\"application/x-javascript\"</span> enabled=<span class=\"hljs-string\">\"true\"</span>/&gt;\n</code></pre>\n\n<p>in both the static and dynamic types sections, and changed the response type in</p>\n\n<p>.ashx (asynchronous handler) to</p>\n\n<pre class=\"default s-code-block hljs\"><code>application/x-javascript\n</code></pre>\n\n<p>And now I found that my JSON responses were compressed with g-zip. So I personally recommend to use</p>\n\n<pre class=\"default s-code-block hljs\"><code>application/x-javascript\n</code></pre>\n\n<p>only if you want to compress your JSON responses on a <strong>shared hosting environment</strong>. Because in shared hosting, they do not allow you to change <a href=\"http://en.wikipedia.org/wiki/Internet_Information_Services\" rel=\"noreferrer\">IIS</a> configurations.</p>\n    </div>",
          "vote": "302"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Only when using <code>application/json</code> as the <a href=\"http://en.wikipedia.org/wiki/MIME\" rel=\"noreferrer\">MIME</a> type I have the following (as of November 2011 with the most recent versions of Chrome, Firefox with <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"noreferrer\">Firebug</a>):</p>\n\n<ul>\n<li>No more warnings from Chrome when the JSON is loaded from the server.</li>\n<li>Firebug will add a tab to the response showing you the JSON data\nformatted. If the MIME type is different, it will just show up as\n'Response content'.</li>\n</ul>\n    </div>",
          "vote": "271"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Not everything works for content type <code>application/json</code>.</p>\n\n<p>If you are using <a href=\"http://en.wikipedia.org/wiki/Ext_JS\" rel=\"noreferrer\">Ext&nbsp;JS</a> form submit to upload file, be aware that the server response is parsed by the browser to create the document for the <code>&lt;iframe&gt;</code>.</p>\n\n<p>If the server is using JSON to send the return object, then the <code>Content-Type</code> header must be set to <code>text/html</code> in order to tell the browser to insert the text unchanged into the document body.</p>\n\n<p>See <a href=\"http://dev.sencha.com/deploy/ext-3.4.0/docs/\" rel=\"noreferrer\">the Ext JS 3.4.0 API documentation</a>.</p>\n    </div>",
          "vote": "247"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>JSON is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">domain-specific language</a> (DSL) and a data format independent of JavaScript, and as such has its own <a href=\"http://en.wikipedia.org/wiki/MIME\">MIME</a> type, <code>application/json</code>. Respect for MIME types is of course client driven, so <code>text/plain</code> may do for transfer of bytes, but then you would be pushing up interpretation to the vendor application domain unnecessarily - <code>application/json</code>. Would you transfer XML via <code>text/plain</code>?</p>\n\n<p>But honestly, your choice of MIME type is advice to the client as to how to interpret the data- <code>text/plain</code> or <code>text/HTML</code> (when it's not HTML) is like type erasure- it's as uninformative as making all your objects of type Object in a typed language.</p>\n\n<p>No browser runtime I know of will take a JSON document and automatically make it available to the runtime as a JavaScript accessible object without intervention, but if you are working with a crippled client, that's an entirely different matter. But that's not the whole story- <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services\">RESTful</a> JSON services often don't have JavaScript runtimes, but it doesn't stop them using JSON as a viable data interchange format. If clients are that crippled... then I would consider perhaps HTML injection via an <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">Ajax</a> templating service instead.</p>\n\n<p>Application/JSON!</p>\n    </div>",
          "vote": "230"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you're in a client-side environment, investigating about the cross-browser support is mandatory for a well supported web application.</p>\n\n<p>The right HTTP Content-Type would be <code>application/json</code>, as others already highlighted too, but some clients do not handle it very well, that's why jQuery recommends the default <code>text/html</code>.</p>\n    </div>",
          "vote": "212"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The correct answer is:</p>\n\n<pre class=\"default s-code-block hljs css\"><code><span class=\"hljs-attribute\">Content</span>-Type: application/json\n</code></pre>\n    </div>",
          "vote": "174"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As many others have mentioned, <code>application/json</code> is the correct answer.</p>\n\n<p>But what haven't been explained yet is what the other options you proposed mean.</p>\n\n<ul>\n<li><p><code>application/x-javascript</code>: Experimental MIME type for JavaScript before <code>application/javascript</code> was made standard.</p></li>\n<li><p><code>text/javascript</code>: Now obsolete. You should use <code>application/javascript</code> when using javascript.</p></li>\n<li><p><code>text/x-javascript</code>: Experimental MIME type for the above situation.</p></li>\n<li><p><code>text/x-json</code>: Experimental MIME type for JSON before <code>application/json</code> got officially registered.</p></li>\n</ul>\n\n<p>All in all, whenever you have any doubts about content types, you should check <a href=\"http://www.iana.org/assignments/media-types/media-types.xhtml\" rel=\"noreferrer\">this link</a> </p>\n    </div>",
          "vote": "169"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In <a href=\"http://en.wikipedia.org/wiki/JavaServer_Pages\">JSP</a>, you can use this in page directive:</p>\n\n<pre class=\"default s-code-block hljs sql\"><code><span class=\"hljs-operator\">&lt;</span><span class=\"hljs-operator\">%</span>@ page <span class=\"hljs-keyword\">language</span><span class=\"hljs-operator\">=</span>\"java\" contentType<span class=\"hljs-operator\">=</span>\"application/json; charset=UTF-8\"\n    pageEncoding<span class=\"hljs-operator\">=</span>\"UTF-8\"<span class=\"hljs-operator\">%</span><span class=\"hljs-operator\">&gt;</span>\n</code></pre>\n\n<p>The correct <a href=\"http://en.wikipedia.org/wiki/MIME\">MIME</a> media type for JSON is <code>application/json</code>.  JSP will use it for sending a response to the client.</p>\n    </div>",
          "vote": "152"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>“<code>application/json</code>” is the correct JSON content type.</p>\n\n<pre class=\"default s-code-block hljs javascript\"><code>def ajaxFindSystems = {\n  def result = Systems.list()\n  <span class=\"hljs-function\"><span class=\"hljs-title\">render</span>(<span class=\"hljs-params\">contentType:<span class=\"hljs-string\">'application/json'</span></span>)</span> {\n    results {\n      result.each{sys-&gt;\n        system(id:sys.id, <span class=\"hljs-attr\">name</span>:sys.name)\n      }\n    }\n    resultset (rows:result.size())\n  }\n}\n</code></pre>\n    </div>",
          "vote": "118"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <a href=\"http://www.iana.org/assignments/media-types/application/json\" rel=\"noreferrer\">IANA registration for <code>application/json</code></a> says</p>\n\n<blockquote>\n  <p>Applications that use this media type:  JSON has been used to\n     exchange data between applications written in all of these\n     programming languages: ActionScript, C, C#, Clojure, ColdFusion,\n     Common Lisp, E, Erlang, Go, Java, JavaScript, Lua, Objective CAML,\n     Perl, PHP, Python, Rebol, Ruby, Scala, and Scheme.</p>\n</blockquote>\n\n<p>You'll notice that IANA.org <a href=\"http://www.iana.org/assignments/media-types/media-types.xhtml\" rel=\"noreferrer\">doesn't list any of these other media types</a>, in fact even <code>application/javascript</code> is now obsolete. So <code>application/json</code> is really the only possible <em>correct</em> answer. </p>\n\n<p>Browser support is another thing. </p>\n\n<p>The most widely supported non-standard media types are <code>text/json</code> or <code>text/javascript</code>. But some big names even use <code>text/plain</code>. </p>\n\n<p>Even more strange is the Content-Type header sent by Flickr, who returns JSON as <code>text/xml</code>. Google uses <code>text/javascript</code> for some of it's ajax apis.</p>\n\n<p>Examples:</p>\n\n<pre class=\"default s-code-block hljs bash\"><code>curl -I <span class=\"hljs-string\">\"https://ajax.googleapis.com/ajax/services/search/video?v=1.0&amp;q=jsonexample\"</span>\n</code></pre>\n\n<p>Output: <code>Content-Type: text/javascript</code></p>\n\n<pre class=\"default s-code-block hljs bash\"><code>curl -I <span class=\"hljs-string\">\"https://www.flickr.com/services/rest/?method=flickr.test.echo&amp;format=json&amp;api_key=f82254c1491d894f1204d8408f645a93\"</span>\n</code></pre>\n\n<p>Output: <code>Content-Type: text/xml</code></p>\n    </div>",
          "vote": "116"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The right MIME type is <strong><code>application/json</code></strong></p>\n\n<p><strong>BUT</strong></p>\n\n<p>I experienced many situations where the browser type or the framework user needed:</p>\n\n<pre class=\"default s-code-block hljs css\"><code>text/<span class=\"hljs-selector-tag\">html</span>\n\napplication/javascript\n</code></pre>\n    </div>",
          "vote": "93"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I use the below</p>\n\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-title\">contentType</span>: 'application/json',\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>: <span class=\"hljs-type\">JSON</span>.stringify(<span class=\"hljs-type\">SendData</span>),</span>\n</code></pre>\n    </div>",
          "vote": "78"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <strong>Content-Type</strong> header should be set to '<strong>application/json</strong>' when posting. Server listening for the request should include \"<strong>Accept=application/json</strong>\".\nIn Spring MVC you can do it like this:</p>\n\n<pre class=\"default s-code-block hljs kotlin\"><code><span class=\"hljs-meta\">@RequestMapping(value=<span class=\"hljs-meta-string\">\"location\"</span>, method = RequestMethod.POST, headers = <span class=\"hljs-meta-string\">\"Accept=application/json\"</span>)</span>\n</code></pre>\n\n<p>Add headers to the response:</p>\n\n<pre class=\"default s-code-block hljs csharp\"><code>HttpHeaders headers = <span class=\"hljs-keyword\">new</span> HttpHeaders();\nheaders.<span class=\"hljs-keyword\">add</span>(<span class=\"hljs-string\">\"Content-Type\"</span>, <span class=\"hljs-string\">\"application/json\"</span>);\n</code></pre>\n    </div>",
          "vote": "69"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>The <code>application/json</code> works great in PHP to store an array or object\n  data.</p>\n</blockquote>\n\n<p>I use this code to put data in JSON on <a href=\"https://stackoverflow.com/a/35738814/4058484\"><em>Google Cloud Storage (GCS)</em></a> which is set <a href=\"https://stackoverflow.com/a/38866924/4058484\">publically viewable</a>:</p>\n\n<pre class=\"default s-code-block hljs php\"><code><span class=\"hljs-variable\">$context</span> = stream_context_create([\n    <span class=\"hljs-string\">'gs'</span> =&gt; [\n        <span class=\"hljs-string\">'acl'</span>=&gt;<span class=\"hljs-string\">'public-read'</span>, \n        <span class=\"hljs-string\">'Content-Type'</span> =&gt; <span class=\"hljs-string\">'application/json'</span>,\n    ]\n]);\n\nfile_put_contents(\n    <span class=\"hljs-string\">\"gs://BUCKETNAME/FILENAME.json\"</span>, \n    json_encode((<span class=\"hljs-keyword\">object</span>) <span class=\"hljs-variable\">$array</span>), \n    <span class=\"hljs-literal\">false</span>, \n    <span class=\"hljs-variable\">$context</span>\n);\n</code></pre>\n\n<p>To get back the data is straight forward:</p>\n\n<pre class=\"default s-code-block hljs bash\"><code><span class=\"hljs-variable\">$data</span> = json_decode(file_get_contents(<span class=\"hljs-string\">\"gs://BUCKETNAME/FILENAME.json\"</span>));\n</code></pre>\n    </div>",
          "vote": "62"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In <a href=\"http://en.wikipedia.org/wiki/Spring_Framework\" rel=\"noreferrer\">Spring</a> you have a defined type: <code>MediaType.APPLICATION_JSON_VALUE</code> which is equivalent to <em>application/json</em>.</p>\n    </div>",
          "vote": "60"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For JSON, I am using:</p>\n\n<pre class=\"default s-code-block hljs css\"><code> <span class=\"hljs-attribute\">Content</span>-Type: application/json\n</code></pre>\n\n<p>This is described in the IETF's JSON Data Interchange Format 7158 proposal, <a href=\"http://tools.ietf.org/html/rfc7158#section-1.2\">Section 1.2: Specifications of JSON</a>.</p>\n    </div>",
          "vote": "53"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the JSON is with padding then it will be <code>application/jsonp</code>. If the JSON is without padding then it will be <code>application/json</code>.</p>\n\n<p>To deal with both, it is a good practice to use: 'application/javascript' without bothering whether it is with padding or without padding.</p>\n    </div>",
          "vote": "51"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>PHP developers use this:</p>\n\n<pre class=\"default s-code-block hljs php\"><code><span class=\"hljs-meta\">&lt;?php</span>\n    header(<span class=\"hljs-string\">\"Content-type: application/json\"</span>);\n\n    <span class=\"hljs-comment\">// Do something here...</span>\n<span class=\"hljs-meta\">?&gt;</span>\n</code></pre>\n    </div>",
          "vote": "45"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Extending the accepted responses, when you are using JSON in a REST context...</p>\n\n<p>There is a <a href=\"http://restful-api-design.readthedocs.org/en/latest/resources.html#content-types\">strong argument</a> about using <code>application/x-resource+json</code> and <code>application/x-collection+json</code> when you are representing REST resources and collections.</p>\n\n<p>And if you decide to follow the <strong>jsonapi</strong> specification, <a href=\"http://jsonapi.org/format/#content-negotiation\">you should</a> use of <code>application/vnd.api+json</code>, as it is documented.</p>\n\n<p>Altough there is not an universal standard, it is clear that the added semantic to the resources being transfered justify a more explicit <em>Content-Type</em> than just <code>application/json</code>.</p>\n\n<p>Following this reasoning, other contexts could justify a more specific <em>Content-Type</em>.</p>\n    </div>",
          "vote": "45"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you get data from REST API in JSON so you have to use content-type </p>\n\n<pre class=\"default s-code-block hljs haskell\"><code><span class=\"hljs-type\">For</span> <span class=\"hljs-type\">JSON</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>: <span class=\"hljs-type\">Content</span>-<span class=\"hljs-type\">Type</span>:application/json</span>\n<span class=\"hljs-type\">For</span> <span class=\"hljs-type\">HTML</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>: <span class=\"hljs-type\">Content</span>-<span class=\"hljs-type\">Type</span>:text/html,</span>\n<span class=\"hljs-type\">For</span> <span class=\"hljs-type\">XHTML</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>: <span class=\"hljs-type\">Content</span>-<span class=\"hljs-type\">Type</span>:application/xhtml+xml,</span>\n<span class=\"hljs-type\">For</span> <span class=\"hljs-type\">XML</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>: <span class=\"hljs-type\">Content</span>-<span class=\"hljs-type\">Type</span>:text/xml, application/xml</span>\n</code></pre>\n    </div>",
          "vote": "42"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>Content-Type: application/json</code> - json\n<br><code>Content-Type: application/javascript</code> - json-P\n<br><code>Content-Type: application/x-javascript</code> - javascript\n<br><code>Content-Type: text/javascript</code> - javascript BUT obsolete, older IE versions used to use as html attribute.\n<br><code>Content-Type: text/x-javascript</code> - JavaScript Media Types BUT obsolete\n<br><code>Content-Type: text/x-json</code> - json before application/json got officially registered.</p>\n    </div>",
          "vote": "31"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://en.wikipedia.org/wiki/JSON\" rel=\"noreferrer\">JSON</a> (JavaScript Object Notation) and <a href=\"https://en.wikipedia.org/wiki/JSONP\" rel=\"noreferrer\">JSONP</a> (\"JSON with padding\") formats seems to be very similar and therefore it might be very confusing which MIME type they should be using. Even though the formats are similar, there are some subtle differences between them.</p>\n\n<p>So whenever in any doubts, I have a very simple approach (which works perfectly fine in most cases), namely, go and check corresponding RFC document.</p>\n\n<p><strong>JSON</strong>\n<a href=\"http://www.ietf.org/rfc/rfc4627.txt\" rel=\"noreferrer\">RFC 4627</a> (The application/json Media Type for JavaScript Object Notation (JSON)) is a specifications of JSON format. It says in section 6, that the MIME media type for JSON text is </p>\n\n<pre class=\"default s-code-block hljs erlang\"><code>application/json.\n</code></pre>\n\n<p><strong>JSONP</strong>\nJSONP (\"JSON with padding\") is handled different way than JSON, in a browser. JSONP is treated as a regular JavaScript script and therefore it should use <code>application/javascript,</code> the current official MIME type for JavaScript. In many cases, however, <code>text/javascript</code> MIME type will work fine too.</p>\n\n<p>Note that <code>text/javascript</code> has been marked as obsolete by <a href=\"http://www.rfc-editor.org/rfc/rfc4329.txt\" rel=\"noreferrer\">RFC 4329</a> (Scripting Media Types) document and it is recommended to use <code>application/javascript</code> type instead. However, due to legacy reasons, <code>text/javascript</code> is still widely used and it has cross-browser support (which is not always a case with <code>application/javascript</code> MIME type, especially with older browsers).</p>\n    </div>",
          "vote": "31"
        }
      ]
    },
    {
      "question": "How do I undo 'git add' before commit?",
      "url": "https://stackoverflow.com/questions/348170/how-do-i-undo-git-add-before-commit",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Want to improve this post?</b> Provide detailed answers to this question, including citations and an explanation of why your answer is correct. Answers without enough detail may be edited or deleted.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n</aside>\n\n    </div>\n\n<p>I mistakenly added files to Git using the command:</p>\n\n<pre><code>git add myfile.txt\n</code></pre>\n\n<p>I have not yet run <code>git commit</code>. Is there a way to undo this, so these files won't be included in the commit?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can undo <code>git add</code> before commit with</p>\n<pre><code>git reset &lt;file&gt;\n</code></pre>\n<p>which will remove it from the current index (the \"about to be committed\" list) without changing anything else.</p>\n<p>You can use</p>\n<pre><code>git reset\n</code></pre>\n<p>without any file name to unstage all due changes. This can come in handy when there are too many files to be listed one by one in a reasonable amount of time.</p>\n<p>In old versions of Git, the above commands are equivalent to <code>git reset HEAD &lt;file&gt;</code> and <code>git reset HEAD</code> respectively, and will fail if <code>HEAD</code> is undefined (because you haven't yet made any commits in your repository) or ambiguous (because you created a branch called <code>HEAD</code>, which is a stupid thing that you shouldn't do). This <a href=\"https://git.kernel.org/cgit/git/git.git/tree/Documentation/RelNotes/1.8.2.txt#n179\" rel=\"noreferrer\">was changed in Git 1.8.2</a>, though, so in modern versions of Git you can use the commands above even prior to making your first commit:</p>\n<blockquote>\n<p>\"git reset\" (without options or parameters) used to error out when\nyou do not have any commits in your history, but it now gives you\nan empty index (to match non-existent commit you are not even on).</p>\n</blockquote>\n<p>Documentation: <a href=\"https://git-scm.com/docs/git-reset\" rel=\"noreferrer\"><strong>git reset</strong></a></p>\n    </div>",
          "vote": "11405"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You want:</p>\n\n<pre><code>git rm --cached &lt;added_file_to_undo&gt;\n</code></pre>\n\n<p>Reasoning:</p>\n\n<p>When I was new to this, I first tried</p>\n\n<pre><code>git reset .\n</code></pre>\n\n<p>(to undo my entire initial add), only to get this (not so) helpful message:</p>\n\n<pre><code>fatal: Failed to resolve 'HEAD' as a valid ref.\n</code></pre>\n\n<p>It turns out that this is because the HEAD ref (branch?) doesn't exist until after the first commit. That is, you'll run into the same beginner's problem as me if your workflow, like mine, was something like:</p>\n\n<ol>\n<li>cd to my great new project directory to try out Git, the new hotness</li>\n<li><code>git init</code></li>\n<li><code>git add .</code></li>\n<li><p><code>git status</code></p>\n\n<p>... lots of crap scrolls by ...</p>\n\n<p>=&gt; Damn, I didn't want to add all of that.</p></li>\n<li><p>google \"undo git add\"</p>\n\n<p>=&gt; find Stack Overflow - yay</p></li>\n<li><p><code>git reset .</code></p>\n\n<p>=&gt;    fatal: Failed to resolve 'HEAD' as a valid ref.</p></li>\n</ol>\n\n<p>It further turns out that there's <a href=\"http://kerneltrap.org/mailarchive/git/2008/2/13/846664/thread\" rel=\"noreferrer\">a bug logged</a> against the unhelpfulness of this in the mailing list.</p>\n\n<p>And that the correct solution was right there in the Git status output (which, yes, I glossed over as 'crap)</p>\n\n<blockquote>\n<pre><code>...\n# Changes to be committed:\n#   (use \"git rm --cached &lt;file&gt;...\" to unstage)\n...\n</code></pre>\n</blockquote>\n\n<p>And the solution indeed is to use <code>git rm --cached FILE</code>.</p>\n\n<p>Note the warnings elsewhere here - <code>git rm</code> deletes your local working copy of the file, but <em>not</em> if you use <strong>--cached</strong>.  Here's the result of <code>git help rm</code>:</p>\n\n<blockquote>\n  <p>--cached\n      Use this option to unstage and remove paths only from the index.\n      Working tree files, whether modified or not, will be left.</p>\n</blockquote>\n\n<p>I proceed to use</p>\n\n<pre><code>git rm --cached .\n</code></pre>\n\n<p>to remove everything and start again. Didn't work though, because while <code>add .</code> is recursive, turns out <code>rm</code> needs <code>-r</code> to recurse. Sigh.</p>\n\n<pre><code>git rm -r --cached .\n</code></pre>\n\n<p>Okay, now I'm back to where I started. Next time I'm going to use <code>-n</code> to do a dry run and see what will be added:</p>\n\n<pre><code>git add -n .\n</code></pre>\n\n<p>I zipped up everything to a safe place before trusting <code>git help rm</code> about the <code>--cached</code> not destroying anything (and what if I misspelled it).</p>\n    </div>",
          "vote": "2241"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you type:</p>\n\n<pre><code>git status\n</code></pre>\n\n<p>Git will tell you what is staged, etc., including instructions on how to unstage:</p>\n\n<pre><code>use \"git reset HEAD &lt;file&gt;...\" to unstage\n</code></pre>\n\n<p>I find Git does a pretty good job of nudging me to do the right thing in situations like this.</p>\n\n<p><strong>Note: Recent Git versions (1.8.4.x) have changed this message:</strong></p>\n\n<pre><code>(use \"git rm --cached &lt;file&gt;...\" to unstage)\n</code></pre>\n    </div>",
          "vote": "561"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To clarify: <code>git add</code> moves changes from the current working directory to the <em>staging area</em> (index).</p>\n\n<p>This process is called <em>staging</em>. So the most natural command to <em>stage</em> the changes (changed files) is the obvious one:</p>\n\n<pre><code>git stage\n</code></pre>\n\n<p><code>git add</code> is just an easier-to-type alias for <code>git stage</code></p>\n\n<p>Pity there is no <code>git unstage</code> nor <code>git unadd</code> commands. The relevant one is harder to guess or remember, but it is pretty obvious:</p>\n\n<pre><code>git reset HEAD --\n</code></pre>\n\n<p>We can easily create an alias for this:</p>\n\n<pre><code>git config --global alias.unadd 'reset HEAD --'\ngit config --global alias.unstage 'reset HEAD --'\n</code></pre>\n\n<p>And finally, we have new commands:</p>\n\n<pre><code>git add file1\ngit stage file2\ngit unadd file2\ngit unstage file1\n</code></pre>\n\n<p>Personally I use even shorter aliases:</p>\n\n<pre><code>git a # For staging\ngit u # For unstaging\n</code></pre>\n    </div>",
          "vote": "261"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An addition to the accepted answer, if your mistakenly-added file was huge, you'll probably notice that, even after removing it from the index with '<code>git reset</code>', it still seems to occupy space in the <code>.git</code> directory.</p>\n\n<p>This is nothing to be worried about; the file is indeed still in the repository, but only as a \"loose object\". It will not be copied to other repositories (via clone, push), and the space will be eventually reclaimed - though perhaps not very soon. If you are anxious, you can run:</p>\n\n<pre><code>git gc --prune=now\n</code></pre>\n\n<hr>\n\n<p><em>Update</em> (what follows is my attempt to clear some confusion that can arise from the most upvoted answers):</p>\n\n<p>So, which is the real <strong>undo</strong> of <code>git add</code>?</p>\n\n<p><code>git reset HEAD &lt;file&gt;</code> ?</p>\n\n<p>or</p>\n\n<p><code>git rm --cached &lt;file&gt;</code>?</p>\n\n<p>Strictly speaking, and if I'm not mistaken: <strong>none</strong>.</p>\n\n<p><code>git add</code> <strong>cannot be undone</strong> - safely, in general.</p>\n\n<p>Let's recall first what <code>git add &lt;file&gt;</code> actually does:</p>\n\n<ol>\n<li><p>If <code>&lt;file&gt;</code> was <strong>not previously tracked</strong>, <code>git add</code>  <strong>adds it to the cache</strong>, with its current content.</p></li>\n<li><p>If <code>&lt;file&gt;</code> was <strong>already tracked</strong>, <code>git add</code>  <strong>saves the current content</strong> (snapshot, version) to the cache. In Git, this action is still called <strong>add</strong>, (not mere <em>update</em> it), because two different versions (snapshots) of a file are regarded as two different items: hence, we are indeed adding a new item to the cache, to be eventually committed later.</p></li>\n</ol>\n\n<p>In light of this, the question is slightly ambiguous:</p>\n\n<blockquote>\n  <p>I mistakenly added files using the command...</p>\n</blockquote>\n\n<p>The OP's scenario seems to be the first one (untracked file),  we want the \"undo\" to remove the file (not just the current contents) from the tracked items. <strong>If</strong> this is the case, then it's ok to run  <code>git rm --cached &lt;file&gt;</code>.</p>\n\n<p>And we could also run <code>git reset HEAD &lt;file&gt;</code>. This is in general preferable, because it works in both scenarios: it also does the undo when we wrongly added a version of an already tracked item.</p>\n\n<p>But there are two caveats.</p>\n\n<p>First: There is (as pointed out in the answer) only one scenario in which <code>git reset HEAD</code> doesn't work, but <code>git rm --cached</code> does: a new repository (no commits). But, really, this a practically irrelevant case.</p>\n\n<p>Second: Be aware that <code>git reset HEAD</code>  can't magically recover the previously cached file contents, it just resynchronises it from the HEAD. If our misguided <code>git add</code> overwrote a previous staged uncommitted version, we can't recover it. That's why, strictly speaking, we cannot undo [*].</p>\n\n<p>Example:</p>\n\n<pre><code>$ git init\n$ echo \"version 1\" &gt; file.txt\n$ git add file.txt   # First add of file.txt\n$ git commit -m 'first commit'\n$ echo \"version 2\" &gt; file.txt\n$ git add  file.txt   # Stage (don't commit) \"version 2\" of file.txt\n$ git diff --cached file.txt\n-version 1\n+version 2\n$ echo \"version 3\" &gt; file.txt\n$ git diff  file.txt\n-version 2\n+version 3\n$ git add  file.txt    # Oops we didn't mean this\n$ git reset HEAD file.txt  # Undo?\n$ git diff --cached file.txt  # No dif, of course. stage == HEAD\n$ git diff file.txt   # We have irrevocably lost \"version 2\"\n-version 1\n+version 3\n</code></pre>\n\n<p>Of course, this is not very critical if we just follow the usual lazy workflow of doing 'git add' only for adding new files (case 1), and we update new contents via the commit, <code>git commit -a</code> command.</p>\n\n<hr>\n\n<p><sup>\n* (Edit: the above is practically correct, but still there can be some slightly hackish/convoluted ways for recovering changes that were staged, but not committed and then overwritten - see the comments by Johannes Matokic and iolsmit)\n</sup></p>\n    </div>",
          "vote": "180"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Undo</strong> a file which has already been added is quite easy using Git. For resetting <code>myfile.txt</code>, which have already been added, use:</p>\n\n<pre><code>git reset HEAD myfile.txt\n</code></pre>\n\n<p><strong>Explanation:</strong></p>\n\n<p>After you staged unwanted file(s), to undo, you can do <code>git reset</code>. <code>Head</code> is head of your file in the local and the last parameter is the name of your file.</p>\n\n<p>I have created the steps in the image below in more details for you, including all steps which may happen in these cases:</p>\n\n<p><a href=\"https://i.stack.imgur.com/9JgGD.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/9JgGD.jpg\" alt=\"git reset HEAD file\"></a></p>\n    </div>",
          "vote": "140"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>git rm --cached . -r\n</code></pre>\n\n<p>will \"un-add\" everything you've added from your current directory recursively </p>\n    </div>",
          "vote": "101"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Run</p>\n\n<pre><code>git gui\n</code></pre>\n\n<p>and remove all the files manually or by selecting all of them and clicking on the <em>unstage from commit</em> button.</p>\n    </div>",
          "vote": "94"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Git has commands for every action imaginable, but it needs extensive knowledge to get things right and because of that it is counter-intuitive at best...</p>\n<p><strong>What you did before:</strong></p>\n<ul>\n<li>Changed a file and used <code>git add .</code>, or <code>git add &lt;file&gt;</code>.</li>\n</ul>\n<p><strong>What you want:</strong></p>\n<ul>\n<li><p>Remove the file from the index, but keep it versioned and left with uncommitted changes in working copy:</p>\n<pre><code> git reset HEAD &lt;file&gt;\n</code></pre>\n</li>\n<li><p>Reset the file to the last state from HEAD, undoing changes and removing them from the index:</p>\n <pre class=\"lang-bash s-code-block hljs\"><code> <span class=\"hljs-comment\"># Think `svn revert &lt;file&gt;` IIRC.</span>\n git reset HEAD &lt;file&gt;\n git checkout &lt;file&gt;\n\n <span class=\"hljs-comment\"># If you have a `&lt;branch&gt;` named like `&lt;file&gt;`, use:</span>\n git checkout -- &lt;file&gt;\n</code></pre>\n<p>This is needed since <code>git reset --hard HEAD</code> won't work with single files.</p>\n</li>\n<li><p>Remove <code>&lt;file&gt;</code> from index and versioning, keeping the un-versioned file with changes in working copy:</p>\n<pre><code> git rm --cached &lt;file&gt;\n</code></pre>\n</li>\n<li><p>Remove <code>&lt;file&gt;</code> from working copy and versioning completely:</p>\n<pre><code> git rm &lt;file&gt;\n</code></pre>\n</li>\n</ul>\n    </div>",
          "vote": "93"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The question is not clearly posed. The reason is that <code>git add</code> has two meanings:</p>\n\n<ol>\n<li>adding a <strong>new file</strong> to the staging area, then undo with <code>git rm --cached file</code>.</li>\n<li>adding a <strong>modified</strong> file to the staging area, then undo with <code>git reset HEAD file</code>.</li>\n</ol>\n\n<p><strong>If in doubt, use</strong></p>\n\n<pre><code>git reset HEAD file\n</code></pre>\n\n<p>Because it does the expected thing in both cases.</p>\n\n<p><strong>Warning:</strong> if you do <code>git rm --cached file</code> on a file that was <strong>modified</strong> (a file that existed before in the repository), then the file will be removed on <code>git commit</code>! It will still exist in your file system, but if anybody else pulls your commit, the file will be deleted from their work tree.</p>\n\n<p><code>git status</code> will tell you if the file was a <strong>new file</strong> or <strong>modified</strong>:</p>\n\n<pre><code>On branch master\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n    new file:   my_new_file.txt\n    modified:   my_modified_file.txt\n</code></pre>\n    </div>",
          "vote": "91"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you're on your initial commit and you can't use <code>git reset</code>, just declare \"Git bankruptcy\" and delete the <code>.git</code> folder and start over</p>\n    </div>",
          "vote": "67"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As per many of the other answers, you can use <code>git reset</code></p>\n<p><strong>BUT:</strong></p>\n<p>I found this great little post that actually adds the Git command (well, an alias) for <code>git unadd</code>: see <em><a href=\"https://blog.pivotal.io/labs/labs/git-unadd\" rel=\"nofollow noreferrer\">git unadd</a></em> for details or..</p>\n<p>Simply,</p>\n<pre><code>git config --global alias.unadd \"reset HEAD\"\n</code></pre>\n<p>Now you can</p>\n<pre><code>git unadd foo.txt bar.txt\n</code></pre>\n<p>Alternatively / directly:</p>\n<pre><code>git reset HEAD foo.txt bar.txt\n</code></pre>\n    </div>",
          "vote": "63"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use <code>git add -i</code> to remove just-added files from your upcoming commit.  Example:</p>\n\n<p>Adding the file you didn't want:</p>\n\n<pre><code>$ git add foo\n$ git status\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n#\n#       new file:   foo\n#\n# Untracked files:\n#   (use \"git add &lt;file&gt;...\" to include in what will be committed)\n# [...]#\n</code></pre>\n\n<p>Going into interactive add to undo your add (the commands typed at git here are \"r\" (revert), \"1\" (first entry in the list revert shows), 'return' to drop out of revert mode, and \"q\" (quit):</p>\n\n<pre><code>$ git add -i\n           staged     unstaged path\n  1:        +1/-0      nothing foo\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate     3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff       7: [q]uit       8: [h]elp\nWhat now&gt; r\n           staged     unstaged path\n  1:        +1/-0      nothing [f]oo\nRevert&gt;&gt; 1\n           staged     unstaged path\n* 1:        +1/-0      nothing [f]oo\nRevert&gt;&gt; \nnote: foo is untracked now.\nreverted one path\n\n*** Commands ***\n  1: [s]tatus     2: [u]pdate     3: [r]evert     4: [a]dd untracked\n  5: [p]atch      6: [d]iff       7: [q]uit       8: [h]elp\nWhat now&gt; q\nBye.\n$\n</code></pre>\n\n<p>That's it!  Here's your proof, showing that \"foo\" is back on the untracked list:</p>\n\n<pre><code>$ git status\n# On branch master\n# Untracked files:\n#   (use \"git add &lt;file&gt;...\" to include in what will be committed)\n# [...]\n#       foo\nnothing added to commit but untracked files present (use \"git add\" to track)\n$\n</code></pre>\n    </div>",
          "vote": "49"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>git remove</code> or <code>git rm</code> can be used for this, with the <code>--cached</code> flag. Try:</p>\n\n<pre><code>git help rm\n</code></pre>\n    </div>",
          "vote": "45"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's a way to avoid this vexing problem when you start a new project:</p>\n\n<ul>\n<li>Create the main directory for your new project.</li>\n<li>Run <code>git init</code>.</li>\n<li>Now create a .gitignore file (even if it's empty).</li>\n<li>Commit your .gitignore file.</li>\n</ul>\n\n<p>Git makes it really hard to do <code>git reset</code> if you don't have any commits.  If you create a tiny initial commit just for the sake of having one, after that you can <code>git add -A</code> and <code>git reset</code> as many times as you want in order to get everything right.</p>\n\n<p>Another advantage of this method is that if you run into line-ending troubles later and need to refresh all your files, it's easy:</p>\n\n<ul>\n<li>Check out that initial commit.  This will remove all your files.</li>\n<li>Then check out your most recent commit again.  This will retrieve fresh copies of your files, using your current line-ending settings.</li>\n</ul>\n    </div>",
          "vote": "41"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Note that if you fail to specify a revision then you have to include a separator. Example from my console:</p>\n\n<pre><code>git reset &lt;path_to_file&gt;\nfatal: ambiguous argument '&lt;path_to_file&gt;': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions\n\ngit reset -- &lt;path_to_file&gt;\nUnstaged changes after reset:\nM    &lt;path_to_file&gt;\n</code></pre>\n\n<p>(Git version 1.7.5.4)</p>\n    </div>",
          "vote": "38"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Maybe Git has evolved since you posted your question.</p>\n\n<pre><code>$&gt; git --version\ngit version 1.6.2.1\n</code></pre>\n\n<p>Now, you can try:</p>\n\n<pre><code>git reset HEAD .\n</code></pre>\n\n<p>This should be what you are looking for.</p>\n    </div>",
          "vote": "37"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To remove new files from the staging area (and only in case of a new file), as suggested above:</p>\n\n<pre><code>git rm --cached FILE\n</code></pre>\n\n<p>Use rm --cached only for new files accidentally added.</p>\n    </div>",
          "vote": "33"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To reset every file in a particular folder (and its subfolders), you can use the following command:</p>\n\n<pre><code>git reset *\n</code></pre>\n    </div>",
          "vote": "30"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use the <code>*</code> command to handle multiple files at a time:</p>\n\n<pre><code>git reset HEAD *.prj\ngit reset HEAD *.bmp\ngit reset HEAD *gdb*\n</code></pre>\n\n<p>etc.</p>\n    </div>",
          "vote": "29"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just type <code>git reset</code> it will revert back and it is like you never typed <code>git add .</code> since your last commit. Make sure you have committed before. </p>\n    </div>",
          "vote": "27"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Suppose I create a new file, <code>newFile.txt</code>:</p>\n\n<p><a href=\"https://i.stack.imgur.com/nxRgO.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/nxRgO.png\" alt=\"Enter image description here\"></a></p>\n\n<p>Suppose I add the file accidentally, <code>git add newFile.txt</code>:</p>\n\n<p><a href=\"https://i.stack.imgur.com/P6fpa.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/P6fpa.png\" alt=\"Enter image description here\"></a></p>\n\n<p>Now I want to undo this add, before commit, <code>git reset newFile.txt</code>:</p>\n\n<p><a href=\"https://i.stack.imgur.com/pbbZ8.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/pbbZ8.png\" alt=\"Enter image description here\"></a></p>\n    </div>",
          "vote": "26"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>For a specific file:</strong></p>\n\n<blockquote>\n  <ul>\n  <li>git reset my_file.txt</li>\n  <li>git checkout my_file.txt</li>\n  </ul>\n</blockquote>\n\n<p><strong>For all added files:</strong></p>\n\n<blockquote>\n  <ul>\n  <li>git reset .</li>\n  <li>git checkout .</li>\n  </ul>\n</blockquote>\n\n<p>Note: <strong>checkout</strong> changes the code in the files and moves to the last updated (committed) state. <strong>reset</strong> doesn't change the codes; it just resets the header.</p>\n    </div>",
          "vote": "22"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To undo <code>git add</code>, use:</p>\n\n<pre><code>git reset filename\n</code></pre>\n    </div>",
          "vote": "19"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is also interactive mode:</p>\n\n<pre><code>git add -i\n</code></pre>\n\n<p>Choose option 3 to un add files. In my case I often want to add more than one file, and with interactive mode you can use numbers like this to add files. This will take all but 4: 1, 2, 3, and 5</p>\n\n<p>To choose a sequence, just type 1-5 to take all from 1 to 5.</p>\n\n<p><a href=\"https://git-scm.com/book/en/v2/Git-Tools-Interactive-Staging\" rel=\"nofollow noreferrer\">Git staging files</a></p>\n    </div>",
          "vote": "17"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This command will unstash your changes:</p>\n\n<pre><code>git reset HEAD filename.txt\n</code></pre>\n\n<p>You can also use </p>\n\n<pre><code>git add -p \n</code></pre>\n\n<p>to add parts of files.</p>\n    </div>",
          "vote": "16"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h3>2019 update</h3>\n<p>As pointed out by others in related questions (see <a href=\"https://stackoverflow.com/a/58003889/9210961\">here</a>, <a href=\"https://stackoverflow.com/a/60928923/9210961\">here</a>, <a href=\"https://stackoverflow.com/a/61725470/9210961\">here</a>, <a href=\"https://stackoverflow.com/a/16044987/9210961\">here</a>, <a href=\"https://stackoverflow.com/a/6919257/9210961\">here</a>, <a href=\"https://stackoverflow.com/a/58610415/9210961\">here</a>, and <a href=\"https://stackoverflow.com/a/58830990/9210961\">here</a>), you can now <strong>unstage a single file</strong> with:</p>\n<pre class=\"lang-sh s-code-block hljs bash\"><code>git restore --staged &lt;file&gt;\n</code></pre>\n<p>and <strong>unstage all files</strong> (from the root of the repo) with:</p>\n<pre class=\"lang-sh s-code-block hljs bash\"><code>git restore --staged .\n</code></pre>\n<h3>Notes</h3>\n<p><code>git restore</code> was introduced in <a href=\"https://github.com/git/git/commit/f496b064fc1135e0dded7f93d85d72eb0b302c22\" rel=\"nofollow noreferrer\">July 2019</a> and released in version 2.23.<br>\nWith the <code>--staged</code> flag, it restores the content of the index (what is asked here).</p>\n<p>When running <code>git status</code> with staged uncommitted file(s), this is now what Git suggests to use to unstage file(s) (instead of <code>git reset HEAD &lt;file&gt;</code> as it used to prior to v2.23).</p>\n    </div>",
          "vote": "16"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>git add myfile.txt</code> # This will add your file into the to-be-committed list</p>\n\n<p>Quite opposite to this command is,</p>\n\n<pre><code>git reset HEAD myfile.txt  # This will undo it.\n</code></pre>\n\n<p>so, you will be in the previous state. Specified will be again in untracked list (previous state).</p>\n\n<p>It will reset your head with that specified file. so, if your head doesn't have it means, it will simply reset it.</p>\n    </div>",
          "vote": "15"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>git reset filename.txt\n</code></pre>\n\n<p>Will remove a file named filename.txt from the current index, the \"about to be committed\" area, without changing anything else.</p>\n    </div>",
          "vote": "13"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>git reset filename.txt  \n</code></pre>\n\n<blockquote>\n  <p>Will remove a file named filename.txt from the current index, the \"about to be committed\" area, without changing anything else.</p>\n</blockquote>\n    </div>",
          "vote": "12"
        }
      ]
    },
    {
      "question": "What is the “-->” operator in C/C++?",
      "url": "https://stackoverflow.com/questions/1642028/what-is-the-operator-in-c-c",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>After reading <a href=\"http://groups.google.com/group/comp.lang.c++.moderated/msg/33f173780d58dd20\" rel=\"noreferrer\">Hidden Features and Dark Corners of C++/STL</a> on <code>comp.lang.c++.moderated</code>, I was completely surprised that the following snippet compiled and worked in both Visual Studio 2008 and G++ 4.4.</p>\n<p>Here's the code:</p>\n<pre class=\"default s-code-block hljs cpp\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">while</span> (x --&gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// x goes to 0</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, x);\n    }\n}\n</code></pre>\n<p>Output:</p>\n<pre class=\"default s-code-block hljs\"><code>9 8 7 6 5 4 3 2 1 0\n</code></pre>\n<p>I'd assume this is C, since it works in GCC as well. Where is this defined in the standard, and where has it come from?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>--&gt;</code> is not an operator. It is in fact two separate operators, <code>--</code> and <code>&gt;</code>.</p>\n\n<p>The conditional's code decrements <code>x</code>, while returning <code>x</code>'s original (not decremented) value, and then compares the original value with <code>0</code> using the <code>&gt;</code> operator.</p>\n\n<p><strong>To better understand, the statement could be written as follows:</strong></p>\n\n<pre class=\"default s-code-block hljs lua\"><code><span class=\"hljs-keyword\">while</span>( (x<span class=\"hljs-comment\">--) &gt; 0 )</span>\n</code></pre>\n    </div>",
          "vote": "9050"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Or for something completely different... <code>x</code> slides to <code>0</code>.</p>\n\n<pre class=\"default s-code-block hljs perl\"><code><span class=\"hljs-keyword\">while</span> (<span class=\"hljs-keyword\">x</span> --\\\n            \\\n             \\\n              \\\n               &gt; <span class=\"hljs-number\">0</span>)\n     <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, <span class=\"hljs-keyword\">x</span>);\n</code></pre>\n\n<p>Not so mathematical, but... every picture paints a thousand words...</p>\n    </div>",
          "vote": "3398"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>That's a very complicated operator, so even <a href=\"https://isocpp.org/std/the-committee\" rel=\"noreferrer\">ISO/IEC JTC1 (Joint Technical Committee 1)</a> placed its description in two different parts of the C++ Standard.</p>\n\n<p>Joking aside, they are two different operators: <code>--</code> and <code>&gt;</code> described respectively in §5.2.6/2 and §5.9 of the C++03 Standard.</p>\n    </div>",
          "vote": "2448"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>x</code> can go to zero even faster in the opposite direction:</p>\n\n<pre class=\"default s-code-block hljs perl\"><code><span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">x</span> = <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-keyword\">while</span>( <span class=\"hljs-number\">0</span> &lt;---- <span class=\"hljs-keyword\">x</span> )\n{\n   <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, <span class=\"hljs-keyword\">x</span>);\n}\n</code></pre>\n\n<p><code>8 6 4 2</code></p>\n\n<p>You can control speed with an arrow!</p>\n\n<pre class=\"default s-code-block hljs perl\"><code><span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">x</span> = <span class=\"hljs-number\">100</span>;\n\n<span class=\"hljs-keyword\">while</span>( <span class=\"hljs-number\">0</span> &lt;-------------------- <span class=\"hljs-keyword\">x</span> )\n{\n   <span class=\"hljs-keyword\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, <span class=\"hljs-keyword\">x</span>);\n}\n</code></pre>\n\n<p><code>90 80 70 60 50 40 30 20 10</code></p>\n\n<p>;)</p>\n    </div>",
          "vote": "1357"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's equivalent to</p>\n\n<pre class=\"default s-code-block hljs lua\"><code><span class=\"hljs-keyword\">while</span> (x<span class=\"hljs-comment\">-- &gt; 0)</span>\n</code></pre>\n\n<p><code>x--</code> (post decrement) is equivalent to <code>x = x-1</code> so, the code transforms to:</p>\n\n<pre class=\"default s-code-block hljs php\"><code><span class=\"hljs-keyword\">while</span>(x &gt; <span class=\"hljs-number\">0</span>) {\n    x = x-<span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-comment\">// logic</span>\n}\nx--;   <span class=\"hljs-comment\">// The post decrement done when x &lt;= 0</span>\n</code></pre>\n    </div>",
          "vote": "1336"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's</p>\n<pre class=\"default s-code-block hljs cpp\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n  <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-keyword\">while</span> (x-- &gt; <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// x goes to 0</span>\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, x);\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<p>Just the space makes the things look funny, <code>--</code> decrements and <code>&gt;</code> compares.</p>\n    </div>",
          "vote": "569"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The usage of <code>--&gt;</code> has historical relevance. Decrementing was (and still is in some cases), faster than incrementing on the x86 architecture. Using <code>--&gt;</code> suggests that <code>x</code> is going to <code>0</code>, and appeals to those with mathematical backgrounds.</p>\n    </div>",
          "vote": "449"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Utterly geek, but I will be using this:</p>\n\n<pre class=\"default s-code-block hljs csharp\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> as ;while</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">int</span> argc, <span class=\"hljs-built_in\">char</span>* argv[]</span>)</span>\n{\n    <span class=\"hljs-built_in\">int</span> n = atoi(argv[<span class=\"hljs-number\">1</span>]);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">do</span> <span class=\"hljs-title\">printf</span>(<span class=\"hljs-params\"><span class=\"hljs-string\">\"n is %d\\n\"</span>, n</span>) <span class=\"hljs-title\">as</span> (<span class=\"hljs-params\"> n --&gt; <span class=\"hljs-number\">0</span></span>)</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n    </div>",
          "vote": "389"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"default s-code-block hljs lua\"><code><span class=\"hljs-keyword\">while</span>( x<span class=\"hljs-comment\">-- &gt; 0 )</span>\n</code></pre>\n\n<p>is how that's parsed.</p>\n    </div>",
          "vote": "384"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One book I read (I don't remember correctly which book) stated: <strong>Compilers try to parse expressions to the biggest token</strong> by using the left right rule.</p>\n\n<p>In this case, the expression:</p>\n\n<pre class=\"default s-code-block hljs lua\"><code>x<span class=\"hljs-comment\">--&gt;0</span>\n</code></pre>\n\n<p>Parses to biggest tokens: </p>\n\n<pre class=\"default s-code-block hljs yaml\"><code><span class=\"hljs-attr\">token 1:</span> <span class=\"hljs-string\">x</span>\n<span class=\"hljs-attr\">token 2:</span> <span class=\"hljs-string\">--</span>\n<span class=\"hljs-attr\">token 3:</span> <span class=\"hljs-string\">&gt;</span>\n<span class=\"hljs-attr\">token 4:</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">conclude:</span> <span class=\"hljs-string\">x--</span> <span class=\"hljs-string\">&gt;</span> <span class=\"hljs-number\">0</span>\n</code></pre>\n\n<p><strong>The same rule</strong> applies to this expression:</p>\n\n<pre class=\"default s-code-block hljs css\"><code><span class=\"hljs-selector-tag\">a</span>-----<span class=\"hljs-selector-tag\">b</span>\n</code></pre>\n\n<p>After parse:</p>\n\n<pre class=\"default s-code-block hljs yaml\"><code><span class=\"hljs-attr\">token 1:</span> <span class=\"hljs-string\">a</span>\n<span class=\"hljs-attr\">token 2:</span> <span class=\"hljs-string\">--</span>\n<span class=\"hljs-attr\">token 3:</span> <span class=\"hljs-string\">--</span>\n<span class=\"hljs-attr\">token 4:</span> <span class=\"hljs-bullet\">-</span>\n<span class=\"hljs-attr\">token 5:</span> <span class=\"hljs-string\">b</span>\n<span class=\"hljs-attr\">conclude:</span> <span class=\"hljs-string\">(a--)--</span> <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">b</span>\n</code></pre>\n\n<p>I hope this helps to understand the complicated expression ^^</p>\n    </div>",
          "vote": "334"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is exactly the same as</p>\n<pre class=\"default s-code-block hljs lua\"><code><span class=\"hljs-keyword\">while</span> (x<span class=\"hljs-comment\">--)</span>\n</code></pre>\n    </div>",
          "vote": "284"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Anyway, we have a \"goes to\" operator now. <code>\"--&gt;\"</code> is easy to be remembered as a direction, and \"while x goes to zero\" is meaning-straight.</p>\n\n<p>Furthermore, it is a little more efficient than <code>\"for (x = 10; x &gt; 0; x --)\"</code> on some platforms.</p>\n    </div>",
          "vote": "250"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This code first compares x and 0 and then decrements x. (Also said in the first answer: You're post-decrementing x and then comparing x and 0 with the <code>&gt;</code> operator.) See the output of this code:</p>\n\n<pre class=\"default s-code-block hljs\"><code>9 8 7 6 5 4 3 2 1 0\n</code></pre>\n\n<p>We now first compare and then decrement by seeing 0 in the output.</p>\n\n<p>If we want to first decrement and then compare, use this code:</p>\n\n<pre class=\"default s-code-block hljs cpp\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">while</span>( --x&gt; <span class=\"hljs-number\">0</span> ) <span class=\"hljs-comment\">// x goes to 0</span>\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, x);\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n\n<p>That output is:</p>\n\n<pre class=\"default s-code-block hljs\"><code>9 8 7 6 5 4 3 2 1\n</code></pre>\n    </div>",
          "vote": "228"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>My compiler will print out 9876543210 when I run this code.</p>\n\n<pre class=\"default s-code-block hljs cpp\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">while</span>( x --&gt; <span class=\"hljs-number\">0</span> ) <span class=\"hljs-comment\">// x goes to 0</span>\n    {\n        std::cout &lt;&lt; x;\n    }\n}\n</code></pre>\n\n<p>As expected. The <code>while( x-- &gt; 0 )</code> actually means <code>while( x &gt; 0)</code>. The <code>x--</code> post decrements <code>x</code>.</p>\n\n<pre class=\"default s-code-block hljs cpp\"><code><span class=\"hljs-keyword\">while</span>( x &gt; <span class=\"hljs-number\">0</span> ) \n{\n    x--;\n    std::cout &lt;&lt; x;\n}\n</code></pre>\n\n<p>is a different way of writing the same thing.</p>\n\n<p>It is nice that the original looks like \"while x goes to 0\" though.</p>\n    </div>",
          "vote": "186"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is a space missing between <code>--</code> and <code>&gt;</code>. <code>x</code> is post decremented, that is, decremented after checking the condition <code>x&gt;0 ?</code>.</p>\n    </div>",
          "vote": "155"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>--</code> is the <strong>decrement</strong> operator and <code>&gt;</code> is the <strong>greater-than</strong> operator.</p>\n\n<p>The two operators are applied as a single one like <code>--&gt;</code>.</p>\n    </div>",
          "vote": "144"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's a combination of two operators. First <code>--</code> is for decrementing the value, and <code>&gt;</code> is for checking whether the value is greater than the right-hand operand.</p>\n\n<pre class=\"default s-code-block hljs cpp\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">10</span>;\n\n    <span class=\"hljs-keyword\">while</span> (x-- &gt; <span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>,x);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n\n<p>The output will be:</p>\n\n<pre class=\"default s-code-block hljs\"><code>9 8 7 6 5 4 3 2 1 0            \n</code></pre>\n    </div>",
          "vote": "134"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Actually, <code>x</code> is post-decrementing and with that condition is being checked. It's not <code>--&gt;</code>, it's <code>(x--) &gt; 0</code></p>\n\n<p>Note: value of <code>x</code> is changed after the condition is checked, because it post-decrementing. Some similar cases can also occur, for example:</p>\n\n<pre class=\"default s-code-block hljs rust\"><code>--&gt;    x--&gt;<span class=\"hljs-number\">0</span>\n++&gt;    x++&gt;<span class=\"hljs-number\">0</span>\n--&gt;=   x--&gt;=<span class=\"hljs-number\">0</span>\n++&gt;=   x++&gt;=<span class=\"hljs-number\">0</span>\n</code></pre>\n    </div>",
          "vote": "125"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://en.wikipedia.org/wiki/C_%28programming_language%29\">C</a> and <a href=\"https://en.wikipedia.org/wiki/C++\">C++</a> obey the \"maximum munch\" rule. The same way a---b is translated to <code>(a--) - b</code>, in your case  <code>x--&gt;0</code> translates to <code>(x--)&gt;0</code>.</p>\n\n<p>What the rule says essentially is that going left to right, expressions are formed by taking the maximum of characters which will form an valid expression. </p>\n    </div>",
          "vote": "123"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Why all the complication?</p>\n<p>The simple answer to the original question is just:</p>\n<pre class=\"default s-code-block hljs cpp\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">while</span> (x &gt; <span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, x);\n        x = x<span class=\"hljs-number\">-1</span>;\n    }\n}\n</code></pre>\n<p>It does the same thing. I am not saying you should do it like this, but it does the same thing and would have answered the question in one post.</p>\n<p>The <code>x--</code> is just shorthand for the above, and <code>&gt;</code> is just a normal greater-than <code>operator</code>. No big mystery!</p>\n<p>There are too many people making simple things complicated nowadays  ;)</p>\n    </div>",
          "vote": "31"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Conventional way we define condition in while loop parenthesis\"<code>()</code>\" and terminating condition inside the braces\"<code>{}</code>\", but this <code>--</code> &amp; <code>&gt;</code> is a way one defines all at once.\nFor example:</p>\n<pre class=\"default s-code-block hljs csharp\"><code><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">int</span> a = <span class=\"hljs-number\">5</span>\n    <span class=\"hljs-keyword\">while</span>((a--) &gt; <span class=\"hljs-number\">0</span>){ <span class=\"hljs-comment\">// Decrement and comparison both at once</span>\n        <span class=\"hljs-comment\">// Code</span>\n    }\n}\n</code></pre>\n<p>It says, decrement <code>a</code> and run the loop till the time <code>a</code> is greater than <code>0</code></p>\n<p>Other way it should have been like:</p>\n<pre class=\"default s-code-block hljs csharp\"><code><span class=\"hljs-function\"><span class=\"hljs-built_in\">int</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span> {\n    <span class=\"hljs-built_in\">int</span> a = <span class=\"hljs-number\">5</span>;\n    <span class=\"hljs-keyword\">while</span>(a &gt; <span class=\"hljs-number\">0</span>) {\n        a = a <span class=\"hljs-number\">-1</span> <span class=\"hljs-comment\">// Decrement inside loop</span>\n        <span class=\"hljs-comment\">// Code</span>\n    }\n}\n</code></pre>\n<p>Both ways, we do the same thing and achieve the same goals.</p>\n    </div>",
          "vote": "27"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>(x --&gt; 0)</code> means <code>(x-- &gt; 0)</code>.</p>\n<ol>\n<li>You can use <code>(x --&gt;)</code><br>\n<code>Output: 9 8 7 6 5 4 3 2 1 0</code></li>\n</ol>\n<blockquote>\n</blockquote>\n<ol start=\"2\">\n<li>You can use <code>(-- x &gt; 0)</code>  It's mean <code>(--x &gt; 0)</code><br>\n<code>Output: 9 8 7 6 5 4 3 2 1</code></li>\n</ol>\n<blockquote>\n</blockquote>\n<ol start=\"3\">\n<li>You can use</li>\n</ol>\n<pre class=\"default s-code-block hljs lua\"><code>(<span class=\"hljs-comment\">--\\</span>\n    \\\n     x &gt; <span class=\"hljs-number\">0</span>)\n</code></pre>\n<p><code>Output:  9 8 7 6 5 4 3 2 1</code></p>\n<ol start=\"4\">\n<li>You can use</li>\n</ol>\n<pre class=\"default s-code-block hljs lua\"><code>(\\\n  \\\n   x <span class=\"hljs-comment\">--&gt; 0)</span>\n</code></pre>\n<p><code>Output: 9 8 7 6 5 4 3 2 1 0</code></p>\n<ol start=\"5\">\n<li>You can use</li>\n</ol>\n<pre class=\"default s-code-block hljs lua\"><code>(\\\n  \\\n   x <span class=\"hljs-comment\">--&gt; 0</span>\n          \\\n           \\\n            )\n</code></pre>\n<p><code>Output: 9 8 7 6 5 4 3 2 1 0</code></p>\n<ol start=\"6\">\n<li>You can use also</li>\n</ol>\n<pre class=\"default s-code-block hljs lua\"><code>(\n x \n  <span class=\"hljs-comment\">--&gt; </span>\n      <span class=\"hljs-number\">0</span>\n       )\n</code></pre>\n<p><code>Output: 9 8 7 6 5 4 3 2 1 0</code></p>\n<p>Likewise, you can try lot of methods to execute this command successfully.</p>\n    </div>",
          "vote": "20"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"default s-code-block hljs cpp\"><code><span class=\"hljs-keyword\">char</span> sep = <span class=\"hljs-string\">'\\n'</span>  /<span class=\"hljs-number\">1</span>\\\n; <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">68</span>    /<span class=\"hljs-number\">1</span>  \\\n; <span class=\"hljs-keyword\">while</span> (i  ---      <span class=\"hljs-number\">1</span>\\\n                       \\\n                       /<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>                               /<span class=\"hljs-number\">1</span>\\\n                                                            /<span class=\"hljs-number\">1</span>\\\n                                                            /<span class=\"hljs-number\">1</span>\\\n                                                            /<span class=\"hljs-number\">1</span>\\\n                                                            /<span class=\"hljs-number\">1</span>\\\n                            /           <span class=\"hljs-number\">1</span>\\\n                           /            <span class=\"hljs-number\">1</span> \\\n                          /             <span class=\"hljs-number\">1</span>  \\\n                         /              <span class=\"hljs-number\">1</span>   \\\n                         /<span class=\"hljs-number\">1</span>            /<span class=\"hljs-number\">1</span>    \\\n                          /<span class=\"hljs-number\">1</span>          /<span class=\"hljs-number\">1</span>      \\\n                           /<span class=\"hljs-number\">1</span>        /<span class=\"hljs-number\">1</span>        /<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">1</span>&gt; <span class=\"hljs-number\">0</span>) std::cout \\\n                              &lt;&lt;i&lt;&lt;                               sep;\n</code></pre>\n<p>For larger numbers, C++20 introduces some more advanced looping features.\nFirst to catch <code>i</code> we can build an inverse loop-de-loop and deflect it onto the <code>std::ostream</code>. However, the speed of <code>i</code> is implementation-defined, so we can use the new C++20 speed operator <code>&lt;&lt;i&lt;&lt;</code> to speed it up. We must also catch it by building wall, if we don't, <code>i</code> leaves the scope and de referencing it causes undefined behavior. To specify the separator, we can use:</p>\n<pre class=\"default s-code-block hljs cpp\"><code> std::cout \\\n           sep\n</code></pre>\n<p>and there we have a for loop from 67 to 1.</p>\n    </div>",
          "vote": "9"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here <code>--</code> is the unary post decrement operator.</p>\n<pre class=\"default s-code-block hljs cpp\"><code> <span class=\"hljs-keyword\">while</span> (x-- &gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// x goes to 0</span>\n {\n     <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, x);\n }\n</code></pre>\n<ul>\n<li>In the beginning, the condition will evaluate as\n<code>(x &gt; 0) // 10 &gt; 0</code></li>\n<li>Now because the condition is true, it will go into the loop with a decremented value\n<code>x-- // x = 9</code></li>\n<li>That's why the first printed value is 9</li>\n<li>And so on. In the last loop <code>x=1</code>, so the condition is true. As per the unary operator, the value changed to <code>x = 0</code> at the time of print.</li>\n<li>Now, <code>x = 0</code>, which evaluates the condition <code>(x &gt; 0 )</code> as false and the <em>while</em> loop exits.</li>\n</ul>\n    </div>",
          "vote": "2"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This <code>--&gt;</code> is not an operator at all. We have an operator like <code>-&gt;</code>, but not like <code>--&gt;</code>. It is just a wrong interpretation of <code>while(x-- &gt;0)</code> which simply means x has the post decrement operator and this loop will run till it is greater than <em>zero</em>.</p>\n<p>Another simple way of writing this code would be <code>while(x--)</code>. The  <em>while</em> loop will stop whenever it gets a false condition and here there is only one case, i.e., <code>0</code>. So it will stop when the x value is decremented to <em>zero</em>.</p>\n    </div>",
          "vote": "2"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>--&gt;</code> is not an operator, it is the juxtaposition of <code>--</code> (post-decrement) and <code>&gt;</code> (greater than comparison).</p>\n<p>The loop will look more familiar as:</p>\n<pre class=\"default s-code-block hljs cpp\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">while</span> (x-- &gt; <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// x goes to 0</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d \"</span>, x);\n    }\n}\n</code></pre>\n<p>This loop is a classic idiom to enumerate values between <code>10</code> (the excluded upper bound) and <code>0</code> the included lower bound, useful to iterate over the elements of an array from the last to the first.</p>\n<p>The initial value <code>10</code> is the total number of iterations (for example the length of the array), and one plus the first value used inside the loop. The <code>0</code> is the last value of <code>x</code> inside the loop, hence the comment <em>x goes to 0</em>.</p>\n<p>Note that the value of <code>x</code> after the loop completes is <code>-1</code>.</p>\n<p>Note also that this loop will operate the <strong>same</strong> way if <code>x</code> has an <strong>unsigned type</strong> such as <code>size_t</code>, which is a strong advantage over the naive alternative <code>for (i = length-1; i &gt;= 0; i--)</code>.</p>\n<p>For this reason, I am actually a fan of this surprising syntax: <code>while (x --&gt; 0)</code>. I find this idiom eye-catching and elegant, just like <code>for (;;)</code> vs: <code>while (1)</code> (which looks confusingly similar to <code>while (l)</code>). It also works in other languages whose syntax is inspired by C: C++, Objective-C, java, javascript, C# to name a few.</p>\n    </div>",
          "vote": "-1"
        }
      ]
    },
    {
      "question": "How can I remove a specific item from an array?",
      "url": "https://stackoverflow.com/questions/5767325/how-can-i-remove-a-specific-item-from-an-array",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I have an array of numbers and I'm using the <code>.push()</code> method to add elements to it.</p>\n\n<p>Is there a simple way to remove a specific element from an array?</p>\n\n<p>I'm looking for the equivalent of something like:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>array.remove(number);\n</code></pre>\n\n<p>I have to use <em>core</em> JavaScript. Frameworks are not allowed.</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Find the <code>index</code> of the array element you want to remove using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" rel=\"noreferrer\"><code>indexOf</code></a>, and then remove that index with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" rel=\"noreferrer\"><code>splice</code></a>.</p>\n<blockquote>\n<p>The splice() method changes the contents of an array by removing\nexisting elements and/or adding new elements.</p>\n</blockquote>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> array = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">9</span>];\n\n<span class=\"hljs-built_in\">console</span>.log(array);\n\n<span class=\"hljs-keyword\">const</span> index = array.indexOf(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-keyword\">if</span> (index &gt; -<span class=\"hljs-number\">1</span>) {\n  array.splice(index, <span class=\"hljs-number\">1</span>);\n}\n\n<span class=\"hljs-comment\">// array = [2, 9]</span>\n<span class=\"hljs-built_in\">console</span>.log(array); </code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif1\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>The second parameter of <code>splice</code> is the number of elements to remove. Note that <code>splice</code> modifies the array in place and returns a new array containing the elements that have been removed.</p>\n<hr>\n<p>For the reason of completeness, here are functions. The first function removes only a single occurrence (i.e. removing the first match of <code>5</code> from <code>[2,5,9,1,5,8,5]</code>), while the second function removes all occurrences:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">removeItemOnce</span>(<span class=\"hljs-params\">arr, value</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> index = arr.indexOf(value);\n  <span class=\"hljs-keyword\">if</span> (index &gt; -<span class=\"hljs-number\">1</span>) {\n    arr.splice(index, <span class=\"hljs-number\">1</span>);\n  }\n  <span class=\"hljs-keyword\">return</span> arr;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">removeItemAll</span>(<span class=\"hljs-params\">arr, value</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">while</span> (i &lt; arr.length) {\n    <span class=\"hljs-keyword\">if</span> (arr[i] === value) {\n      arr.splice(i, <span class=\"hljs-number\">1</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      ++i;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> arr;\n}\n<span class=\"hljs-comment\">// Usage</span>\n<span class=\"hljs-built_in\">console</span>.log(removeItemOnce([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">5</span>))\n<span class=\"hljs-built_in\">console</span>.log(removeItemAll([<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">5</span>))</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif2\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>In TypeScript, these functions can stay type-safe with a type parameter:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">removeItem</span>&lt;<span class=\"hljs-title\">T</span>&gt;(<span class=\"hljs-params\">arr: <span class=\"hljs-built_in\">Array</span>&lt;T&gt;, value: T</span>): <span class=\"hljs-title\">Array</span>&lt;<span class=\"hljs-title\">T</span>&gt; </span>{ \n  <span class=\"hljs-keyword\">const</span> index = arr.indexOf(value);\n  <span class=\"hljs-keyword\">if</span> (index &gt; -<span class=\"hljs-number\">1</span>) {\n    arr.splice(index, <span class=\"hljs-number\">1</span>);\n  }\n  <span class=\"hljs-keyword\">return</span> arr;\n}\n</code></pre>\n    </div>",
          "vote": "13492"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Edited on 2016 October</strong></p>\n<ul>\n<li>Do it simple, intuitive and explicit (<a href=\"https://en.wikipedia.org/wiki/Occam%27s_razor\" rel=\"noreferrer\">Occam's razor</a>)</li>\n<li>Do it immutable (original array stay unchanged)</li>\n<li>Do it with standard JavaScript functions, if your browser doesn't support them - <strong>use polyfill</strong></li>\n</ul>\n<p>In this code example I use <strong>\"array.filter(...)\"</strong> function to remove unwanted items from an array. This function doesn't change the original array and creates a new one. If your browser doesn't support this function (e.g. Internet Explorer before version 9, or Firefox before version 1.5), consider using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill\" rel=\"noreferrer\"><strong>the filter polyfill from Mozilla</strong></a>.</p>\n<h2>Removing item (ECMA-262 Edition 5 code aka oldstyle JavaScript)</h2>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> value = <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>]\n\narr = arr.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> item !== value\n})\n\n<span class=\"hljs-built_in\">console</span>.log(arr)\n<span class=\"hljs-comment\">// [ 1, 2, 4, 5 ]</span>\n</code></pre>\n<h2>Removing item (ECMAScript 6 code)</h2>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-number\">3</span>\n\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>]\n\narr = arr.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item !== value)\n\n<span class=\"hljs-built_in\">console</span>.log(arr)\n<span class=\"hljs-comment\">// [ 1, 2, 4, 5 ]</span>\n</code></pre>\n<p><strong>IMPORTANT</strong> ECMAScript&nbsp;6 \"() =&gt; {}\" arrow function syntax is not supported in Internet&nbsp;Explorer at all, Chrome before 45 version, Firefox before 22 version, and Safari before 10 version. To use ECMAScript&nbsp;6 syntax in old browsers you can use <a href=\"http://babeljs.io\" rel=\"noreferrer\">BabelJS</a>.</p>\n<hr>\n<h2>Removing multiple items (ECMAScript&nbsp;7 code)</h2>\n<p>An additional advantage of this method is that you can remove multiple items</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> forDeletion = [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>]\n\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>]\n\narr = arr.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> !forDeletion.includes(item))\n<span class=\"hljs-comment\">// !!! Read below about array.includes(...) support !!!</span>\n\n<span class=\"hljs-built_in\">console</span>.log(arr)\n<span class=\"hljs-comment\">// [ 1, 4 ]</span>\n</code></pre>\n<p><strong>IMPORTANT</strong> \"array.includes(...)\" function is not supported in Internet&nbsp;Explorer at all, Chrome before 47 version, Firefox before 43 version, Safari before 9 version, and Edge before 14 version so <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill\" rel=\"noreferrer\"><strong>here is polyfill from Mozilla</strong></a>.</p>\n<h2>Removing multiple items (in the future, maybe)</h2>\n<p>If the <a href=\"https://github.com/tc39/proposal-bind-operator\" rel=\"noreferrer\">\"This-Binding Syntax\"</a> proposal is ever accepted, you'll be able to do this:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// array-lib.js</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\">...forDeletion</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> !forDeletion.includes(item))\n}\n\n<span class=\"hljs-comment\">// main.js</span>\n\n<span class=\"hljs-keyword\">import</span> { remove } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./array-lib.js'</span>\n\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>]\n\n<span class=\"hljs-comment\">// :: This-Binding Syntax Proposal</span>\n<span class=\"hljs-comment\">// using \"remove\" function as \"virtual method\"</span>\n<span class=\"hljs-comment\">// without extending Array.prototype</span>\narr = arr::remove(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">5</span>)\n\n<span class=\"hljs-built_in\">console</span>.log(arr)\n<span class=\"hljs-comment\">// [ 1, 4 ]</span>\n</code></pre>\n<p><a href=\"https://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=false&amp;presets=es2015%2Creact%2Cstage-0%2Cstage-2&amp;targets=&amp;browsers=chrome%20%3E%2050&amp;builtIns=false&amp;code=%20%20%20%20function%20remove(...forDeletion)%20%7B%0A%20%20%20%20%20%20%20%20return%20this.filter(item%20%3D%3E%20!forDeletion.includes(item))%0A%20%20%20%20%7D%0A%0A%20%20%20%20let%20arr%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%2C%203%5D%0A%0A%20%20%20%20%2F%2F%20%3A%3A%20This-Binding%20Syntax%20Proposal%0A%20%20%20%20%2F%2F%20using%20remove%20function%20as%20%22virtual%20method%22%0A%20%20%20%20arr%20%3D%20arr%3A%3Aremove(2%2C%203%2C%205)%0A%0A%20%20%20%20console.log(arr)%0A%20%20%20%20%2F%2F%20%5B%201%2C%204%20%5D\" rel=\"noreferrer\"><strong>Try it yourself in BabelJS :)</strong></a></p>\n<p><strong>Reference</strong></p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" rel=\"noreferrer\">Array.prototype.includes</a></li>\n<li><a href=\"https://vanslaars.io/post/create-pipe-function/\" rel=\"noreferrer\">Functional composition</a></li>\n</ul>\n    </div>",
          "vote": "1573"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I don't know how you are expecting <code>array.remove(int)</code> to behave. There are three possibilities I can think of that you might want.</p>\n<p>To remove an element of an array at an index <code>i</code>:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>array.splice(i, <span class=\"hljs-number\">1</span>);\n</code></pre>\n<p>If you want to remove every element with value <code>number</code> from the array:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = array.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n <span class=\"hljs-keyword\">if</span> (array[i] === number) {\n  array.splice(i, <span class=\"hljs-number\">1</span>);\n }\n}\n</code></pre>\n<p>If you just want to make the element at index <code>i</code> no longer exist, but you don't want the indexes of the other elements to change:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">delete</span> array[i];\n</code></pre>\n    </div>",
          "vote": "1441"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It depends on whether you want to keep an empty spot or not.</p>\n\n<p>If you <strong>do</strong> want an empty slot:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>array[index] = <span class=\"hljs-literal\">undefined</span>;\n</code></pre>\n\n<p>If you <strong>don't</strong> want an empty slot:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">//To keep the original:</span>\n<span class=\"hljs-comment\">//oldArray = [...array];</span>\n\n<span class=\"hljs-comment\">//This modifies the array.</span>\narray.splice(index, <span class=\"hljs-number\">1</span>);\n</code></pre>\n\n<p>And if you need the value of that item, you can just store the returned array's element:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> value = array.splice(index, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];\n</code></pre>\n\n<p>If you want to remove at either end of the array, you can use <code>array.pop()</code> for the last one or <code>array.shift()</code> for the first one (both return the value of the item as well).</p>\n\n<p>If you don't know the index of the item, you can use <code>array.indexOf(item)</code> to get it (in a <code>if()</code> to get one item or in a <code>while()</code> to get all of them). <code>array.indexOf(item)</code> returns either the index or <code>-1</code> if not found.&nbsp;</p>\n    </div>",
          "vote": "526"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A friend was having issues in <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\" rel=\"nofollow noreferrer\">Internet&nbsp;Explorer&nbsp;8</a> and showed me what he did. I told him it was wrong, and he told me he got the answer here. The current top answer will not work in all browsers (Internet&nbsp;Explorer&nbsp;8 for example), and it will only remove the first occurrence of the item.</p>\n<h2>Remove ALL instances from an array</h2>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">removeAllInstances</span>(<span class=\"hljs-params\">arr, item</span>) </span>{\n   <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = arr.length; i--;) {\n     <span class=\"hljs-keyword\">if</span> (arr[i] === item) arr.splice(i, <span class=\"hljs-number\">1</span>);\n   }\n}\n</code></pre>\n<p>It loops through the array backwards (since indices and length will change as items are removed) and removes the item if it's found. It works in all browsers.</p>\n    </div>",
          "vote": "317"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are two major approaches:</p>\n<ol>\n<li><p><strong>splice()</strong>: <code>anArray.splice(index, 1);</code></p>\n</li>\n<li><p><strong>delete</strong>: <code>delete anArray[index];</code></p>\n</li>\n</ol>\n<p>Be careful when you use to delete for an array. It is good for deleting attributes of objects, but not so good for arrays. It is better to use <code>splice</code> for arrays.</p>\n<p>Keep in mind that when you use <code>delete</code> for an array you could get wrong results for <code>anArray.length</code>. In other words, <code>delete</code> would remove the element, but it wouldn't update the value of the length property.</p>\n<p>You can also expect to have holes in index numbers after using delete, e.g. you could end up with having indexes 1, 3, 4, 8, 9, and 11 and length as it was before using delete. In that case, all indexed <code>for</code> loops would crash, since indexes are no longer sequential.</p>\n<p>If you are forced to use <code>delete</code> for some reason, then you should use <a href=\"https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript\"><code>for each</code></a> loops when you need to loop through arrays. As the matter of fact, always avoid using indexed <code>for</code> loops, if possible. That way the code would be more robust and less prone to problems with indexes.</p>\n    </div>",
          "vote": "209"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">Array</span>.prototype.remove_by_value = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>) </span>{\n <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.length; i++) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>[i] === val) {\n   <span class=\"hljs-built_in\">this</span>.splice(i, <span class=\"hljs-number\">1</span>);\n   i--;\n  }\n }\n <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;\n}[\n <span class=\"hljs-comment\">// call like</span>\n (<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)\n].remove_by_value(<span class=\"hljs-number\">3</span>);\n</code></pre>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">Array</span>.prototype.remove_by_value = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">val</span>) </span>{\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.length; i++) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>[i] === val) {\n      <span class=\"hljs-built_in\">this</span>.splice(i, <span class=\"hljs-number\">1</span>);\n      i--;\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;\n}\n\n<span class=\"hljs-keyword\">var</span> rooms = [<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'something'</span>]\n\nrooms = rooms.remove_by_value(<span class=\"hljs-string\">'hello'</span>)\n\n<span class=\"hljs-built_in\">console</span>.log(rooms)</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif3\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "179"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is no need to use <code>indexOf</code> or <code>splice</code>. However, it performs better if you only want to remove one occurrence of an element. </p>\n\n<p><strong>Find and move (move):</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">move</span>(<span class=\"hljs-params\">arr, val</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>, l = arr.length; i &lt; l; i++) {\n    <span class=\"hljs-keyword\">if</span> (arr[i] !== val) {\n      arr[j++] = arr[i];\n    }\n  }\n  arr.length = j;\n}\n</code></pre>\n\n<p><strong>Use <code>indexOf</code> and <code>splice</code> (indexof):</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">indexof</span>(<span class=\"hljs-params\">arr, val</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> i;\n  <span class=\"hljs-keyword\">while</span> ((i = arr.indexOf(val)) != -<span class=\"hljs-number\">1</span>) {\n    arr.splice(i, <span class=\"hljs-number\">1</span>);\n  }\n}\n</code></pre>\n\n<p><strong>Use only <code>splice</code> (splice):</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">splice</span>(<span class=\"hljs-params\">arr, val</span>) </span>{\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = arr.length; i--;) {\n    <span class=\"hljs-keyword\">if</span> (arr[i] === val) {\n      arr.splice(i, <span class=\"hljs-number\">1</span>);\n    }\n  }\n}\n</code></pre>\n\n<p><strong>Run-times on nodejs for array with 1000 elements (average over 10000 runs):</strong></p>\n\n<p><em>indexof</em> is approximately 10x slower than <em>move</em>. Even if improved by removing the call to <code>indexOf</code> in <em>splice</em> it performs much worse than <em>move</em>. </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>Remove all occurrences:\n    move <span class=\"hljs-number\">0.0048</span> ms\n    indexof <span class=\"hljs-number\">0.0463</span> ms\n    splice <span class=\"hljs-number\">0.0359</span> ms\n\nRemove first occurrence:\n    move_one <span class=\"hljs-number\">0.0041</span> ms\n    indexof_one <span class=\"hljs-number\">0.0021</span> ms\n</code></pre>\n    </div>",
          "vote": "131"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This provides a predicate instead of a value.</p>\n<p><strong>NOTE:</strong> it will update the given array, and return the affected rows.</p>\n<h2>Usage</h2>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> removed = helper.removeOne(arr, <span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> row.id === <span class=\"hljs-number\">5</span> );\n\n<span class=\"hljs-keyword\">var</span> removed = helper.remove(arr, <span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> row.name.startsWith(<span class=\"hljs-string\">'BMW'</span>));\n</code></pre>\n<h2>Definition</h2>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> helper = {\n <span class=\"hljs-comment\">// Remove and return the first occurrence</span>\n\n <span class=\"hljs-attr\">removeOne</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">array, predicate</span>) </span>{\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length; i++) {\n   <span class=\"hljs-keyword\">if</span> (predicate(array[i])) {\n    <span class=\"hljs-keyword\">return</span> array.splice(i, <span class=\"hljs-number\">1</span>);\n   }\n  }\n },\n\n <span class=\"hljs-comment\">// Remove and return all occurrences</span>\n\n <span class=\"hljs-attr\">remove</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">array, predicate</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> removed = [];\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length; ) {\n   <span class=\"hljs-keyword\">if</span> (predicate(array[i])) {\n    removed.push(array.splice(i, <span class=\"hljs-number\">1</span>));\n    <span class=\"hljs-keyword\">continue</span>;\n   }\n   i++;\n  }\n  <span class=\"hljs-keyword\">return</span> removed;\n },\n};\n</code></pre>\n    </div>",
          "vote": "101"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can do it easily with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" rel=\"noreferrer\">filter</a> method:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\">arrOriginal, elementToRemove</span>)</span>{\n    <span class=\"hljs-keyword\">return</span> arrOriginal.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el</span>)</span>{<span class=\"hljs-keyword\">return</span> el !== elementToRemove});\n}\n<span class=\"hljs-built_in\">console</span>.log(remove([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">1</span>));</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif4\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>This removes all elements from the array and also works faster than a combination of <code>slice</code> and <code>indexOf</code>.</p>\n    </div>",
          "vote": "95"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>John Resig <a href=\"http://ejohn.org/blog/javascript-array-remove/\" rel=\"noreferrer\">posted a good implementation</a>:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// Array Remove - By John Resig (MIT Licensed)</span>\n<span class=\"hljs-built_in\">Array</span>.prototype.remove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> rest = <span class=\"hljs-built_in\">this</span>.slice((to || <span class=\"hljs-keyword\">from</span>) + <span class=\"hljs-number\">1</span> || <span class=\"hljs-built_in\">this</span>.length);\n  <span class=\"hljs-built_in\">this</span>.length = <span class=\"hljs-keyword\">from</span> &lt; <span class=\"hljs-number\">0</span> ? <span class=\"hljs-built_in\">this</span>.length + <span class=\"hljs-keyword\">from</span> : <span class=\"hljs-keyword\">from</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.push.apply(<span class=\"hljs-built_in\">this</span>, rest);\n};\n</code></pre>\n\n<p>If you don’t want to extend a global object, you can do something like the following, instead:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// Array Remove - By John Resig (MIT Licensed)</span>\n<span class=\"hljs-built_in\">Array</span>.remove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">array, <span class=\"hljs-keyword\">from</span>, to</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> rest = array.slice((to || <span class=\"hljs-keyword\">from</span>) + <span class=\"hljs-number\">1</span> || array.length);\n    array.length = <span class=\"hljs-keyword\">from</span> &lt; <span class=\"hljs-number\">0</span> ? array.length + <span class=\"hljs-keyword\">from</span> : <span class=\"hljs-keyword\">from</span>;\n    <span class=\"hljs-keyword\">return</span> array.push.apply(array, rest);\n};\n</code></pre>\n\n<p>But the main reason I am posting this is to warn users against the alternative implementation suggested in the comments on that page (Dec 14, 2007):</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">Array</span>.prototype.remove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to</span>)</span>{\n  <span class=\"hljs-built_in\">this</span>.splice(<span class=\"hljs-keyword\">from</span>, (to=[<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">from</span>||<span class=\"hljs-number\">1</span>,++to-<span class=\"hljs-keyword\">from</span>][<span class=\"hljs-built_in\">arguments</span>.length])&lt;<span class=\"hljs-number\">0</span>?<span class=\"hljs-built_in\">this</span>.length+to:to);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.length;\n};\n</code></pre>\n\n<p>It seems to work well at first, but through a painful process I discovered it fails when trying to remove the second to last element in an array. For example, if you have a 10-element array and you try to remove the 9th element with this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>myArray.remove(<span class=\"hljs-number\">8</span>);\n</code></pre>\n\n<p>You end up with an 8-element array. Don't know why but I confirmed John's original implementation doesn't have this problem.</p>\n    </div>",
          "vote": "90"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://underscorejs.org/#without\" rel=\"noreferrer\">Underscore.js</a> can be used to solve issues with multiple browsers. It uses in-build browser methods if present. If they are absent like in the case of older Internet&nbsp;Explorer versions it uses its own custom methods.</p>\n\n<p>A simple example to remove elements from array (from the website):</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>_.without([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>], <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// =&gt; [2, 3, 4]</span>\n</code></pre>\n    </div>",
          "vote": "88"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use ES6. For example to delete the value '3' in this case:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> array=[<span class=\"hljs-string\">'1'</span>,<span class=\"hljs-string\">'2'</span>,<span class=\"hljs-string\">'3'</span>,<span class=\"hljs-string\">'4'</span>,<span class=\"hljs-string\">'5'</span>,<span class=\"hljs-string\">'6'</span>]\n<span class=\"hljs-keyword\">var</span> newArray = array.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>)=&gt;</span>value!=<span class=\"hljs-string\">'3'</span>);\n<span class=\"hljs-built_in\">console</span>.log(newArray);\n</code></pre>\n\n<p>Output : </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>[<span class=\"hljs-string\">\"1\"</span>, <span class=\"hljs-string\">\"2\"</span>, <span class=\"hljs-string\">\"4\"</span>, <span class=\"hljs-string\">\"5\"</span>, <span class=\"hljs-string\">\"6\"</span>]\n</code></pre>\n    </div>",
          "vote": "88"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want a new array with the deleted positions removed, you can always delete the specific element and filter out the array. It might need an extension of the <a href=\"http://www.tutorialspoint.com/javascript/array_filter.htm\" rel=\"noreferrer\">array object</a> for browsers that don't implement the filter method, but in the long term it's easier since all you do is this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> my_array = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n<span class=\"hljs-keyword\">delete</span> my_array[<span class=\"hljs-number\">4</span>];\n<span class=\"hljs-built_in\">console</span>.log(my_array.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>)</span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> a !== <span class=\"hljs-string\">'undefined'</span>;}));\n</code></pre>\n\n<p>It should display <code>[1, 2, 3, 4, 6]</code>.</p>\n    </div>",
          "vote": "78"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here are a few ways to <strong>remove an item from an array using JavaScript</strong>.</p>\n<p>All the method described <strong>do not mutate the original array</strong>, and instead create a new one.</p>\n<h2>If you know the index of an item</h2>\n<p>Suppose you have an array, and you want to remove an item in position <code>i</code>.</p>\n<p>One method is to use <code>slice()</code>:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> items = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>]\n<span class=\"hljs-keyword\">const</span> i = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">const</span> filteredItems = items.slice(<span class=\"hljs-number\">0</span>, i).concat(items.slice(i+<span class=\"hljs-number\">1</span>, items.length))\n\n<span class=\"hljs-built_in\">console</span>.log(filteredItems)</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif5\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p><code>slice()</code> creates a new array with the indexes it receives. We simply create a new array, from start to the index we want to remove, and concatenate another array from the first position following the one we removed to the end of the array.</p>\n<h2>If you know the value</h2>\n<p>In this case, one good option is to use <code>filter()</code>, which offers a more <em>declarative</em> approach:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> items = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>]\n<span class=\"hljs-keyword\">const</span> valueToRemove = <span class=\"hljs-string\">'c'</span>\n<span class=\"hljs-keyword\">const</span> filteredItems = items.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item !== valueToRemove)\n\n<span class=\"hljs-built_in\">console</span>.log(filteredItems)</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif6\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>This uses the ES6 arrow functions. You can use the traditional functions to support older browsers:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> items = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>]\n<span class=\"hljs-keyword\">const</span> valueToRemove = <span class=\"hljs-string\">'c'</span>\n<span class=\"hljs-keyword\">const</span> filteredItems = items.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> item !== valueToRemove\n})\n\n<span class=\"hljs-built_in\">console</span>.log(filteredItems)</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif7\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>or you can use Babel and transpile the ES6 code back to ES5 to make it more digestible to old browsers, yet write modern JavaScript in your code.</p>\n<h2>Removing multiple items</h2>\n<p>What if instead of a single item, you want to remove many items?</p>\n<p>Let's find the simplest solution.</p>\n<h3>By index</h3>\n<p>You can just create a function and remove items in series:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> items = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>]\n\n<span class=\"hljs-keyword\">const</span> removeItem = <span class=\"hljs-function\">(<span class=\"hljs-params\">items, i</span>) =&gt;</span>\n  items.slice(<span class=\"hljs-number\">0</span>, i-<span class=\"hljs-number\">1</span>).concat(items.slice(i, items.length))\n\n<span class=\"hljs-keyword\">let</span> filteredItems = removeItem(items, <span class=\"hljs-number\">3</span>)\nfilteredItems = removeItem(filteredItems, <span class=\"hljs-number\">5</span>)\n<span class=\"hljs-comment\">//[\"a\", \"b\", \"c\", \"d\"]</span>\n\n<span class=\"hljs-built_in\">console</span>.log(filteredItems)</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif8\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<h3>By value</h3>\n<p>You can search for inclusion inside the callback function:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> items = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>, <span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>]\n<span class=\"hljs-keyword\">const</span> valuesToRemove = [<span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>]\n<span class=\"hljs-keyword\">const</span> filteredItems = items.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> !valuesToRemove.includes(item))\n<span class=\"hljs-comment\">//&nbsp;[\"a\", \"b\", \"e\", \"f\"]</span>\n\n<span class=\"hljs-built_in\">console</span>.log(filteredItems)</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif9\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<h2>Avoid mutating the original array</h2>\n<p><code>splice()</code> (not to be confused with <code>slice()</code>) mutates the original array, and should be avoided.</p>\n<p>(originally posted on my site <a href=\"https://flaviocopes.com/how-to-remove-item-from-array/\" rel=\"noreferrer\">https://flaviocopes.com/how-to-remove-item-from-array/</a>)</p>\n    </div>",
          "vote": "74"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Check out this code. It works in every <strong>major browser</strong>.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code>remove_item = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">arr, value</span>) </span>{\n <span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-string\">''</span>;\n <span class=\"hljs-keyword\">for</span> (b <span class=\"hljs-keyword\">in</span> arr) {\n  <span class=\"hljs-keyword\">if</span> (arr[b] === value) {\n   arr.splice(b, <span class=\"hljs-number\">1</span>);\n   <span class=\"hljs-keyword\">break</span>;\n  }\n }\n <span class=\"hljs-keyword\">return</span> arr;\n};\n\n<span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">55</span>]\n<span class=\"hljs-keyword\">var</span> res = remove_item(array,<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-built_in\">console</span>.log(res)</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif10\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "69"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>ES6 &amp; without mutation:  (October 2016)</strong></p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> removeByIndex = <span class=\"hljs-function\">(<span class=\"hljs-params\">list, index</span>) =&gt;</span>\n      [\n        ...list.slice(<span class=\"hljs-number\">0</span>, index),\n        ...list.slice(index + <span class=\"hljs-number\">1</span>)\n      ];\n         \noutput = removeByIndex([<span class=\"hljs-number\">33</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-number\">11</span>,<span class=\"hljs-number\">44</span>],<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">//=&gt; [33,11,44]</span>\n      \n<span class=\"hljs-built_in\">console</span>.log(output)</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif11\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "59"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use lodash <a href=\"https://lodash.com/docs#pull\" rel=\"noreferrer\">_.pull</a> (mutate array), <a href=\"https://lodash.com/docs#pullAt\" rel=\"noreferrer\">_.pullAt</a> (mutate array) or <a href=\"https://lodash.com/docs#without\" rel=\"noreferrer\">_.without</a> (does't mutate array), </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> array1 = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>, <span class=\"hljs-string\">'d'</span>]\n_.pull(array1, <span class=\"hljs-string\">'c'</span>)\n<span class=\"hljs-built_in\">console</span>.log(array1) <span class=\"hljs-comment\">// ['a', 'b', 'd']</span>\n\n<span class=\"hljs-keyword\">var</span> array2 = [<span class=\"hljs-string\">'e'</span>, <span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'g'</span>, <span class=\"hljs-string\">'h'</span>]\n_.pullAt(array2, <span class=\"hljs-number\">0</span>)\n<span class=\"hljs-built_in\">console</span>.log(array2) <span class=\"hljs-comment\">// ['f', 'g', 'h']</span>\n\n<span class=\"hljs-keyword\">var</span> array3 = [<span class=\"hljs-string\">'i'</span>, <span class=\"hljs-string\">'j'</span>, <span class=\"hljs-string\">'k'</span>, <span class=\"hljs-string\">'l'</span>]\n<span class=\"hljs-keyword\">var</span> newArray = _.without(array3, <span class=\"hljs-string\">'i'</span>) <span class=\"hljs-comment\">// ['j', 'k', 'l']</span>\n<span class=\"hljs-built_in\">console</span>.log(array3) <span class=\"hljs-comment\">// ['i', 'j', 'k', 'l']</span>\n</code></pre>\n    </div>",
          "vote": "58"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Removing a particular element/string from an array can be done in a one-liner:</strong></p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>theArray.splice(theArray.indexOf(<span class=\"hljs-string\">\"stringToRemoveFromArray\"</span>), <span class=\"hljs-number\">1</span>);\n</code></pre>\n<p>where:</p>\n<p><em>theArray</em>: the array you want to remove something particular from</p>\n<p><em>stringToRemoveFromArray</em>: the string you want to be removed and 1 is the number of elements you want to remove.</p>\n<p><em>NOTE</em>: If \"stringToRemoveFromArray\" is not located in the array, this will remove the last element of the array.</p>\n<p>It's always good practice to check if the element exists in your array first, before removing it.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> (theArray.indexOf(<span class=\"hljs-string\">\"stringToRemoveFromArray\"</span>) &gt;= <span class=\"hljs-number\">0</span>){\n   theArray.splice(theArray.indexOf(<span class=\"hljs-string\">\"stringToRemoveFromArray\"</span>), <span class=\"hljs-number\">1</span>);\n}\n</code></pre>\n<hr>\n<p>Depending if you have newer or older version of Ecmascript running on your client's computers:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> array=[<span class=\"hljs-string\">'1'</span>,<span class=\"hljs-string\">'2'</span>,<span class=\"hljs-string\">'3'</span>,<span class=\"hljs-string\">'4'</span>,<span class=\"hljs-string\">'5'</span>,<span class=\"hljs-string\">'6'</span>]\n<span class=\"hljs-keyword\">var</span> newArray = array.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>)=&gt;</span>value!=<span class=\"hljs-string\">'3'</span>);\n</code></pre>\n<p>OR</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-string\">'1'</span>,<span class=\"hljs-string\">'2'</span>,<span class=\"hljs-string\">'3'</span>,<span class=\"hljs-string\">'4'</span>,<span class=\"hljs-string\">'5'</span>,<span class=\"hljs-string\">'6'</span>];\n<span class=\"hljs-keyword\">var</span> newArray = array.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>)</span>{ <span class=\"hljs-keyword\">return</span> item !== <span class=\"hljs-string\">'3'</span> });\n</code></pre>\n<p>Where '3' is the value you want to be removed from the array.\nThe array would then become : <code>['1','2','4','5','6']</code></p>\n    </div>",
          "vote": "58"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Performance</h2>\n<p>Today (2019-12-09) I conduct performance tests on macOS v10.13.6 (High Sierra) for chosen solutions. I show <code>delete</code> (A), but I do not use it in comparison with other methods, because it left empty space in the array.</p>\n<p>The conclusions</p>\n<ul>\n<li>the fastest solution is <code>array.splice</code> (C) (except Safari for small arrays where it has the second time)</li>\n<li>for big arrays, <code>array.slice+splice</code> (H) is the fastest immutable solution for Firefox and Safari; <code>Array.from</code> (B) is fastest in Chrome</li>\n<li>mutable solutions are usually 1.5x-6x faster than immutable</li>\n<li>for small tables on Safari, surprisingly the mutable solution (C) is slower than the immutable solution (G)</li>\n</ul>\n<h2>Details</h2>\n<p>In tests, I remove the middle element from the array in different ways. The <strong>A, C</strong> solutions are in-place. The <strong>B, D, E, F, G, H</strong> solutions are immutable.</p>\n<p><strong>Results for an array with 10 elements</strong></p>\n<p><a href=\"https://i.stack.imgur.com/foNhq.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/foNhq.png\" alt=\"Enter image description here\"></a></p>\n<p>In Chrome the <code>array.splice</code> (C) is the fastest in-place solution. The <code>array.filter</code> (D) is the fastest immutable solution. The slowest is <code>array.slice</code> (F). You can perform the test on your machine <a href=\"https://jsperf.com/small-array-remove-element\" rel=\"noreferrer\">here</a>.</p>\n<p><strong>Results for an array with 1.000.000 elements</strong></p>\n<p><a href=\"https://i.stack.imgur.com/7zCJt.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/7zCJt.png\" alt=\"Enter image description here\"></a></p>\n<p>In Chrome the <code>array.splice</code> (C) is the fastest in-place solution (the <code>delete</code> (C) is similar fast - but it left an empty slot in the array (so it does not perform a 'full remove')). The <code>array.slice-splice</code> (H) is the fastest immutable solution. The slowest is <code>array.filter</code> (D and E). You can perform the test on your machine <a href=\"https://jsperf.com/big-array-remove-element\" rel=\"noreferrer\">here</a>.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\"><div class=\"snippet-display\" style=\"vertical-align: center\"><p><a class=\"snippet-show-link-chevron\"><span class=\"expander-arrow-hide\" style=\"vertical-align: middle;\"></span></a><a class=\"snippet-show-link\"><span class=\"show-hide\" data-ishidden=\"true\" style=\"vertical-align: middle\">Show code snippet</span></a></p></div>\n<div class=\"snippet-code snippet-currently-hidden\" style=\"display: none;\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\n<span class=\"hljs-keyword\">var</span> log = <span class=\"hljs-function\">(<span class=\"hljs-params\">letter,array</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(letter, array.join <span class=\"hljs-string\">`,`</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">A</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> index = array.indexOf(<span class=\"hljs-number\">5</span>);\n  <span class=\"hljs-keyword\">delete</span> array[index];\n  log(<span class=\"hljs-string\">'A'</span>, array);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">B</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> index = array.indexOf(<span class=\"hljs-number\">5</span>);\n  <span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-built_in\">Array</span>.from(array);\n  arr.splice(index, <span class=\"hljs-number\">1</span>)\n  log(<span class=\"hljs-string\">'B'</span>, arr);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">C</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> index = array.indexOf(<span class=\"hljs-number\">5</span>);\n  array.splice(index, <span class=\"hljs-number\">1</span>);\n  log(<span class=\"hljs-string\">'C'</span>, array);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">D</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> arr = array.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item !== <span class=\"hljs-number\">5</span>)\n  log(<span class=\"hljs-string\">'D'</span>, arr);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">E</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> index = array.indexOf(<span class=\"hljs-number\">5</span>);\n  <span class=\"hljs-keyword\">var</span> arr = array.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, i</span>) =&gt;</span> i !== index)\n  log(<span class=\"hljs-string\">'E'</span>, arr);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">F</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> index = array.indexOf(<span class=\"hljs-number\">5</span>);\n  <span class=\"hljs-keyword\">var</span> arr = array.slice(<span class=\"hljs-number\">0</span>, index).concat(array.slice(index + <span class=\"hljs-number\">1</span>))\n  log(<span class=\"hljs-string\">'F'</span>, arr);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">G</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> index = array.indexOf(<span class=\"hljs-number\">5</span>);\n  <span class=\"hljs-keyword\">var</span> arr = [...array.slice(<span class=\"hljs-number\">0</span>, index), ...array.slice(index + <span class=\"hljs-number\">1</span>)]\n  log(<span class=\"hljs-string\">'G'</span>, arr);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">H</span>(<span class=\"hljs-params\">array</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> index = array.indexOf(<span class=\"hljs-number\">5</span>);\n  <span class=\"hljs-keyword\">var</span> arr = array.slice(<span class=\"hljs-number\">0</span>);\n  arr.splice(index, <span class=\"hljs-number\">1</span>);\n  log(<span class=\"hljs-string\">'H'</span>, arr);\n}\n\nA([...a]);\nB([...a]);\nC([...a]);\nD([...a]);\nE([...a]);\nF([...a]);\nG([...a]);\nH([...a]);</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code>This snippet only presents code used in performance tests - it does not perform tests itself.</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif12\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>Comparison for browsers: Chrome v78.0.0, Safari v13.0.4, and Firefox v71.0.0</p>\n<p><a href=\"https://i.stack.imgur.com/Ct9DN.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Ct9DN.png\" alt=\"Enter image description here\"></a></p>\n    </div>",
          "vote": "49"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>OK,</strong> for example you have the array below:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> num = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n</code></pre>\n\n<p>And we want to delete number 4. You can simply use the below code:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>num.splice(num.indexOf(<span class=\"hljs-number\">4</span>), <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// num will be [1, 2, 3, 5];</span>\n</code></pre>\n\n<p>If you are reusing this function, you write a reusable function which will be attached to the <em>native</em> array function like below:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">Array</span>.prototype.remove = <span class=\"hljs-built_in\">Array</span>.prototype.remove || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> i = <span class=\"hljs-built_in\">this</span>.indexOf(x);\n  <span class=\"hljs-keyword\">if</span>(i===-<span class=\"hljs-number\">1</span>)\n      <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-built_in\">this</span>.splice(i, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// num.remove(5) === [1, 2, 3];</span>\n}\n</code></pre>\n\n<p>But how about if you have the below array instead with a few [5]s in the array?</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> num = [<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>];\n</code></pre>\n\n<p>We need a loop to check them all, but an easier and more efficient way is using built-in JavaScript functions, so we write a function which use a filter like below instead:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> _removeValue = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, x</span>) =&gt;</span> arr.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> n!==x);\n<span class=\"hljs-comment\">//_removeValue([1, 2, 3, 4, 5, 5, 6, 5], 5) // Return [1, 2, 3, 4, 6]</span>\n</code></pre>\n\n<p>Also there are third-party libraries which do help you to do this, like Lodash or Underscore. For more information, look at lodash _.pull, _.pullAt or _.without.</p>\n    </div>",
          "vote": "44"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm pretty new to JavaScript and needed this functionality. I merely wrote this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">removeFromArray</span>(<span class=\"hljs-params\">array, item, index</span>) </span>{\n  <span class=\"hljs-keyword\">while</span>((index = array.indexOf(item)) &gt; -<span class=\"hljs-number\">1</span>) {\n    array.splice(index, <span class=\"hljs-number\">1</span>);\n  }\n}\n</code></pre>\n\n<p>Then when I want to use it:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">//Set-up some dummy data</span>\n<span class=\"hljs-keyword\">var</span> dummyObj = {<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">\"meow\"</span>};\n<span class=\"hljs-keyword\">var</span> dummyArray = [dummyObj, <span class=\"hljs-string\">\"item1\"</span>, <span class=\"hljs-string\">\"item1\"</span>, <span class=\"hljs-string\">\"item2\"</span>];\n\n<span class=\"hljs-comment\">//Remove the dummy data</span>\nremoveFromArray(dummyArray, dummyObj);\nremoveFromArray(dummyArray, <span class=\"hljs-string\">\"item2\"</span>);\n</code></pre>\n\n<p>Output - As expected.\n[\"item1\", \"item1\"]</p>\n\n<p>You may have different needs than I, so you can easily modify it to suit them. I hope this helps someone.</p>\n    </div>",
          "vote": "39"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have complex objects in the array you can use filters? \nIn situations where $.inArray or array.splice is not as easy to use. Especially if the objects are perhaps shallow in the array.</p>\n\n<p>E.g. if you have an object with an Id field and you want the object removed from an array:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">this</span>.array = <span class=\"hljs-built_in\">this</span>.array.filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">element, i</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> element.id !== idToRemove;\n});\n</code></pre>\n    </div>",
          "vote": "36"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I want to answer based on <a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\" rel=\"noreferrer\">ECMAScript&nbsp;6</a>. Assume, you have an array like below:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>];\n</code></pre>\n\n<p>If you want to delete at a special index like <code>2</code>, write the below code:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>arr.splice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//=&gt; arr became [1,2,4]</span>\n</code></pre>\n\n<p>But if you want to delete a special item like <code>3</code> and you don't know its index, do like below:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>arr = arr.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> e !== <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">//=&gt; arr became [1,2,4]</span>\n</code></pre>\n\n<p><strong>Hint</strong>: please use an arrow function for filter callback unless you will get an empty array.</p>\n    </div>",
          "vote": "35"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Update:</strong> This method is recommended only if you cannot use ECMAScript 2015 (formerly known as ES6). If you can use it, other answers here provide much neater implementations.</p>\n\n<hr>\n\n<p><a href=\"https://gist.github.com/zykadelic/5069236\" rel=\"noreferrer\">This gist here</a> will solve your problem, and also deletes all occurrences of the argument instead of just 1 (or a specified value).</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">Array</span>.prototype.destroy = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obj</span>)</span>{\n    <span class=\"hljs-comment\">// Return null if no objects were found and removed</span>\n    <span class=\"hljs-keyword\">var</span> destroyed = <span class=\"hljs-literal\">null</span>;\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.length; i++){\n\n        <span class=\"hljs-comment\">// Use while-loop to find adjacent equal objects</span>\n        <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">this</span>[i] === obj){\n\n            <span class=\"hljs-comment\">// Remove this[i] and store it within destroyed</span>\n            destroyed = <span class=\"hljs-built_in\">this</span>.splice(i, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>];\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> destroyed;\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> x = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">false</span>];\n\nx.destroy(<span class=\"hljs-number\">3</span>);         <span class=\"hljs-comment\">// =&gt; 3</span>\nx.destroy(<span class=\"hljs-literal\">false</span>);     <span class=\"hljs-comment\">// =&gt; false</span>\nx;                    <span class=\"hljs-comment\">// =&gt; [1, 2, true, undefined]</span>\n\nx.destroy(<span class=\"hljs-literal\">true</span>);      <span class=\"hljs-comment\">// =&gt; true</span>\nx.destroy(<span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// =&gt; undefined</span>\nx;                    <span class=\"hljs-comment\">// =&gt; [1, 2]</span>\n\nx.destroy(<span class=\"hljs-number\">3</span>);         <span class=\"hljs-comment\">// =&gt; null</span>\nx;                    <span class=\"hljs-comment\">// =&gt; [1, 2]</span>\n</code></pre>\n    </div>",
          "vote": "34"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>ES10 Update</h1>\n<p>This post summarizes common approaches to element removal from an array as of ECMAScript 2019 (ES10).</p>\n<h2>1. General cases</h2>\n<h3>1.1. Removing Array element by value using <code>.splice()</code></h3>\n<p>| <strong>In-place</strong>: Yes | <br>\n| <strong>Removes duplicates</strong>: Yes(loop), No(indexOf) | <br>\n| <strong>By value / index</strong>: By index |</p>\n<p>If you know the value you want to remove from an array you can use the splice method. First, you must identify the index of the target item. You then use the index as the start element and remove just one element.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// With a 'for' loop</span>\n<span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>];\n<span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.length; i++){\n  <span class=\"hljs-keyword\">if</span> ( arr[i] === <span class=\"hljs-number\">5</span>) {\n    arr.splice(i, <span class=\"hljs-number\">1</span>);\n  }\n} <span class=\"hljs-comment\">// =&gt; [1, 2, 3, 4, 6, 7, 8, 9, 0]</span>\n\n<span class=\"hljs-comment\">// With the .indexOf() method</span>\n<span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">0</span>];\n<span class=\"hljs-keyword\">const</span> i = arr.indexOf(<span class=\"hljs-number\">5</span>);\narr.splice(i, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// =&gt; [1, 2, 3, 4, 6, 7, 8, 9, 0]</span>\n</code></pre>\n<h3>1.2. Removing Array element using the <code>.filter()</code> method</h3>\n<p>| <strong>In-place</strong>: No | <br>\n| <strong>Removes duplicates</strong>: Yes | <br>\n| <strong>By value / index</strong>: By value | <br></p>\n<p>The specific element can be <em><strong>filtered out</strong></em> from the array, by providing a filtering function. Such function is then called for every element in the array.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-number\">3</span>\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>]\narr = arr.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item !== value)\n<span class=\"hljs-built_in\">console</span>.log(arr)\n<span class=\"hljs-comment\">// [ 1, 2, 4, 5 ]</span>\n</code></pre>\n<h3>1.3. Removing Array element by extending <code>Array.prototype</code></h3>\n<p>| <strong>In-place</strong>: Yes/No (Depends on implementation) | <br>\n| <strong>Removes duplicates</strong>: Yes/No (Depends on implementation) | <br>\n| <strong>By value / index</strong>: By index / By value (Depends on implementation) |</p>\n<p>The prototype of Array can be extended with additional methods. Such methods will be then available to use on created arrays.</p>\n<p><strong>Note:</strong> Extending prototypes of objects from the standard library of JavaScript (like Array) is considered by some as an antipattern.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// In-place, removes all, by value implementation</span>\n<span class=\"hljs-built_in\">Array</span>.prototype.remove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.length; i++) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>[i] === item) {\n            <span class=\"hljs-built_in\">this</span>.splice(i, <span class=\"hljs-number\">1</span>);\n        }\n    }\n}\n<span class=\"hljs-keyword\">const</span> arr1 = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>];\narr1.remove(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// arr1 equals [2,3]</span>\n\n<span class=\"hljs-comment\">// Non-stationary, removes first, by value implementation</span>\n<span class=\"hljs-built_in\">Array</span>.prototype.remove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">item</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> arr = <span class=\"hljs-built_in\">this</span>.slice();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-built_in\">this</span>.length; i++) {\n        <span class=\"hljs-keyword\">if</span> (arr[i] === item) {\n            arr.splice(i, <span class=\"hljs-number\">1</span>);\n            <span class=\"hljs-keyword\">return</span> arr;\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> arr;\n}\n<span class=\"hljs-keyword\">let</span> arr2 = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>];\narr2 = arr2.remove(<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// arr2 equals [2,3,1]</span>\n</code></pre>\n<h3>1.4. Removing Array element using the <code>delete</code> operator</h3>\n<p>| <strong>In-place</strong>: Yes | <br>\n| <strong>Removes duplicates</strong>: No | <br>\n| <strong>By value / index</strong>: By index |</p>\n<p>Using the delete operator does not affect the length property. Nor does it affect the indexes of subsequent elements. The array becomes sparse, which is a fancy way of saying the deleted item is not removed but becomes undefined.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n<span class=\"hljs-keyword\">delete</span> arr[<span class=\"hljs-number\">4</span>]; <span class=\"hljs-comment\">// Delete element with index 4</span>\n<span class=\"hljs-built_in\">console</span>.log( arr ); <span class=\"hljs-comment\">// [1, 2, 3, 4, undefined, 6]</span>\n</code></pre>\n<p>The delete operator is designed to remove properties from JavaScript objects, which arrays are objects.</p>\n<h3>1.5. Removing Array element using <code>Object</code> utilities (&gt;= ES10)</h3>\n<p>| <strong>In-place</strong>: No | <br>\n| <strong>Removes duplicates</strong>: Yes | <br>\n| <strong>By value / index</strong>: By value |</p>\n<p>ES10 introduced <code>Object.fromEntries</code>, which can be used to create the desired Array from any Array-like object and filter unwanted elements during the process.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> object = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>];\n<span class=\"hljs-keyword\">const</span> valueToRemove = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">const</span> arr = <span class=\"hljs-built_in\">Object</span>.values(<span class=\"hljs-built_in\">Object</span>.fromEntries(\n  <span class=\"hljs-built_in\">Object</span>.entries(object)\n  .filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">[ key, val ]</span>) =&gt;</span> val !== valueToRemove)\n));\n<span class=\"hljs-built_in\">console</span>.log(arr); <span class=\"hljs-comment\">// [1,2,4]</span>\n</code></pre>\n<h2>2. Special cases</h2>\n<h3>2.1 Removing element if it's at the end of the Array</h3>\n<strong>2.1.1. Changing Array <code>length</code></strong>\n<p>| <strong>In-place</strong>: Yes | <br>\n| <strong>Removes duplicates</strong>: No | <br>\n| <strong>By value / index</strong>: N/A |</p>\n<p>JavaScript Array elements can be removed from the end of an array by setting the length property to a value less than the current value. Any element whose index is greater than or equal to the new length will be removed.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\narr.length = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// Set length to remove element</span>\n<span class=\"hljs-built_in\">console</span>.log( arr ); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<strong>2.1.2. Using <code>.pop()</code> method</strong>\n<p>| <strong>In-place</strong>: Yes | <br>\n| <strong>Removes duplicates</strong>: No | <br>\n| <strong>By value / index</strong>: N/A |</p>\n<p>The pop method removes the last element of the array, returns that element, and updates the length property. The pop method modifies the array on which it is invoked, This means unlike using delete the last element is removed completely and the array length reduced.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\narr.pop(); <span class=\"hljs-comment\">// returns 6</span>\n<span class=\"hljs-built_in\">console</span>.log( arr ); <span class=\"hljs-comment\">// [1, 2, 3, 4, 5]</span>\n</code></pre>\n<h3>2.2. Removing element if it's at the beginning of the Array</h3>\n<p>| <strong>In-place</strong>: Yes | <br>\n| <strong>Removes duplicates</strong>: No | <br>\n| <strong>By value / index</strong>: N/A |</p>\n<p>The <code>.shift()</code> method works much like the pop method except it removes the first element of a JavaScript array instead of the last. When the element is removed the remaining elements are shifted down.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\narr.shift(); <span class=\"hljs-comment\">// returns 1</span>\n<span class=\"hljs-built_in\">console</span>.log( arr ); <span class=\"hljs-comment\">// [2, 3, 4]</span>\n</code></pre>\n<h3>2.3. Removing element if it's the only element in the Array</h3>\n<p>| <strong>In-place</strong>: Yes | <br>\n| <strong>Removes duplicates</strong>: N/A | <br>\n| <strong>By value / index</strong>: N/A |</p>\n<p>The fastest technique is to set an array variable to an empty array.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>];\narr = []; <span class=\"hljs-comment\">//empty array</span>\n</code></pre>\n<p>Alternatively technique from 2.1.1 can be used by setting length to 0.</p>\n    </div>",
          "vote": "34"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You should never mutate your array. As this is against the functional programming pattern. You can create a new array without referencing the array you want to change data of using the ECMAScript&nbsp;6 method <code>filter</code>;</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> myArray = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>];\n</code></pre>\n\n<p>Suppose you want to remove <code>5</code> from the array, you can simply do it like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>myArray = myArray.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =&gt;</span> value !== <span class=\"hljs-number\">5</span>);\n</code></pre>\n\n<p>This will give you a new array without the value you wanted to remove. So the result will be:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>]; <span class=\"hljs-comment\">// 5 has been removed from this array</span>\n</code></pre>\n\n<p>For further understanding you can read the MDN documentation on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" rel=\"noreferrer\">Array.filter</a>.</p>\n    </div>",
          "vote": "30"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can do a backward loop to make sure not to screw up the indexes, if there are multiple instances of the element.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> myElement = <span class=\"hljs-string\">\"chocolate\"</span>;\n<span class=\"hljs-keyword\">var</span> myArray = [<span class=\"hljs-string\">'chocolate'</span>, <span class=\"hljs-string\">'poptart'</span>, <span class=\"hljs-string\">'poptart'</span>, <span class=\"hljs-string\">'poptart'</span>, <span class=\"hljs-string\">'chocolate'</span>, <span class=\"hljs-string\">'poptart'</span>, <span class=\"hljs-string\">'poptart'</span>, <span class=\"hljs-string\">'chocolate'</span>];\n\n<span class=\"hljs-comment\">/* Important code */</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = myArray.length - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--) {\n  <span class=\"hljs-keyword\">if</span> (myArray[i] == myElement) myArray.splice(i, <span class=\"hljs-number\">1</span>);\n}\n<span class=\"hljs-built_in\">console</span>.log(myArray);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif13\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p><a href=\"http://jsfiddle.net/lun471k/7m6G9/\" rel=\"noreferrer\">Live Demo</a></p>\n    </div>",
          "vote": "28"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A more modern, <a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\">ECMAScript 2015</a> (formerly known as Harmony or ES&nbsp;6) approach. Given:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> items = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>];\n<span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-number\">2</span>;\n</code></pre>\n\n<p>Then:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>items.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">x, i</span>) =&gt;</span> i !== index);\n</code></pre>\n\n<p>Yielding: </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>]\n</code></pre>\n\n<p>You can use <a href=\"https://babeljs.io/\">Babel</a> and a <a href=\"http://cdn.polyfill.io/v2/docs/\">polyfill service</a> to ensure this is well supported across browsers.</p>\n    </div>",
          "vote": "27"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You have 1 to 9 in the array, and you want remove 5. Use the below code:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> numberArray = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\n\n<span class=\"hljs-keyword\">var</span> newNumberArray = numberArray.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> m !== <span class=\"hljs-number\">5</span>;\n});\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"new Array, 5 removed\"</span>, newNumberArray);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif14\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<hr>\n\n<p>If you want to multiple values. Example:- 1,7,8</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> numberArray = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\n\n<span class=\"hljs-keyword\">var</span> newNumberArray = numberArray.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">return</span> (m !== <span class=\"hljs-number\">1</span>) &amp;&amp; (m !== <span class=\"hljs-number\">7</span>) &amp;&amp; (m !== <span class=\"hljs-number\">8</span>);\n});\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"new Array, 1,7 and 8 removed\"</span>, newNumberArray);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif15\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<hr>\n\n<p>If you want to remove an array value in an array. Example: [3,4,5]</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> numberArray = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>];\n<span class=\"hljs-keyword\">var</span> removebleArray = [<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];\n\n<span class=\"hljs-keyword\">var</span> newNumberArray = numberArray.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> !removebleArray.includes(m);\n});\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"new Array, [3,4,5] removed\"</span>, newNumberArray);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif16\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>Includes supported browser is <a href=\"https://www.w3schools.com/jsref/jsref_includes_array.asp\" rel=\"noreferrer\">link</a>.</p>\n    </div>",
          "vote": "26"
        }
      ]
    },
    {
      "question": "How do I rename a local Git branch?",
      "url": "https://stackoverflow.com/questions/6591213/how-do-i-rename-a-local-git-branch",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I don't want to rename a remote branch, as described in <em><a href=\"https://stackoverflow.com/questions/1526794/rename-master-branch-for-both-local-and-remote-git-repositories?answertab=votes#tab-top\">Rename master branch for both local and remote Git repositories</a></em>.</p>\n\n<p>How can I rename a local branch which hasn't been pushed to a remote branch?</p>\n\n<p>In case you need to rename <strong>remote</strong> branch as well:<br>\n<em><a href=\"https://stackoverflow.com/questions/30590083/how-to-rename-a-remote-git-branch-name/30590238#30590238\">How do I rename both a Git local and remote branch name</a></em></p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want to rename a branch while pointed to any branch, do:</p>\n\n<pre><code>git branch -m &lt;oldname&gt; &lt;newname&gt;\n</code></pre>\n\n<p>If you want to rename the current branch, you can do:</p>\n\n<pre><code>git branch -m &lt;newname&gt;\n</code></pre>\n\n<p>A way to remember this is <code>-m</code> is for \"move\" (or <code>mv</code>), which is how you rename files. Adding an alias could also help. To do so, run the following:</p>\n\n<pre><code>git config --global alias.rename 'branch -m'\n</code></pre>\n\n<p>If you are on Windows or another case-insensitive filesystem, and there are only capitalization changes in the name, you need to use <code>-M</code>, otherwise, git will throw <em><strong>branch already exists</strong></em> error:</p>\n\n<pre><code>git branch -M &lt;newname&gt;\n</code></pre>\n    </div>",
          "vote": "14979"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>git branch -m old_branch_name new_branch_name\n</code></pre>\n\n<p>The above command will change your branch name, but you have to be very careful using the renamed branch, because it will still refer to the old upstream branch associated with it, if any.</p>\n\n<p>If you want to push some changes into master after your local branch is renamed into new_branch_name (example name):</p>\n\n<p><code>git push origin new_branch_name:master</code> (now changes will go to master branch but your local branch name is new_branch_name)</p>\n\n<p>For more details, see \"<a href=\"http://madhan-tech-updates.blogspot.in/2013/01/how-to-rename-your-local-branch-name-in.html\">How to rename your local branch name in Git</a>.\"</p>\n    </div>",
          "vote": "493"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To rename your current branch:</p>\n\n<pre><code>git branch -m &lt;newname&gt;\n</code></pre>\n    </div>",
          "vote": "374"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here are the steps to rename the branch:</p>\n\n<ol>\n<li>Switch to the branch which needs to be renamed</li>\n<li><code>git branch -m &lt;new_name&gt;</code></li>\n<li><code>git push origin :&lt;old_name&gt;</code></li>\n<li><code>git push origin &lt;new_name&gt;:refs/heads/&lt;new_name&gt;</code></li>\n</ol>\n\n<p><strong>EDIT (12/01/2017):</strong> Make sure you run command <code>git status</code> and check that the newly created branch is pointing to its own ref and not the older one. If you find the reference to the older branch, you need to unset the upstream using:</p>\n\n<pre><code>git branch --unset-upstream\n</code></pre>\n    </div>",
          "vote": "336"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Rename the branch will be useful once your branch is finished. Then new stuff is coming, and you want to develop in the same branch instead of deleting it and create the new one.</p>\n\n<p>From my experience, to rename a local and remote branch in Git you should do the following steps.</p>\n\n<blockquote>\n  <p>Quoting from <a href=\"https://multiplestates.wordpress.com/2015/02/05/rename-a-local-and-remote-branch-in-git/\" rel=\"noreferrer\">Multiple States - Rename a local and remote branch in\n  git</a></p>\n</blockquote>\n\n<h3>1. Rename your local branch</h3>\n\n<p>If you are on the branch you want to rename:</p>\n\n<pre><code>git branch -m new-name\n</code></pre>\n\n<p>If you are on a different branch:</p>\n\n<pre><code>git branch -m old-name new-name\n</code></pre>\n\n<h3>2. Delete the old-name remote branch and push the new-name local branch</h3>\n\n<pre><code>git push origin :old-name new-name\n</code></pre>\n\n<h3>3. Reset the upstream branch for the new-name local branch</h3>\n\n<pre><code>git push origin -u new-name\n</code></pre>\n    </div>",
          "vote": "252"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The answers so far have been correct, but here is some additional information:</p>\n\n<p>One can safely rename a branch with '-m' (move), but one has to be careful with '-M', because it forces the rename, even if there is an existing branch with the same name already. Here is the excerpt from the 'git-branch' man page:</p>\n\n<blockquote>\n  <p>With a -m or -M option, <code>&lt;oldbranch&gt;</code> will be renamed to <code>&lt;newbranch&gt;</code>. If <code>&lt;oldbranch&gt;</code> had a corresponding reflog, it is renamed to match <code>&lt;newbranch&gt;</code>, and a reflog entry is created to remember the branch renaming. If <code>&lt;newbranch&gt;</code> exists, -M must be used to force the rename to happen.</p>\n</blockquote>\n    </div>",
          "vote": "131"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h3>1. Rename</h3>\n\n<p><strong>If it is your current branch, just do</strong></p>\n\n<pre><code>git branch -m new_name\n</code></pre>\n\n<p><strong>If it is another branch you want to rename</strong></p>\n\n<pre><code>git branch -m old_name new_name\n</code></pre>\n\n<hr>\n\n<h3>2. Track a new remote branch</h3>\n\n<p><strong>- If your branch was pushed, then after renaming you need to delete it from the remote Git repository and ask your new local to track a new remote branch:</strong></p>\n\n<pre><code>git push origin :old_name\ngit push --set-upstream origin new_name\n</code></pre>\n    </div>",
          "vote": "105"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I foolishly named a branch starting with a hyphen, and then checked out master.  I didn't want to <strong>delete</strong> my branch, I had work in it.</p>\n\n<p>Neither of these worked:</p>\n\n<p><code>git checkout -dumb-name</code></p>\n\n<p><code>git checkout -- -dumb-name</code></p>\n\n<p><code>\"</code>s, <code>'</code>s and <code>\\</code>s didn't help either.  <code>git branch -m</code> doesn't work.</p>\n\n<p>Here's how I finally fixed it. Go into your working copy's .git/refs/heads, find the filename \"-dumb-name\", get the hash of the branch.  Then this will check it out, make a new branch with a sane name, and delete the old one.</p>\n\n<pre><code>git checkout {hash}\ngit checkout -b brilliant-name\ngit branch -d -- -dumb-name\n</code></pre>\n    </div>",
          "vote": "82"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just three steps to replicate change in name on <code>remote</code> as well as on GitHub:</p>\n\n<p>Step 1 <code>git branch -m old_branchname new_branchname</code></p>\n\n<p>Step 2 <code>git push origin :old_branchname new_branchname</code></p>\n\n<p>Step 3 <code>git push --set-upstream origin new_branchname</code></p>\n    </div>",
          "vote": "77"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To rename a branch locally:</p>\n\n<pre><code>git branch -m [old-branch] [new-branch]\n</code></pre>\n\n<p>Now you'll have to propagate these changes on your remote server as well.</p>\n\n<p>To push changes of the deleted old branch:</p>\n\n<pre><code>git push origin :[old-branch]\n</code></pre>\n\n<p>To push changes of creation of new branch:</p>\n\n<pre><code>git push origin [new-branch]\n</code></pre>\n    </div>",
          "vote": "76"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Rename the branch using this command:</p>\n\n<pre><code>git branch -m [old_branch_name] [new_branch_name]\n</code></pre>\n\n<p><code>-m</code>: It renames/moves the branch. If there is already a branch, you will get an error.</p>\n\n<p>If there is already a branch and you want to rename with that branch, use:</p>\n\n<pre><code> git rename -M [old_branch_name] [new_branch_name]\n</code></pre>\n\n<p>For more information about help, use this command in the terminal:</p>\n\n<pre><code>git branch --help\n</code></pre>\n\n<p>or</p>\n\n<pre><code>man git branch\n</code></pre>\n    </div>",
          "vote": "45"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Advanced Git users can rename manually using:</p>\n\n<pre><code>Rename the old branch under .git/refs/heads to the new name\n\nRename the old branch under .git/logs/refs/heads to the new name\n\nUpdate the .git/HEAD to point to yout new branch name\n</code></pre>\n    </div>",
          "vote": "42"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li>Rename your local branch.</li>\n</ol>\n\n<p>If you are on the branch you want to rename:</p>\n\n<pre><code>git branch -m new-name\n</code></pre>\n\n<p>If you are on a different branch:</p>\n\n<pre><code>git branch -m old-name new-name\n</code></pre>\n\n<ol start=\"2\">\n<li>Delete the old-name remote branch and push the new-name local branch.</li>\n</ol>\n\n<p><code>git push origin :old-name new-name</code></p>\n\n<ol start=\"3\">\n<li>Reset the upstream branch for the new-name local branch.\nSwitch to the branch and then:</li>\n</ol>\n\n<p><code>git push origin -u new-name</code></p>\n\n<p>Or for a fast way to do that, you can use these 3 steps:</p>\n\n<p><strong># Rename branch locally</strong>  </p>\n\n<pre><code>git branch -m old_branch new_branch  \n</code></pre>\n\n<p><strong># Delete the old remote branch</strong>   </p>\n\n<pre><code>git push origin :old_branch  \n</code></pre>\n\n<p><strong># Push the new branch, set local branch to track the new remote</strong></p>\n\n<pre><code>git push --set-upstream origin new_branch   \n</code></pre>\n\n<p>Referance: <a href=\"https://www.w3docs.com/snippets/git/how-to-rename-git-local-and-remote-branches.html\" rel=\"noreferrer\">https://www.w3docs.com/snippets/git/how-to-rename-git-local-and-remote-branches.html</a></p>\n    </div>",
          "vote": "38"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here are three steps: A command that you can call inside your terminal and change branch name.</p>\n\n<pre><code>git branch -m old_branch new_branch         # Rename branch locally\ngit push origin :old_branch                 # Delete the old branch\ngit push --set-upstream origin new_branch   # Push the new branch, set local branch to track the new remote\n</code></pre>\n\n<p>If you need more: step-by-step, <em><a href=\"http://www.w3docs.com/snippets/git/how-to-rename-git-local-and-remote-branches.html\" rel=\"noreferrer\">How To Change Git Branch Name</a></em> is a good article about that.</p>\n    </div>",
          "vote": "30"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Probably as mentioned by others, this will be a case mismatch in branch naming.</p>\n\n<p>If you have such a situation, I can guess that you're on Windows which will also lead you to:</p>\n\n<pre><code>$ git branch -m CaseSensitive casesensitive\nfatal: A branch named 'casesensitive' already exists.\n</code></pre>\n\n<p>Then you have to do an intermediate step:</p>\n\n<pre><code>$ git branch -m temporary\n$ git branch -m casesensitive\n</code></pre>\n\n<p>Nothing more.</p>\n    </div>",
          "vote": "28"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Trying to answer specifically to the question (at least the title).</p>\n\n<p>You can also rename <em>local</em> branch, but keeps tracking the old name on the remote.</p>\n\n<pre><code>git branch -m old_branch new_branch\ngit push --set-upstream origin new_branch:old_branch\n</code></pre>\n\n<p>Now, when you run <code>git push</code>, the remote <code>old_branch</code> ref is updated with your local <code>new_branch</code>.</p>\n\n<p><strong>You have to know and remember</strong> this configuration. But it can be useful if you don't have the choice for the remote branch name, but you don't like it (oh, I mean, you've got a <em>very good</em> reason not to like it !) and prefer a clearer name for your local branch.</p>\n\n<p>Playing with the fetch configuration, you can even rename the local remote-reference. i.e, having a <code>refs/remote/origin/new_branch</code> ref pointer to the branch, that is in fact the <code>old_branch</code> on <code>origin</code>. However, I highly discourage this, for the safety of your mind.</p>\n    </div>",
          "vote": "26"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Changing the branch <strong>locally</strong> is quite easy...</p>\n\n<p>If you are on the branch you want to change the name for, simply do this:</p>\n\n<pre><code>git branch -m my_new_branch\n</code></pre>\n\n<p>Otherwise, if you are on <code>master</code> or <strong>any other branch</strong> other than the one you'd like to change the name, simply do:</p>\n\n<pre><code>git branch -m my_old_branch my_new_branch\n</code></pre>\n\n<p>Also, I create the image below to show this in action on a <strong>command line</strong>. In this case, you are on <code>master</code> branch, for example:</p>\n\n<p><a href=\"https://i.stack.imgur.com/9ARzs.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/9ARzs.jpg\" alt=\"Change branch name locally\"></a></p>\n    </div>",
          "vote": "24"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To rename the current branch (except for detached HEAD state) you can also use this alias:</p>\n\n<pre><code>[alias]\n    mvh = !sh -c 'git branch -m `git rev-parse --abbrev-ref HEAD` $1'\n</code></pre>\n    </div>",
          "vote": "22"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you are willing to use <a href=\"https://www.sourcetreeapp.com/\" rel=\"noreferrer\">SourceTree</a> (which I strongly recommend), you can right click your branch and chose 'Rename'.</p>\n\n<p><a href=\"https://i.stack.imgur.com/6GuAJ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/6GuAJ.png\" alt=\"enter image description here\"></a></p>\n    </div>",
          "vote": "21"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another option is not to use the command line at all. Git GUI clients such as <a href=\"http://www.sourcetreeapp.com/\" rel=\"noreferrer\">SourceTree</a> take away much of the syntactical learning curve / pain that causes questions such as this one to be amongst the most viewed on Stack Overflow.</p>\n\n<p>In SourceTree, right click on any local branch in the \"Branches\" pane on the left and select \"Rename ...\".</p>\n    </div>",
          "vote": "20"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A simple way to do it:</p>\n\n<pre><code>git branch -m old_branch new_branch         # Rename branch locally\ngit push origin :old_branch                 # Delete the old branch\ngit push --set-upstream origin new_branch   # Push the new branch, set local branch to track the new remote\n</code></pre>\n\n<p>For more, see <a href=\"https://gist.github.com/lttlrck/9628955\" rel=\"noreferrer\">this</a>.</p>\n    </div>",
          "vote": "18"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since you do not want to push the branch to a remote server, this example will be useful:</p>\n\n<p>Let's say you have an existing branch called \"my-hot-feature,\" and you want to rename it to \"feature-15.\"</p>\n\n<p>First, you want to change your local branch. This couldn't be easier:</p>\n\n<pre><code>git branch -m my-hot-feature feature-15\n</code></pre>\n\n<p>For more information, you can visit <em><a href=\"http://www.benjaminlhaas.com/blog/locally-and-remotely-renaming-branch-git\" rel=\"noreferrer\">Locally and Remotely Renaming a Branch in Git</a></em>.</p>\n    </div>",
          "vote": "16"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Git version 2.9.2</strong></p>\n\n<p>If you want to change the name of the local branch you are on:</p>\n\n<pre><code>git branch -m new_name\n</code></pre>\n\n<p>If you want to change the name of a different branch:</p>\n\n<pre><code>git branch -m old_name new_name\n</code></pre>\n\n<p>If you want to change the name of a different branch to a name that already exists:</p>\n\n<pre><code>git branch -M old_name new_name_that_already_exists\n</code></pre>\n\n<p><strong>Note: The last command is destructive and will rename your branch, but you will lose the old branch with that name and those commits because branch names must be unique.</strong></p>\n    </div>",
          "vote": "14"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want to change the name of the current branch, run:</p>\n\n<pre><code>git branch -m [old_branch] [new_branch]\n</code></pre>\n\n<p>If you want to delete the old remote branch, run:</p>\n\n<pre><code>git push origin :[old_branch]\n</code></pre>\n\n<p>If you want to delete the old remote branch and create a new remote branch, run:</p>\n\n<pre><code>git push origin :old_branch new_branch\n</code></pre>\n    </div>",
          "vote": "11"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Actually you have three steps because the local branch has a duplicate on the server so we have one step for local on two steps on the server:</p>\n<ol>\n<li><strong>Rename local:</strong> just use the following command to rename your current branch, even you checked it out:\n<pre><code>git branch -m &lt;old-branch-name&gt; &lt;new-branch-name&gt;\n</code></pre>\n</li>\n<li><strong>Delete the server one:</strong> use the following command to delete the old name branch on the server:\n<pre><code>git push &lt;remote-name[origin by default]&gt; :&lt;old-branch-name&gt;\n</code></pre>\n</li>\n<li><strong>Push the new one:</strong> now it's time to push the new branch named on the server:\n<pre><code>git push -u &lt;new-branch-name&gt;\n</code></pre>\n</li>\n</ol>\n    </div>",
          "vote": "7"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Git branch rename can be done by using:</p>\n\n<ol>\n<li><p><code>git branch -m oldBranch newBranch</code></p></li>\n<li><p><code>git branch -M oldBranch ExistingBranch</code></p></li>\n</ol>\n\n<p>The difference between <strong>-m</strong> and <strong>-M</strong>:</p>\n\n<p><strong>-m:</strong> if you're trying to rename your branch with an existing branch name using <strong>-m</strong>.\nIt will raise an error saying that the branch already exists. You need to give unique name.</p>\n\n<p>But,</p>\n\n<p><strong>-M:</strong> this will help you to force rename with a given name, even it is exists. So an existing branch will overwrite entirely with it...</p>\n\n<p>Here is a <strong>Git terminal example,</strong></p>\n\n<pre><code>mohideen@dev:~/project/myapp/sunithamakeup$ git branch\n  master\n  master0\n  new_master\n  test\n* test1\nmohideen@dev:~/project/myapp/sunithamakeup$ git branch -m test1 test\nfatal: A branch named 'test' already exists.\nmohideen@dev:~/project/myapp/sunithamakeup$ git branch -M test1 test\nmohideen@dev:~/project/myapp/sunithamakeup$ git branch\n  master\n  master0\n  new_master\n* test\nmohideen@dev:~/project/myapp/sunithamakeup$\n</code></pre>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For Git GUI users it couldn't be much simpler.\nIn Git GUI, choose the branch name from the drop down list in the \"Rename Branch\" dialog box created from the menu item Branch:Rename, type a New Name, and click \"Rename\". I have highlighted where to find the drop down list.</p>\n\n<p><a href=\"https://i.stack.imgur.com/tpmgB.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/tpmgB.png\" alt=\"Rename a local Git branch\"></a></p>\n    </div>",
          "vote": "5"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>All of the previous answers are talking about <code>git branch -m</code>. Of course, it's easy to operate, but for me, it may be a little hard to remember another Git command. So I tried to get the work done by the command I was familiar with. Yeah, you may guessed it.</p>\n\n<p>I use <code>git branch -b &lt;new_branch_name&gt;</code>. And if you don't want to save the old branch now you can execute <code>git branch -D &lt;old_branch_name&gt;</code> to remove it.</p>\n\n<p>I know it may be a little tedious, but it's easier to understand and remember. I hope it‘s helpful for you.</p>\n    </div>",
          "vote": "4"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Before we begin, make sure you’ve selected the branch you want to rename:</p>\n<pre><code>git checkout old-name\n</code></pre>\n<p>If you want to see all of your local branches, use the following command:</p>\n<pre><code>git branch --list\n</code></pre>\n<p>When you’re all clear, follow these steps:</p>\n<ol>\n<li><p>Using the Git rename branch command will require you to add an <strong>-m</strong> option to your command:</p>\n<pre><code>git branch -m new-name\n</code></pre>\n</li>\n<li><p>You can also rename a local branch from another branch by using the following two commands:</p>\n<pre><code>git checkout master\n\ngit branch -m old-name new-name\n</code></pre>\n</li>\n<li><p>Lastly, this command will list all — both local and remote — branches to verify that it has been renamed:</p>\n<pre><code>git branch -a\n</code></pre>\n</li>\n</ol>\n<p>Although it isn’t possible to rename a remote branch directly, the process of renaming one involves these three easy steps:</p>\n<ol>\n<li><p>To start, you will need to rename a local branch by following the previous steps.\n2.Then <strong>delete</strong> the <strong>old</strong> branch and <strong>push</strong> the <strong>new</strong> one. You can do this easily with the following commands:</p>\n<pre><code> git push origin --delete old-name\n git push origin :old-name new-name\n</code></pre>\n</li>\n<li><p>Reset the upstream branch for your new local branch and you will be all set:</p>\n<pre><code>git push origin -u new-name\n</code></pre>\n</li>\n</ol>\n    </div>",
          "vote": "4"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want to:</p>\n\n<ul>\n<li>Rename the Git repository, run: <code>git branch -m &lt;oldname&gt; &lt;newname&gt;</code></li>\n<li>Delete the old branch by: <code>git push origin: old-name new-name</code></li>\n<li>Commit it using: <code>git commit &lt;newname&gt;</code>\n\n<ul>\n<li>and then push using: <code>git push origin new_branch_name:master</code></li>\n</ul></li>\n<li>If you want to check the status then use: <code>git status</code></li>\n<li>If you want to check out then use: <code>git checkout</code></li>\n</ul>\n    </div>",
          "vote": "3"
        }
      ]
    },
    {
      "question": "What and where are the stack and heap?",
      "url": "https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Programming language books explain that value types are created on the <strong>stack</strong>, and reference types are created on the <strong>heap</strong>, without explaining what these two things are. I haven't read a clear explanation of this.  I understand what <em>a stack</em> is. But, </p>\n\n<ul>\n<li>Where and what are they (physically in a real computer's memory)?</li>\n<li>To what extent are they controlled by the OS or language run-time?</li>\n<li>What is their scope?</li>\n<li>What determines the size of each of them?</li>\n<li>What makes one faster? </li>\n</ul>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The stack is the memory set aside as scratch space for a thread of execution.  When a function is called, a block is reserved on the top of the stack for local variables and some bookkeeping data.  When that function returns, the block becomes unused and can be used the next time a function is called.  The stack is always reserved in a LIFO (last in first out) order; the most recently reserved block is always the next block to be freed.  This makes it really simple to keep track of the stack; freeing a block from the stack is nothing more than adjusting one pointer.</p>\n\n<p>The heap is memory set aside for dynamic allocation.  Unlike the stack, there's no enforced pattern to the allocation and deallocation of blocks from the heap; you can allocate a block at any time and free it at any time.  This makes it much more complex to keep track of which parts of the heap are allocated or free at any given time; there are many custom heap allocators available to tune heap performance for different usage patterns.</p>\n\n<p>Each thread gets a stack, while there's typically only one heap for the application (although it isn't uncommon to have multiple heaps for different types of allocation).</p>\n\n<p>To answer your questions directly:  </p>\n\n<blockquote>\n  <p><em>To what extent are they controlled by the OS or language runtime?</em></p>\n</blockquote>\n\n<p>The OS allocates the stack for each system-level thread when the thread is created.  Typically the OS is called by the language runtime to allocate the heap for the application.</p>\n\n<blockquote>\n  <p><em>What is their scope?</em></p>\n</blockquote>\n\n<p>The stack is attached to a thread, so when the thread exits the stack is reclaimed.  The heap is typically allocated at application startup by the runtime, and is reclaimed when the application (technically process) exits.</p>\n\n<blockquote>\n  <p><em>What determines the size of each of them?</em>  </p>\n</blockquote>\n\n<p>The size of the stack is set when a thread is created.  The size of the heap is set on application startup, but can grow as space is needed (the allocator requests more memory from the operating system).</p>\n\n<blockquote>\n  <p><em>What makes one faster?</em></p>\n</blockquote>\n\n<p>The stack is faster because the access pattern makes it trivial to allocate and deallocate memory from it (a pointer/integer is simply incremented or decremented), while the heap has much more complex bookkeeping involved in an allocation or deallocation.  Also, each byte in the stack tends to be reused very frequently which means it tends to be mapped to the processor's cache, making it very fast. Another performance hit for the heap is that the heap, being mostly a global resource, typically has to be multi-threading safe, i.e. each allocation and deallocation needs to be - typically - synchronized with \"all\" other heap accesses in the program.</p>\n\n<p>A clear demonstration:\n<img src=\"https://i.stack.imgur.com/i6k0Z.png\" alt=\"\">\n<br><sub>Image source: <a href=\"http://vikashazrati.wordpress.com/2007/10/01/quicktip-java-basics-stack-and-heap/\" rel=\"noreferrer\">vikashazrati.wordpress.com</a></sub></p>\n    </div>",
          "vote": "6258"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Stack:</strong></p>\n\n<ul>\n<li>Stored in computer RAM just like the heap.</li>\n<li>Variables created on the stack will go out of scope and are automatically deallocated.</li>\n<li>Much faster to allocate in comparison to variables on the heap.</li>\n<li>Implemented with an actual stack data structure.</li>\n<li>Stores local data, return addresses, used for parameter passing.</li>\n<li>Can have a stack overflow when too much of the stack is used (mostly from infinite or too deep recursion, very large allocations).</li>\n<li>Data created on the stack can be used without pointers.</li>\n<li>You would use the stack if you know exactly how much data you need to allocate before compile time and it is not too big.</li>\n<li>Usually has a maximum size already determined when your program starts.</li>\n</ul>\n\n<p><strong>Heap:</strong></p>\n\n<ul>\n<li>Stored in computer RAM just like the stack.</li>\n<li>In C++, variables on the heap must be destroyed manually and never fall out of scope. The data is freed with <code>delete</code>, <code>delete[]</code>, or <code>free</code>.</li>\n<li>Slower to allocate in comparison to variables on the stack.</li>\n<li>Used on demand to allocate a block of data for use by the program.</li>\n<li>Can have fragmentation when there are a lot of allocations and deallocations.</li>\n<li>In C++ or C, data created on the heap will be pointed to by pointers and allocated with <code>new</code> or <code>malloc</code> respectively.</li>\n<li>Can have allocation failures if too big of a buffer is requested to be allocated.</li>\n<li>You would use the heap if you don't know exactly how much data you will need at run time or if you need to allocate a lot of data.</li>\n<li>Responsible for memory leaks.</li>\n</ul>\n\n<p><strong>Example:</strong></p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">()</span>\n</span>{\n  <span class=\"hljs-keyword\">char</span> *pBuffer; <span class=\"hljs-comment\">//&lt;--nothing allocated yet (excluding the pointer itself, which is allocated here on the stack).</span>\n  <span class=\"hljs-keyword\">bool</span> b = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// Allocated on the stack.</span>\n  <span class=\"hljs-keyword\">if</span>(b)\n  {\n    <span class=\"hljs-comment\">//Create 500 bytes on the stack</span>\n    <span class=\"hljs-keyword\">char</span> buffer[<span class=\"hljs-number\">500</span>];\n\n    <span class=\"hljs-comment\">//Create 500 bytes on the heap</span>\n    pBuffer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">char</span>[<span class=\"hljs-number\">500</span>];\n\n   }<span class=\"hljs-comment\">//&lt;-- buffer is deallocated here, pBuffer is not</span>\n}<span class=\"hljs-comment\">//&lt;--- oops there's a memory leak, I should have called delete[] pBuffer;</span>\n</code></pre>\n    </div>",
          "vote": "2448"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The most important point is that heap and stack are generic terms for ways in which memory can be allocated.  They can be implemented in many different ways, and the terms apply to the basic concepts.</p>\n\n<ul>\n<li><p>In a stack of items, items sit one on top of the other in the order they were placed there, and you can only remove the top one (without toppling the whole thing over).</p>\n\n<p><img src=\"https://i.stack.imgur.com/ZLzMV.jpg\" alt=\"Stack like a stack of papers\"></p>\n\n<p>The simplicity of a stack is that you do not need to maintain a table containing a record of each section of allocated memory; the only state information you need is a single pointer to the end of the stack.  To allocate and de-allocate, you just increment and decrement that single pointer.  Note: a stack can sometimes be implemented to start at the top of a section of memory and extend downwards rather than growing upwards.</p></li>\n<li><p>In a heap, there is no particular order to the way items are placed.  You can reach in and remove items in any order because there is no clear 'top' item.</p>\n\n<p><img src=\"https://i.stack.imgur.com/kINqo.jpg\" alt=\"Heap like a heap of licorice allsorts\"></p>\n\n<p>Heap allocation requires maintaining a full record of what memory is allocated and what isn't, as well as some overhead maintenance to reduce fragmentation, find contiguous memory segments big enough to fit the requested size, and so on.  Memory can be deallocated at any time leaving free space.  Sometimes a memory allocator will perform maintenance tasks such as defragmenting memory by moving allocated memory around, or garbage collecting - identifying at runtime when memory is no longer in scope and deallocating it. </p></li>\n</ul>\n\n<p>These images should do a fairly good job of describing the two ways of allocating and freeing memory in a stack and a heap.  Yum!</p>\n\n<ul>\n<li><p>To what extent are they controlled by the OS or language runtime?</p>\n\n<p>As mentioned, heap and stack are general terms, and can be implemented in many ways.  Computer programs typically have a stack called a <a href=\"http://en.wikipedia.org/wiki/Call_stack\" rel=\"noreferrer\">call stack</a> which stores information relevant to the current function such as a pointer to whichever function it was called from, and any local variables.  Because functions call other functions and then return, the stack grows and shrinks to hold information from the functions further down the call stack.  A program doesn't really have runtime control over it; it's determined by the programming language, OS and even the system architecture.</p>\n\n<p>A heap is a general term used for any memory that is allocated dynamically and randomly; i.e. out of order.  The memory is typically allocated by the OS, with the application calling API functions to do this allocation.  There is a fair bit of overhead required in managing dynamically allocated memory, which is usually handled by the runtime code of the programming language or environment used.</p></li>\n<li><p>What is their scope?</p>\n\n<p>The call stack is such a low level concept that it doesn't relate to 'scope' in the sense of programming.  If you disassemble some code you'll see relative pointer style references to portions of the stack, but as far as a higher level language is concerned, the language imposes its own rules of scope.  One important aspect of a stack, however, is that once a function returns, anything local to that function is immediately freed from the stack.  That works the way you'd expect it to work given how your programming languages work.  In a heap, it's also difficult to define.  The scope is whatever is exposed by the OS, but your programming language probably adds its rules about what a \"scope\" is in your application.  The processor architecture and the OS use virtual addressing, which the processor translates to physical addresses and there are page faults, etc.  They keep track of what pages belong to which applications.  You never really need to worry about this, though, because you just use whatever method your programming language uses to allocate and free memory, and check for errors (if the allocation/freeing fails for any reason).</p></li>\n<li><p>What determines the size of each of them?</p>\n\n<p>Again, it depends on the language, compiler, operating system and architecture.  A stack is usually pre-allocated, because by definition it must be contiguous memory.  The language compiler or the OS determine its size.  You don't store huge chunks of data on the stack, so it'll be big enough that it should never be fully used, except in cases of unwanted endless recursion (hence, \"stack overflow\") or other unusual programming decisions.</p>\n\n<p>A heap is a general term for anything that can be dynamically allocated.  Depending on which way you look at it, it is constantly changing size.  In modern processors and operating systems the exact way it works is very abstracted anyway, so you don't normally need to worry much about how it works deep down, except that (in languages where it lets you) you mustn't use memory that you haven't allocated yet or memory that you have freed.</p></li>\n<li><p>What makes one faster?</p>\n\n<p>The stack is faster because all free memory is always contiguous.  No list needs to be maintained of all the segments of free memory, just a single pointer to the current top of the stack.  Compilers usually store this pointer in a special, fast <a href=\"http://en.wikipedia.org/wiki/Stack_register\" rel=\"noreferrer\">register</a> for this purpose.  What's more, subsequent operations on a stack are usually concentrated within very nearby areas of memory, which at a very low level is good for optimization by the processor on-die caches.</p></li>\n</ul>\n    </div>",
          "vote": "1409"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>(I have moved this answer from another question that was more or less a dupe of this one.)</p>\n\n<p>The answer to your question is implementation specific and may vary across compilers and processor architectures. However, here is a simplified explanation.</p>\n\n<ul>\n<li>Both the stack and the heap are memory areas allocated from the underlying operating system (often virtual memory that is mapped to physical memory on demand).</li>\n<li>In a multi-threaded environment each thread will have its own completely independent stack but they will share the heap. Concurrent access has to be controlled on the heap and is not possible on the stack.</li>\n</ul>\n\n<h2>The heap</h2>\n\n<ul>\n<li>The heap contains a linked list of used and free blocks. New allocations on the heap (by <code>new</code> or <code>malloc</code>) are satisfied by creating a suitable block from one of the free blocks. This requires updating list of blocks on the heap. This <em>meta information</em> about the blocks on the heap is also stored on the heap often in a small area just in front of every block.</li>\n<li>As the heap grows new blocks are often allocated from lower addresses towards higher addresses. Thus you can think of the heap as a <em>heap</em> of memory blocks that grows in size as memory is allocated. If the heap is too small for an allocation the size can often be increased by acquiring more memory from the underlying operating system.</li>\n<li>Allocating and deallocating many small blocks may leave the heap in a state where there are a lot of small free blocks interspersed between the used blocks. A request to allocate a large block may fail because none of the free blocks are large enough to satisfy the allocation request even though the combined size of the free blocks may be large enough. This is called <em>heap fragmentation</em>.</li>\n<li>When a used block that is adjacent to a free block is deallocated the new free block may be merged with the adjacent free block to create a larger free block effectively reducing the fragmentation of the heap.</li>\n</ul>\n\n<p><img src=\"https://i.stack.imgur.com/0Obi0.png\" alt=\"The heap\"></p>\n\n<h2>The stack</h2>\n\n<ul>\n<li>The stack often works in close tandem with a special register on the CPU named the <em>stack pointer</em>. Initially the stack pointer points to the top of the stack (the highest address on the stack).</li>\n<li>The CPU has special instructions for <em>pushing</em> values onto the stack and <em>popping</em> them back from the stack. Each <em>push</em> stores the value at the current location of the stack pointer and decreases the stack pointer.  A <em>pop</em> retrieves the value pointed to by the stack pointer and then increases the stack pointer (don't be confused by the fact that <em>adding</em> a value to the stack <em>decreases</em> the stack pointer and <em>removing</em> a value <em>increases</em> it. Remember that the stack grows to the bottom). The values stored and retrieved are the values of the CPU registers.</li>\n<li>When a function is called the CPU uses special instructions that push the current <em>instruction pointer</em>, i.e. the address of the code executing on the stack. The CPU then jumps to the function by setting the \ninstruction pointer to the address of the function called. Later, when the function returns, the old instruction pointer is popped from the stack and execution resumes at the code just after the call to the function.</li>\n<li>When a function is entered, the stack pointer is decreased to allocate more space on the stack for local (automatic) variables. If the function has one local 32 bit variable four bytes are set aside on the stack. When the function returns, the stack pointer is moved back to free the allocated area.</li>\n<li>If a function has parameters, these are pushed onto the stack before the call to the function. The code in the function is then able to navigate up the stack from the current stack pointer to locate these values.</li>\n<li>Nesting function calls work like a charm. Each new call will allocate function parameters, the return address and space for local variables and these <em>activation records</em> can be stacked for nested calls and will unwind in the correct way when the functions return.</li>\n<li>As the stack is a limited block of memory, you can cause a <em>stack overflow</em> by calling too many nested functions and/or allocating too much space for local variables. Often the memory area used for the stack is set up in such a way that writing below the bottom (the lowest address) of the stack will trigger a trap or exception in the CPU. This exceptional condition can then be caught by the runtime and converted into some kind of stack overflow exception.</li>\n</ul>\n\n<p><img src=\"https://i.stack.imgur.com/9UshP.png\" alt=\"The stack\"></p>\n\n<blockquote>\n  <p>Can a function be allocated on the heap instead of a stack?</p>\n</blockquote>\n\n<p>No, activation records for functions (i.e. local or automatic variables) are allocated on the stack that is used not only to store these variables, but also to keep track of nested function calls.</p>\n\n<p>How the heap is managed is really up to the runtime environment. C uses <code>malloc</code> and C++ uses <code>new</code>, but many other languages have garbage collection.</p>\n\n<p>However, the stack is a more low-level feature closely tied to the processor architecture. Growing the heap when there is not enough space isn't too hard since it can be implemented in the library call that handles the heap. However, growing the stack is often impossible as the stack overflow only is discovered when it is too late; and shutting down the thread of execution is the only viable option.</p>\n    </div>",
          "vote": "754"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the following C# code</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Method1</span>(<span class=\"hljs-params\"></span>)</span>\n{\n    <span class=\"hljs-built_in\">int</span> i = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-built_in\">int</span> y = <span class=\"hljs-number\">2</span>;\n    class1 cls1 = <span class=\"hljs-keyword\">new</span> class1();\n}\n</code></pre>\n\n<p>Here's how the memory is managed</p>\n\n<p><img src=\"https://i.stack.imgur.com/NS0k7.jpg\" alt=\"Picture of variables on the stack\"></p>\n\n<p><code>Local Variables</code> that only need to last as long as the function invocation go in the stack. The heap is used for variables whose lifetime we don't really know up front but we expect them to last a while. In most languages it's critical that we know at compile time how large a variable is if we want to store it on the stack. </p>\n\n<p>Objects (which vary in size as we update them) go on the heap because we don't know at creation time how long they are going to last. In many languages the heap is garbage collected to find objects (such as the cls1 object) that no longer have any references. </p>\n\n<p>In Java, most objects go directly into the heap. In languages like C / C++, structs and classes can often remain on the stack when you're not dealing with pointers.</p>\n\n<p>More information can be found here:</p>\n\n<p><a href=\"http://timmurphy.org/2010/08/11/the-difference-between-stack-and-heap-memory-allocation/\" rel=\"noreferrer\">The difference between stack and heap memory allocation «  timmurphy.org</a></p>\n\n<p>and here: </p>\n\n<p><a href=\"https://root.cern.ch/root/htmldoc/guides/users-guide/ALittleC++.html#creating-objects-on-the-stack-and-heap\" rel=\"noreferrer\">Creating Objects on the Stack and Heap</a></p>\n\n<p>This article is the source of picture above: <a href=\"http://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types#Stack%20and%20Heap\" rel=\"noreferrer\">Six important .NET concepts: Stack, heap, value types, reference types, boxing, and unboxing - CodeProject</a></p>\n\n<p>but be aware it may contain some inaccuracies. </p>\n    </div>",
          "vote": "417"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>The Stack</strong>\nWhen you call a function the arguments to that function plus some other overhead is put on the stack. Some info (such as where to go on return) is also stored there.\nWhen you declare a variable inside your function, that variable is also allocated on the stack. </p>\n\n<p>Deallocating the stack is pretty simple because you always deallocate in the reverse order in which you allocate. Stack stuff is added as you enter functions, the corresponding data is removed as you exit them. This means that you tend to stay within a small region of the stack unless you call lots of functions that call lots of other functions (or create a recursive solution).</p>\n\n<p><strong>The Heap</strong>\nThe heap is a generic name for where you put the data that you create on the fly. If you don't know how many spaceships your program is going to create, you are likely to use the new (or malloc or equivalent) operator to create each spaceship. This allocation is going to stick around for a while, so it is likely we will free things in a different order than we created them. </p>\n\n<p>Thus, the heap is far more complex, because there end up being regions of memory that are unused interleaved with chunks that are - memory gets fragmented. Finding free memory of the size you need is a difficult problem. This is why the heap should be avoided (though it is still often used).</p>\n\n<p><strong>Implementation</strong>\nImplementation of both the stack and heap is usually down to the runtime / OS. Often games and other applications that are performance critical create their own memory solutions that grab a large chunk of memory from the heap and then dish it out internally to avoid relying on the OS for memory. </p>\n\n<p>This is only practical if your memory usage is quite different from the norm - i.e for games where you load a level in one huge operation and can chuck the whole lot away in another huge operation.</p>\n\n<p><strong>Physical location in memory</strong>\nThis is less relevant than you think because of a technology called <a href=\"http://en.wikipedia.org/wiki/Virtual_memory\" rel=\"noreferrer\">Virtual Memory</a> which makes your program think that you have access to a certain address where the physical data is somewhere else (even on the hard disc!). The addresses you get for the stack are in increasing order as your call tree gets deeper. The addresses for the heap are un-predictable (i.e implimentation specific) and frankly not important.</p>\n    </div>",
          "vote": "214"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To clarify, <a href=\"https://stackoverflow.com/a/13308092/1763801\">this answer</a> has incorrect information (<a href=\"https://stackoverflow.com/a/662454/1763801\">thomas</a> fixed his answer after comments, cool :) ). Other answers just avoid explaining what static allocation means. So I will explain the three main forms of allocation and how they usually relate to the heap, stack, and data segment below. I also will show some examples in both C/C++ and Python to help people understand.</p>\n\n<p>\"Static\" (AKA statically allocated) variables are not allocated on the stack. Do not assume so - many people do only because \"static\" sounds a lot like \"stack\". They actually exist in neither the stack nor the heap. The are part of what's called the <a href=\"http://en.wikipedia.org/wiki/Data_segment\" rel=\"noreferrer\">data segment</a>.</p>\n\n<p>However, it is generally better to consider \"<strong>scope</strong>\" and \"<strong>lifetime</strong>\" rather than \"stack\" and \"heap\".</p>\n\n<p>Scope refers to what parts of the code can access a variable. Generally we think of <strong>local scope</strong> (can only be accessed by the current function) versus <strong>global scope</strong> (can be accessed anywhere) although scope can get much more complex.</p>\n\n<p>Lifetime refers to when a variable is allocated and deallocated during program execution. Usually we think of <strong>static allocation</strong> (variable will persist through the entire duration of the program, making it useful for storing the same information across several function calls) versus <strong>automatic allocation</strong> (variable only persists during a single call to a function, making it useful for storing information that is only used during your function and can be discarded once you are done) versus <strong>dynamic allocation</strong> (variables whose duration is defined at runtime, instead of compile time like static or automatic).</p>\n\n<p>Although most compilers and interpreters implement this behavior similarly in terms of using stacks, heaps, etc, a compiler may sometimes break these conventions if it wants as long as behavior is correct. For instance, due to optimization a local variable may only exist in a register or be removed entirely, even though most local variables exist in the stack. As has been pointed out in a few comments, you are free to implement a compiler that doesn't even use a stack or a heap, but instead some other storage mechanisms (rarely done, since stacks and heaps are great for this).</p>\n\n<p>I will provide some simple annotated C code to illustrate all of this. The best way to learn is to run a program under a debugger and watch the behavior. If you prefer to read python, skip to the end of the answer :)</p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code><span class=\"hljs-comment\">// Statically allocated in the data segment when the program/DLL is first loaded</span>\n<span class=\"hljs-comment\">// Deallocated when the program/DLL exits</span>\n<span class=\"hljs-comment\">// scope - can be accessed from anywhere in the code</span>\n<span class=\"hljs-keyword\">int</span> someGlobalVariable;\n\n<span class=\"hljs-comment\">// Statically allocated in the data segment when the program is first loaded</span>\n<span class=\"hljs-comment\">// Deallocated when the program/DLL exits</span>\n<span class=\"hljs-comment\">// scope - can be accessed from anywhere in this particular code file</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> someStaticVariable;\n\n<span class=\"hljs-comment\">// \"someArgument\" is allocated on the stack each time MyFunction is called</span>\n<span class=\"hljs-comment\">// \"someArgument\" is deallocated when MyFunction returns</span>\n<span class=\"hljs-comment\">// scope - can be accessed only within MyFunction()</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">MyFunction</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> someArgument)</span> </span>{\n\n    <span class=\"hljs-comment\">// Statically allocated in the data segment when the program is first loaded</span>\n    <span class=\"hljs-comment\">// Deallocated when the program/DLL exits</span>\n    <span class=\"hljs-comment\">// scope - can be accessed only within MyFunction()</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> someLocalStaticVariable;\n\n    <span class=\"hljs-comment\">// Allocated on the stack each time MyFunction is called</span>\n    <span class=\"hljs-comment\">// Deallocated when MyFunction returns</span>\n    <span class=\"hljs-comment\">// scope - can be accessed only within MyFunction()</span>\n    <span class=\"hljs-keyword\">int</span> someLocalVariable;\n\n    <span class=\"hljs-comment\">// A *pointer* is allocated on the stack each time MyFunction is called</span>\n    <span class=\"hljs-comment\">// This pointer is deallocated when MyFunction returns</span>\n    <span class=\"hljs-comment\">// scope - the pointer can be accessed only within MyFunction()</span>\n    <span class=\"hljs-keyword\">int</span>* someDynamicVariable;\n\n    <span class=\"hljs-comment\">// This line causes space for an integer to be allocated in the heap</span>\n    <span class=\"hljs-comment\">// when this line is executed. Note this is not at the beginning of</span>\n    <span class=\"hljs-comment\">// the call to MyFunction(), like the automatic variables</span>\n    <span class=\"hljs-comment\">// scope - only code within MyFunction() can access this space</span>\n    <span class=\"hljs-comment\">// *through this particular variable*.</span>\n    <span class=\"hljs-comment\">// However, if you pass the address somewhere else, that code</span>\n    <span class=\"hljs-comment\">// can access it too</span>\n    someDynamicVariable = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>;\n\n\n    <span class=\"hljs-comment\">// This line deallocates the space for the integer in the heap.</span>\n    <span class=\"hljs-comment\">// If we did not write it, the memory would be \"leaked\".</span>\n    <span class=\"hljs-comment\">// Note a fundamental difference between the stack and heap</span>\n    <span class=\"hljs-comment\">// the heap must be managed. The stack is managed for us.</span>\n    <span class=\"hljs-keyword\">delete</span> someDynamicVariable;\n\n    <span class=\"hljs-comment\">// In other cases, instead of deallocating this heap space you</span>\n    <span class=\"hljs-comment\">// might store the address somewhere more permanent to use later.</span>\n    <span class=\"hljs-comment\">// Some languages even take care of deallocation for you... but</span>\n    <span class=\"hljs-comment\">// always it needs to be taken care of at runtime by some mechanism.</span>\n\n    <span class=\"hljs-comment\">// When the function returns, someArgument, someLocalVariable</span>\n    <span class=\"hljs-comment\">// and the pointer someDynamicVariable are deallocated.</span>\n    <span class=\"hljs-comment\">// The space pointed to by someDynamicVariable was already</span>\n    <span class=\"hljs-comment\">// deallocated prior to returning.</span>\n    <span class=\"hljs-keyword\">return</span>;\n}\n\n<span class=\"hljs-comment\">// Note that someGlobalVariable, someStaticVariable and</span>\n<span class=\"hljs-comment\">// someLocalStaticVariable continue to exist, and are not</span>\n<span class=\"hljs-comment\">// deallocated until the program exits.</span>\n</code></pre>\n\n<p>A particularly poignant example of why it's important to distinguish between lifetime and scope is that a variable can have local scope but static lifetime - for instance, \"someLocalStaticVariable\" in the code sample above. Such variables can make our common but informal naming habits very confusing. For instance when we say \"<em>local</em>\" we usually mean \"<em>locally scoped automatically allocated variable</em>\" and when we say global we usually mean \"<em>globally scoped statically allocated variable</em>\". Unfortunately when it comes to things like \"<em>file scoped statically allocated variables</em>\" many people just say... \"<em>huh???</em>\".</p>\n\n<p>Some of the syntax choices in C/C++ exacerbate this problem - for instance many people think global variables are not \"static\" because of the syntax shown below.</p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code><span class=\"hljs-keyword\">int</span> var1; <span class=\"hljs-comment\">// Has global scope and static allocation</span>\n<span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span> var2; <span class=\"hljs-comment\">// Has file scope and static allocation</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;}\n</code></pre>\n\n<p>Note that putting the keyword \"static\" in the declaration above prevents var2 from having global scope. Nevertheless, the global var1 has static allocation. This is not intuitive! For this reason, I try to never use the word \"static\" when describing scope, and instead say something like \"file\" or \"file limited\" scope. However many people use the phrase \"static\" or \"static scope\" to describe a variable that can only be accessed from one code file. In the context of lifetime, \"static\" <em>always</em> means the variable is allocated at program start and deallocated when program exits.</p>\n\n<p>Some people think of these concepts as C/C++ specific. They are not. For instance, the Python sample below illustrates all three types of allocation (there are some subtle differences possible in interpreted languages that I won't get into here).</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">from</span> datetime <span class=\"hljs-keyword\">import</span> datetime\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Animal</span>:</span>\n    _FavoriteFood = <span class=\"hljs-string\">'Undefined'</span> <span class=\"hljs-comment\"># _FavoriteFood is statically allocated</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">PetAnimal</span>(<span class=\"hljs-params\">self</span>):</span>\n        curTime = datetime.time(datetime.now()) <span class=\"hljs-comment\"># curTime is automatically allocatedion</span>\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Thank you for petting me. But it's \"</span> + <span class=\"hljs-built_in\">str</span>(curTime) + <span class=\"hljs-string\">\", you should feed me. My favorite food is \"</span> + self._FavoriteFood)\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cat</span>(<span class=\"hljs-params\">Animal</span>):</span>\n    _FavoriteFood = <span class=\"hljs-string\">'tuna'</span> <span class=\"hljs-comment\"># Note since we override, Cat class has its own statically allocated _FavoriteFood variable, different from Animal's</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span>(<span class=\"hljs-params\">Animal</span>):</span>\n    _FavoriteFood = <span class=\"hljs-string\">'steak'</span> <span class=\"hljs-comment\"># Likewise, the Dog class gets its own static variable. Important to note - this one static variable is shared among all instances of Dog, hence it is not dynamic!</span>\n\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    whiskers = Cat() <span class=\"hljs-comment\"># Dynamically allocated</span>\n    fido = Dog() <span class=\"hljs-comment\"># Dynamically allocated</span>\n    rinTinTin = Dog() <span class=\"hljs-comment\"># Dynamically allocated</span>\n\n    whiskers.PetAnimal()\n    fido.PetAnimal()\n    rinTinTin.PetAnimal()\n\n    Dog._FavoriteFood = <span class=\"hljs-string\">'milkbones'</span>\n    whiskers.PetAnimal()\n    fido.PetAnimal()\n    rinTinTin.PetAnimal()\n\n<span class=\"hljs-comment\"># Output is:</span>\n<span class=\"hljs-comment\"># Thank you for petting me. But it's 13:05:02.255000, you should feed me. My favorite food is tuna</span>\n<span class=\"hljs-comment\"># Thank you for petting me. But it's 13:05:02.255000, you should feed me. My favorite food is steak</span>\n<span class=\"hljs-comment\"># Thank you for petting me. But it's 13:05:02.255000, you should feed me. My favorite food is steak</span>\n<span class=\"hljs-comment\"># Thank you for petting me. But it's 13:05:02.255000, you should feed me. My favorite food is tuna</span>\n<span class=\"hljs-comment\"># Thank you for petting me. But it's 13:05:02.255000, you should feed me. My favorite food is milkbones</span>\n<span class=\"hljs-comment\"># Thank you for petting me. But it's 13:05:02.256000, you should feed me. My favorite food is milkbones</span>\n</code></pre>\n    </div>",
          "vote": "202"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Others have answered the broad strokes pretty well, so I'll throw in a few details.</p>\n\n<ol>\n<li><p>Stack and heap need not be singular. A common situation in which you have more than one stack is if you have more than one thread in a process.  In this case each thread has its own stack. You can also have more than one heap, for example some DLL configurations can result in different DLLs allocating from different heaps, which is why it's generally a bad idea to release memory allocated by a different library.</p></li>\n<li><p>In C you can get the benefit of variable length allocation through the use of <a href=\"https://www.freebsd.org/cgi/man.cgi?alloca\" rel=\"noreferrer\">alloca</a>, which allocates on the stack, as opposed to alloc, which allocates on the heap. This memory won't survive your return statement, but it's useful for a scratch buffer.</p></li>\n<li><p>Making a huge temporary buffer on Windows that you don't use much of is not free. This is because the compiler will generate a stack probe loop that is called every time your function is entered to make sure the stack exists (because Windows uses a single guard page at the end of your stack to detect when it needs to grow the stack. If you access memory more than one page off the end of the stack you will crash). Example:</p></li>\n</ol>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">myfunction</span><span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-keyword\">char</span> big[<span class=\"hljs-number\">10000000</span>];\n   <span class=\"hljs-comment\">// Do something that only uses for first 1K of big 99% of the time.</span>\n}\n</code></pre>\n    </div>",
          "vote": "173"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Others have directly answered your question, but when trying to understand the stack and the heap, I think it is helpful to consider the memory layout of a traditional UNIX process (without threads and <code>mmap()</code>-based allocators). The <a href=\"http://www.memorymanagement.org/glossary/b.html#term-brk\" rel=\"noreferrer\">Memory Management Glossary</a> web page has a diagram of this memory layout.</p>\n\n<p>The stack and heap are traditionally located at opposite ends of the process's virtual address space. The stack grows automatically when accessed, up to a size set by the kernel (which can be adjusted with <code>setrlimit(RLIMIT_STACK, ...)</code>). The heap grows when the memory allocator invokes the <code>brk()</code> or <code>sbrk()</code> system call, mapping more pages of physical memory into the process's virtual address space. </p>\n\n<p>In systems without virtual memory, such as some embedded systems, the same basic layout often applies, except the stack and heap are fixed in size. However, in other embedded systems (such as those based on Microchip PIC microcontrollers), the program stack is a separate block of memory that is not addressable by data movement instructions, and can only be modified or read indirectly through program flow instructions (call, return, etc.). Other architectures, such as Intel Itanium processors, have <a href=\"http://blogs.msdn.com/oldnewthing/archive/2005/04/21/410397.aspx\" rel=\"noreferrer\">multiple stacks</a>. In this sense, the stack is an element of the CPU architecture.</p>\n    </div>",
          "vote": "140"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The stack is a portion of memory that can be manipulated via several key assembly language instructions, such as 'pop' (remove and return a value from the stack) and 'push' (push a value to the stack), but also call (call a subroutine - this pushes the address to return to the stack) and return (return from a subroutine - this pops the address off of the stack and jumps to it).  It's the region of memory below the stack pointer register, which can be set as needed.  The stack is also used for passing arguments to subroutines, and also for preserving the values in registers before calling subroutines.</p>\n\n<p>The heap is a portion of memory that is given to an application by the operating system, typically through a syscall like malloc.  On modern OSes this memory is a set of pages that only the calling process has access to.</p>\n\n<p>The size of the stack is determined at runtime, and generally does not grow after the program launches.  In a C program, the stack needs to be large enough to hold every variable declared within each function.  The heap will grow dynamically as needed, but the OS is ultimately making the call (it will often grow the heap by more than the value requested by malloc, so that at least some future mallocs won't need to go back to the kernel to get more memory.  This behavior is often customizable)</p>\n\n<p>Because you've allocated the stack before launching the program, you never need to malloc before you can use the stack, so that's a slight advantage there.  In practice, it's very hard to predict what will be fast and what will be slow in modern operating systems that have virtual memory subsystems, because how the pages are implemented and where they are stored is an implementation detail.  </p>\n    </div>",
          "vote": "122"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>What is a stack?</strong></p>\n<p>A stack is a pile of objects, typically one that is neatly arranged.</p>\n<p><a href=\"https://i.stack.imgur.com/GTa97.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/GTa97.jpg\" alt=\"Enter image description here\"></a></p>\n<blockquote>\n<blockquote>\n<p>Stacks in computing architectures are regions of memory where data is added or removed in a last-in-first-out manner. <br>\nIn a multi-threaded application, each thread will have its own stack.</p>\n</blockquote>\n</blockquote>\n<p><strong>What is a heap?</strong></p>\n<p>A heap is an untidy collection of things piled up haphazardly.</p>\n<p><a href=\"https://i.stack.imgur.com/rz43z.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/rz43z.jpg\" alt=\"Enter image description here\"></a></p>\n<blockquote>\n<blockquote>\n<p>In computing architectures the heap is an area of dynamically-allocated memory that is managed automatically by the operating system or the memory manager library. <br>\nMemory on the heap is allocated, deallocated, and resized regularly during program execution, and this can lead to a problem called fragmentation. <br>\nFragmentation occurs when memory objects are allocated with small spaces in between that are too small to hold additional memory objects. <br>\nThe net result is a percentage of the heap space that is not usable for further memory allocations.</p>\n</blockquote>\n</blockquote>\n<p><strong>Both together</strong></p>\n<blockquote>\n<blockquote>\n<p>In a multi-threaded application, each thread will have its own stack. But, all the different threads will share the heap. <br>\nBecause the different threads share the heap in a multi-threaded application, this also means that there has to be some coordination between the threads so that they don’t try to access and manipulate the same piece(s) of memory in the heap at the same time.</p>\n</blockquote>\n</blockquote>\n<p><strong>Which is faster – the stack or the heap? And why?</strong></p>\n<blockquote>\n<blockquote>\n<p>The stack is much faster than the heap. <br>\nThis is because of the way that memory is allocated on the stack. <br>\nAllocating memory on the stack is as simple as moving the stack pointer up.</p>\n</blockquote>\n</blockquote>\n<p>For people new to programming, it’s probably a good idea to use the stack since it’s easier. <br>\nBecause the stack is small, you would want to use it when you know exactly how much memory you will need for your data, or if you know the size of your data is very small. <br>\nIt’s better to use the heap when you know that you will need a lot of memory for your data, or you just are not sure how much memory you will need (like with a dynamic array).</p>\n<h3>Java Memory Model</h3>\n<p><a href=\"https://i.stack.imgur.com/yZK6t.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/yZK6t.png\" alt=\"Enter image description here\"></a></p>\n<p>The stack is the area of memory where local variables (including method parameters) are stored. When it comes to object variables, these are merely references (pointers) to the actual objects on the heap.<br>\nEvery time an object is instantiated, a chunk of heap memory is set aside to hold the data (state) of that object. Since objects can contain other objects, some of this data can in fact hold references to those nested objects.</p>\n    </div>",
          "vote": "120"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think many other people have given you mostly correct answers on this matter.</p>\n\n<p>One detail that has been missed, however, is that the \"heap\" should in fact probably be called the \"free store\".  The reason for this distinction is that the original free store was implemented with a data structure known as a \"binomial heap.\"  For that reason, allocating from early implementations of malloc()/free() was allocation from a heap.  However, in this modern day, most free stores are implemented with very elaborate data structures that are not binomial heaps.</p>\n    </div>",
          "vote": "118"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can do some interesting things with the stack.  For instance, you have functions like <a href=\"http://everything2.com/title/alloca%2528%2529\" rel=\"noreferrer\">alloca</a> (assuming you can get past the copious warnings concerning its use), which is a form of malloc that specifically uses the stack, not the heap, for memory.</p>\n\n<p>That said, stack-based memory errors are some of the worst I've experienced.  If you use heap memory, and you overstep the bounds of your allocated block, you have a decent chance of triggering a segment fault.  (Not 100%: your block may be incidentally contiguous with another that you have previously allocated.)  But since variables created on the stack are always contiguous with each other, writing out of bounds can change the value of another variable.  I have learned that whenever I feel that my program has stopped obeying the laws of logic, it is probably buffer overflow.</p>\n    </div>",
          "vote": "93"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Simply, the stack is where local variables get created. Also, every time you call a subroutine the program counter (pointer to the next machine instruction) and any important registers, and sometimes the parameters get pushed on the stack. Then any local variables inside the subroutine are pushed onto the stack (and used from there). When the subroutine finishes, that stuff all gets popped back off the stack. The PC and register data gets and put back where it was as it is popped, so your program can go on its merry way.</p>\n\n<p>The heap is the area of memory dynamic memory allocations are made out of (explicit \"new\" or \"allocate\" calls). It is a special data structure that can keep track of blocks of memory of varying sizes and their allocation status.</p>\n\n<p>In \"classic\" systems RAM was laid out such that the stack pointer started out at the bottom of memory, the heap pointer started out at the top, and they grew towards each other. If they overlap, you are out of RAM. That doesn't work with modern multi-threaded OSes though. Every thread has to have its own stack, and those can get created dynamicly.</p>\n    </div>",
          "vote": "91"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From WikiAnwser.</p>\n\n<h3>Stack</h3>\n\n<p>When a function or a method calls another function which in turns calls another function, etc., the execution of all those functions remains suspended until the very last function returns its value.</p>\n\n<p>This chain of suspended function calls is the stack, because elements in the stack (function calls) depend on each other.</p>\n\n<p>The stack is important to consider in exception handling and thread executions.</p>\n\n<h3>Heap</h3>\n\n<p>The heap is simply the memory used by programs to store variables.\nElement of the heap (variables) have no dependencies with each other and can always be accessed randomly at any time.</p>\n    </div>",
          "vote": "84"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Stack</strong></p>\n\n<ul>\n<li>Very fast access</li>\n<li>Don't have to explicitly de-allocate variables</li>\n<li>Space is managed efficiently by CPU, memory will not become fragmented</li>\n<li>Local variables only</li>\n<li>Limit on stack size (OS-dependent)</li>\n<li>Variables cannot be resized</li>\n</ul>\n\n<p><strong>Heap</strong></p>\n\n<ul>\n<li>Variables can be accessed globally</li>\n<li>No limit on memory size</li>\n<li>(Relatively) slower access</li>\n<li>No guaranteed efficient use of space, memory may become fragmented over time as blocks of memory are allocated, then freed</li>\n<li>You must manage memory (you're in charge of allocating and freeing variables)</li>\n<li>Variables can be resized using realloc()</li>\n</ul>\n    </div>",
          "vote": "56"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>In Short</h2>\n\n<p>A stack is used for static memory allocation and a heap for dynamic memory allocation, both stored in the computer's RAM.</p>\n\n<hr>\n\n<h2>In Detail</h2>\n\n<p><strong>The Stack</strong></p>\n\n<p>The stack is a \"LIFO\" (last in, first out) data structure, that is managed and optimized by the CPU quite closely. Every time a function declares a new variable, it is \"pushed\" onto the stack. Then every time a function exits, all of the variables pushed onto the stack by that function, are freed (that is to say, they are deleted). Once a stack variable is freed, that region of memory becomes available for other stack variables.</p>\n\n<p>The advantage of using the stack to store variables, is that memory is managed for you. You don't have to allocate memory by hand, or free it once you don't need it any more. What's more, because the CPU organizes stack memory so efficiently, reading from and writing to stack variables is very fast.</p>\n\n<p>More can be found <strong><a href=\"https://en.wikipedia.org/wiki/Stack_(abstract_data_type)\" rel=\"noreferrer\">here</a></strong>.</p>\n\n<hr>\n\n<p><strong>The Heap</strong></p>\n\n<p>The heap is a region of your computer's memory that is not managed automatically for you, and is not as tightly managed by the CPU. It is a more free-floating region of memory (and is larger). To allocate memory on the heap, you must use malloc() or calloc(), which are built-in C functions. Once you have allocated memory on the heap, you are responsible for using free() to deallocate that memory once you don't need it any more.</p>\n\n<p>If you fail to do this, your program will have what is known as a memory leak. That is, memory on the heap will still be set aside (and won't be available to other processes). As we will see in the debugging section, there is a tool called <a href=\"http://en.wikipedia.org/wiki/Valgrind\" rel=\"noreferrer\">Valgrind</a> that can help you detect memory leaks.</p>\n\n<p>Unlike the stack, the heap does not have size restrictions on variable size (apart from the obvious physical limitations of your computer). Heap memory is slightly slower to be read from and written to, because one has to use pointers to access memory on the heap. We will talk about pointers shortly.</p>\n\n<p>Unlike the stack, variables created on the heap are accessible by any function, anywhere in your program. Heap variables are essentially global in scope.</p>\n\n<p>More can be found <strong><a href=\"https://en.wikipedia.org/wiki/Memory_management\" rel=\"noreferrer\">here</a></strong>.</p>\n\n<hr>\n\n<p>Variables allocated on the stack are stored directly to the memory and access to this memory is very fast, and its allocation is dealt with when the program is compiled. When a function or a method calls another function which in turns calls another function, etc., the execution of all those functions remains suspended until the very last function returns its value. The stack is always reserved in a LIFO order, the most recently reserved block is always the next block to be freed. This makes it really simple to keep track of the stack, freeing a block from the stack is nothing more than adjusting one pointer.</p>\n\n<p>Variables allocated on the heap have their memory allocated at run time and accessing this memory is a bit slower, but the heap size is only limited by the size of virtual memory. Elements of the heap have no dependencies with each other and can always be accessed randomly at any time. You can allocate a block at any time and free it at any time. This makes it much more complex to keep track of which parts of the heap are allocated or free at any given time.</p>\n\n<p><a href=\"https://i.stack.imgur.com/KdBPf.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/KdBPf.png\" alt=\"Enter image description here\"></a></p>\n\n<p>You can use the stack if you know exactly how much data you need to allocate before compile time, and it is not too big. You can use the heap if you don't know exactly how much data you will need at runtime or if you need to allocate a lot of data.</p>\n\n<p>In a multi-threaded situation each thread will have its own completely independent stack, but they will share the heap. The stack is thread specific and the heap is application specific. The stack is important to consider in exception handling and thread executions.</p>\n\n<p>Each thread gets a stack, while there's typically only one heap for the application (although it isn't uncommon to have multiple heaps for different types of allocation).</p>\n\n<p><a href=\"https://i.stack.imgur.com/J0teH.gif\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/J0teH.gif\" alt=\"Enter image description here\"></a></p>\n\n<p>At run-time, if the application needs more heap, it can allocate memory from free memory and if the stack needs memory, it can allocate memory from free memory allocated memory for the application.</p>\n\n<p>Even, more detail is given <a href=\"http://net-informations.com/faq/net/stack-heap.htm\" rel=\"noreferrer\"><strong>here</strong></a> and <a href=\"http://gribblelab.org/CBootcamp/7_Memory_Stack_vs_Heap.html\" rel=\"noreferrer\"><strong>here</strong></a>.</p>\n\n<hr>\n\n<p>Now come to <strong>your question's answers</strong>.</p>\n\n<blockquote>\n  <p><strong>To what extent are they controlled by the OS or language runtime?</strong></p>\n</blockquote>\n\n<p>The OS allocates the stack for each system-level thread when the thread is created. Typically the OS is called by the language runtime to allocate the heap for the application.</p>\n\n<p>More can be found <strong><a href=\"https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap/80113#80113\">here</a></strong>.</p>\n\n<blockquote>\n  <p><strong>What is their scope?</strong></p>\n</blockquote>\n\n<p>Already given in top.</p>\n\n<blockquote>\n  <p>\"You can use the stack if you know exactly how much data you need to allocate before compile time, and it is not too big. You can use the heap if you don't know exactly how much data you will need at runtime or if you need to allocate a lot of data.\"</p>\n</blockquote>\n\n<p>More can be found in <a href=\"https://stackoverflow.com/questions/408670/stack-static-and-heap-in-c\">here</a>.</p>\n\n<blockquote>\n  <p><strong>What determines the size of each of them?</strong></p>\n</blockquote>\n\n<p>The size of the stack is set by <a href=\"https://en.wikipedia.org/wiki/Operating_system\" rel=\"noreferrer\">OS</a> when a thread is created. The size of the heap is set on application startup, but it can grow as space is needed (the allocator requests more memory from the operating system).</p>\n\n<blockquote>\n  <p><strong>What makes one faster?</strong></p>\n</blockquote>\n\n<p>Stack allocation is much faster since all it really does is move the stack pointer. Using memory pools, you can get comparable performance out of heap allocation, but that comes with a slight added complexity and its own headaches.</p>\n\n<p>Also, stack vs. heap is not only a performance consideration; it also tells you a lot about the expected lifetime of objects.</p>\n\n<p>Details can be found from <strong><a href=\"https://stackoverflow.com/questions/161053/which-is-faster-stack-allocation-or-heap-allocation\">here</a></strong>.</p>\n    </div>",
          "vote": "52"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>OK,</strong> simply and in short words, they mean <strong>ordered</strong> and <strong>not ordered</strong>...!</p>\n\n<p><strong>Stack</strong>: In stack items, things get on the top of each-other, means gonna be faster and more efficient to be processed!... </p>\n\n<p>So there is always an index to point the specific item, also processing gonna be faster, there is relationship between the items as well!...</p>\n\n<p><strong>Heap</strong>: No order, processing gonna be slower and values are messed up together with no specific order or index... there are random and there is no relationship between them... so execution and usage time could be vary...</p>\n\n<p>I also create the image below to show how they may look like:</p>\n\n<p><a href=\"https://i.stack.imgur.com/9c2VH.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/9c2VH.png\" alt=\"enter image description here\"></a></p>\n    </div>",
          "vote": "51"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>stack</strong>, <strong>heap</strong> and <strong>data</strong> of each process in virtual memory:</p>\n\n<p><a href=\"https://bayanbox.ir/view/581244719208138556/virtual-memory.jpg\" rel=\"noreferrer\"><img src=\"https://bayanbox.ir/view/581244719208138556/virtual-memory.jpg\" alt=\"stack, heap and static data\"></a></p>\n    </div>",
          "vote": "41"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the 1980s, UNIX propagated like bunnies with big companies rolling their own.\nExxon had one as did dozens of brand names lost to history.\nHow memory was laid out was at the discretion of the many implementors.</p>\n\n<p>A typical C program was laid out flat in memory with\nan opportunity to increase by changing the brk() value.\nTypically, the HEAP was just below this brk value\nand increasing brk increased the amount of available heap.</p>\n\n<p>The single STACK was typically an area below HEAP which was a tract of memory\ncontaining nothing of value until the top of the next fixed block of memory.\nThis next block was often CODE which could be overwritten by stack data\nin one of the famous hacks of its era.</p>\n\n<p>One typical memory block was BSS (a block of zero values)\nwhich was accidentally not zeroed in one manufacturer's offering.\nAnother was DATA containing initialized values, including strings and numbers.\nA third was CODE containing CRT (C runtime), main, functions, and libraries.</p>\n\n<p>The advent of virtual memory in UNIX changes many of the constraints.\nThere is no objective reason why these blocks need be contiguous,\nor fixed in size, or ordered a particular way now.\nOf course, before UNIX was Multics which didn't suffer from these constraints.\nHere is a schematic showing one of the memory layouts of that era.</p>\n\n<p><img src=\"https://i.stack.imgur.com/eeefv.png\" alt=\"A typical 1980s style UNIX C program memory layout\"></p>\n    </div>",
          "vote": "37"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A couple of cents: I think, it will be good to draw memory graphical and more simple:</p>\n\n<p><a href=\"https://i.stack.imgur.com/nlb7A.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/nlb7A.jpg\" alt=\"This is my vision of process memory construction with simplification for more easy understanding wht happening\"></a></p>\n\n<p><br>\nArrows - show where grow stack and heap, process stack size have limit, defined in OS, thread stack size limits by parameters in thread create API usually. Heap usually limiting by process maximum virtual memory size, for 32 bit 2-4&nbsp;GB for example.</p>\n\n<p>So simple way: process heap is general for process and all threads inside, using for memory allocation in common case with something like <strong>malloc()</strong>.</p>\n\n<p>Stack is quick memory for store in common case function return pointers and variables, processed as parameters in function call, local function variables.</p>\n    </div>",
          "vote": "28"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since some answers went nitpicking, I'm going to contribute my mite.</p>\n\n<p>Surprisingly, no one has mentioned that multiple (i.e. not related to the number of running OS-level threads) call stacks are to be found not only in exotic languages (PostScript) or platforms (Intel Itanium), but also in <a href=\"http://en.wikipedia.org/wiki/Fiber_(computer_science)\" rel=\"noreferrer\"><em>fibers</em></a>, <a href=\"http://en.wikipedia.org/wiki/Green_threads\" rel=\"noreferrer\"><em>green threads</em></a> and some implementations of <a href=\"http://en.wikipedia.org/wiki/Coroutine\" rel=\"noreferrer\"><em>coroutines</em></a>.</p>\n\n<p>Fibers, green threads and coroutines are in many ways similar, which leads to much confusion.  The difference between fibers and green threads is that the former use cooperative multitasking, while the latter may feature either cooperative or preemptive one (or even both). For the distinction between fibers and coroutines, see <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4024.pdf\" rel=\"noreferrer\">here</a>.</p>\n\n<p>In any case, the purpose of both fibers, green threads and coroutines is having multiple functions executing concurrently, but <strong>not</strong> in parallel (see <a href=\"https://stackoverflow.com/questions/1050222/concurrency-vs-parallelism-what-is-the-difference\">this SO question</a> for the distinction) within a single OS-level thread, transferring control back and forth from one another in an organized fashion.</p>\n\n<p>When using fibers, green threads or coroutines, you <em>usually</em> have a separate stack per function. (Technically, not just a stack but a whole context of execution is per function. Most importantly, CPU registers.) For every thread there're as many stacks as there're concurrently running functions, and the thread is switching between executing each function according to the logic of your program. When a function runs to its end, its stack is destroyed. So, <strong>the number and lifetimes of stacks</strong> are dynamic and <strong>are not determined by the number of OS-level threads!</strong></p>\n\n<p>Note that I said \"<em>usually</em> have a separate stack per function\". There're both <em>stackful</em> and <em>stackless</em> implementations of couroutines. Most notable stackful C++ implementations are <a href=\"http://www.boost.org/doc/libs/1_53_0/libs/coroutine/doc/html/index.html\" rel=\"noreferrer\">Boost.Coroutine</a> and <a href=\"https://msdn.microsoft.com/en-us/library/dd492418.aspx\" rel=\"noreferrer\">Microsoft PPL</a>'s <code>async/await</code>. (However, C++'s <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4134.pdf\" rel=\"noreferrer\">resumable functions</a> (a.k.a. \"<code>async</code> and <code>await</code>\"), which were proposed to C++17, are likely to use stackless coroutines.)</p>\n\n<p>Fibers proposal to the C++ standard library is forthcoming. Also, there're some third-party <a href=\"https://stackoverflow.com/questions/1285714/lightweight-portable-c-fibers-mit-license\">libraries</a>. Green threads are extremely popular in languages like Python and Ruby.</p>\n    </div>",
          "vote": "24"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have something to share, although the major points are already covered.</p>\n\n<p><strong>Stack</strong>  </p>\n\n<ul>\n<li>Very fast access.</li>\n<li>Stored in RAM.</li>\n<li>Function calls are loaded here along with the local variables and function parameters passed.</li>\n<li>Space is freed automatically when program goes out of a scope.</li>\n<li>Stored in sequential memory.</li>\n</ul>\n\n<p><strong>Heap</strong></p>\n\n<ul>\n<li>Slow access comparatively to Stack.</li>\n<li>Stored in RAM.</li>\n<li>Dynamically created variables are stored here, which later requires freeing the allocated memory after use.</li>\n<li>Stored wherever memory allocation is done, accessed by pointer always.</li>\n</ul>\n\n<p><strong>Interesting note:</strong></p>\n\n<ul>\n<li>Should the function calls had been stored in heap, it would had resulted in 2 messy points:  \n\n<ol>\n<li>Due to sequential storage in stack, execution is faster. Storage in heap would have resulted in huge time consumption thus making the whole program execute slower.</li>\n<li>If functions were stored in heap (messy storage pointed by pointer), there would have been no way to return to the caller address back (which stack gives due to sequential storage in memory).</li>\n</ol></li>\n</ul>\n    </div>",
          "vote": "22"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Wow! So many answers and I don't think one of them got it right...</p>\n\n<p>1) Where and what are they (physically in a real computer's memory)?</p>\n\n<p>The stack is memory that begins as the highest memory address allocated to your program image, and it then decrease in value from there. It is reserved for called function parameters and for all temporary variables used in functions.</p>\n\n<p>There are two heaps: public and private.</p>\n\n<p>The private heap begins on a 16-byte boundary (for 64-bit programs) or a 8-byte boundary (for 32-bit programs) after the last byte of code in your program, and then increases in value from there. It is also called the default heap.</p>\n\n<p>If the private heap gets too large it will overlap the stack area, as will the stack overlap the heap if it gets too big. Because the stack starts at a higher address and works its way down to lower address, with proper hacking you can get make the stack so large that it will overrun the private heap area and overlap the code area. The trick then is to overlap enough of the code area that you can hook into the code. It's a little tricky to do and you risk a program crash, but it's easy and very effective.</p>\n\n<p>The public heap resides in it's own memory space outside of your program image space. It is this memory that will be siphoned off onto the hard disk if memory resources get scarce.</p>\n\n<p>2) To what extent are they controlled by the OS or language runtime?</p>\n\n<p>The stack is controlled by the programmer, the private heap is managed by the OS, and the public heap is not controlled by anyone because it is an OS service -- you make requests and either they are granted or denied.</p>\n\n<p>2b) What is their scope?</p>\n\n<p>They are all global to the program, but their contents can be private, public, or global.</p>\n\n<p>2c) What determines the size of each of them?</p>\n\n<p>The size of the stack and the private heap are determined by your compiler runtime options. The public heap is initialized at runtime using a size parameter.</p>\n\n<p>2d) What makes one faster?</p>\n\n<p>They are not designed to be fast, they are designed to be useful. How the programmer utilizes them determines whether they are \"fast\" or \"slow\"</p>\n\n<p>REF:</p>\n\n<p><a href=\"https://norasandler.com/2019/02/18/Write-a-Compiler-10.html\" rel=\"noreferrer\">https://norasandler.com/2019/02/18/Write-a-Compiler-10.html</a></p>\n\n<p><a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-getprocessheap\" rel=\"noreferrer\">https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-getprocessheap</a></p>\n\n<p><a href=\"https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-heapcreate\" rel=\"noreferrer\">https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-heapcreate</a></p>\n    </div>",
          "vote": "17"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A lot of answers are correct as concepts, but we must note that a stack is needed by the hardware (i.e. microprocessor) to allow calling subroutines (CALL in assembly language..). (OOP guys will call it <em>methods</em>)</p>\n\n<p>On the stack you save return addresses and call → push / ret → pop is managed directly in hardware.</p>\n\n<p>You can use the stack to pass parameters.. even if it is slower than using registers (would a microprocessor guru say or a good 1980s BIOS book...)</p>\n\n<ul>\n<li>Without stack <strong>no</strong> microprocessor can work. (we can't imagine a program, even in assembly language, without subroutines/functions)</li>\n<li>Without the heap it can. (An assembly language program can work without, as the heap is a OS concept, as malloc, that is a OS/Lib call.</li>\n</ul>\n\n<p>Stack usage is faster as:</p>\n\n<ul>\n<li>Is hardware, and even push/pop are very efficient.</li>\n<li>malloc requires entering kernel mode, use lock/semaphore (or other synchronization primitives) executing some code and manage some structures needed to keep track of allocation.</li>\n</ul>\n    </div>",
          "vote": "10"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>The stack is essentially an easy-to-access memory that simply manages its items \n  as a - well - stack. Only <strong>items for which the size is known in advance can go onto the stack</strong>. This is the case for numbers, strings, booleans.</p>\n  \n  <p>The <strong>heap is a memory for items of which you can’t predetermine the\n  exact size and structure</strong>. Since objects and arrays can be mutated and\n  change at runtime, they have to go into the heap.</p>\n</blockquote>\n\n<p>Source: <a href=\"https://academind.com/learn/javascript/reference-vs-primitive-values/\" rel=\"nofollow noreferrer\">Academind</a></p>\n    </div>",
          "vote": "2"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>CPU stack and heap are physically related to how CPU and registers works with memory, how machine-assembly language works, not high-level languages themselves, even if these languages can decide little things.</p>\n<p>All modern CPUs work with the \"same\" microprocessor theory: they are all based on what's called \"registers\" and some are for \"stack\" to gain performance. All CPUs have stack registers since the beginning and they had been always here, way of talking, as I know. Assembly languages are the same since the beginning, despite variations... up to Microsoft and its Intermediate Language (IL) that changed the paradigm to have a OO virtual machine assembly language. So we'll be able to have some CLI/CIL CPU in the future (one project of MS).</p>\n<p>CPUs have stack registers to speed up memories access, but they are limited compared to the use of others registers to get full access to all the available memory for the processus. It why we talked about stack and heap allocations.</p>\n<p>In summary, and in general, the heap is hudge and slow and is for \"global\" instances and objects content, as the stack is little and fast and for \"local\" variables and references (hidden pointers to forget to manage them).</p>\n<p>So when we use the new keyword in a method, the reference (an int) is created in the stack, but the object and all its content (value-types as well as objects) is created in the heap, if I remember. But local elementary value-types and arrays are created in the stack.</p>\n<p>The difference in memory access is at the cells referencing level: addressing the heap, the overall memory of the process, requires more complexity in terms of handling CPU registers, than the stack which is \"more\" locally in terms of addressing because the CPU stack register is used as base address, if I remember.</p>\n<p>It is why when we have very long or infinite recurse calls or loops, we got stack overflow quickly, without freezing the system on modern computers...</p>\n<p><a href=\"https://www.c-sharpcorner.com/article/C-Sharp-heaping-vs-stacking-in-net-part-i/\" rel=\"nofollow noreferrer\">C# Heap(ing) Vs Stack(ing) In .NET</a></p>\n<p><a href=\"https://www.guru99.com/stack-vs-heap.html\" rel=\"nofollow noreferrer\">Stack vs Heap: Know the Difference </a></p>\n<p><a href=\"https://stackoverflow.com/questions/33562199/static-class-memory-allocation-where-it-is-stored-c-sharp\">Static class memory allocation where it is stored C#</a></p>\n<p><a href=\"https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap\">What and where are the stack and heap?</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Memory_management\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/Memory_management</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Stack_register\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/Stack_register</a></p>\n<p>Assembly language resources:</p>\n<p><a href=\"https://www.tutorialspoint.com/assembly_programming/index.htm\" rel=\"nofollow noreferrer\">Assembly Programming Tutorial</a></p>\n<p><a href=\"https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html\" rel=\"nofollow noreferrer\">Intel® 64 and IA-32 Architectures Software Developer Manuals</a></p>\n    </div>",
          "vote": "1"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Thank you for a really good discussion but as a real noob I wonder where instructions are kept? In the BEGINNING scientists were deciding between two architectures (von NEUMANN where everything is considered DATA and HARVARD where an area of memory was reserved for instructions and another for data). Ultimately, we went with the von Neumann design and now everything is considered 'the same'. This made it hard for me when I was learning assembly \n<a href=\"https://www.cs.virginia.edu/~evans/cs216/guides/x86.html\" rel=\"nofollow noreferrer\">https://www.cs.virginia.edu/~evans/cs216/guides/x86.html</a>\nbecause they talk about registers and stack pointers.  </p>\n\n<p>Everything above talks about DATA. My guess is that since an instruction is a defined thing with a specific memory footprint, it would go on the stack and so all 'those' registers discussed in assembly are on the stack. Of course then came object oriented programming with instructions and data comingled into a structure that was dynamic so now instructions would be kept on the heap as well?</p>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "Can comments be used in JSON?",
      "url": "https://stackoverflow.com/questions/244777/can-comments-be-used-in-json",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Can I use comments inside a JSON file? If so, how?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>No.</p>\n<p>The JSON is data only, and if you include a comment, then it will be data too.</p>\n<p>You could have a designated data element called <code>\"_comment\"</code> (or something) that should be ignored by apps that use the JSON data.</p>\n<p>You would probably be better having the comment in the processes that generates/receives the JSON, as they are supposed to know what the JSON data will be in advance, or at least the structure of it.</p>\n<p>But if you decided to:</p>\n<pre class=\"default s-code-block hljs json\"><code>{\n   <span class=\"hljs-attr\">\"_comment\"</span>: <span class=\"hljs-string\">\"comment text goes here...\"</span>,\n   <span class=\"hljs-attr\">\"glossary\"</span>: {\n      <span class=\"hljs-attr\">\"title\"</span>: <span class=\"hljs-string\">\"example glossary\"</span>,\n      <span class=\"hljs-attr\">\"GlossDiv\"</span>: {\n         <span class=\"hljs-attr\">\"title\"</span>: <span class=\"hljs-string\">\"S\"</span>,\n         <span class=\"hljs-attr\">\"GlossList\"</span>: {\n            <span class=\"hljs-attr\">\"GlossEntry\"</span>: {\n               <span class=\"hljs-attr\">\"ID\"</span>: <span class=\"hljs-string\">\"SGML\"</span>,\n               <span class=\"hljs-attr\">\"SortAs\"</span>: <span class=\"hljs-string\">\"SGML\"</span>,\n               <span class=\"hljs-attr\">\"GlossTerm\"</span>: <span class=\"hljs-string\">\"Standard Generalized Markup Language\"</span>,\n               <span class=\"hljs-attr\">\"Acronym\"</span>: <span class=\"hljs-string\">\"SGML\"</span>,\n               <span class=\"hljs-attr\">\"Abbrev\"</span>: <span class=\"hljs-string\">\"ISO 8879:1986\"</span>,\n               <span class=\"hljs-attr\">\"GlossDef\"</span>: {\n                  <span class=\"hljs-attr\">\"para\"</span>: <span class=\"hljs-string\">\"A meta-markup language, used to create markup languages such as DocBook.\"</span>,\n                  <span class=\"hljs-attr\">\"GlossSeeAlso\"</span>: [<span class=\"hljs-string\">\"GML\"</span>, <span class=\"hljs-string\">\"XML\"</span>]\n               },\n               <span class=\"hljs-attr\">\"GlossSee\"</span>: <span class=\"hljs-string\">\"markup\"</span>\n            }\n         }\n      }\n   }\n}\n</code></pre>\n    </div>",
          "vote": "6095"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>No</strong>, comments of the form <code>//…</code> or <code>/*…*/</code> are not allowed in JSON. This answer is based on:</p>\n<ul>\n<li><a href=\"https://www.json.org\" rel=\"noreferrer\">https://www.json.org</a></li>\n<li><a href=\"http://www.ietf.org/rfc/rfc4627.txt\" rel=\"noreferrer\">RFC 4627</a>:\nThe <code>application/json</code> Media Type for JavaScript Object Notation (JSON)</li>\n<li><a href=\"https://tools.ietf.org/html/rfc8259\" rel=\"noreferrer\">RFC 8259</a> The JavaScript Object Notation (JSON) Data Interchange Format (supercedes RFCs 4627, 7158, 7159)</li>\n</ul>\n    </div>",
          "vote": "1945"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Include comments if you choose; strip them out with a minifier before parsing or transmitting.</strong></p>\n\n<p>I just released <strong><a href=\"http://github.com/getify/JSON.minify\" rel=\"noreferrer\">JSON.minify()</a></strong> which strips out comments and whitespace from a block of JSON and makes it valid JSON that can be parsed. So, you might use it like:  </p>\n\n<pre class=\"default s-code-block hljs coffeescript\"><code><span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.minify(my_str));\n</code></pre>\n\n<p>When I released it, I got a huge backlash of people disagreeing with even the idea of it, so I decided that I'd write a comprehensive blog post on why <a href=\"http://web.archive.org/web/20100629021329/http://blog.getify.com/2010/06/json-comments/\" rel=\"noreferrer\">comments make sense in JSON</a>. It includes this notable comment from the creator of JSON:</p>\n\n<blockquote>\n  <p>Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser. - <a href=\"https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr\" rel=\"noreferrer\">Douglas Crockford, 2012</a></p>\n</blockquote>\n\n<p>Hopefully that's helpful to those who disagree with why <strong>JSON.minify()</strong> could be useful.</p>\n    </div>",
          "vote": "882"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Comments were removed from JSON by design.</p>\n<blockquote>\n<p>I removed comments from JSON because I saw people were using them to hold parsing directives, a practice which would have destroyed interoperability. I know that the lack of comments makes some people sad, but it shouldn't.</p>\n<p>Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser.</p>\n</blockquote>\n<p>Source: <a href=\"https://web.archive.org/web/20120507093915/https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr\" rel=\"noreferrer\">Public statement by Douglas Crockford on G+</a></p>\n    </div>",
          "vote": "481"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>JSON does not support comments. It was also never intended to be used for configuration files where comments would be needed.</p>\n<p>Hjson is a configuration file format for humans. Relaxed syntax, fewer mistakes, more comments.</p>\n<p><a href=\"https://i.stack.imgur.com/u2E8q.gif\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/u2E8q.gif\" alt=\"Hjson intro\"></a></p>\n<p>See <a href=\"https://hjson.github.io/\" rel=\"noreferrer\">hjson.github.io</a> for JavaScript, Java, Python, PHP, Rust, Go, Ruby, C++ and C# libraries.</p>\n    </div>",
          "vote": "272"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>DISCLAIMER: YOUR WARRANTY IS VOID</p>\n\n<p>As has been pointed out, this hack takes advantage of the implementation of the spec. Not all JSON parsers will understand this sort of JSON. Streaming parsers in particular will choke.</p>\n\n<p>It's an interesting curiosity, but you <strong>should really not be using it for anything at all</strong>. Below is the original answer.</p>\n\n<hr>\n\n<p>I've found a little hack that allows you to place comments in a JSON file that will not affect the parsing, or alter the data being represented in any way.</p>\n\n<p>It appears that when declaring an object literal you can specify two values with the same key, and the last one takes precedence. Believe it or not, it turns out that JSON parsers work the same way. So we can use this to create comments in the source JSON that will not be present in a parsed object representation. </p>\n\n<pre class=\"default s-code-block hljs delphi\"><code>(<span class=\"hljs-comment\">{a: 1, a: 2}</span>);\n<span class=\"hljs-comment\">// =&gt; Object {a: 2}</span>\n<span class=\"hljs-keyword\">Object</span>.keys(JSON.parse(<span class=\"hljs-string\">'{\"a\": 1, \"a\": 2}'</span>)).length; \n<span class=\"hljs-comment\">// =&gt; 1</span>\n</code></pre>\n\n<p>If we apply this technique, your commented JSON file might look like this:</p>\n\n<pre class=\"default s-code-block hljs json\"><code>{\n  <span class=\"hljs-attr\">\"api_host\"</span> : <span class=\"hljs-string\">\"The hostname of your API server. You may also specify the port.\"</span>,\n  <span class=\"hljs-attr\">\"api_host\"</span> : <span class=\"hljs-string\">\"hodorhodor.com\"</span>,\n\n  <span class=\"hljs-attr\">\"retry_interval\"</span> : <span class=\"hljs-string\">\"The interval in seconds between retrying failed API calls\"</span>,\n  <span class=\"hljs-attr\">\"retry_interval\"</span> : <span class=\"hljs-number\">10</span>,\n\n  <span class=\"hljs-attr\">\"auth_token\"</span> : <span class=\"hljs-string\">\"The authentication token. It is available in your developer dashboard under 'Settings'\"</span>,\n  <span class=\"hljs-attr\">\"auth_token\"</span> : <span class=\"hljs-string\">\"5ad0eb93697215bc0d48a7b69aa6fb8b\"</span>,\n\n  <span class=\"hljs-attr\">\"favorite_numbers\"</span>: <span class=\"hljs-string\">\"An array containing my all-time favorite numbers\"</span>,\n  <span class=\"hljs-attr\">\"favorite_numbers\"</span>: [<span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">13</span>, <span class=\"hljs-number\">53</span>]\n}\n</code></pre>\n\n<p>The above code is <a href=\"http://jsonlint.com/\" rel=\"noreferrer\">valid JSON</a>. If you parse it, you'll get an object like this:</p>\n\n<pre class=\"default s-code-block hljs json\"><code>{\n    <span class=\"hljs-attr\">\"api_host\"</span>: <span class=\"hljs-string\">\"hodorhodor.com\"</span>,\n    <span class=\"hljs-attr\">\"retry_interval\"</span>: <span class=\"hljs-number\">10</span>,\n    <span class=\"hljs-attr\">\"auth_token\"</span>: <span class=\"hljs-string\">\"5ad0eb93697215bc0d48a7b69aa6fb8b\"</span>,\n    <span class=\"hljs-attr\">\"favorite_numbers\"</span>: [<span class=\"hljs-number\">19</span>,<span class=\"hljs-number\">13</span>,<span class=\"hljs-number\">53</span>]\n}\n</code></pre>\n\n<p>Which means there is no trace of the comments, and they won't have weird side-effects.</p>\n\n<p>Happy hacking!</p>\n    </div>",
          "vote": "222"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Consider using YAML. It's nearly a superset of JSON (virtually all valid JSON is valid YAML) and it allows comments.</p>\n    </div>",
          "vote": "149"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can't. At least that's my experience from a quick glance at <a href=\"http://json.org\" rel=\"noreferrer\">json.org</a>.</p>\n\n<p>JSON has its syntax visualized on that page. There isn't any note about comments.</p>\n    </div>",
          "vote": "121"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Comments are not an official standard, although some parsers support C++-style comments. One that I use is <a href=\"https://github.com/open-source-parsers/jsoncpp\" rel=\"noreferrer\">JsonCpp</a>. In the examples there is this one:</p>\n<pre class=\"default s-code-block hljs json\"><code><span class=\"hljs-comment\">// Configuration options</span>\n{\n    <span class=\"hljs-comment\">// Default encoding for text</span>\n    <span class=\"hljs-attr\">\"encoding\"</span> : <span class=\"hljs-string\">\"UTF-8\"</span>,\n\n    <span class=\"hljs-comment\">// Plug-ins loaded at start-up</span>\n    <span class=\"hljs-attr\">\"plug-ins\"</span> : [\n        <span class=\"hljs-string\">\"python\"</span>,\n        <span class=\"hljs-string\">\"c++\"</span>,\n        <span class=\"hljs-string\">\"ruby\"</span>\n        ],\n\n    <span class=\"hljs-comment\">// Tab indent size</span>\n    <span class=\"hljs-attr\">\"indent\"</span> : { <span class=\"hljs-attr\">\"length\"</span> : <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">\"use_space\"</span>: <span class=\"hljs-literal\">true</span> }\n}\n</code></pre>\n<p><a href=\"http://www.jsonlint.com\" rel=\"noreferrer\">jsonlint</a> does not validate this. So comments are a parser specific extension and not standard.</p>\n<p>Another parser is <a href=\"https://json5.org/\" rel=\"noreferrer\">JSON5</a>.</p>\n<p>An alternative to JSON <a href=\"https://github.com/toml-lang/toml\" rel=\"noreferrer\">TOML</a>.</p>\n<p>A further alternative is <a href=\"https://www.npmjs.com/package/jsonc\" rel=\"noreferrer\">jsonc</a>.</p>\n<p>The latest version of <a href=\"https://github.com/nlohmann/json#comments-in-json\" rel=\"noreferrer\">nlohmann/json</a> has optional support for ignoring comments on parsing.</p>\n    </div>",
          "vote": "92"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You should write a <a href=\"http://json-schema.org/\" rel=\"noreferrer\">JSON schema</a> instead. JSON schema is currently a proposed Internet draft specification. Besides documentation, the schema can also be used for validating your JSON data.</p>\n\n<p>Example:</p>\n\n<pre class=\"default s-code-block hljs json\"><code>{\n    <span class=\"hljs-attr\">\"description\"</span>:<span class=\"hljs-string\">\"A person\"</span>,\n    <span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"object\"</span>,\n    <span class=\"hljs-attr\">\"properties\"</span>:\n        {\n            <span class=\"hljs-attr\">\"name\"</span>:\n                {\n                    <span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"string\"</span>\n                },\n            <span class=\"hljs-attr\">\"age\"</span>:\n                {\n                    <span class=\"hljs-attr\">\"type\"</span>:<span class=\"hljs-string\">\"integer\"</span>,\n                    <span class=\"hljs-attr\">\"maximum\"</span>:<span class=\"hljs-number\">125</span>\n                }\n        }\n}\n</code></pre>\n\n<p>You can provide documentation by using the <strong>description</strong> schema attribute.</p>\n    </div>",
          "vote": "76"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you are using <a href=\"https://github.com/FasterXML/jackson\" rel=\"noreferrer\">Jackson</a> as your JSON parser then this is how you enable it to allow comments:</p>\n\n<pre class=\"default s-code-block hljs csharp\"><code>ObjectMapper mapper = <span class=\"hljs-keyword\">new</span> ObjectMapper().configure(Feature.ALLOW_COMMENTS, <span class=\"hljs-literal\">true</span>);\n</code></pre>\n\n<p>Then you can have comments like this:</p>\n\n<pre class=\"default s-code-block hljs csharp\"><code>{\n  key: <span class=\"hljs-string\">\"value\"</span> <span class=\"hljs-comment\">// Comment</span>\n}\n</code></pre>\n\n<p>And you can also have comments starting with <code>#</code> by setting:</p>\n\n<pre class=\"default s-code-block hljs bash\"><code>mapper.configure(Feature.ALLOW_YAML_COMMENTS, <span class=\"hljs-literal\">true</span>);\n</code></pre>\n\n<p>But in general (as answered before) the specification does not allow comments.</p>\n    </div>",
          "vote": "75"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is what I found in the <a href=\"https://firebase.google.com/docs/cloud-messaging/js/client#configure_the_browser_to_receive_messages\" rel=\"noreferrer\">Google Firebase documentation</a> that allows you to put comments in JSON:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>{\n  <span class=\"hljs-string\">\"//\"</span>: <span class=\"hljs-string\">\"Some browsers will use this to enable push notifications.\"</span>,\n  <span class=\"hljs-string\">\"//\"</span>: <span class=\"hljs-string\">\"It is the same for all projects, this is not your project's sender ID\"</span>,\n  <span class=\"hljs-string\">\"gcm_sender_id\"</span>: <span class=\"hljs-string\">\"1234567890\"</span>\n}\n</code></pre>\n    </div>",
          "vote": "62"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>NO</strong>. JSON used to support comments, but they were abused and removed from the standard.</p>\n\n<p>From the creator of JSON:</p>\n\n<blockquote>\n  <p>I removed comments from JSON because I saw people were using them to hold parsing directives, a practice which would have destroyed interoperability.  I know that the lack of comments makes some people sad, but it shouldn't.  - <a href=\"https://web.archive.org/web/20120506232618/https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr\" rel=\"noreferrer\">Douglas Crockford, 2012</a></p>\n</blockquote>\n\n<p>The official JSON site is at <a href=\"http://json.org\" rel=\"noreferrer\">JSON.org</a>. JSON is defined as a <a href=\"http://ecma-international.org/publications/standards/Ecma-404.htm\" rel=\"noreferrer\">standard</a> by ECMA International. There is always a petition process to have standards revised. It is unlikely that annotations will be added to the JSON standard for several reasons.</p>\n\n<p>JSON by design is an easily reverse-engineered (human parsed) alternative to XML. It is simplified even to the point that annotations are unnecessary. It is not even a markup language. The goal is stability and  interoperablilty.</p>\n\n<p>Anyone who understands the \"has-a\" relationship of object orientation can understand any JSON structure - that is the whole point. It is just a  directed acyclic graph (DAG) with node tags (key/value pairs), which is a near universal data structure.</p>\n\n<p>This only annotation required might be \"//These are DAG tags\". The key names can be as informative as required, allowing arbitrary semantic arity.</p>\n\n<p>Any platform can parse JSON with just a few lines of code. XML requires complex OO libraries that are not viable on many platforms.</p>\n\n<p>Annotations would just make JSON make less interoperable. There is simply nothing else to add, unless what you really need is a markup language (XML), and don't care if your persisted data is easily parsed.</p>\n\n<p><strong>BUT</strong> as the creator of JSON also observed, there has always been JS pipeline support for comments:</p>\n\n<blockquote>\n  <p>Go ahead and insert all the comments you like.\n  Then pipe it through JSMin before handing it to your JSON parser. - <a href=\"https://web.archive.org/web/20120506232618/https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr\" rel=\"noreferrer\">Douglas Crockford, 2012</a></p>\n</blockquote>\n    </div>",
          "vote": "59"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If your text file, which is a JSON string, is going to be read by some program, how difficult would it be to strip out either C or C++ style comments before using it?</p>\n\n<p><strong>Answer:</strong> It would be a one liner. If you do that then JSON files could be used as configuration files.</p>\n    </div>",
          "vote": "45"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you are using the Newtonsoft.Json library with ASP.NET to read/deserialize you can use comments in the JSON content:</p>\n<blockquote>\n<p>//\"name\": \"string\"</p>\n<p>//\"id\": int</p>\n</blockquote>\n<p>or</p>\n<blockquote>\n<p>/* This is a</p>\n<p>comment example */</p>\n</blockquote>\n<p><strong>PS:</strong> Single-line comments are only supported with 6+ versions of Newtonsoft Json.</p>\n<p><strong>Additional note for people who can't think out of the box:</strong> I use the JSON format for basic settings in an ASP.NET web application I made. I read the file, convert it into the settings object with the Newtonsoft library and use it when necessary.</p>\n<p>I prefer writing comments about each individual setting in the JSON file itself, and I really don't care about the integrity of the JSON format as long as the library I use is OK with it.</p>\n<p>I think this is an 'easier to use/understand' way than creating a separate 'settings.README' file and explaining the settings in it.</p>\n<p>If you have a problem with this kind of usage; sorry, the genie is out of the lamp. People would find other usages for JSON format, and there is nothing you can do about it.</p>\n    </div>",
          "vote": "43"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The idea behind JSON is to provide simple data exchange between applications. These are typically web based and the language is JavaScript.</p>\n\n<p>It doesn't really allow for comments as such, however, passing a comment as one of the name/value pairs in the data would certainly work, although that data would obviously need to be ignored or handled specifically by the parsing code.</p>\n\n<p>All that said, it's not the intention that the JSON file should contain comments in the traditional sense. It should just be the data.</p>\n\n<p>Have a look at the <a href=\"http://www.json.org/\" rel=\"noreferrer\">JSON website</a> for more detail.</p>\n    </div>",
          "vote": "37"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>JSON does not support comments natively, but you can make your own decoder or at least preprocessor to strip out comments, that's perfectly fine (as long as you just ignore comments and don't use them to guide how your application should process the JSON data).</p>\n\n<blockquote>\n  <p>JSON does not have comments. A JSON encoder MUST NOT output comments.\n  A JSON decoder MAY accept and ignore comments.</p>\n  \n  <p>Comments should never be used to transmit anything meaningful. That is\n  what JSON is for.</p>\n</blockquote>\n\n<p>Cf: <a href=\"http://tech.groups.yahoo.com/group/json/message/152\" rel=\"noreferrer\">Douglas Crockford, author of JSON spec</a>.</p>\n    </div>",
          "vote": "35"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just encountering this for configuration files. I don't want to use <strong>XML</strong> (verbose, graphically, ugly, hard to read), or \"ini\" format (no hierarchy, no real standard, etc.) or Java \"Properties\" format (like .ini).</p>\n\n<p>JSON can do all they can do, but it is way less verbose and more human readable - and parsers are easy and ubiquitous in many languages. It's just a tree of data. But out-of-band comments are a necessity often to document \"default\" configurations and the like. Configurations are never to be \"full documents\", but trees of saved data that can be human readable when needed.</p>\n\n<p>I guess one could use <code>\"#\": \"comment\"</code>, for \"valid\" JSON.</p>\n    </div>",
          "vote": "33"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It depends on your JSON library. <a href=\"https://github.com/JamesNK/Newtonsoft.Json\" rel=\"noreferrer\">Json.NET</a> supports JavaScript-style comments, <code>/* commment */</code>.</p>\n\n<p>See <a href=\"https://stackoverflow.com/a/10325432/166286\">another Stack&nbsp;Overflow question</a>.</p>\n    </div>",
          "vote": "32"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>JSON makes a lot of sense for config files and other local usage because it's ubiquitous and because it's much simpler than XML. </p>\n\n<p>If people have strong reasons against having comments in JSON when communicating data (whether valid or not), then possibly JSON could be split into two:</p>\n\n<ul>\n<li>JSON-COM: JSON on the wire, or rules that apply when communicating JSON data.</li>\n<li>JSON-DOC: JSON document, or JSON in files or locally. Rules that define a valid JSON document.</li>\n</ul>\n\n<p>JSON-DOC will allow comments, and other minor differences might exist such as handling whitespace. Parsers can easily convert from one spec to the other. </p>\n\n<p>With regards to the <a href=\"https://plus.google.com/118095276221607585885/posts/RK8qyGVaGSr\">remark</a> made by Douglas Crockford on this issues (referenced by @Artur Czajka)</p>\n\n<blockquote>\n  <p>Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser.</p>\n</blockquote>\n\n<p>We're talking about a generic config file issue (cross language/platform), and he's answering with a JS specific utility!</p>\n\n<p>Sure a JSON specific minify can be implemented in any language,\nbut standardize this so it becomes ubiquitous across parsers in all languages and platforms so people stop wasting their time lacking the feature because they have good use-cases for it, looking the issue up in online forums, and getting people telling them it's a bad idea or suggesting it's easy to implement stripping comments out of text files.</p>\n\n<p>The other issue is interoperability. Suppose you have a library or API or any kind of subsystem which has some config or data files associated with it. And this subsystem is\nto be accessed from different languages.  Then do you go about telling people: by the way\ndon't forget to strip out the comments from the JSON files before passing them to the parser!</p>\n    </div>",
          "vote": "31"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you use <a href=\"http://json5.org/\" rel=\"noreferrer\">JSON5</a> you can include comments.</p>\n\n<hr>\n\n<p><strong>JSON5 is a proposed extension to JSON</strong> that aims to make it easier for humans to write and maintain by hand. It does this by adding some minimal syntax features directly from ECMAScript&nbsp;5.</p>\n    </div>",
          "vote": "30"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The Dojo Toolkit JavaScript toolkit (at least as of version 1.4), allows you to include comments in your JSON. The comments can be of <code>/* */</code> format. Dojo Toolkit consumes the JSON via the <code>dojo.xhrGet()</code> call.</p>\n\n<p>Other JavaScript toolkits may work similarly.</p>\n\n<p>This can be helpful when experimenting with alternate data structures (or even data lists) before choosing a final option.</p>\n    </div>",
          "vote": "25"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>JSON is not a framed protocol</strong>. It is a <em>language free format</em>. So a comment's format is not defined for JSON.</p>\n\n<p>As many people have suggested, there are some tricks, for example, duplicate keys or a specific key <code>_comment</code> that you can use. It's up to you.</p>\n    </div>",
          "vote": "23"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You <em>can</em> have comments in <a href=\"http://en.wikipedia.org/wiki/JSONP\" rel=\"noreferrer\">JSONP</a>, but not in pure JSON. I've just spent an hour trying to make my program work with this example from Highcharts: <a href=\"http://www.highcharts.com/samples/data/jsonp.php?filename=aapl-c.json&amp;callback=?\" rel=\"noreferrer\">http://www.highcharts.com/samples/data/jsonp.php?filename=aapl-c.json&amp;callback=?</a></p>\n\n<p>If you follow the link, you will see</p>\n\n<pre class=\"default s-code-block hljs csharp\"><code>?(<span class=\"hljs-comment\">/* AAPL historical OHLC data from the Google Finance API */</span>\n[<span class=\"hljs-meta\">\n/* May 2006 */\n[1147651200000,67.79</span>],\n[<span class=\"hljs-meta\">1147737600000,64.98</span>],\n...\n[<span class=\"hljs-meta\">1368057600000,456.77</span>],\n[<span class=\"hljs-meta\">1368144000000,452.97</span>]\n]);\n</code></pre>\n\n<p>Since I had a similar file in my local folder, there were no issues with the <a href=\"http://en.wikipedia.org/wiki/Same-origin_policy\" rel=\"noreferrer\">Same-origin policy</a>, so I decided to use pure JSON... and, of course, <code>$.getJSON</code> was failing silently because of the comments.</p>\n\n<p>Eventually I just sent a manual HTTP request to the address above and realized that the content-type was <code>text/javascript</code> since, well, JSONP returns pure JavaScript. In this case comments <em>are allowed</em>. But my application returned content-type <code>application/json</code>, so I had to remove the comments.</p>\n    </div>",
          "vote": "21"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a <strong>\"can you\"</strong> question. And here is a <strong>\"yes\"</strong> answer.</p>\n\n<p>No, you shouldn't use duplicative object members to stuff side channel data into a JSON encoding. (See \"The names within an object SHOULD be unique\" <a href=\"https://tools.ietf.org/html/rfc7159\">in the RFC</a>).</p>\n\n<p>And yes, you could <a href=\"https://plus.google.com/+DouglasCrockfordEsq/posts/RK8qyGVaGSr\">insert comments <em>around</em> the JSON</a>, which you could parse out.</p>\n\n<p>But if you want a way of inserting and extracting arbitrary side-channel data to a valid JSON, here is an answer. We take advantage of the non-unique representation of data in a JSON encoding. This is allowed<sup>*</sup> in section two of the RFC under \"whitespace is allowed before or after any of the six structural characters\".</p>\n\n<p><i><sup>*</sup>The RFC only states \"whitespace is allowed before or after any of the six structural characters\", not explicitly mentioning strings, numbers, \"false\", \"true\", and \"null\". This omission is ignored in ALL implementations.</i></p>\n\n<hr>\n\n<p>First, canonicalize your JSON by minifying it:</p>\n\n<pre class=\"default s-code-block hljs bash\"><code><span class=\"hljs-variable\">$jsonMin</span> = json_encode(json_decode(<span class=\"hljs-variable\">$json</span>));\n</code></pre>\n\n<p>Then encode your comment in binary:</p>\n\n<pre class=\"default s-code-block hljs perl\"><code>$hex = <span class=\"hljs-keyword\">unpack</span>(<span class=\"hljs-string\">'H*'</span>, $comment);\n$commentBinary = base_convert($hex[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">2</span>);\n</code></pre>\n\n<p>Then steg your binary:</p>\n\n<pre class=\"default s-code-block hljs bash\"><code><span class=\"hljs-variable\">$steg</span> = str_replace(<span class=\"hljs-string\">'0'</span>, <span class=\"hljs-string\">' '</span>, <span class=\"hljs-variable\">$commentBinary</span>);\n<span class=\"hljs-variable\">$steg</span> = str_replace(<span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">\"\\t\"</span>, <span class=\"hljs-variable\">$steg</span>);\n</code></pre>\n\n<p>Here is your output:</p>\n\n<pre class=\"default s-code-block hljs bash\"><code><span class=\"hljs-variable\">$jsonWithComment</span> = <span class=\"hljs-variable\">$steg</span> . <span class=\"hljs-variable\">$jsonMin</span>;\n</code></pre>\n    </div>",
          "vote": "20"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em><strong>Disclaimer: This is silly</strong></em></p>\n<p>There is actually a way to add comments, and stay within the specification (no additional parser needed). It will not result into human-readable comments without any sort of parsing though.</p>\n<p>You could abuse the following:</p>\n<blockquote>\n<p>Insignificant whitespace is allowed before or after any token.\nWhitespace is any sequence of one or more of the following code\npoints: character tabulation (U+0009), line feed (U+000A), carriage\nreturn (U+000D), and space (U+0020).</p>\n</blockquote>\n<p>In a hacky way, you can abuse this to add a comment. For instance: start and end your comment with a tab. Encode the comment in base3 and use the other whitespace characters to represent them. For instance.</p>\n<pre class=\"default s-code-block hljs\"><code>010212 010202 011000 011000 011010 001012 010122 010121 011021 010202 001012 011022 010212 011020 010202 010202\n</code></pre>\n<p>(<code>hello base three</code> in ASCII) But instead of 0 use space, for 1 use line feed and for 2 use carriage return.</p>\n<p>This will just leave you with a lot of unreadable whitespace (unless you make an IDE plugin to encode/decode it on the fly).</p>\n<p>I never even tried this, for obvious reasons and neither should you.</p>\n    </div>",
          "vote": "20"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In my case, I need to use comments for debug purposes just before the output of the JSON. So I put the debug information in the <strong>HTTP header</strong>, to avoid breaking the client:</p>\n<pre class=\"default s-code-block hljs less\"><code><span class=\"hljs-selector-tag\">header</span>(<span class=\"hljs-string\">\"My-Json-Comment: Yes, I know it's a workaround ;-) \"</span>);\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/yMh3J.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/yMh3J.png\" alt=\"Enter image description here\"></a></p>\n    </div>",
          "vote": "18"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>JSON doesn't allow comments, per se. The reasoning is utterly foolish, because you can use JSON <em>itself</em> to create comments, which obviates the reasoning entirely, <em>and</em> loads the parser data space for no good reason at all for <em>exactly</em> the same result and potential issues, such as they are: a JSON file with comments.</p>\n<blockquote>\n<p><strong>If you try to put comments in (using <code>//</code> or <code>/* */</code> or <code>#</code> for instance), then some parsers will fail because this is strictly not\nwithin the JSON specification. So you should <em>never</em> do that.</strong></p>\n</blockquote>\n<p>Here, for instance, where my <a href=\"http://fyngyrz.com/?p=3389\" rel=\"nofollow noreferrer\">image manipulation system</a> has saved image notations and some basic formatted (comment) information relating to them (at the bottom):</p>\n<pre class=\"default s-code-block hljs json\"><code>{\n    <span class=\"hljs-attr\">\"Notations\"</span>: [\n        {\n            <span class=\"hljs-attr\">\"anchorX\"</span>: <span class=\"hljs-number\">333</span>,\n            <span class=\"hljs-attr\">\"anchorY\"</span>: <span class=\"hljs-number\">265</span>,\n            <span class=\"hljs-attr\">\"areaMode\"</span>: <span class=\"hljs-string\">\"Ellipse\"</span>,\n            <span class=\"hljs-attr\">\"extentX\"</span>: <span class=\"hljs-number\">356</span>,\n            <span class=\"hljs-attr\">\"extentY\"</span>: <span class=\"hljs-number\">294</span>,\n            <span class=\"hljs-attr\">\"opacity\"</span>: <span class=\"hljs-number\">0.5</span>,\n            <span class=\"hljs-attr\">\"text\"</span>: <span class=\"hljs-string\">\"Elliptical area on top\"</span>,\n            <span class=\"hljs-attr\">\"textX\"</span>: <span class=\"hljs-number\">333</span>,\n            <span class=\"hljs-attr\">\"textY\"</span>: <span class=\"hljs-number\">265</span>,\n            <span class=\"hljs-attr\">\"title\"</span>: <span class=\"hljs-string\">\"Notation 1\"</span>\n        },\n        {\n            <span class=\"hljs-attr\">\"anchorX\"</span>: <span class=\"hljs-number\">87</span>,\n            <span class=\"hljs-attr\">\"anchorY\"</span>: <span class=\"hljs-number\">385</span>,\n            <span class=\"hljs-attr\">\"areaMode\"</span>: <span class=\"hljs-string\">\"Rectangle\"</span>,\n            <span class=\"hljs-attr\">\"extentX\"</span>: <span class=\"hljs-number\">109</span>,\n            <span class=\"hljs-attr\">\"extentY\"</span>: <span class=\"hljs-number\">412</span>,\n            <span class=\"hljs-attr\">\"opacity\"</span>: <span class=\"hljs-number\">0.5</span>,\n            <span class=\"hljs-attr\">\"text\"</span>: <span class=\"hljs-string\">\"Rect area\\non bottom\"</span>,\n            <span class=\"hljs-attr\">\"textX\"</span>: <span class=\"hljs-number\">98</span>,\n            <span class=\"hljs-attr\">\"textY\"</span>: <span class=\"hljs-number\">385</span>,\n            <span class=\"hljs-attr\">\"title\"</span>: <span class=\"hljs-string\">\"Notation 2\"</span>\n        },\n        {\n            <span class=\"hljs-attr\">\"anchorX\"</span>: <span class=\"hljs-number\">69</span>,\n            <span class=\"hljs-attr\">\"anchorY\"</span>: <span class=\"hljs-number\">104</span>,\n            <span class=\"hljs-attr\">\"areaMode\"</span>: <span class=\"hljs-string\">\"Polygon\"</span>,\n            <span class=\"hljs-attr\">\"extentX\"</span>: <span class=\"hljs-number\">102</span>,\n            <span class=\"hljs-attr\">\"extentY\"</span>: <span class=\"hljs-number\">136</span>,\n            <span class=\"hljs-attr\">\"opacity\"</span>: <span class=\"hljs-number\">0.5</span>,\n            <span class=\"hljs-attr\">\"pointList\"</span>: [\n                {\n                    <span class=\"hljs-attr\">\"i\"</span>: <span class=\"hljs-number\">0</span>,\n                    <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-number\">83</span>,\n                    <span class=\"hljs-attr\">\"y\"</span>: <span class=\"hljs-number\">104</span>\n                },\n                {\n                    <span class=\"hljs-attr\">\"i\"</span>: <span class=\"hljs-number\">1</span>,\n                    <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-number\">69</span>,\n                    <span class=\"hljs-attr\">\"y\"</span>: <span class=\"hljs-number\">136</span>\n                },\n                {\n                    <span class=\"hljs-attr\">\"i\"</span>: <span class=\"hljs-number\">2</span>,\n                    <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-number\">102</span>,\n                    <span class=\"hljs-attr\">\"y\"</span>: <span class=\"hljs-number\">132</span>\n                },\n                {\n                    <span class=\"hljs-attr\">\"i\"</span>: <span class=\"hljs-number\">3</span>,\n                    <span class=\"hljs-attr\">\"x\"</span>: <span class=\"hljs-number\">83</span>,\n                    <span class=\"hljs-attr\">\"y\"</span>: <span class=\"hljs-number\">104</span>\n                }\n            ],\n            <span class=\"hljs-attr\">\"text\"</span>: <span class=\"hljs-string\">\"Simple polygon\"</span>,\n            <span class=\"hljs-attr\">\"textX\"</span>: <span class=\"hljs-number\">85</span>,\n            <span class=\"hljs-attr\">\"textY\"</span>: <span class=\"hljs-number\">104</span>,\n            <span class=\"hljs-attr\">\"title\"</span>: <span class=\"hljs-string\">\"Notation 3\"</span>\n        }\n    ],\n    <span class=\"hljs-attr\">\"imageXW\"</span>: <span class=\"hljs-number\">512</span>,\n    <span class=\"hljs-attr\">\"imageYW\"</span>: <span class=\"hljs-number\">512</span>,\n    <span class=\"hljs-attr\">\"imageName\"</span>: <span class=\"hljs-string\">\"lena_std.ato\"</span>,\n    <span class=\"hljs-attr\">\"tinyDocs\"</span>: {\n        <span class=\"hljs-attr\">\"c01\"</span>: <span class=\"hljs-string\">\"JSON image notation data:\"</span>,\n        <span class=\"hljs-attr\">\"c02\"</span>: <span class=\"hljs-string\">\"-------------------------\"</span>,\n        <span class=\"hljs-attr\">\"c03\"</span>: <span class=\"hljs-string\">\"\"</span>,\n        <span class=\"hljs-attr\">\"c04\"</span>: <span class=\"hljs-string\">\"This data contains image notations and related area\"</span>,\n        <span class=\"hljs-attr\">\"c05\"</span>: <span class=\"hljs-string\">\"selection information that provides a means for an\"</span>,\n        <span class=\"hljs-attr\">\"c06\"</span>: <span class=\"hljs-string\">\"image gallery to display notations with elliptical,\"</span>,\n        <span class=\"hljs-attr\">\"c07\"</span>: <span class=\"hljs-string\">\"rectangular, polygonal or freehand area indications\"</span>,\n        <span class=\"hljs-attr\">\"c08\"</span>: <span class=\"hljs-string\">\"over an image displayed to a gallery visitor.\"</span>,\n        <span class=\"hljs-attr\">\"c09\"</span>: <span class=\"hljs-string\">\"\"</span>,\n        <span class=\"hljs-attr\">\"c10\"</span>: <span class=\"hljs-string\">\"X and Y positions are all in image space. The image\"</span>,\n        <span class=\"hljs-attr\">\"c11\"</span>: <span class=\"hljs-string\">\"resolution is given as imageXW and imageYW, which\"</span>,\n        <span class=\"hljs-attr\">\"c12\"</span>: <span class=\"hljs-string\">\"you use to scale the notation areas to their proper\"</span>,\n        <span class=\"hljs-attr\">\"c13\"</span>: <span class=\"hljs-string\">\"locations and sizes for your display of the image,\"</span>,\n        <span class=\"hljs-attr\">\"c14\"</span>: <span class=\"hljs-string\">\"regardless of scale.\"</span>,\n        <span class=\"hljs-attr\">\"c15\"</span>: <span class=\"hljs-string\">\"\"</span>,\n        <span class=\"hljs-attr\">\"c16\"</span>: <span class=\"hljs-string\">\"For Ellipses, anchor is the  center of the ellipse,\"</span>,\n        <span class=\"hljs-attr\">\"c17\"</span>: <span class=\"hljs-string\">\"and the extents are the X and Y radii respectively.\"</span>,\n        <span class=\"hljs-attr\">\"c18\"</span>: <span class=\"hljs-string\">\"\"</span>,\n        <span class=\"hljs-attr\">\"c19\"</span>: <span class=\"hljs-string\">\"For Rectangles, the anchor is the top left and the\"</span>,\n        <span class=\"hljs-attr\">\"c20\"</span>: <span class=\"hljs-string\">\"extents are the bottom right.\"</span>,\n        <span class=\"hljs-attr\">\"c21\"</span>: <span class=\"hljs-string\">\"\"</span>,\n        <span class=\"hljs-attr\">\"c22\"</span>: <span class=\"hljs-string\">\"For Freehand and Polygon area modes, the pointList\"</span>,\n        <span class=\"hljs-attr\">\"c23\"</span>: <span class=\"hljs-string\">\"contains a series of numbered XY points. If the area\"</span>,\n        <span class=\"hljs-attr\">\"c24\"</span>: <span class=\"hljs-string\">\"is closed, the last point will be the same as the\"</span>,\n        <span class=\"hljs-attr\">\"c25\"</span>: <span class=\"hljs-string\">\"first, so all you have to be concerned with is drawing\"</span>,\n        <span class=\"hljs-attr\">\"c26\"</span>: <span class=\"hljs-string\">\"lines between the points in the list. Anchor and extent\"</span>,\n        <span class=\"hljs-attr\">\"c27\"</span>: <span class=\"hljs-string\">\"are set to the top left and bottom right of the indicated\"</span>,\n        <span class=\"hljs-attr\">\"c28\"</span>: <span class=\"hljs-string\">\"region, and can be used as a simplistic rectangular\"</span>,\n        <span class=\"hljs-attr\">\"c29\"</span>: <span class=\"hljs-string\">\"detect for the mouse hover position over these types\"</span>,\n        <span class=\"hljs-attr\">\"c30\"</span>: <span class=\"hljs-string\">\"of areas.\"</span>,\n        <span class=\"hljs-attr\">\"c31\"</span>: <span class=\"hljs-string\">\"\"</span>,\n        <span class=\"hljs-attr\">\"c32\"</span>: <span class=\"hljs-string\">\"The textx and texty positions provide basic positioning\"</span>,\n        <span class=\"hljs-attr\">\"c33\"</span>: <span class=\"hljs-string\">\"information to help you locate the text information\"</span>,\n        <span class=\"hljs-attr\">\"c34\"</span>: <span class=\"hljs-string\">\"in a reasonable location associated with the area\"</span>,\n        <span class=\"hljs-attr\">\"c35\"</span>: <span class=\"hljs-string\">\"indication.\"</span>,\n        <span class=\"hljs-attr\">\"c36\"</span>: <span class=\"hljs-string\">\"\"</span>,\n        <span class=\"hljs-attr\">\"c37\"</span>: <span class=\"hljs-string\">\"Opacity is a value between 0 and 1, where .5 represents\"</span>,\n        <span class=\"hljs-attr\">\"c38\"</span>: <span class=\"hljs-string\">\"a 50% opaque backdrop and 1.0 represents a fully opaque\"</span>,\n        <span class=\"hljs-attr\">\"c39\"</span>: <span class=\"hljs-string\">\"backdrop. Recommendation is that regions be drawn\"</span>,\n        <span class=\"hljs-attr\">\"c40\"</span>: <span class=\"hljs-string\">\"only if the user hovers the pointer over the image,\"</span>,\n        <span class=\"hljs-attr\">\"c41\"</span>: <span class=\"hljs-string\">\"and that the text associated with the regions be drawn\"</span>,\n        <span class=\"hljs-attr\">\"c42\"</span>: <span class=\"hljs-string\">\"only if the user hovers the pointer over the indicated\"</span>,\n        <span class=\"hljs-attr\">\"c43\"</span>: <span class=\"hljs-string\">\"region.\"</span>\n    }\n}\n</code></pre>\n    </div>",
          "vote": "17"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>We are using <a href=\"https://github.com/sindresorhus/strip-json-comments\"><code>strip-json-comments</code></a> for our project. It supports something like:</p>\n\n<pre class=\"default s-code-block hljs json\"><code><span class=\"hljs-comment\">/*\n * Description \n*/</span>\n{\n    <span class=\"hljs-comment\">// rainbows</span>\n    <span class=\"hljs-attr\">\"unicorn\"</span>: <span class=\"hljs-comment\">/* ❤ */</span> <span class=\"hljs-string\">\"cake\"</span>\n}\n</code></pre>\n\n<p>Simply <code>npm install --save strip-json-comments</code> to install and use it like:</p>\n\n<pre class=\"default s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> strip_json_comments = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'strip-json-comments'</span>)\n<span class=\"hljs-keyword\">var</span> json = <span class=\"hljs-string\">'{/*rainbows*/\"unicorn\":\"cake\"}'</span>;\n<span class=\"hljs-built_in\">JSON</span>.parse(strip_json_comments(json));\n<span class=\"hljs-comment\">//=&gt; {unicorn: 'cake'}</span>\n</code></pre>\n    </div>",
          "vote": "14"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To cut a JSON item into parts I add \"dummy comment\" lines:</p>\n\n<pre class=\"default s-code-block hljs json\"><code>{\n\n<span class=\"hljs-attr\">\"#############################\"</span> : <span class=\"hljs-string\">\"Part1\"</span>,\n\n<span class=\"hljs-attr\">\"data1\"</span>             : <span class=\"hljs-string\">\"value1\"</span>,\n<span class=\"hljs-attr\">\"data2\"</span>             : <span class=\"hljs-string\">\"value2\"</span>,\n\n<span class=\"hljs-attr\">\"#############################\"</span> : <span class=\"hljs-string\">\"Part2\"</span>,\n\n<span class=\"hljs-attr\">\"data4\"</span>             : <span class=\"hljs-string\">\"value3\"</span>,\n<span class=\"hljs-attr\">\"data3\"</span>             : <span class=\"hljs-string\">\"value4\"</span>\n\n}\n</code></pre>\n    </div>",
          "vote": "14"
        }
      ]
    },
    {
      "question": "How do I check if an element is hidden in jQuery?",
      "url": "https://stackoverflow.com/questions/178325/how-do-i-check-if-an-element-is-hidden-in-jquery",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Is it possible to toggle the visibility of an element, using the functions <code>.hide()</code>, <code>.show()</code> or <code>.toggle()</code>?</p>\n\n<p>How would you test if an element is <code>visible</code> or <code>hidden</code>?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Since the question refers to a single element, this code might be more suitable:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// Checks CSS content for display:[none|block], ignores visibility:[true|false]</span>\n$(element).is(<span class=\"hljs-string\">\":visible\"</span>);\n\n<span class=\"hljs-comment\">// The same works with hidden</span>\n$(element).is(<span class=\"hljs-string\">\":hidden\"</span>);\n</code></pre>\n\n<p>It is the same as <a href=\"https://stackoverflow.com/questions/178325/how-do-you-test-if-something-is-hidden-in-jquery/178386#178386\">twernt's suggestion</a>, but applied to a single element; and it <a href=\"https://stackoverflow.com/questions/178325/how-do-i-check-if-an-element-is-hidden-in-jquery/4685330#4685330\">matches the algorithm recommended in the jQuery FAQ</a>.</p>\n\n<p>We use jQuery's is() to check the selected element with another element, selector or any jQuery object. This method traverses along the DOM elements to find a match, which satisfies the passed parameter. It will return true if there is a match, otherwise return false.</p>\n    </div>",
          "vote": "9732"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use the <a href=\"http://docs.jquery.com/Selectors/hidden\" rel=\"noreferrer\"><code>hidden</code></a> selector:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// Matches all elements that are hidden</span>\n$(<span class=\"hljs-string\">'element:hidden'</span>)\n</code></pre>\n\n<p>And the <a href=\"http://docs.jquery.com/Selectors/visible\" rel=\"noreferrer\"><code>visible</code></a> selector:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// Matches all elements that are visible</span>\n$(<span class=\"hljs-string\">'element:visible'</span>)\n</code></pre>\n    </div>",
          "vote": "1527"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> ( $(element).css(<span class=\"hljs-string\">'display'</span>) == <span class=\"hljs-string\">'none'</span> || $(element).css(<span class=\"hljs-string\">\"visibility\"</span>) == <span class=\"hljs-string\">\"hidden\"</span>){\n    <span class=\"hljs-comment\">// 'element' is hidden</span>\n}\n</code></pre>\n\n<p>The above method does not consider the visibility of the parent. To consider the parent as well, you should use <code>.is(\":hidden\")</code> or <code>.is(\":visible\")</code>.</p>\n\n<p>For example,</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>&lt;div id=<span class=\"hljs-string\">\"div1\"</span> style=<span class=\"hljs-string\">\"display:none\"</span>&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"div2\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block\"</span>&gt;</span>Div2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;/div&gt;\n</code></pre>\n\n<blockquote>\n  <p>The above method will consider <code>div2</code> visible while <code>:visible</code> not. But the above might be useful in many cases, especially when you need to find if there is any error divs visible in the hidden parent because in such conditions <code>:visible</code> will not work.</p>\n</blockquote>\n    </div>",
          "vote": "1003"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>None of these answers address what I understand to be the question, which is what I was searching for, <em>\"How do I handle items that have <code>visibility: hidden</code>?\"</em>. Neither <code>:visible</code> nor <code>:hidden</code> will handle this, as they are both looking for display per the documentation.  As far as I could determine, there is no selector to handle CSS visibility.  Here is how I resolved it (standard jQuery selectors, there may be a more condensed syntax):</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-string\">\".item\"</span>).each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">\"visibility\"</span>) == <span class=\"hljs-string\">\"hidden\"</span>) {\n        <span class=\"hljs-comment\">// handle non visible state</span>\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-comment\">// handle visible state</span>\n    }\n});\n</code></pre>\n    </div>",
          "vote": "556"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From <em><a href=\"http://learn.jquery.com/using-jquery-core/faq/how-do-i-determine-the-state-of-a-toggled-element/\" rel=\"noreferrer\">How do I determine the state of a toggled element?</a></em></p>\n\n<hr>\n\n<p>You can determine whether an element is collapsed or not by using the <code>:visible</code> and <code>:hidden</code> selectors.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> isVisible = $(<span class=\"hljs-string\">'#myDiv'</span>).is(<span class=\"hljs-string\">':visible'</span>);\n<span class=\"hljs-keyword\">var</span> isHidden = $(<span class=\"hljs-string\">'#myDiv'</span>).is(<span class=\"hljs-string\">':hidden'</span>);\n</code></pre>\n\n<p>If you're simply acting on an element based on its visibility, you can just include <code>:visible</code> or <code>:hidden</code> in the selector expression. For example:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code> $(<span class=\"hljs-string\">'#myDiv:visible'</span>).animate({<span class=\"hljs-attr\">left</span>: <span class=\"hljs-string\">'+=200px'</span>}, <span class=\"hljs-string\">'slow'</span>);\n</code></pre>\n    </div>",
          "vote": "411"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Often when checking if something is visible or not, you are going to go right ahead immediately and do something else with it. jQuery chaining makes this easy.</p>\n\n<p>So if you have a selector and you want to perform some action on it only if is visible or hidden, you can use <code>filter(\":visible\")</code> or <code>filter(\":hidden\")</code> followed by chaining it with the action you want to take.</p>\n\n<p>So instead of an <code>if</code> statement, like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-string\">'#btnUpdate'</span>).is(<span class=\"hljs-string\">\":visible\"</span>))\n{\n     $(<span class=\"hljs-string\">'#btnUpdate'</span>).animate({ <span class=\"hljs-attr\">width</span>: <span class=\"hljs-string\">\"toggle\"</span> });   <span class=\"hljs-comment\">// Hide button</span>\n}\n</code></pre>\n\n<p>Or more efficient, but even uglier:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> button = $(<span class=\"hljs-string\">'#btnUpdate'</span>);\n<span class=\"hljs-keyword\">if</span> (button.is(<span class=\"hljs-string\">\":visible\"</span>))\n{\n     button.animate({ <span class=\"hljs-attr\">width</span>: <span class=\"hljs-string\">\"toggle\"</span> });   <span class=\"hljs-comment\">// Hide button</span>\n}\n</code></pre>\n\n<p>You can do it all in one line:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-string\">'#btnUpdate'</span>).filter(<span class=\"hljs-string\">\":visible\"</span>).animate({ <span class=\"hljs-attr\">width</span>: <span class=\"hljs-string\">\"toggle\"</span> });\n</code></pre>\n    </div>",
          "vote": "311"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>:visible</code> selector according to <a href=\"https://api.jquery.com/hidden-selector/\" rel=\"noreferrer\">the jQuery documentation</a>:</p>\n\n<blockquote>\n  <ul>\n  <li>They have a CSS <code>display</code> value of <code>none</code>.</li>\n  <li>They are form elements with <code>type=\"hidden\"</code>.</li>\n  <li>Their width and height are explicitly set to 0.</li>\n  <li>An ancestor element is hidden, so the element is not shown on the page.</li>\n  </ul>\n  \n  <p>Elements with <code>visibility: hidden</code> or <code>opacity: 0</code> are considered to be visible, since they still consume space in the layout.</p>\n</blockquote>\n\n<p>This is useful in some cases and useless in others, because if you want to check if the element is visible (<code>display != none</code>), ignoring the parents visibility, you will find that doing <code>.css(\"display\") == 'none'</code> is not only faster, but will also return the visibility check correctly.</p>\n\n<p>If you want to check visibility instead of display, you should use: <code>.css(\"visibility\") == \"hidden\"</code>.</p>\n\n<p>Also take into consideration <a href=\"https://api.jquery.com/visible-selector/\" rel=\"noreferrer\">the additional jQuery notes</a>:</p>\n\n<blockquote>\n  <p>Because <code>:visible</code> is a jQuery extension and not part of the CSS specification, queries using <code>:visible</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:visible</code> to select elements, first select the elements using a pure CSS selector, then use <code>.filter(\":visible\")</code>.</p>\n</blockquote>\n\n<p>Also, if you are concerned about performance, you should check <em><a href=\"http://www.learningjquery.com/2010/05/now-you-see-me-showhide-performance\" rel=\"noreferrer\">Now you see me… show/hide performance</a></em> (2010-05-04). And use other methods to show and hide elements.</p>\n    </div>",
          "vote": "256"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How <strong><a href=\"http://web-profile.net/jquery/dev/jquery-element-visible-hidden/\" rel=\"noreferrer\">element visibility and jQuery works</a></strong>;</p>\n\n<p>An element could be hidden with <code>display:none</code>, <code>visibility:hidden</code> or <code>opacity:0</code>. The difference between those methods:</p>\n\n<ul>\n<li><code>display:none</code> hides the element, and it does not take up any space;</li>\n<li><code>visibility:hidden</code> hides the element, but it still takes up space in the layout;</li>\n<li><p><code>opacity:0</code> hides the element as \"visibility:hidden\", and it still takes up space in the layout; the only difference is that opacity lets one to make an element partly transparent;   </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-string\">'.target'</span>).is(<span class=\"hljs-string\">':hidden'</span>)) {\n  $(<span class=\"hljs-string\">'.target'</span>).show();\n} <span class=\"hljs-keyword\">else</span> {\n  $(<span class=\"hljs-string\">'.target'</span>).hide();\n}\n<span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-string\">'.target'</span>).is(<span class=\"hljs-string\">':visible'</span>)) {\n  $(<span class=\"hljs-string\">'.target'</span>).hide();\n} <span class=\"hljs-keyword\">else</span> {\n  $(<span class=\"hljs-string\">'.target'</span>).show();\n}\n\n<span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-string\">'.target-visibility'</span>).css(<span class=\"hljs-string\">'visibility'</span>) == <span class=\"hljs-string\">'hidden'</span>) {\n  $(<span class=\"hljs-string\">'.target-visibility'</span>).css({\n    <span class=\"hljs-attr\">visibility</span>: <span class=\"hljs-string\">\"visible\"</span>,\n    <span class=\"hljs-attr\">display</span>: <span class=\"hljs-string\">\"\"</span>\n  });\n} <span class=\"hljs-keyword\">else</span> {\n  $(<span class=\"hljs-string\">'.target-visibility'</span>).css({\n    <span class=\"hljs-attr\">visibility</span>: <span class=\"hljs-string\">\"hidden\"</span>,\n    <span class=\"hljs-attr\">display</span>: <span class=\"hljs-string\">\"\"</span>\n  });\n}\n\n<span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-string\">'.target-visibility'</span>).css(<span class=\"hljs-string\">'opacity'</span>) == <span class=\"hljs-string\">\"0\"</span>) {\n  $(<span class=\"hljs-string\">'.target-visibility'</span>).css({\n    <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-string\">\"1\"</span>,\n    <span class=\"hljs-attr\">display</span>: <span class=\"hljs-string\">\"\"</span>\n  });\n} <span class=\"hljs-keyword\">else</span> {\n  $(<span class=\"hljs-string\">'.target-visibility'</span>).css({\n    <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-string\">\"0\"</span>,\n    <span class=\"hljs-attr\">display</span>: <span class=\"hljs-string\">\"\"</span>\n  });\n}\n</code></pre>\n\n<p><strong>Useful jQuery toggle methods:</strong>  </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-string\">'.click'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  $(<span class=\"hljs-string\">'.target'</span>).toggle();\n});\n\n$(<span class=\"hljs-string\">'.click'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  $(<span class=\"hljs-string\">'.target'</span>).slideToggle();\n});\n\n$(<span class=\"hljs-string\">'.click'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  $(<span class=\"hljs-string\">'.target'</span>).fadeToggle();\n});\n</code></pre></li>\n</ul>\n    </div>",
          "vote": "226"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This works for me, and I am using <code>show()</code> and <code>hide()</code> to make my div hidden/visible:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span>( $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">'display'</span>) == <span class=\"hljs-string\">'none'</span> ){\n    <span class=\"hljs-comment\">/* your code goes here */</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">/* alternate logic   */</span>\n}\n</code></pre>\n    </div>",
          "vote": "225"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can also do this using plain JavaScript:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isRendered</span>(<span class=\"hljs-params\">domObj</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> ((domObj.nodeType != <span class=\"hljs-number\">1</span>) || (domObj == <span class=\"hljs-built_in\">document</span>.body)) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (domObj.currentStyle &amp;&amp; domObj.currentStyle[<span class=\"hljs-string\">\"display\"</span>] != <span class=\"hljs-string\">\"none\"</span> &amp;&amp; domObj.currentStyle[<span class=\"hljs-string\">\"visibility\"</span>] != <span class=\"hljs-string\">\"hidden\"</span>) {\n        <span class=\"hljs-keyword\">return</span> isRendered(domObj.parentNode);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>.getComputedStyle) {\n        <span class=\"hljs-keyword\">var</span> cs = <span class=\"hljs-built_in\">document</span>.defaultView.getComputedStyle(domObj, <span class=\"hljs-literal\">null</span>);\n        <span class=\"hljs-keyword\">if</span> (cs.getPropertyValue(<span class=\"hljs-string\">\"display\"</span>) != <span class=\"hljs-string\">\"none\"</span> &amp;&amp; cs.getPropertyValue(<span class=\"hljs-string\">\"visibility\"</span>) != <span class=\"hljs-string\">\"hidden\"</span>) {\n            <span class=\"hljs-keyword\">return</span> isRendered(domObj.parentNode);\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n\n<p>Notes:</p>\n\n<ol>\n<li><p>Works everywhere</p></li>\n<li><p>Works for nested elements</p></li>\n<li><p>Works for CSS and inline styles</p></li>\n<li><p>Doesn't require a framework</p></li>\n</ol>\n    </div>",
          "vote": "173"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would use CSS class <code>.hide { display: none!important; }</code>. </p>\n\n<p>For hiding/showing, I call <code>.addClass(\"hide\")/.removeClass(\"hide\")</code>. For checking visibility, I use <code>.hasClass(\"hide\")</code>.</p>\n\n<p>It's a simple and clear way to check/hide/show elements, if you don't plan to use <code>.toggle()</code> or <code>.animate()</code> methods.</p>\n    </div>",
          "vote": "171"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong><a href=\"https://freakyjolly.com/demo/check-if-visible-or-hidden-jquery.html\" rel=\"noreferrer\">Demo Link</a></strong> </p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-string\">'#clickme'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  $(<span class=\"hljs-string\">'#book'</span>).toggle(<span class=\"hljs-string\">'slow'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// Animation complete.</span>\n    alert($(<span class=\"hljs-string\">'#book'</span>).is(<span class=\"hljs-string\">\":visible\"</span>)); <span class=\"hljs-comment\">//&lt;--- TRUE if Visible False if Hidden</span>\n  });\n});</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"clickme\"</span>&gt;</span>\n  Click here\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"book\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://upload.wikimedia.org/wikipedia/commons/8/87/Google_Chrome_icon_%282011%29.png\"</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"300\"</span>/&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif1\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p><strong>Source:</strong> </p>\n\n<p><a href=\"http://bloggerplugnplay.blogspot.in/2013/01/how-to-see-if-element-is-hidden-or.html\" rel=\"noreferrer\">Blogger Plug n Play - jQuery Tools and Widgets: How to See if Element is hidden or Visible Using jQuery</a></p>\n    </div>",
          "vote": "147"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One can simply use the <code>hidden</code> or <code>visible</code> attribute, like:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-string\">'element:hidden'</span>)\n$(<span class=\"hljs-string\">'element:visible'</span>)\n</code></pre>\n\n<p>Or you can simplify the same with <em>is</em> as follows.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(element).is(<span class=\"hljs-string\">\":visible\"</span>)\n</code></pre>\n    </div>",
          "vote": "142"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>ebdiv</code> should be set to <code>style=\"display:none;\"</code>. It works for both show and hide:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-built_in\">document</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    $(<span class=\"hljs-string\">\"#eb\"</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        $(<span class=\"hljs-string\">\"#ebdiv\"</span>).toggle();\n    });    \n});\n</code></pre>\n    </div>",
          "vote": "140"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another answer you should put into consideration is if you are hiding an element, you should use <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"noreferrer\">jQuery</a>, but instead of actually hiding it, you remove the whole element, but you copy its <a href=\"http://en.wikipedia.org/wiki/HTML\" rel=\"noreferrer\">HTML</a> content and the tag itself into a jQuery variable, and then all you need to do is test if there is such a tag on the screen, using the normal <code>if (!$('#thetagname').length)</code>.</p>\n    </div>",
          "vote": "127"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When testing an element against <code>:hidden</code> selector in jQuery it should be considered that <strong>an absolute positioned element may be recognized as hidden although their child elements are visible</strong>.</p>\n\n<p>This seems somewhat counter-intuitive in the first place – though having a closer look at the jQuery documentation gives the relevant information:</p>\n\n<blockquote>\n  <p>Elements can be considered hidden for several reasons: [...] Their width and height are explicitly set to 0. [...]</p>\n</blockquote>\n\n<p>So this actually makes sense in regards to the box-model and the computed style for the element. Even if width and height are not set <em>explicitly</em> to 0 they may be set <em>implicitly</em>.</p>\n\n<p>Have a look at the following example:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">console</span>.log($(<span class=\"hljs-string\">'.foo'</span>).is(<span class=\"hljs-string\">':hidden'</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log($(<span class=\"hljs-string\">'.bar'</span>).is(<span class=\"hljs-string\">':hidden'</span>)); <span class=\"hljs-comment\">// false</span></code></pre>\n<pre class=\"snippet-code-css lang-css s-code-block hljs\"><code><span class=\"hljs-selector-class\">.foo</span> {\n  <span class=\"hljs-attribute\">position</span>: absolute;\n  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">10px</span>;\n  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">10px</span>;\n  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ff0000</span>;\n}\n\n<span class=\"hljs-selector-class\">.bar</span> {\n  <span class=\"hljs-attribute\">position</span>: absolute;\n  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">10px</span>;\n  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">10px</span>;\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#0000ff</span>;\n}</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"foo\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"bar\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif2\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<hr>\n\n<p><strong>Update for jQuery 3.x:</strong></p>\n\n<p>With jQuery 3 the described behavior will change! Elements will be considered visible if they have any layout boxes, including those of zero width and/or height.</p>\n\n<p>JSFiddle with jQuery 3.0.0-alpha1:</p>\n\n<p><a href=\"http://jsfiddle.net/pM2q3/7/\" rel=\"noreferrer\">http://jsfiddle.net/pM2q3/7/</a></p>\n\n<p>The same JavaScript code will then have this output:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">console</span>.log($(<span class=\"hljs-string\">'.foo'</span>).is(<span class=\"hljs-string\">':hidden'</span>)); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log($(<span class=\"hljs-string\">'.bar'</span>).is(<span class=\"hljs-string\">':hidden'</span>)); <span class=\"hljs-comment\">// false</span>\n</code></pre>\n    </div>",
          "vote": "109"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This may work:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>expect($(<span class=\"hljs-string\">\"#message_div\"</span>).css(<span class=\"hljs-string\">\"display\"</span>)).toBe(<span class=\"hljs-string\">\"none\"</span>);\n</code></pre>\n    </div>",
          "vote": "95"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Example: </p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-built_in\">document</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-string\">\"#checkme:hidden\"</span>).length) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Hidden'</span>);\n  }\n});</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"checkme\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"product\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:none\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"itemlist\"</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- Shows Results for Fish --&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span> Category:Fish\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>Product: Salmon Atlantic\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>Specie: Salmo salar\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span>&gt;</span>Form: Steaks\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif3\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "79"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To check if it is not visible I use <code>!</code>:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> ( !$(<span class=\"hljs-string\">'#book'</span>).is(<span class=\"hljs-string\">':visible'</span>)) {\n    alert(<span class=\"hljs-string\">'#book is not visible'</span>)\n}\n</code></pre>\n\n<p>Or the following is also the sam, saving the jQuery selector in a variable to have better performance when you need it multiple times:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> $book = $(<span class=\"hljs-string\">'#book'</span>)\n\n<span class=\"hljs-keyword\">if</span>(!$book.is(<span class=\"hljs-string\">':visible'</span>)) {\n    alert(<span class=\"hljs-string\">'#book is not visible'</span>)\n}\n</code></pre>\n    </div>",
          "vote": "71"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Use class toggling, not style editing . . .</h2>\n<p>Using classes designated for \"hiding\" elements is easy and also one of the most efficient methods. Toggling a class 'hidden' with a <code>Display</code> style of 'none' will perform faster than editing that style directly. I explained some of this pretty thoroughly in Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/17725361/turning-two-elements-visible-hidden-in-same-div/17726550#answer-17726550\">Turning two elements visible/hidden in the same div</a></em>.</p>\n<hr>\n<h2>JavaScript Best Practices and Optimization</h2>\n<p>Here is a truly enlightening video of a Google Tech Talk by Google front-end engineer Nicholas Zakas:</p>\n<ul>\n<li><strong><a href=\"http://www.youtube.com/watch?v=mHtdZgou0qU\" rel=\"noreferrer\">Speed Up Your Javascript</a></strong> (YouTube)</li>\n</ul>\n    </div>",
          "vote": "65"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Example of using the <strong>visible</strong> check for adblocker is activated:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-built_in\">document</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">if</span>(!$(<span class=\"hljs-string\">\"#ablockercheck\"</span>).is(<span class=\"hljs-string\">\":visible\"</span>))\n    $(<span class=\"hljs-string\">\"#ablockermsg\"</span>).text(<span class=\"hljs-string\">\"Please disable adblocker.\"</span>).show();\n});</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"ad-placement\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ablockercheck\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"ablockermsg\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display: none\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif4\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>\"ablockercheck\" is a ID which adblocker blocks. So checking it if it is visible you are able to detect if adblocker is turned On.</p>\n    </div>",
          "vote": "63"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>After all, none of examples suits me, so I wrote my own.</p>\n\n<p><strong>Tests</strong> (no support of Internet&nbsp;Explorer <code>filter:alpha</code>):</p>\n\n<p>a) Check if the document is not hidden</p>\n\n<p>b) Check if an element has zero width / height / opacity or <code>display:none</code> / <code>visibility:hidden</code> in inline styles</p>\n\n<p>c) Check if the center (also because it is faster than testing every pixel / corner) of element is not hidden by other element (and all ancestors, example: <code>overflow:hidden</code> / scroll / one element over another) or screen edges</p>\n\n<p>d) Check if an element has zero width / height / opacity or <code>display:none</code> / visibility:hidden in computed styles (among all ancestors)</p>\n\n<p><strong>Tested on</strong></p>\n\n<p>Android 4.4 (Native browser/Chrome/Firefox), Firefox (Windows/Mac), Chrome (Windows/Mac), Opera (Windows <a href=\"http://en.wikipedia.org/wiki/Presto_%28layout_engine%29\" rel=\"noreferrer\">Presto</a>/Mac WebKit), Internet&nbsp;Explorer (Internet&nbsp;Explorer 5-11 document modes + Internet&nbsp;Explorer 8 on a virtual machine), and Safari (Windows/Mac/iOS).</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> is_visible = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-built_in\">window</span>.pageXOffset ? <span class=\"hljs-built_in\">window</span>.pageXOffset + <span class=\"hljs-built_in\">window</span>.innerWidth - <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>,\n        y = <span class=\"hljs-built_in\">window</span>.pageYOffset ? <span class=\"hljs-built_in\">window</span>.pageYOffset + <span class=\"hljs-built_in\">window</span>.innerHeight - <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>,\n        relative = !!((!x &amp;&amp; !y) || !<span class=\"hljs-built_in\">document</span>.elementFromPoint(x, y));\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inside</span>(<span class=\"hljs-params\">child, parent</span>) </span>{\n            <span class=\"hljs-keyword\">while</span>(child){\n                <span class=\"hljs-keyword\">if</span> (child === parent) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n                child = child.parentNode;\n            }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    };\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">elem</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (\n            <span class=\"hljs-built_in\">document</span>.hidden ||\n            elem.offsetWidth==<span class=\"hljs-number\">0</span> ||\n            elem.offsetHeight==<span class=\"hljs-number\">0</span> ||\n            elem.style.visibility==<span class=\"hljs-string\">'hidden'</span> ||\n            elem.style.display==<span class=\"hljs-string\">'none'</span> ||\n            elem.style.opacity===<span class=\"hljs-number\">0</span>\n        ) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">var</span> rect = elem.getBoundingClientRect();\n        <span class=\"hljs-keyword\">if</span> (relative) {\n            <span class=\"hljs-keyword\">if</span> (!inside(<span class=\"hljs-built_in\">document</span>.elementFromPoint(rect.left + elem.offsetWidth/<span class=\"hljs-number\">2</span>, rect.top + elem.offsetHeight/<span class=\"hljs-number\">2</span>),elem)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (\n            !inside(<span class=\"hljs-built_in\">document</span>.elementFromPoint(rect.left + elem.offsetWidth/<span class=\"hljs-number\">2</span> + <span class=\"hljs-built_in\">window</span>.pageXOffset, rect.top + elem.offsetHeight/<span class=\"hljs-number\">2</span> + <span class=\"hljs-built_in\">window</span>.pageYOffset), elem) ||\n            (\n                rect.top + elem.offsetHeight/<span class=\"hljs-number\">2</span> &lt; <span class=\"hljs-number\">0</span> ||\n                rect.left + elem.offsetWidth/<span class=\"hljs-number\">2</span> &lt; <span class=\"hljs-number\">0</span> ||\n                rect.bottom - elem.offsetHeight/<span class=\"hljs-number\">2</span> &gt; (<span class=\"hljs-built_in\">window</span>.innerHeight || <span class=\"hljs-built_in\">document</span>.documentElement.clientHeight) ||\n                rect.right - elem.offsetWidth/<span class=\"hljs-number\">2</span> &gt; (<span class=\"hljs-built_in\">window</span>.innerWidth || <span class=\"hljs-built_in\">document</span>.documentElement.clientWidth)\n            )\n        ) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">window</span>.getComputedStyle || elem.currentStyle) {\n            <span class=\"hljs-keyword\">var</span> el = elem,\n                comp = <span class=\"hljs-literal\">null</span>;\n            <span class=\"hljs-keyword\">while</span> (el) {\n                <span class=\"hljs-keyword\">if</span> (el === <span class=\"hljs-built_in\">document</span>) {<span class=\"hljs-keyword\">break</span>;} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(!el.parentNode) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                comp = <span class=\"hljs-built_in\">window</span>.getComputedStyle ? <span class=\"hljs-built_in\">window</span>.getComputedStyle(el, <span class=\"hljs-literal\">null</span>) : el.currentStyle;\n                <span class=\"hljs-keyword\">if</span> (comp &amp;&amp; (comp.visibility==<span class=\"hljs-string\">'hidden'</span> || comp.display == <span class=\"hljs-string\">'none'</span> || (<span class=\"hljs-keyword\">typeof</span> comp.opacity !==<span class=\"hljs-string\">'undefined'</span> &amp;&amp; comp.opacity != <span class=\"hljs-number\">1</span>))) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                el = el.parentNode;\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }\n})();\n</code></pre>\n\n<p>How to use:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>is_visible(elem) <span class=\"hljs-comment\">// boolean</span>\n</code></pre>\n    </div>",
          "vote": "63"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You need to check both... Display as well as visibility:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">\"display\"</span>) == <span class=\"hljs-string\">\"none\"</span> || $(<span class=\"hljs-built_in\">this</span>).css(<span class=\"hljs-string\">\"visibility\"</span>) == <span class=\"hljs-string\">\"hidden\"</span>) {\n    <span class=\"hljs-comment\">// The element is not visible</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// The element is visible</span>\n}\n</code></pre>\n\n<p>If we check for <code>$(this).is(\":visible\")</code>, jQuery checks for both the things automatically.</p>\n    </div>",
          "vote": "55"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Maybe you can do something like this</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-built_in\">document</span>).ready(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n   <span class=\"hljs-keyword\">var</span> visible = $(<span class=\"hljs-string\">'#tElement'</span>).is(<span class=\"hljs-string\">':visible'</span>);\n\n   <span class=\"hljs-keyword\">if</span>(visible) {\n      alert(<span class=\"hljs-string\">\"visible\"</span>);\n                    <span class=\"hljs-comment\">// Code</span>\n   }\n   <span class=\"hljs-keyword\">else</span>\n   {\n      alert(<span class=\"hljs-string\">\"hidden\"</span>);\n   }\n});</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://code.jquery.com/jquery-1.10.2.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"tElement\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display:block;\"</span>&gt;</span>Firstname<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">input</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif5\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "45"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Simply check visibility by checking for a boolean value, like:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.hidden === <span class=\"hljs-literal\">false</span>) {\n    <span class=\"hljs-comment\">// Your code</span>\n}\n</code></pre>\n\n<p>I used this code for each function. Otherwise you can use <code>is(':visible')</code> for checking the visibility of an element.</p>\n    </div>",
          "vote": "41"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Because <code>Elements with visibility: hidden or opacity: 0 are considered visible, since they still consume space in the layout</code> (as described for <a href=\"https://api.jquery.com/visible-selector/\">jQuery :visible Selector</a>) - we can check if element is <em>really</em> visible in this way:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isElementReallyHidden</span> (<span class=\"hljs-params\">el</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> $(el).is(<span class=\"hljs-string\">\":hidden\"</span>) || $(el).css(<span class=\"hljs-string\">\"visibility\"</span>) == <span class=\"hljs-string\">\"hidden\"</span> || $(el).css(<span class=\"hljs-string\">'opacity'</span>) == <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-keyword\">var</span> booElementReallyShowed = !isElementReallyHidden(someEl);\n$(someEl).parents().each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (isElementReallyHidden(<span class=\"hljs-built_in\">this</span>)) {\n        booElementReallyShowed = <span class=\"hljs-literal\">false</span>;\n    }\n});\n</code></pre>\n    </div>",
          "vote": "39"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>But what if the element's CSS is like the following?</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>.element{\n    <span class=\"hljs-attr\">position</span>: absolute;left:-<span class=\"hljs-number\">9999</span>;    \n}\n</code></pre>\n\n<p>So <a href=\"https://stackoverflow.com/questions/8897289\">this answer to Stack Overflow question <em>How to check if an element is off-screen</em></a> should also be considered.</p>\n    </div>",
          "vote": "37"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A function can be created in order to check for visibility/display attributes in order to gauge whether the element is shown in the UI or not. </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">checkUIElementVisible</span>(<span class=\"hljs-params\">element</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> ((element.css(<span class=\"hljs-string\">'display'</span>) !== <span class=\"hljs-string\">'none'</span>) &amp;&amp; (element.css(<span class=\"hljs-string\">'visibility'</span>) !== <span class=\"hljs-string\">'hidden'</span>));\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/w8bytkqc/\" rel=\"noreferrer\">Working Fiddle</a></p>\n    </div>",
          "vote": "35"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Also here's a ternary conditional expression to check the state of the element and then to toggle it:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-string\">'someElement'</span>).on(<span class=\"hljs-string\">'click'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ $(<span class=\"hljs-string\">'elementToToggle'</span>).is(<span class=\"hljs-string\">':visible'</span>) ? $(<span class=\"hljs-string\">'elementToToggle'</span>).hide(<span class=\"hljs-string\">'slow'</span>) : $(<span class=\"hljs-string\">'elementToToggle'</span>).show(<span class=\"hljs-string\">'slow'</span>); });\n</code></pre>\n    </div>",
          "vote": "34"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span>($(<span class=\"hljs-string\">'#postcode_div'</span>).is(<span class=\"hljs-string\">':visible'</span>)) {\n    <span class=\"hljs-keyword\">if</span>($(<span class=\"hljs-string\">'#postcode_text'</span>).val()==<span class=\"hljs-string\">''</span>) {\n        $(<span class=\"hljs-string\">'#spanPost'</span>).text(<span class=\"hljs-string\">'\\u00a0'</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n        $(<span class=\"hljs-string\">'#spanPost'</span>).text($(<span class=\"hljs-string\">'#postcode_text'</span>).val());\n}\n</code></pre>\n    </div>",
          "vote": "33"
        }
      ]
    },
    {
      "question": "Why does HTML think “chucknorris” is a color?",
      "url": "https://stackoverflow.com/questions/8318911/why-does-html-think-chucknorris-is-a-color",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>How come certain random strings produce colors when entered as background colors in HTML? For example:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span> <span class=\"hljs-attr\">bgcolor</span>=<span class=\"hljs-string\">\"chucknorris\"</span>&gt;</span> test <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif1\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>...produces a document with a <strong>red background</strong> across all browsers and platforms.</p>\n<p>Interestingly, while <code>chucknorri</code> produces a red background as well, <code>chucknorr</code> produces a yellow background.</p>\n<p>What’s going on here?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It’s a holdover from the Netscape days:</p>\n<blockquote>\n<p>Missing digits are treated as 0[...]. An incorrect digit is simply interpreted as 0. For example the values #F0F0F0, F0F0F0, F0F0F, #FxFxFx and FxFxFx are all the same.</p>\n</blockquote>\n<p>It is from the blog post <em><a href=\"http://scrappy-do.blogspot.com/2004/08/little-rant-about-microsoft-internet.html\" rel=\"noreferrer\">A little rant about Microsoft Internet Explorer's color parsing</a></em> which covers it in great detail, including varying lengths of color values, etc.</p>\n<p>If we apply the rules in turn from the blog post, we get the following:</p>\n<ol>\n<li><p>Replace all nonvalid hexadecimal characters with 0’s:</p>\n<pre class=\"lang-html s-code-block hljs xml\"><code>chucknorris becomes c00c0000000\n</code></pre>\n</li>\n<li><p>Pad out to the next total number of characters divisible by&nbsp;3 (11&nbsp;→ 12):</p>\n<pre class=\"lang-html s-code-block hljs xml\"><code>c00c 0000 0000\n</code></pre>\n</li>\n<li><p>Split into three equal groups, with each component representing the corresponding colour component of an RGB colour:</p>\n<pre class=\"lang-html s-code-block hljs xml\"><code>RGB (c00c, 0000, 0000)\n</code></pre>\n</li>\n<li><p>Truncate each of the arguments from the right down to two characters.</p>\n</li>\n</ol>\n<p>Which, finally, gives the following result:</p>\n<pre class=\"lang-html s-code-block hljs xml\"><code>RGB (c0, 00, 00) = #C00000 or RGB(192, 0, 0)\n</code></pre>\n<p>Here’s an example demonstrating the <code>bgcolor</code> attribute in action, to produce this “amazing” colour swatch:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">bgcolor</span>=<span class=\"hljs-string\">\"chucknorris\"</span> <span class=\"hljs-attr\">cellpadding</span>=<span class=\"hljs-string\">\"8\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"100\"</span> <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">\"center\"</span>&gt;</span>chuck norris<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">bgcolor</span>=<span class=\"hljs-string\">\"mrt\"</span>         <span class=\"hljs-attr\">cellpadding</span>=<span class=\"hljs-string\">\"8\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"100\"</span> <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">\"center\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color:#ffffff\"</span>&gt;</span>Mr T<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">bgcolor</span>=<span class=\"hljs-string\">\"ninjaturtle\"</span> <span class=\"hljs-attr\">cellpadding</span>=<span class=\"hljs-string\">\"8\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"100\"</span> <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">\"center\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color:#ffffff\"</span>&gt;</span>ninjaturtle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">bgcolor</span>=<span class=\"hljs-string\">\"sick\"</span>  <span class=\"hljs-attr\">cellpadding</span>=<span class=\"hljs-string\">\"8\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"100\"</span> <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">\"center\"</span>&gt;</span>sick<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">bgcolor</span>=<span class=\"hljs-string\">\"crap\"</span>  <span class=\"hljs-attr\">cellpadding</span>=<span class=\"hljs-string\">\"8\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"100\"</span> <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">\"center\"</span>&gt;</span>crap<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">bgcolor</span>=<span class=\"hljs-string\">\"grass\"</span> <span class=\"hljs-attr\">cellpadding</span>=<span class=\"hljs-string\">\"8\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"100\"</span> <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">\"center\"</span>&gt;</span>grass<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif2\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>This also answers the other part of the question: Why does <code>bgcolor=\"chucknorr\"</code> produce a yellow colour? Well, if we apply the rules, the string is:</p>\n<pre class=\"lang-html s-code-block hljs xml\"><code>c00c00000 =&gt; c00 c00 000 =&gt; c0 c0 00 [RGB(192, 192, 0)]\n</code></pre>\n<p>Which gives a light yellow gold colour. As the string starts off as 9&nbsp;characters, we keep the second&nbsp;‘C’ this time around, hence it ends up in the final colour value.</p>\n<p>I originally encountered this when someone pointed out that you could do <code>color=\"crap\"</code> and, well, it comes out brown.</p>\n    </div>",
          "vote": "7456"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm sorry to disagree, but according to the rules for parsing a legacy color value posted by <a href=\"https://stackoverflow.com/a/12630675/282110\">@Yuhong Bao</a>, <code>chucknorris</code> DOES NOT equate to <code>#CC0000</code>, but rather to <code>#C00000</code>, a very similar but slightly different hue of red. I used the <a href=\"https://addons.mozilla.org/en-us/firefox/addon/colorzilla/\" rel=\"noreferrer\">Firefox ColorZilla add-on</a> to verify this.</p>\n\n<p>The rules state:  </p>\n\n<ul>\n<li>make the string a length that is a multiple of 3 by adding 0s: <code>chucknorris0</code></li>\n<li>separate the string into 3 equal length strings: <code>chuc knor ris0</code></li>\n<li>truncate each string to 2 characters: <code>ch kn ri</code></li>\n<li>keep the hex values, and add 0's where necessary: <code>C0 00 00</code></li>\n</ul>\n\n<p>I was able to use these rules to correctly interpret the following strings:</p>\n\n<ul>\n<li><code>LuckyCharms</code></li>\n<li><code>Luck</code></li>\n<li><code>LuckBeALady</code></li>\n<li><code>LuckBeALadyTonight</code></li>\n<li><code>GangnamStyle</code> </li>\n</ul>\n\n<hr>\n\n<p>UPDATE: <em>The original answerers who said the color was <code>#CC0000</code> have since edited their answers to include the correction.</em></p>\n    </div>",
          "vote": "1058"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Most browsers will simply ignore any NON-hex values in your color string, substituting non-hex digits with zeros.</p>\n\n<p><code>ChuCknorris</code> translates to <code>c00c0000000</code>.  At this point, the browser will divide the string into three equal sections, indicating <em>Red</em>, <em>Green</em> and <em>Blue</em> values: <code>c00c 0000 0000</code>.  Extra bits in each section will be ignored, which makes the final result <code>#c00000</code> which is a reddish color.</p>\n\n<p>Note, this does <em>not</em> apply to CSS color parsing, which follow the CSS standard.</p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">font</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">'chucknorris'</span>&gt;</span>Redish<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">font</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">font</span> <span class=\"hljs-attr\">color</span>=<span class=\"hljs-string\">'#c00000'</span>&gt;</span>Same as above<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">font</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: chucknorris\"</span>&gt;</span>Black<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif3\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "418"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The reason is the browser can <strong>not understand</strong> it and try to somehow translate it to what it can understand and in this case into a hexadecimal value!...</p>\n\n<p><code>chucknorris</code> starts with <code>c</code> which is recognised character in hexadecimal, also it's converting all unrecognised characters into <code>0</code>!</p>\n\n<p>So <code>chucknorris</code> in hexadecimal format becomes: <code>c00c00000000</code>, all other characters become <code>0</code> and <code>c</code> remains where they are...</p>\n\n<p>Now they get divided by 3 for <code>RGB</code>(red, green, blue)... <code>R: c00c, G: 0000, B:0000</code>...</p>\n\n<p>But we know valid hexadecimal for RGB is just 2 characters, means <code>R: c0, G: 00, B:00</code></p>\n\n<p>So the real result is:</p>\n\n<pre class=\"lang-html s-code-block hljs xml\"><code>bgcolor=\"#c00000\";\n</code></pre>\n\n<p>I also added the steps in the image as a quick reference for you:</p>\n\n<p><a href=\"https://i.stack.imgur.com/sc8bX.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/sc8bX.jpg\" alt=\"Why does HTML think “chucknorris” is a colour?\"></a></p>\n    </div>",
          "vote": "402"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The browser is trying to convert <code>chucknorris</code> into hex colour code, because it’s not a valid value.</p>\n<ol>\n<li>In <code>chucknorris</code>, everything except <strong><code>c</code></strong> is not a valid hex value.</li>\n<li>So it gets converted to <strong><code>c00c00000000</code></strong>.</li>\n<li>Which becomes <strong>#c00000</strong>, a shade of red.</li>\n</ol>\n<p>This seems to be an issue primarily with <strong>Internet&nbsp;Explorer</strong> and <strong>Opera</strong>&nbsp;(12) as both Chrome&nbsp;(31) and Firefox&nbsp;(26) just ignore this.</p>\n<p><em>P.S. The numbers in brackets are the browser versions I tested on.</em></p>\n<p>On a lighter note</p>\n<blockquote>\n<p>Chuck Norris doesn’t conform to web standards. Web standards conform\nto him. #BADA55</p>\n</blockquote>\n    </div>",
          "vote": "328"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The WHATWG HTML spec has the exact algorithm for parsing a legacy color value:\n<a href=\"https://html.spec.whatwg.org/multipage/infrastructure.html#rules-for-parsing-a-legacy-colour-value\" rel=\"noreferrer\">https://html.spec.whatwg.org/multipage/infrastructure.html#rules-for-parsing-a-legacy-colour-value</a>.</p>\n<p>The code Netscape Classic used for parsing color strings is open source:\n<a href=\"https://dxr.mozilla.org/classic/source/lib/layout/layimage.c#155\" rel=\"noreferrer\">https://dxr.mozilla.org/classic/source/lib/layout/layimage.c#155</a>.</p>\n<p>For example, notice that each character is parsed as a hex digit and then is shifted into a 32-bit integer <strong>without checking for overflow</strong>. Only eight hex digits fit into a 32-bit integer, which is why only the last 8 characters are considered. After parsing the hex digits into 32-bit integers, they are then truncated into 8-bit integers by dividing them by 16 until they fit into 8-bit, which is why leading zeros are ignored.</p>\n<p><strong>Update:</strong> This code does not exactly match what is defined in the spec, but the only difference there is a few lines of code. I think it is <a href=\"https://dxr.mozilla.org/classic/source/lib/layout/layimage.c#210\" rel=\"noreferrer\">these lines</a> that was added (in Netscape 4):</p>\n<pre class=\"lang-html s-code-block hljs xml\"><code>if (bytes_per_val &gt; 4)\n{\n    bytes_per_val = 4;\n}\n</code></pre>\n    </div>",
          "vote": "234"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Answer:</strong> </p>\n\n<ul>\n<li>The browser will try to convert <strong>chucknorris</strong> into a hexadecimal value. </li>\n<li>Since <code>c</code> is the only valid hex character in <strong>chucknorris</strong>, the value turns into: <code>c00c00000000</code>(<strong>0 for all values that were invalid</strong>). </li>\n<li>The browser then divides the result into 3 groupds: <code>Red = c00c</code>, <code>Green = 0000</code>, <code>Blue = 0000</code>.</li>\n<li>Since valid hex values for html backgrounds only contain 2 digits for each color type (<strong>r</strong>, <strong>g</strong>, <strong>b</strong>), the last 2 digits are truncated from each group, leaving an rgb value of <code>c00000</code> which is a brick-reddish toned color.</li>\n</ul>\n    </div>",
          "vote": "211"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong><code>chucknorris</code></strong> starts with <strong><code>c</code></strong>, and the browser reads it into a hexadecimal value.</p>\n<blockquote>\n<p>Because A, B, C, D, E, and F are <a href=\"https://en.wikipedia.org/wiki/Hexadecimal\" rel=\"noreferrer\">characters in hexadecimal</a>.</p>\n</blockquote>\n<p>The browser converts <code>chucknorris</code> to a hexadecimal value, <code>C00C00000000</code>.</p>\n<p>Then the <code>C00C00000000</code> hexadecimal value is converted to <strong>RGB</strong> format (divided by 3):</p>\n<blockquote>\n<p><code>C00C00000000</code>&nbsp;⇒ <code>R:C00C, G:0000, B:0000</code></p>\n</blockquote>\n<p>The browser needs only two digits to indicate the colour:</p>\n<blockquote>\n<p><code>R:C00C, G:0000, B:0000</code>&nbsp;⇒ <code>R:C0, G:00, B:00</code>&nbsp;⇒ <code>C00000</code></p>\n</blockquote>\n<p>Finally, show <code>bgcolor = C00000</code> in the web browser.</p>\n<p>Here's an example demonstrating it:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">bgcolor</span>=<span class=\"hljs-string\">\"chucknorris\"</span> <span class=\"hljs-attr\">cellpadding</span>=<span class=\"hljs-string\">\"10\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"150\"</span> <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">\"center\"</span>&gt;</span>chucknorris<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">bgcolor</span>=<span class=\"hljs-string\">\"c00c00000000\"</span> <span class=\"hljs-attr\">cellpadding</span>=<span class=\"hljs-string\">\"10\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"150\"</span> <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">\"center\"</span>&gt;</span>c00c00000000<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span> <span class=\"hljs-attr\">bgcolor</span>=<span class=\"hljs-string\">\"c00000\"</span> <span class=\"hljs-attr\">cellpadding</span>=<span class=\"hljs-string\">\"10\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">\"150\"</span> <span class=\"hljs-attr\">align</span>=<span class=\"hljs-string\">\"center\"</span>&gt;</span>c00000<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif4\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "35"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <a href=\"https://www.w3.org/TR/html5/infrastructure.html#rules-for-parsing-a-legacy-color-value\" rel=\"noreferrer\">rules for parsing colors on legacy attributes</a> involves additional steps than those mentioned in existing answers. The truncate component to 2 digits part is described as:</p>\n\n<ol>\n<li>Discard all characters except the last 8</li>\n<li>Discard leading zeros one by one <strong>as long as all components have a leading zero</strong></li>\n<li>Discard all characters except the first 2</li>\n</ol>\n\n<p>Some examples:</p>\n\n<pre class=\"lang-none s-code-block\"><code>oooFoooFoooF\n000F 000F 000F                &lt;- replace, pad and chunk\n0F 0F 0F                      &lt;- leading zeros truncated\n0F 0F 0F                      &lt;- truncated to 2 characters from right\n\noooFooFFoFFF\n000F 00FF 0FFF                &lt;- replace, pad and chunk\n00F 0FF FFF                   &lt;- leading zeros truncated\n00 0F FF                      &lt;- truncated to 2 characters from right\n\nABCooooooABCooooooABCoooooo\nABC000000 ABC000000 ABC000000 &lt;- replace, pad and chunk\nBC000000 BC000000 BC000000    &lt;- truncated to 8 characters from left\nBC BC BC                      &lt;- truncated to 2 characters from right\n\nAoCooooooAoCooooooAoCoooooo\nA0C000000 A0C000000 A0C000000 &lt;- replace, pad and chunk\n0C000000 0C000000 0C000000    &lt;- truncated to 8 characters from left\nC000000 C000000 C000000       &lt;- leading zeros truncated\nC0 C0 C0                      &lt;- truncated to 2 characters from right\n</code></pre>\n\n<p>Below is a partial implementation of the algorithm. It does not handle errors or cases where the user enters a valid color.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\"><div class=\"snippet-display\" style=\"vertical-align: center\"><p><a class=\"snippet-show-link-chevron\"><span class=\"expander-arrow-hide\" style=\"vertical-align: middle;\"></span></a><a class=\"snippet-show-link\"><span class=\"show-hide\" data-ishidden=\"true\" style=\"vertical-align: middle\">Show code snippet</span></a></p></div>\n<div class=\"snippet-code snippet-currently-hidden\" style=\"display: none;\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parseColor</span>(<span class=\"hljs-params\">input</span>) </span>{\n  <span class=\"hljs-comment\">// todo: return error if input is \"\"</span>\n  input = input.trim();\n  <span class=\"hljs-comment\">// todo: return error if input is \"transparent\"</span>\n  <span class=\"hljs-comment\">// todo: return corresponding #rrggbb if input is a named color</span>\n  <span class=\"hljs-comment\">// todo: return #rrggbb if input matches #rgb</span>\n  <span class=\"hljs-comment\">// todo: replace unicode code points greater than U+FFFF with 00</span>\n  <span class=\"hljs-keyword\">if</span> (input.length &gt; <span class=\"hljs-number\">128</span>) {\n    input = input.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">128</span>);\n  }\n  <span class=\"hljs-keyword\">if</span> (input.charAt(<span class=\"hljs-number\">0</span>) === <span class=\"hljs-string\">\"#\"</span>) {\n    input = input.slice(<span class=\"hljs-number\">1</span>);\n  }\n  input = input.replace(<span class=\"hljs-regexp\">/[^0-9A-Fa-f]/g</span>, <span class=\"hljs-string\">\"0\"</span>);\n  <span class=\"hljs-keyword\">while</span> (input.length === <span class=\"hljs-number\">0</span> || input.length % <span class=\"hljs-number\">3</span> &gt; <span class=\"hljs-number\">0</span>) {\n    input += <span class=\"hljs-string\">\"0\"</span>;\n  }\n  <span class=\"hljs-keyword\">var</span> r = input.slice(<span class=\"hljs-number\">0</span>, input.length / <span class=\"hljs-number\">3</span>);\n  <span class=\"hljs-keyword\">var</span> g = input.slice(input.length / <span class=\"hljs-number\">3</span>, input.length * <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span>);\n  <span class=\"hljs-keyword\">var</span> b = input.slice(input.length * <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span>);\n  <span class=\"hljs-keyword\">if</span> (r.length &gt; <span class=\"hljs-number\">8</span>) {\n    r = r.slice(-<span class=\"hljs-number\">8</span>);\n    g = g.slice(-<span class=\"hljs-number\">8</span>);\n    b = b.slice(-<span class=\"hljs-number\">8</span>);\n  }\n  <span class=\"hljs-keyword\">while</span> (r.length &gt; <span class=\"hljs-number\">2</span> &amp;&amp; r.charAt(<span class=\"hljs-number\">0</span>) === <span class=\"hljs-string\">\"0\"</span> &amp;&amp; g.charAt(<span class=\"hljs-number\">0</span>) === <span class=\"hljs-string\">\"0\"</span> &amp;&amp; b.charAt(<span class=\"hljs-number\">0</span>) === <span class=\"hljs-string\">\"0\"</span>) {\n    r = r.slice(<span class=\"hljs-number\">1</span>);\n    g = g.slice(<span class=\"hljs-number\">1</span>);\n    b = b.slice(<span class=\"hljs-number\">1</span>);\n  }\n  <span class=\"hljs-keyword\">if</span> (r.length &gt; <span class=\"hljs-number\">2</span>) {\n    r = r.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\n    g = g.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\n    b = b.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>);\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"#\"</span> + r.padStart(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"0\"</span>) + g.padStart(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"0\"</span>) + b.padStart(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">\"0\"</span>);\n}\n\n$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  $(<span class=\"hljs-string\">\"#input\"</span>).on(<span class=\"hljs-string\">\"change\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> input = $(<span class=\"hljs-built_in\">this</span>).val();\n    <span class=\"hljs-keyword\">var</span> color = parseColor(input);\n    <span class=\"hljs-keyword\">var</span> $cells = $(<span class=\"hljs-string\">\"#result tbody td\"</span>);\n    $cells.eq(<span class=\"hljs-number\">0</span>).attr(<span class=\"hljs-string\">\"bgcolor\"</span>, input);\n    $cells.eq(<span class=\"hljs-number\">1</span>).attr(<span class=\"hljs-string\">\"bgcolor\"</span>, color);\n\n    <span class=\"hljs-keyword\">var</span> color1 = $cells.eq(<span class=\"hljs-number\">0</span>).css(<span class=\"hljs-string\">\"background-color\"</span>);\n    <span class=\"hljs-keyword\">var</span> color2 = $cells.eq(<span class=\"hljs-number\">1</span>).css(<span class=\"hljs-string\">\"background-color\"</span>);\n    $cells.eq(<span class=\"hljs-number\">2</span>).empty().append(<span class=\"hljs-string\">\"bgcolor: \"</span> + input, <span class=\"hljs-string\">\"&lt;br&gt;\"</span>, <span class=\"hljs-string\">\"getComputedStyle: \"</span> + color1);\n    $cells.eq(<span class=\"hljs-number\">3</span>).empty().append(<span class=\"hljs-string\">\"bgcolor: \"</span> + color, <span class=\"hljs-string\">\"&lt;br&gt;\"</span>, <span class=\"hljs-string\">\"getComputedStyle: \"</span> + color2);\n  });\n});</code></pre>\n<pre class=\"snippet-code-css lang-css s-code-block hljs\"><code><span class=\"hljs-selector-tag\">body</span> { <span class=\"hljs-attribute\">font</span>: medium monospace; }\n<span class=\"hljs-selector-tag\">input</span> { <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">20em</span>; }\n<span class=\"hljs-selector-tag\">table</span> { <span class=\"hljs-attribute\">table-layout</span>: fixed; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>; }</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"input\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"Enter color e.g. chucknorris\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"result\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">thead</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Left Color<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">th</span>&gt;</span>Right Color<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">th</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">thead</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tbody</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-symbol\">&amp;nbsp;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-symbol\">&amp;nbsp;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tr</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-symbol\">&amp;nbsp;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">td</span>&gt;</span><span class=\"hljs-symbol\">&amp;nbsp;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">td</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tr</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">tbody</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">table</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif5\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "25"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just stumbled across this.  This is a very interesting feature of HTML, let me share my thoughts, and you can <strong>comment</strong> if I'm right or wrong - it will help me to learn more.</p>\n<p>While parsing colors, <strong>invalid digits are considered as 0</strong>. So,</p>\n<p>chucknorris =&gt; c00c0000000</p>\n<p>This is divided to 3 parts (r, g, b). So,</p>\n<pre class=\"lang-html s-code-block hljs xml\"><code>chucknorris =&gt; c00c 0000 000\n</code></pre>\n<p>Only the first two digits are considered. So,</p>\n<pre class=\"lang-html s-code-block hljs xml\"><code>chucknorris =&gt; c0 00 00\n</code></pre>\n<p>And, <code>RGB(c0, 00, 00) is RED.</code></p>\n<p>I think you can get why <strong>chucknorr =&gt; yellow</strong> now.</p>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "How do I force “git pull” to overwrite local files?",
      "url": "https://stackoverflow.com/questions/1125968/how-do-i-force-git-pull-to-overwrite-local-files",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>How do I force an overwrite of local files on a <code>git pull</code>?</p>\n\n<p><strong>The scenario is the following:</strong></p>\n\n<ul>\n<li>A team member is modifying the templates for a website we are working on</li>\n<li>They are adding some images to the images directory (but forgets to add them under source control)</li>\n<li>They are sending the images by mail, later, to me</li>\n<li>I'm adding the images under the source control and pushing them to GitHub together with other changes</li>\n<li>They cannot pull updates from GitHub because Git doesn't want to overwrite their files.</li>\n</ul>\n\n<p><strong>This is the error I'm getting:</strong></p>\n\n<blockquote>\n  <p>error: Untracked working tree file 'public/images/icon.gif' would be overwritten by merge</p>\n</blockquote>\n\n<p>How do I force Git to overwrite them? The person is a designer - usually, I resolve all the conflicts by hand, so the server has the most recent version that they just need to update on their computer.</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>⚠ Important: If you have any local changes, they will be lost. With or without <code>--hard</code> option, any local commits that haven't been pushed will be lost.<sup>[*]</sup></h2>\n<p>If you have any files that are <em>not</em> tracked by Git (e.g. uploaded user content), these files will not be affected.</p>\n<hr>\n<p>First, run a fetch to update all <code>origin/&lt;branch&gt;</code> refs to latest:</p>\n<pre><code>git fetch --all\n</code></pre>\n<p>Backup your current branch:</p>\n<pre><code>git branch backup-master\n</code></pre>\n<p>Then, you have two options:</p>\n<pre><code>git reset --hard origin/master\n</code></pre>\n<p>OR If you are on some other branch:</p>\n<pre><code>git reset --hard origin/&lt;branch_name&gt;\n</code></pre>\n<h3>Explanation:</h3>\n<p><code>git fetch</code> downloads the latest from remote without trying to merge or rebase anything.</p>\n<p>Then the <code>git reset</code> resets the master branch to what you just fetched. The <code>--hard</code> option changes all the files in your working tree to match the files in <code>origin/master</code></p>\n<hr>\n<h3>Maintain current local commits</h3>\n<p><sup>[*]</sup>: It's worth noting that it is possible to maintain current local commits by creating a branch from <code>master</code> before resetting:</p>\n<pre><code>git checkout master\ngit branch new-branch-to-save-current-commits\ngit fetch --all\ngit reset --hard origin/master\n</code></pre>\n<p>After this, all of the old commits will be kept in <code>new-branch-to-save-current-commits</code>.</p>\n<h3>Uncommitted changes</h3>\n<p>Uncommitted changes, however (even staged), will be lost. Make sure to stash and commit anything you need. For that you can run the following:</p>\n<pre><code>git stash\n</code></pre>\n<p>And then to reapply these uncommitted changes:</p>\n<pre><code>git stash pop\n</code></pre>\n    </div>",
          "vote": "11119"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try this:</p>\n\n<pre><code>git reset --hard HEAD\ngit pull\n</code></pre>\n\n<p>It should do what you want.</p>\n    </div>",
          "vote": "1035"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>WARNING: <code>git clean</code> deletes all your untracked files/directories and can't be undone.</strong></p>\n\n<hr>\n\n<p>Sometimes just <code>clean -f</code> does not help. In case you have untracked DIRECTORIES, -d option also needed:</p>\n\n<pre><code># WARNING: this can't be undone!\n\ngit reset --hard HEAD\ngit clean -f -d\ngit pull\n</code></pre>\n\n<p><strong>WARNING: <code>git clean</code> deletes all your untracked files/directories and can't be undone.</strong></p>\n\n<p>Consider using <code>-n</code> (<code>--dry-run</code>) flag first. This will show you what will be deleted without actually deleting anything:</p>\n\n<pre><code>git clean -n -f -d\n</code></pre>\n\n<p>Example output:</p>\n\n<pre><code>Would remove untracked-file-1.txt\nWould remove untracked-file-2.txt\nWould remove untracked/folder\n...\n</code></pre>\n    </div>",
          "vote": "500"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Like Hedgehog I think the answers are terrible. But though Hedgehog's answer might be better, I don't think it is as elegant as it could be.  The way I found to do this is by using <code>fetch</code> and <code>merge</code> with a defined strategy. Which should make it so that your local changes are preserved as long as they are not one of the files that you are trying to force an overwrite with.</p>\n<h3>First do a commit of your changes</h3>\n<pre><code> git add *\n git commit -a -m \"local file server commit message\"\n</code></pre>\n<h3>Then fetch the changes and overwrite if there is a conflict</h3>\n<pre><code> git fetch origin master\n git merge -s recursive -X theirs origin/master\n</code></pre>\n<p><code>-X</code> is an option name, and <code>theirs</code> is the value for that option. You're choosing to use <code>their</code> changes (the other option is <code>ours</code> changes) if there is a conflict.</p>\n    </div>",
          "vote": "418"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Instead of doing:</p>\n\n<pre><code>git fetch --all\ngit reset --hard origin/master\n</code></pre>\n\n<p>I'd advise doing the following:</p>\n\n<pre><code>git fetch origin master\ngit reset --hard origin/master\n</code></pre>\n\n<p>No need to fetch all remotes and branches if you're going to reset to the origin/master branch right?</p>\n    </div>",
          "vote": "309"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It looks like the best way is to first do:</p>\n\n<pre><code>git clean\n</code></pre>\n\n<p>To delete all untracked files and then continue with the usual <code>git pull</code>...</p>\n    </div>",
          "vote": "141"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://blog.icefusion.co.uk/git-stash-can-delete-ignored-files-git-stash-u/\" rel=\"noreferrer\"><strong>Warning, doing this will permanently delete your files if you have any directory/* entries in your gitignore file.</strong></a></p>\n\n<p>Some answers seem to be terrible. Terrible in the sense of what happened to @Lauri by following David Avsajanishvili suggestion.</p>\n\n<p>Rather (git &gt; v1.7.6):</p>\n\n<pre><code>git stash --include-untracked\ngit pull\n</code></pre>\n\n<p>Later you can clean the stash history.</p>\n\n<p>Manually, one-by-one:</p>\n\n<pre><code>$ git stash list\nstash@{0}: WIP on &lt;branch&gt;: ...\nstash@{1}: WIP on &lt;branch&gt;: ...\n\n$ git stash drop stash@{0}\n$ git stash drop stash@{1}\n</code></pre>\n\n<p>Brutally, all-at-once:</p>\n\n<pre><code>$ git stash clear\n</code></pre>\n\n<p>Of course if you want to go back to what you stashed:</p>\n\n<pre><code>$ git stash list\n...\n$ git stash apply stash@{5}\n</code></pre>\n    </div>",
          "vote": "116"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You might find this command helpful to throw away local changes:</p>\n\n<pre><code>git checkout &lt;your-branch&gt; -f\n</code></pre>\n\n<p>And then do a cleanup (removes untracked files from the working tree):</p>\n\n<pre><code>git clean -f\n</code></pre>\n\n<p>If you want to remove untracked directories in addition to untracked files:</p>\n\n<pre><code>git clean -fd\n</code></pre>\n    </div>",
          "vote": "98"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Instead of merging with <code>git pull</code>, try this:  </p>\n\n<p><code>git fetch --all</code></p>\n\n<p>followed by:</p>\n\n<p><code>git reset --hard origin/master</code>.</p>\n    </div>",
          "vote": "95"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The only thing that worked for me was:</p>\n\n<pre><code>git reset --hard HEAD~5\n</code></pre>\n\n<p>This will take you back five commits and then with</p>\n\n<pre><code>git pull\n</code></pre>\n\n<p>I found that by looking up <a href=\"https://stackoverflow.com/questions/2389361/git-undo-a-merge\">how to undo a Git merge</a>.</p>\n    </div>",
          "vote": "65"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The problem with all these solutions is that they are all either too complex, or, an even bigger problem, is that they remove all untracked files from the web server, which we don't want since there are always needed configuration files which are on the server and not in the Git repository.</p>\n\n<p>Here is the cleanest solution which we are using:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code><span class=\"hljs-comment\"># Fetch the newest code</span>\ngit fetch\n\n<span class=\"hljs-comment\"># Delete all files which are being added, so there</span>\n<span class=\"hljs-comment\"># are no conflicts with untracked files</span>\n<span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> `git diff HEAD..origin/master --name-status | awk <span class=\"hljs-string\">'/^A/ {print $2}'</span>`\n<span class=\"hljs-keyword\">do</span>\n    rm -f -- <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$file</span>\"</span>\n<span class=\"hljs-keyword\">done</span>\n\n<span class=\"hljs-comment\"># Checkout all files which were locally modified</span>\n<span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> `git diff --name-status | awk <span class=\"hljs-string\">'/^[CDMRTUX]/ {print $2}'</span>`\n<span class=\"hljs-keyword\">do</span>\n    git checkout -- <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$file</span>\"</span>\n<span class=\"hljs-keyword\">done</span>\n\n<span class=\"hljs-comment\"># Finally pull all the changes</span>\n<span class=\"hljs-comment\"># (you could merge as well e.g. 'merge origin/master')</span>\ngit pull\n</code></pre>\n\n<ul>\n<li><p>The first command fetches newest data.</p></li>\n<li><p>The second command checks if there are any files which are being added to the repository and deletes those untracked files from the local repository which would cause conflicts.</p></li>\n<li><p>The third command checks-out all the files which were locally modified.</p></li>\n<li><p>Finally we do a pull to update to the newest version, but this time without any conflicts, since untracked files which are in the repo don't exist anymore and all the locally modified files are already the same as in the repository.</p></li>\n</ul>\n    </div>",
          "vote": "60"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First of all, try the standard way:</p>\n\n<pre><code>git reset HEAD --hard # To remove all not committed changes!\ngit clean -fd         # To remove all untracked (non-git) files and folders!\n</code></pre>\n\n<p><sup><strong>Warning</strong>: Above commands can results in data/files loss only if you don't have them committed! If you're not sure, make the backup first of your whole repository folder.</sup></p>\n\n<p>Then pull it again.</p>\n\n<p>If above won't help and you don't care about your untracked files/directories (make the backup first just in case), try the following simple steps:</p>\n\n<pre><code>cd your_git_repo  # where 'your_git_repo' is your git repository folder\nrm -rfv *         # WARNING: only run inside your git repository!\ngit pull          # pull the sources again\n</code></pre>\n\n<p>This will REMOVE all git files (excempt <code>.git/</code> dir, where you have all commits) and pull it again.</p>\n\n<hr>\n\n<p>Why <code>git reset HEAD --hard</code> could fail in some cases?</p>\n\n<ol>\n<li><p>Custom rules in <code>.gitattributes file</code></p>\n\n<p>Having <code>eol=lf</code> rule in .gitattributes could cause git to modify some file changes by converting CRLF line-endings into LF in some text files.</p>\n\n<p>If that's the case, you've to commit these CRLF/LF changes (by reviewing them in <code>git status</code>), or try: <code>git config core.autcrlf false</code> to temporary ignore them.</p></li>\n<li><p>File system incompability</p>\n\n<p>When you're using file-system which doesn't support permission attributes.\nIn example you have two repositories, one on Linux/Mac (<code>ext3</code>/<code>hfs+</code>) and another one on FAT32/NTFS based file-system.</p>\n\n<p>As you notice, there are two different kind of file systems, so the one which doesn't support Unix permissions basically can't reset file permissions on system which doesn't support that kind of permissions, so no matter how <code>--hard</code> you try, git always detect some \"changes\".</p></li>\n</ol>\n    </div>",
          "vote": "60"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I had the same problem. No one gave me this solution, but it worked for me.</p>\n\n<p>I solved it by:</p>\n\n<ol>\n<li>Delete all the files. Leave just the <code>.git</code> directory.</li>\n<li><code>git reset --hard HEAD</code></li>\n<li><code>git pull</code></li>\n<li><code>git push</code></li>\n</ol>\n\n<p>Now it works.</p>\n    </div>",
          "vote": "52"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h3>Bonus:</h3>\n<p>In speaking of pull/fetch/merge in the previous answers, I would like to share an interesting and productive trick,</p>\n<h1><strong><code>git pull --rebase</code></strong></h1>\n<p>This above command is the most useful command in my Git life which saved a lot of time.</p>\n<p>Before pushing your newly commit to server, try this command and it will automatically synchronise the latest server changes (with a fetch + merge) and will place your commit at the top in the Git log. There isn't any need to worry about manual pull/merge.</p>\n<p>Find details in <em><a href=\"http://gitolite.com/git-pull--rebase\" rel=\"noreferrer\">What does \"git pull --rebase\" do?</a></em>.</p>\n    </div>",
          "vote": "49"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I had a similar problem.  I had to do this:</p>\n\n<pre><code>git reset --hard HEAD\ngit clean -f\ngit pull\n</code></pre>\n    </div>",
          "vote": "32"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I summarized other answers. You can execute <code>git pull</code> without errors:</p>\n\n<pre><code>git fetch --all\ngit reset --hard origin/master\ngit reset --hard HEAD\ngit clean -f -d\ngit pull\n</code></pre>\n\n<p><strong>Warning</strong>: This script is very powerful, so you could lose your changes.</p>\n    </div>",
          "vote": "32"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Based on my own similar experiences, the solution offered by Strahinja Kustudic above is by far the best.  As others have pointed out, simply doing hard reset will remove <strong>all</strong> the untracked files which could include lots of things that you don't want removed, such as config files.  What is safer, is to remove only the files that are about to be added, and for that matter, you'd likely also want to checkout any locally-modified files that are about to be updated.</p>\n\n<p>That in mind, I updated Kustudic's script to do just that.  I also fixed a typo (a missing ' in the original).</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code><span class=\"hljs-comment\">#/bin/sh</span>\n\n<span class=\"hljs-comment\"># Fetch the newest code</span>\ngit fetch\n\n<span class=\"hljs-comment\"># Delete all files which are being added,</span>\n<span class=\"hljs-comment\"># so there are no conflicts with untracked files</span>\n<span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> `git diff HEAD..origin/master --name-status | awk <span class=\"hljs-string\">'/^A/ {print $2}'</span>`\n<span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Deleting untracked file <span class=\"hljs-variable\">$file</span>...\"</span>\n    rm -vf <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$file</span>\"</span>\n<span class=\"hljs-keyword\">done</span>\n\n<span class=\"hljs-comment\"># Checkout all files which have been locally modified</span>\n<span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> `git diff HEAD..origin/master --name-status | awk <span class=\"hljs-string\">'/^M/ {print $2}'</span>`\n<span class=\"hljs-keyword\">do</span>\n    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Checking out modified file <span class=\"hljs-variable\">$file</span>...\"</span>\n    git checkout <span class=\"hljs-variable\">$file</span>\n<span class=\"hljs-keyword\">done</span>\n\n<span class=\"hljs-comment\"># Finally merge all the changes (you could use merge here as well)</span>\ngit pull\n</code></pre>\n    </div>",
          "vote": "30"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I believe there are two possible causes of conflict, which must be solved separately, and as far as I can tell none of the above answers deals with both:</p>\n\n<ul>\n<li><p>Local files that are untracked need to be deleted, either manually (safer) or as suggested in other answers, by <code>git clean -f -d</code></p></li>\n<li><p>Local commits that are not on the remote branch need to be deleted as well. IMO the easiest way to achieve this is with: <code>git reset --hard origin/master</code> (replace 'master' by whatever branch you are working on, and run a <code>git fetch origin</code> first)</p></li>\n</ul>\n    </div>",
          "vote": "25"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An easier way would be to:</p>\n\n<pre><code>git checkout --theirs /path/to/file.extension\ngit pull origin master\n</code></pre>\n\n<p>This will override your local file with the file on git</p>\n    </div>",
          "vote": "22"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>git fetch --all &amp;&amp; git reset --hard origin/master &amp;&amp; git pull</code></p>\n    </div>",
          "vote": "22"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It seems like most answers here are focused on the <code>master</code> branch; however, there are times when I'm working on the same feature branch in two different places and I want a rebase in one to be reflected in the other without a lot of jumping through hoops.</p>\n\n<p>Based on a combination of <a href=\"https://stackoverflow.com/a/8888015/1103543\">RNA's answer</a> and <a href=\"https://stackoverflow.com/a/19961461/1103543\">torek's answer to a similar question</a>, I've come up with this which works splendidly:</p>\n\n<pre><code>git fetch\ngit reset --hard @{u}\n</code></pre>\n\n<p>Run this from a branch and it'll only reset your local branch to the upstream version.</p>\n\n<p>This can be nicely put into a git alias (<code>git forcepull</code>) as well:</p>\n\n<p><code>git config alias.forcepull \"!git fetch ; git reset --hard @{u}\"</code></p>\n\n<p>Or, in your <code>.gitconfig</code> file:</p>\n\n<pre><code>[alias]\n  forcepull = \"!git fetch ; git reset --hard @{u}\"\n</code></pre>\n\n<p>Enjoy!</p>\n    </div>",
          "vote": "21"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I had the same problem and for some reason, even a <code>git clean -f -d</code> would not do it. Here is why: For some reason, if your file is ignored by Git (via a .gitignore entry, I assume), it still bothers about overwriting this with a later <em>pull</em>, but a <em>clean</em> will not remove it, unless you add <code>-x</code>.</p>\n    </div>",
          "vote": "21"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I know of a much easier and less painful method:</p>\n\n<pre><code>$ git branch -m [branch_to_force_pull] tmp\n$ git fetch\n$ git checkout [branch_to_force_pull]\n$ git branch -D tmp\n</code></pre>\n\n<p>That's it!</p>\n    </div>",
          "vote": "19"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just solved this myself by:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git checkout -b tmp <span class=\"hljs-comment\"># \"tmp\" or pick a better name for your local changes branch</span>\ngit add -A\ngit commit -m <span class=\"hljs-string\">'tmp'</span>\ngit pull\ngit checkout master <span class=\"hljs-comment\"># Or whatever branch you were on originally</span>\ngit pull\ngit diff tmp\n</code></pre>\n\n<p>where the last command gives a list of what your local changes were. Keep modifying the \"tmp\" branch until it is acceptable and then merge back onto master with: </p>\n\n<pre><code>git checkout master &amp;&amp; git merge tmp\n</code></pre>\n\n<p>For next time, you can probably handle this in a cleaner way by looking up \"git stash branch\" though stash is likely to cause you trouble on the first few tries, so do first experiment on a non-critical project...</p>\n    </div>",
          "vote": "18"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have a strange situation that neither <code>git clean</code> or <code>git reset</code> works. I have to remove the conflicting file from <code>git index</code> by using the following script on every untracked file:</p>\n\n<pre><code>git rm [file]\n</code></pre>\n\n<p>Then I am able to pull just fine.</p>\n    </div>",
          "vote": "18"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>git fetch --all\n</code></pre>\n\n<p>then if you are on the master branch</p>\n\n<pre><code>git reset --hard origin/master\n</code></pre>\n\n<p>else</p>\n\n<pre><code>git reset --hard origin/master&lt;branch_name&gt;\n</code></pre>\n    </div>",
          "vote": "16"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Despite the original question, the top answers can cause problems for people who have a similar problem, but don't want to lose their local files. For example, see Al-Punk and crizCraig's comments. </p>\n\n<p>The following version commits your local changes to a temporary branch (<code>tmp</code>), checks out the original branch (which I'm assuming is <code>master</code>) and merges the updates. You could do this with <code>stash</code>, but I've found it's usually easier to simply use the branch / merge approach.</p>\n\n<pre><code>git checkout -b tmp\ngit add *; git commit -am \"my temporary files\"\ngit checkout master\n\ngit fetch origin master\ngit merge -s recursive -X theirs origin master\n</code></pre>\n\n<p>where we assume the <strong>other repository</strong> is <code>origin master</code>.</p>\n    </div>",
          "vote": "14"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just do</p>\n\n<pre><code>git fetch origin branchname\ngit checkout -f origin/branchname // This will overwrite ONLY new included files\ngit checkout branchname\ngit merge origin/branchname\n</code></pre>\n\n<p>So you avoid all unwanted side effects, like deleting files or directories you wanted to keep, etc.</p>\n    </div>",
          "vote": "14"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Reset the index and the head to <code>origin/master</code>, but do not reset the working tree:</p>\n\n<pre><code>git reset origin/master\n</code></pre>\n    </div>",
          "vote": "13"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>These four commands work for me.</p>\n\n<pre><code>git reset --hard HEAD\ngit checkout origin/master\ngit branch -D master\ngit checkout -b master\n</code></pre>\n\n<p>To check/pull after executing these commands</p>\n\n<pre><code>git pull origin master\n</code></pre>\n\n<p>I tried a lot but finally got success with these commands.</p>\n    </div>",
          "vote": "13"
        }
      ]
    },
    {
      "question": "What does “use strict” do in JavaScript, and what is the reasoning behind it?",
      "url": "https://stackoverflow.com/questions/1335851/what-does-use-strict-do-in-javascript-and-what-is-the-reasoning-behind-it",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Recently, I ran some of my JavaScript code through Crockford's <a href=\"http://www.jslint.com/\" rel=\"noreferrer\">JSLint</a>, and it gave the following error:</p>\n\n<blockquote>\n  <p>Problem at line 1 character 1: Missing \"use strict\" statement.</p>\n</blockquote>\n\n<p>Doing some searching, I realized that some people add <code>\"use strict\";</code> into their JavaScript code. Once I added the statement, the error stopped appearing. Unfortunately, Google did not reveal much of the history behind this string statement. Certainly it must have something to do with how the JavaScript is interpreted by the browser, but I have no idea what the effect would be.</p>\n\n<p>So what is <code>\"use strict\";</code> all about, what does it imply, and is it still relevant?</p>\n\n<p>Do any of the current browsers respond to the <code>\"use strict\";</code> string or is it for future use?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This article about Javascript Strict Mode might interest you: <a href=\"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\" rel=\"noreferrer\">John Resig - ECMAScript 5 Strict Mode, JSON, and More</a></p>\n<p>To quote some interesting parts:</p>\n<blockquote>\n<p>Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a \"strict\" operating context. This strict context prevents certain actions from being taken and throws more exceptions.</p>\n</blockquote>\n<p>And:</p>\n<blockquote>\n<p>Strict mode helps out in a couple ways:</p>\n<ul>\n<li>It catches some common coding bloopers, throwing exceptions.</li>\n<li>It prevents, or throws errors, when relatively \"unsafe\" actions are taken (such as gaining access to the global object).</li>\n<li>It disables features that are confusing or poorly thought out.</li>\n</ul>\n</blockquote>\n<p>Also note you can apply \"strict mode\" to the whole file... Or you can use it only for a specific function <em>(still quoting from John Resig's article)</em>:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// Non-strict code...</span>\n\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-meta\">  \"use strict\"</span>;\n\n  <span class=\"hljs-comment\">// Define your library strictly...</span>\n})();\n\n<span class=\"hljs-comment\">// Non-strict code...</span>\n</code></pre>\n<p>Which might be helpful if you have to mix old and new code ;-)</p>\n<p>So, I suppose it's a bit like the <code>\"use strict\"</code> you can use in Perl <em>(hence the name?)</em>: it helps you make fewer errors, by detecting more things that could lead to breakages.</p>\n<p>Strict mode is now <a href=\"http://caniuse.com/use-strict\" rel=\"noreferrer\">supported by all major browsers</a>.</p>\n<p>Inside <a href=\"https://caniuse.com/#feat=es6-module\" rel=\"noreferrer\">native ECMAScript modules</a> (with <code>import</code> and <code>export</code> statements) and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\" rel=\"noreferrer\">ES6 classes</a>, strict mode is always enabled and cannot be disabled.</p>\n    </div>",
          "vote": "5096"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's a new feature of ECMAScript 5. John Resig wrote up <a href=\"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\" rel=\"noreferrer\">a nice summary</a> of it.</p>\n\n<p>It's just a string you put in your JavaScript files (either at the top of your file or inside of a function) that looks like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">\"use strict\"</span>;\n</code></pre>\n\n<p>Putting it in your code now shouldn't cause any problems with current browsers as it's just a string. It may cause problems with your code in the future if your code violates the pragma.  For instance, if you currently have <code>foo = \"bar\"</code> without defining <code>foo</code> first, your code will start failing...which is a good thing in my opinion.</p>\n    </div>",
          "vote": "1304"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The statement <code>\"use strict\"; </code> instructs the browser to use the Strict mode, which is a reduced and safer feature set of JavaScript.</p>\n<h2>List of features (non-exhaustive)</h2>\n<ol>\n<li><p>Disallows global variables. (Catches missing <code>var</code> declarations and typos in variable names)</p>\n</li>\n<li><p>Silent failing assignments will throw error in strict mode (assigning <code>NaN = 5;</code>)</p>\n</li>\n<li><p>Attempts to delete undeletable properties will throw (<code>delete Object.prototype</code>)</p>\n</li>\n<li><p>Requires all property names in an object literal to be unique (<code>var x = {x1: \"1\", x1: \"2\"}</code>)</p>\n</li>\n<li><p>Function parameter names must be unique (<code>function sum (x, x) {...}</code>)</p>\n</li>\n<li><p>Forbids octal syntax (<code>var x = 023;</code> some devs assume wrongly that a preceding zero does nothing to change the number.)</p>\n</li>\n<li><p>Forbids the <code>with</code> keyword</p>\n</li>\n<li><p><code>eval</code> in strict mode does not introduce new variables</p>\n</li>\n<li><p>Forbids deleting plain names (<code>delete x;</code>)</p>\n</li>\n<li><p>Forbids binding or assignment of the names <code>eval</code> and <code>arguments</code> in any form</p>\n</li>\n<li><p>Strict mode does not alias properties of the <code>arguments</code> object with the formal parameters. (e.g. in <code>function sum (a,b) { return arguments[0] + b;}</code> This works because <code>arguments[0]</code> is bound to <code>a</code> and so on. )</p>\n</li>\n<li><p><code>arguments.callee</code> is not supported</p>\n</li>\n</ol>\n<p>[Ref: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">Strict mode</a>, <em>Mozilla Developer Network</em>]</p>\n    </div>",
          "vote": "704"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If people are worried about using <code>use strict</code> it might be worth checking out this article: </p>\n\n<p><a href=\"http://novogeek-archive.azurewebsites.net/post/ECMAScript-5-Strict-mode-support-in-browsers-What-does-this-mean\" rel=\"noreferrer\">ECMAScript 5 'Strict mode' support in browsers. What does this mean?</a><br>\n  <em>NovoGeek.com - Krishna's weblog</em></p>\n\n<p>It talks about browser support, but more importantly how to deal with it safely:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isStrictMode</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-built_in\">this</span>;\n} \n<span class=\"hljs-comment\">/*\n   returns false, since 'this' refers to global object and \n   '!this' becomes false\n*/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">isStrictMode</span>(<span class=\"hljs-params\"></span>)</span>{   \n<span class=\"hljs-meta\">    \"use strict\"</span>;\n    <span class=\"hljs-keyword\">return</span> !<span class=\"hljs-built_in\">this</span>;\n} \n<span class=\"hljs-comment\">/* \n   returns true, since in strict mode the keyword 'this'\n   does not refer to global object, unlike traditional JS. \n   So here, 'this' is 'undefined' and '!this' becomes true.\n*/</span>\n</code></pre>\n    </div>",
          "vote": "434"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A word of caution, all you hard-charging programmers:  applying <code>\"use strict\"</code> to existing code can be hazardous!  This thing is not some feel-good, happy-face sticker that you can slap on the code to make it 'better'.  With the <code>\"use strict\"</code> pragma, the browser will suddenly THROW exceptions in random places that it never threw before just because at that spot you are doing something that default/loose JavaScript happily allows but strict JavaScript abhors!  You may have strictness violations hiding in seldom used calls in your code that will only throw an exception when they do eventually get run - say, in the production environment that your paying customers use!</p>\n\n<p>If you are going to take the plunge, it is a good idea to apply <code>\"use strict\"</code> alongside comprehensive unit tests and a strictly configured JSHint build task that will give you some confidence that there is no dark corner of your module that will blow up horribly just because you've turned on Strict Mode.  Or, hey, here's another option:  just don't add <code>\"use strict\"</code> to any of your legacy code, it's probably safer that way, honestly.  <strong>DEFINITELY DO NOT</strong> add <code>\"use strict\"</code> to any modules you do not own or maintain, like third party modules.</p>\n\n<p>I think even though it is a deadly caged animal, <code>\"use strict\"</code> can be good stuff, but you have to do it right.  The best time to go strict is when your project is greenfield and you are starting from scratch. Configure <code>JSHint/JSLint</code> with all the warnings and options cranked up as tight as your team can stomach, get a good build/test/assert system du jour rigged like <code>Grunt+Karma+Chai</code>, and only THEN start marking all your new modules as <code>\"use strict\"</code>.  Be prepared to cure lots of niggly errors and warnings.  Make sure everyone understands the gravity by configuring the build to FAIL if <code>JSHint/JSLint</code> produces any violations.</p>\n\n<p>My project was not a greenfield project when I adopted <code>\"use strict\"</code>.  As a result, my IDE is full of red marks because I don't have <code>\"use strict\"</code> on half my modules, and JSHint complains about that.  It's a reminder to me about what refactoring I should do in the future.  My goal is to be red mark free due to all of my missing <code>\"use strict\"</code> statements, but that is years away now.</p>\n    </div>",
          "vote": "223"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Using <code>'use strict';</code> does not suddenly make your code better.</h1>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">JavaScript strict mode</a> is a feature in <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\" rel=\"noreferrer\">ECMAScript 5</a>. You can enable the strict mode by declaring this in the top of your script/function.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">'use strict'</span>;\n</code></pre>\n\n<p>When a JavaScript engine sees this <em>directive</em>, it will start to interpret the code in a special mode. In this mode, errors are thrown up when certain coding practices that could end up being potential bugs are detected (which is the reasoning behind the strict mode).</p>\n\n<p>Consider this example:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">365</span>;\n<span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">030</span>;\n</code></pre>\n\n<p>In their obsession to line up the numeric literals, the developer has inadvertently initialized variable <code>b</code> with an octal literal. Non-strict mode will interpret this as a numeric literal with value <code>24</code> (in base 10). However, strict mode will throw an error.</p>\n\n<p>For a non-exhaustive list of specialties in strict mode, see <a href=\"https://stackoverflow.com/a/27114400/1461424\">this answer</a>.</p>\n\n<hr>\n\n<h2>Where should I use <code>'use strict';</code>?</h2>\n\n<ul>\n<li><p>In my <em>new</em> JavaScript application: <strong>Absolutely!</strong> Strict mode can be used as a whistleblower when you are doing something stupid with your code.</p></li>\n<li><p>In my <em>existing</em> JavaScript code: <strong>Probably not!</strong> If your existing JavaScript code has statements that are prohibited in strict-mode, the application will simply break. If you want strict mode, you should be prepared to debug and correct your existing code. This is why <em>using <code>'use strict';</code> does not suddenly make your code better</em>.</p></li>\n</ul>\n\n<hr>\n\n<h2>How do I use strict mode?</h2>\n\n<ol>\n<li><p>Insert a <code>'use strict';</code> statement on top of your script:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// File: myscript.js</span>\n<span class=\"hljs-meta\">\n'use strict'</span>;\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">2</span>;\n....\n</code></pre>\n\n<p>Note that everything in the file <code>myscript.js</code> will be interpreted in strict mode.</p></li>\n<li><p>Or, insert a <code>'use strict';</code> statement on top of your function body:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">doSomething</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-meta\">    'use strict'</span>;\n    ...\n}\n</code></pre>\n\n<p>Everything in the <em>lexical scope</em> of function <code>doSomething</code> will be interpreted in strict mode. The word <em>lexical scope</em> is important here. For example, if your <em>strict</em> code calls a function of a library that is <em>not strict</em>, only your code is executed in strict mode, and not the called function. See <a href=\"https://stackoverflow.com/a/6039163/1461424\">this answer</a> for a better explanation.</p></li>\n</ol>\n\n<hr>\n\n<h2>What things are prohibited in strict mode?</h2>\n\n<p>I found a <a href=\"http://yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/\" rel=\"noreferrer\">nice article</a> describing several things that are prohibited in strict mode (note that this is not an exclusive list):</p>\n\n<blockquote>\n  <h2>Scope</h2>\n  \n  <p>Historically, JavaScript has been confused about how functions\n  are scoped. Sometimes they seem to be statically scoped, but some\n  features make them behave like they are dynamically scoped. This is\n  confusing, making programs difficult to read and understand.\n  Misunderstanding causes bugs. It also is a problem for performance.\n  Static scoping would permit variable binding to happen at compile\n  time, but the requirement for dynamic scope means the binding must be\n  deferred to runtime, which comes with a significant performance\n  penalty.</p>\n  \n  <p>Strict mode requires that all variable binding be done statically.\n  That means that the features that previously required dynamic binding\n  must be eliminated or modified. Specifically, the with statement is\n  eliminated, and the eval function’s ability to tamper with the\n  environment of its caller is severely restricted.</p>\n  \n  <p>One of the benefits of strict code is that tools like <a href=\"http://developer.yahoo.com/yui/compressor/\" rel=\"noreferrer\">YUI Compressor</a>\n  can do a better job when processing it.</p>\n  \n  <h2>Implied Global Variables</h2>\n  \n  <p>JavaScript has implied global variables. If\n  you do not explicitly declare a variable, a global variable is\n  implicitly declared for you. This makes programming easier for\n  beginners because they can neglect some of their basic housekeeping\n  chores. But it makes the management of larger programs much more\n  difficult and it significantly degrades reliability. So in strict\n  mode, implied global variables are no longer created. You should\n  explicitly declare all of your variables.</p>\n  \n  <h2>Global Leakage</h2>\n  \n  <p>There are a number of situations that could cause <code>this</code>\n  to be bound to the global object. For example, if you forget to\n  provide the <code>new</code> prefix when calling a constructor function, the\n  constructor's <code>this</code> will be bound unexpectedly to the global object, so\n  instead of initializing a new object, it will instead be silently\n  tampering with global variables. In these situations, strict mode will\n  instead bind <code>this</code> to <code>undefined</code>, which will cause the constructor to\n  throw an exception instead, allowing the error to be detected much\n  sooner.</p>\n  \n  <h2>Noisy Failure</h2>\n  \n  <p>JavaScript has always had read-only properties, but you\n  could not create them yourself until ES5’s <code>Object.createProperty</code>\n  function exposed that capability. If you attempted to assign a value\n  to a read-only property, it would fail silently. The assignment would\n  not change the property’s value, but your program would proceed as\n  though it had. This is an integrity hazard that can cause programs to\n  go into an inconsistent state. In strict mode, attempting to change a\n  read-only property will throw an exception.</p>\n  \n  <h2>Octal</h2>\n  \n  <p>The octal (or base 8) representation of numbers was extremely\n  useful when doing machine-level programming on machines whose word\n  sizes were a multiple of 3. You needed octal when working with the CDC\n  6600 mainframe, which had a word size of 60 bits. If you could read\n  octal, you could look at a word as 20 digits. Two digits represented\n  the op code, and one digit identified one of 8 registers. During the\n  slow transition from machine codes to high level languages, it was\n  thought to be useful to provide octal forms in programming languages.</p>\n  \n  <p>In C, an extremely unfortunate representation of octalness was\n  selected: Leading zero. So in C, <code>0100</code> means 64, not 100, and <code>08</code> is an\n  error, not 8. Even more unfortunately, this anachronism has been\n  copied into nearly all modern languages, including JavaScript, where\n  it is only used to create errors. It has no other purpose. So in\n  strict mode, octal forms are no longer allowed.</p>\n  \n  <h2>Et cetera</h2>\n  \n  <p>The arguments pseudo array becomes a little bit more\n  array-like in ES5. In strict mode, it loses its <code>callee</code> and <code>caller</code>\n  properties. This makes it possible to pass your <code>arguments</code> to untrusted\n  code without giving up a lot of confidential context. Also, the\n  <code>arguments</code> property of functions is eliminated.</p>\n  \n  <p>In strict mode, duplicate keys in a function literal will produce a\n  syntax error. A function can’t have two parameters with the same name.\n  A function can’t have a variable with the same name as one of its\n  parameters. A function can’t <code>delete</code> its own variables. An attempt to\n  <code>delete</code> a non-configurable property now throws an exception. Primitive\n  values are not implicitly wrapped.</p>\n</blockquote>\n\n<hr>\n\n<h2>Reserved words for future JavaScript versions</h2>\n\n<p>ECMAScript 5 adds a list of reserved words. If you use them as variables or arguments, strict mode will throw an error. The reserved words are:</p>\n\n<blockquote>\n  <p><code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code></p>\n</blockquote>\n\n<hr>\n\n<h2>Further Reading</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">Strict Mode - JavaScript | MDN</a></li>\n<li><a href=\"http://caniuse.com/#feat=use-strict\" rel=\"noreferrer\">Browser support for strict mode</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\" rel=\"noreferrer\">Transitioning to strict mode</a></li>\n</ul>\n    </div>",
          "vote": "198"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I strongly recommend every developer to start using strict mode now. There are enough browsers supporting it that strict mode will legitimately help save us from errors we didn’t even know were in your code.</p>\n\n<p>Apparently, at the initial stage there will be errors we have never encountered before. To get the full benefit, we need to do proper testing after switching to strict mode to make sure we have caught everything. Definitely we don’t just throw <code>use strict</code> in our code and assume there are no errors. So the churn is that it’s time to start using this incredibly useful language feature to write better code.</p>\n\n<p>For example,</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> person = {\n    <span class=\"hljs-attr\">name</span> : <span class=\"hljs-string\">'xyz'</span>,\n    <span class=\"hljs-attr\">position</span> : <span class=\"hljs-string\">'abc'</span>,\n    <span class=\"hljs-attr\">fullname</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-string\">\"use strict\"</span>; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.name; }\n};\n</code></pre>\n\n<p><a href=\"http://www.jslint.com/\" rel=\"noreferrer\">JSLint</a> is a debugger written by Douglas Crockford. Simply paste in your script, and it’ll quickly scan for any noticeable issues and errors in your code.</p>\n    </div>",
          "vote": "141"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I would like to offer a somewhat more founded answer complementing the other answers. I was hoping to edit the most popular answer, but failed. I tried to make it as comprehensive and complete as I could.</p>\n\n<p>You can refer to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">MDN documentation</a> for more information.</p>\n\n<p><code>\"use strict\"</code> a directive introduced in ECMAScript 5.</p>\n\n<p>Directives are similar to statements, yet different.</p>\n\n<ul>\n<li><code>use strict</code> does not contain key words: The directive is a simple expression statement, which consists of a special string literal (in single or double quotes). JavaScript engines, that do not implement ECMAScript 5, merely see an expression statement without side effects. It is expected that future versions of ECMAScript standards introduce <code>use</code> as a real key word; the quotes would thereby become obsolete.</li>\n<li><code>use strict</code> can be used only at the beginning of a script or of a function, i.e. it must precede every other (real) statement. It does not have to be the first instruction in a script of function: it can be preceded by other statement expressions that consist of string literals ( and JavaScript implementations can treat them as implementation specific directives). String literals statements, which follow a first real statement (in a script or function) are simple expression statements. Interpreters must not interpret them as directives and they have no effect.</li>\n</ul>\n\n<p>The <code>use strict</code> directive indicates that the following code (in a script or a function) is strict code.\nThe code in the highest level of a script (code that is not in a function) is considered strict code when the script contains a <code>use strict</code> directive.\nThe content of a function is considered strict code when the function itself is defined in a strict code or when the function contains a <code>use strict</code> directive.\nCode that is passed to an <code>eval()</code> method is considered strict code when <code>eval()</code> was called from a strict code or contains the <code>use strict</code> directive itself.</p>\n\n<p>The strict mode of ECMAScript 5 is a restricted subset of the JavaScript language, which eliminates relevant deficits of the language and features more stringent error checking and higher security. The following lists the differences between strict mode and normal mode (of which the first three are particularly important):</p>\n\n<ul>\n<li>You cannot use the <code>with</code>-statement in strict mode.</li>\n<li>In strict mode all variables have to be declared: if you assign a value to an identifier that has not been declared as variable, function, function parameter, catch-clause parameter or property of the global <code>Object</code>, then you will get a <code>ReferenceError</code>. In normal mode the identifier is implicitly declared as a global variable (as a property of the global <code>Object</code>)</li>\n<li>In strict mode the keyword <code>this</code> has the value <code>undefined</code> in functions that were invoked as functions (not as methods). (In normal mode <code>this</code> always points to the global <code>Object</code>). This difference can be used to test if an implementation supports the strict mode:</li>\n</ul>\n\n<blockquote>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> hasStrictMode = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-string\">\"use strict\"</span>; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>===<span class=\"hljs-literal\">undefined</span> }());\n</code></pre>\n</blockquote>\n\n<ul>\n<li><p>Also when a function is invoked with <code>call()</code> or <code>apply</code> in strict mode, then <code>this</code> is exactly the value of the first argument of the <code>call()</code>or <code>apply()</code> invocation. (In normal mode <code>null</code> and <code>undefined</code> are replaced by the global <code>Object</code> and values, which are not objects, are cast into objects.)</p></li>\n<li><p>In strict mode you will get a <code>TypeError</code>, when you try to assign to readonly properties or to define new properties for a non extensible object. (In normal mode both simply fail without error message.)</p></li>\n<li>In strict mode, when passing code to <code>eval()</code>, you cannot declare or define variables or functions in the scope of the caller (as you can do it in normal mode). Instead, a new scope is created for <code>eval()</code> and the variables and functions are within that scope. That scope is destroyed after <code>eval()</code> finishes execution.</li>\n<li>In strict mode the arguments-object of a function contains a static copy of the values, which are passed to that function. In normal mode the arguments-object has a somewhat \"magical\" behaviour: The elements of the array and the named function parameters reference both the same value.</li>\n<li>In strict mode you will get a <code>SyntaxError</code> when the <code>delete</code> operator is followed by a non qualified identifier (a variable, function or function parameter). In normal mode the <code>delete</code> expression would do nothing and is evaluated to <code>false</code>.</li>\n<li>In strict mode you will get a <code>TypeError</code> when you try to delete a non configurable property. (In normal mode the attempt simply fails and the <code>delete</code> expression is evaluated to <code>false</code>).</li>\n<li>In strict mode it is considered a syntactical error when you try to define several properties with the same name for an object literal. (In normal mode there is no error.)</li>\n<li>In strict mode it is considered a syntactical error when a function declaration has multiple parameters with the same name. (In normal mode there is no error.)</li>\n<li>In strict mode octal literals are not allowed (these are literals that start with <code>0x</code>. (In normal mode some implementations do allow octal literals.)</li>\n<li>In strict mode the identifiers <code>eval</code> and <code>arguments</code> are treated like keywords. You cannot change their value, cannot assign a value to them, and you cannot use them as names for variables, functions, function parameters or identifiers of a catch block.</li>\n<li>In strict mode are more restrictions on the possibilities to examine the call stack. <code>arguments.caller</code> and <code>arguments.callee</code> cause a <code>TypeError</code> in a function in strict mode. Furthermore, some caller- and arguments properties of functions in strict mode cause a <code>TypeError</code> when you try to read them.</li>\n</ul>\n    </div>",
          "vote": "96"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>My two cents:</em></p>\n\n<p>One of the goals of strict mode is to allow for faster debugging of issues. It helps the developers by throwing exception when certain wrong things occur that can cause silent &amp; strange behaviour of your webpage. The moment we use <code>use strict</code>, the code will throw out errors which helps developer to fix it in advance.</p>\n\n<p>Few important things which I have learned after using <code>use strict</code> :</p>\n\n<p><strong><em>Prevents Global Variable Declaration:</em></strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> tree1Data = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Banana Tree'</span>,<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">100</span>,<span class=\"hljs-attr\">leafCount</span>: <span class=\"hljs-number\">100000</span>};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Tree</span>(<span class=\"hljs-params\">typeOfTree</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> age;\n    <span class=\"hljs-keyword\">var</span> leafCount;\n\n    age = typeOfTree.age;\n    leafCount = typeOfTree.leafCount;\n    nameoftree = typeOfTree.name;\n};\n\n<span class=\"hljs-keyword\">var</span> tree1 = <span class=\"hljs-keyword\">new</span> Tree(tree1Data);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">window</span>);\n</code></pre>\n\n<p>Now,this code creates <code>nameoftree</code> in global scope which could be accessed using <code>window.nameoftree</code>. When we implement <code>use strict</code> the code would throw error.</p>\n\n<blockquote>\n  <p>Uncaught ReferenceError: nameoftree is not defined</p>\n</blockquote>\n\n<p><a href=\"http://jsfiddle.net/shubh0602/08p556u5/\" rel=\"noreferrer\"><kbd>Sample</kbd></a></p>\n\n<p><strong><em>Eliminates <code>with</code> statement :</em></strong></p>\n\n<p><code>with</code> statements can't be minified using tools like <a href=\"http://marijnhaverbeke.nl/uglifyjs\" rel=\"noreferrer\">uglify-js</a>. They're also <a href=\"http://www.2ality.com/2011/06/with-statement.html\" rel=\"noreferrer\">deprecated</a> and removed from future JavaScript versions.</p>\n\n<p><a href=\"http://jsfiddle.net/shubh0602/vjgznz79/\" rel=\"noreferrer\"><kbd>Sample</kbd></a></p>\n\n<p><strong><em>Prevents Duplicates :</em></strong></p>\n\n<p>When we have duplicate property, it throws an exception </p>\n\n<blockquote>\n  <p>Uncaught SyntaxError: Duplicate data property in object literal not\n  allowed in strict mode</p>\n</blockquote>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">\"use strict\"</span>;\n<span class=\"hljs-keyword\">var</span> tree1Data = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Banana Tree'</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">100</span>,\n    <span class=\"hljs-attr\">leafCount</span>: <span class=\"hljs-number\">100000</span>,\n    <span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">'Banana Tree'</span>\n};\n</code></pre>\n\n<p>There are few more but I need to gain more knowledge on that.</p>\n    </div>",
          "vote": "85"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you use a browser released in the last year or so then it most likely supports JavaScript Strict mode. Only older browsers around before ECMAScript 5 became the current standard don't support it. </p>\n\n<p>The quotes around the command make sure that the code will still work in older browsers as well (although the things that generate a syntax error in strict mode will generally just cause the script to malfunction in some hard to detect way in those older browsers).</p>\n    </div>",
          "vote": "65"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When adding <code>\"use strict\";</code>, the following cases will throw a <strong>SyntaxError</strong> before the script is executing:</p>\n\n<ul>\n<li><p><em>Paving the way for future ECMAScript versions</em>, using one of the newly reserved keywords (in prevision for <em>ECMAScript 6</em>): <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code>.</p></li>\n<li><p>Declaring function in blocks </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span>(a&lt;b){ <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>)</span>{} }\n</code></pre></li>\n<li><p>Octal syntax </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-number\">023</span>;\n</code></pre></li>\n<li><p><code>this</code> point to the global object.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-meta\">      \"use strict\"</span>;\n      <span class=\"hljs-built_in\">this</span>.a = <span class=\"hljs-number\">1</span>;\n };\n f(); \n</code></pre></li>\n<li><p>Declaring twice the same name for a property name in an object literal </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code> {<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">7</span>} \n</code></pre>\n\n<p>This is no longer the case in ECMAScript 6 (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1041128\" rel=\"noreferrer\">bug 1041128</a>).</p></li>\n<li><p>Declaring two function arguments with the same name function </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">a, b, b</span>)</span>{}\n</code></pre></li>\n<li><p>Setting a value to an undeclared variable</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">x</span>)</span>{\n<span class=\"hljs-meta\">   \"use strict\"</span>;\n   <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">12</span>;\n   b = a + x*<span class=\"hljs-number\">35</span>; <span class=\"hljs-comment\">// error!</span>\n}\nf();\n</code></pre></li>\n<li><p>Using <code>delete</code> on a variable name <code>delete myVariable;</code></p></li>\n<li><p>Using <code>eval</code> or <code>arguments</code> as variable or function argument name</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">\"use strict\"</span>;\n<span class=\"hljs-built_in\">arguments</span>++;\n<span class=\"hljs-keyword\">var</span> obj = { <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title\">p</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">arguments</span></span>) { } };\n<span class=\"hljs-keyword\">try</span> { } <span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-built_in\">arguments</span>) { }\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">arguments</span>(<span class=\"hljs-params\"></span>) </span>{ } \n</code></pre></li>\n</ul>\n\n<p>Sources:</p>\n\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\" rel=\"noreferrer\">Transitioning to strict mode</a> on MDN</p></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">Strict mode</a> on MDN</p></li>\n<li><p><a href=\"http://web.archive.org/web/20170707015027/http://cjihrig.com/blog/javascripts-strict-mode-and-why-you-should-use-it/\" rel=\"noreferrer\">JavaScript’s Strict Mode and Why You Should Use It</a> on Colin J. Ihrig's blog (archived version)</p></li>\n</ul>\n    </div>",
          "vote": "60"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Strict mode makes several changes to normal JavaScript semantics:</p>\n\n<ul>\n<li><p>eliminates some JavaScript silent errors by changing them\nto throw errors.</p></li>\n<li><p>fixes mistakes that make it difficult for JavaScript\nengines to perform optimizations.</p></li>\n<li><p>prohibits some syntax likely to be defined in future\nversions of ECMAScript.</p></li>\n</ul>\n\n<p>for more information vistit <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\">Strict Mode- Javascript</a></p>\n    </div>",
          "vote": "55"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>\"Use Strict\"; is an insurance that programmer will not use the loose or the bad properties of JavaScript. It is a guide, just like a ruler will help you make straight lines. \"Use Strict\" will help you do \"Straight coding\".</p>\n\n<p>Those that prefer not to use rulers to do their lines straight usually end up in those pages asking for others to debug their code.</p>\n\n<p>Believe me. The overhead is negligible compared to poorly designed code. <a href=\"http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/\" rel=\"noreferrer\">Doug Crockford, who has been a senior JavaScript developer for several years, has a very interesting post here</a>. Personally, I like to return to his site all the time to make sure I don't forget my good practice.</p>\n\n<p><strong>Modern JavaScript practice should always evoke the \"Use Strict\"; pragma.</strong> The only reason that the ECMA Group has made the \"Strict\" mode optional <em>is to permit less experienced coders access to JavaScript and give then time to adapt to the new and safer coding practices.</em></p>\n    </div>",
          "vote": "54"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Including <code>use strict</code> in the beginning of your all sensitive JavaScript files from this point is a small way to be a better JavaScript programmer and avoid random variables becoming global and things change silently.</p>\n    </div>",
          "vote": "48"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://www.w3schools.com/js/js_strict.asp\" rel=\"noreferrer\">Quoting from w3schools</a>:</p>\n\n<blockquote>\n  <h2><strong>The \"use strict\" Directive</strong></h2>\n  \n  <p>The \"use strict\" directive is new in JavaScript 1.8.5 (ECMAScript\n  version 5).</p>\n  \n  <p>It is not a statement, but a literal expression, ignored by earlier\n  versions of JavaScript.</p>\n  \n  <p>The purpose of \"use strict\" is to indicate that the code should be\n  executed in \"strict mode\".</p>\n  \n  <p>With strict mode, you can not, for example, use undeclared variables.</p>\n  \n  <h2>Why Strict Mode?</h2>\n  \n  <p>Strict mode makes it easier to write \"secure\" JavaScript.</p>\n  \n  <p>Strict mode changes previously accepted \"bad syntax\" into real errors.</p>\n  \n  <p>As an example, in normal JavaScript, mistyping a variable name creates\n  a new global variable. In strict mode, this will throw an error,\n  making it impossible to accidentally create a global variable.</p>\n  \n  <p>In normal JavaScript, a developer will not receive any error feedback\n  assigning values to non-writable properties.</p>\n  \n  <p>In strict mode, any assignment to a non-writable property, a\n  getter-only property, a non-existing property, a non-existing\n  variable, or a non-existing object, will throw an error.</p>\n</blockquote>\n\n<p>Please refer to <a href=\"http://www.w3schools.com/js/js_strict.asp\" rel=\"noreferrer\">http://www.w3schools.com/js/js_strict.asp</a> to know more</p>\n    </div>",
          "vote": "42"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>\"use strict\"</code> makes JavaScript code to run in <em>strict mode</em>, which basically means everything needs to be defined before use. The main reason for using strict mode is to avoid accidental global uses of undefined methods.</p>\n\n<p>Also in strict mode, things run faster, some warnings or silent warnings throw fatal errors, it's better to always use it to make a neater code.</p>\n\n<p><code>\"use strict\"</code> is widely needed to be used in ECMA5, <strong>in ECMA6 it's part of JavaScript by default</strong>, so it doesn't need to be added if you're using ES6.</p>\n\n<p>Look at these statements and examples from MDN:</p>\n\n<blockquote>\n  <p><strong>The \"use strict\" Directive</strong><br> The \"use strict\" directive is new in\n  JavaScript 1.8.5 (ECMAScript version 5). It is not a statement, but a\n  literal expression, ignored by earlier versions of JavaScript. The\n  purpose of \"use strict\" is to indicate that the code should be\n  executed in \"strict mode\". With strict mode, you can not, for example,\n  use undeclared variables.</p>\n  \n  <p><strong>Examples of using \"use strict\":</strong><br>\n  Strict mode for functions: Likewise, to invoke strict mode for a\n  function, put the exact statement \"use strict\"; (or 'use strict';) in\n  the function's body before any other statements.</p>\n</blockquote>\n\n<p><strong>1) strict mode in functions</strong> </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">strict</span>(<span class=\"hljs-params\"></span>) </span>{\n     <span class=\"hljs-comment\">// Function-level strict mode syntax</span>\n<span class=\"hljs-meta\">     'use strict'</span>;\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">nested</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'And so am I!'</span>; }\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Hi!  I'm a strict mode function!  \"</span> + nested();\n }\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">notStrict</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"I'm not strict.\"</span>; }\n\n <span class=\"hljs-built_in\">console</span>.log(strict(), notStrict());\n</code></pre>\n\n<p><strong>2) whole-script strict mode</strong> </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">'use strict'</span>;\n<span class=\"hljs-keyword\">var</span> v = <span class=\"hljs-string\">\"Hi! I'm a strict mode script!\"</span>;\n<span class=\"hljs-built_in\">console</span>.log(v);\n</code></pre>\n\n<p><strong>3) Assignment to a non-writable global</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-comment\">// Assignment to a non-writable global</span>\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-literal\">undefined</span> = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// throws a TypeError</span>\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-literal\">Infinity</span> = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// throws a TypeError</span>\n\n<span class=\"hljs-comment\">// Assignment to a non-writable property</span>\n<span class=\"hljs-keyword\">var</span> obj1 = {};\n<span class=\"hljs-built_in\">Object</span>.defineProperty(obj1, <span class=\"hljs-string\">'x'</span>, { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">42</span>, <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span> });\nobj1.x = <span class=\"hljs-number\">9</span>; <span class=\"hljs-comment\">// throws a TypeError</span>\n\n<span class=\"hljs-comment\">// Assignment to a getter-only property</span>\n<span class=\"hljs-keyword\">var</span> obj2 = { <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">x</span>() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">17</span>; } };\nobj2.x = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// throws a TypeError</span>\n\n<span class=\"hljs-comment\">// Assignment to a new property on a non-extensible object.</span>\n<span class=\"hljs-keyword\">var</span> fixed = {};\n<span class=\"hljs-built_in\">Object</span>.preventExtensions(fixed);\nfixed.newProp = <span class=\"hljs-string\">'ohai'</span>; <span class=\"hljs-comment\">// throws a TypeError</span>\n</code></pre>\n\n<p>You can <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">read more on MDN</a>.</p>\n    </div>",
          "vote": "37"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There's a good talk by some people who were on the ECMAScript committee: <a href=\"http://www.youtube.com/watch?v=Kq4FpMe6cRs\" rel=\"noreferrer\">Changes to JavaScript, Part 1: ECMAScript 5\"</a> about how incremental use of the <code>\"use strict\"</code> switch allows JavaScript implementers to clean up a lot of the dangerous features of JavaScript without suddenly breaking every website in the world.</p>\n\n<p>Of course it also talks about just what a lot of those misfeatures are (were) and how ECMAScript 5 fixes them.</p>\n    </div>",
          "vote": "31"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Small examples to compare:</p>\n\n<p>Non-strict mode:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">of</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]) <span class=\"hljs-built_in\">console</span>.log(i)\n    \n<span class=\"hljs-comment\">// output:</span>\n<span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-comment\">// 3</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif1\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>Strict mode:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">'use strict'</span>;\n<span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">of</span> [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]) <span class=\"hljs-built_in\">console</span>.log(i)\n\n<span class=\"hljs-comment\">// output:</span>\n<span class=\"hljs-comment\">// Uncaught ReferenceError: i is not defined</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif2\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>Non-strict mode:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">String</span>.prototype.test = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> === <span class=\"hljs-string\">'string'</span>);\n};\n\n<span class=\"hljs-string\">'a'</span>.test();\n\n<span class=\"hljs-comment\">// output</span>\n<span class=\"hljs-comment\">// false</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif3\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">String</span>.prototype.test = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-meta\">  'use strict'</span>;\n  \n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-built_in\">this</span> === <span class=\"hljs-string\">'string'</span>);\n};\n\n<span class=\"hljs-string\">'a'</span>.test();\n\n<span class=\"hljs-comment\">// output</span>\n<span class=\"hljs-comment\">// true</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif4\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "26"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Note that <code>use strict</code> was introduced in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">EcmaScript 5</a> and was kept since then.</p>\n\n<p>Below are the conditions to trigger strict mode in <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code\" rel=\"noreferrer\">ES6</a> and <a href=\"https://tc39.github.io/ecma262/#sec-strict-mode-code\" rel=\"noreferrer\">ES7</a>:</p>\n\n<blockquote>\n  <ul>\n  <li>Global code is strict mode code if it begins with a Directive    Prologue that contains a Use Strict Directive (see 14.1.1).</li>\n  <li>Module code is always strict mode code.</li>\n  <li>All parts of a <em>ClassDeclaration</em> or a <em>ClassExpression</em> are strict mode    code.</li>\n  <li>Eval code is strict mode code if it begins with a Directive Prologue    that contains a Use Strict Directive or if the call to eval is a direct eval (see 12.3.4.1) that is contained in strict mode code.</li>\n  <li>Function code is strict mode code if the associated <em>FunctionDeclaration, FunctionExpression, GeneratorDeclaration, GeneratorExpression, MethodDefinition, or ArrowFunction</em> is contained in strict mode code or if the code that produces the value of the function’s [[ECMAScriptCode]] internal slot begins with a Directive Prologue that contains a Use Strict Directive.</li>\n  <li>Function code that is supplied as the arguments to the built-in    Function and Generator constructors is strict mode code if the last argument is a String that when processed is a <em>FunctionBody</em> that begins with a Directive Prologue that contains a Use Strict Directive.</li>\n  </ul>\n</blockquote>\n    </div>",
          "vote": "19"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The main reasons why developers should use <code>\"use strict\"</code> are:</p>\n\n<ol>\n<li><p>Prevents accidental declaration of global variables.Using <code>\"use strict()\"</code> will make sure that variables are declared with <code>var</code> before use. \nEg:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">useStrictDemo</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-meta\"> 'use strict'</span>;\n <span class=\"hljs-comment\">//works fine</span>\n <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'No Problem'</span>;\n\n <span class=\"hljs-comment\">//does not work fine and throws error</span>\n k = <span class=\"hljs-string\">\"problem\"</span>\n\n <span class=\"hljs-comment\">//even this will throw error</span>\n someObject = {<span class=\"hljs-string\">'problem'</span>: <span class=\"hljs-string\">'lot of problem'</span>};\n}\n</code></pre></li>\n<li>N.B: The <code>\"use strict\"</code> directive is only recognized at the beginning of a script or a function.</li>\n<li><p>The string <code>\"arguments\"</code> cannot be used as a variable:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">\"use strict\"</span>;\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">arguments</span> = <span class=\"hljs-number\">3.14</span>;    <span class=\"hljs-comment\">// This will cause an error</span>\n</code></pre></li>\n<li><p>Will restrict uses of keywords as variables. Trying to use them will throw errors.</p></li>\n</ol>\n\n<p>In short will make your code less error prone and in turn will make you write good code.</p>\n\n<p>To read more about it you can refer <a href=\"http://www.w3schools.com/js/js_strict.asp\" rel=\"noreferrer\">here</a>.</p>\n    </div>",
          "vote": "14"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>JavaScript “strict” mode was introduced in ECMAScript 5.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-meta\">  \"use strict\"</span>;\n  your code...\n})();\n</code></pre>\n\n<p>Writing <code>\"use strict\";</code> at the very top of your JS file turns on strict\nsyntax checking. It does the following tasks for us:</p>\n\n<ol>\n<li><p>shows an error if you try to assign to an undeclared variable</p></li>\n<li><p>stops you from overwriting key JS system libraries</p></li>\n<li><p>forbids some unsafe or error-prone language features</p></li>\n</ol>\n\n<p><code>use strict</code> also works inside of individual functions. It is always a better practice to include <code>use strict</code> in your code.</p>\n\n<p>Browser compatibility issue: \nThe \"use\" directives are meant to be backwards-compatible. Browsers that do not support them will just see a string literal that isn't referenced further. So, they will pass over it and move on.</p>\n    </div>",
          "vote": "13"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>use strict</code> is a way to make your code safer, because you can't use dangerous features that can work not as you expect. And, as was written before, it makes code more strict.</p>\n    </div>",
          "vote": "13"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>\"use strict\"; is the ECMA effort to make JavaScript a little bit more robust. It brings in JS an attempt to make it at least a little \"strict\" (other languages implement strict rules since the 90s). It actually \"forces\" JavaScript developers to follow some sort of coding best practices.\nStill, JavaScript is very fragile. There is no such thing as typed variables, typed methods, etc.\nI strongly recommend JavaScript developers to learn a more robust language such as Java or ActionScript3, and implement the same best practices in your JavaScript code, it will work better and be easier to debug.</p>\n    </div>",
          "vote": "12"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Normally, JavaScript does not follow strict rules, hence increasing chances of errors. After using <code>\"use strict\"</code>, the JavaScript code should follow strict set of rules as in other programming languages such as use of terminators, declaration before initialization, etc. </p>\n\n<p>If <code>\"use strict\"</code> is used, the code should be written by following a strict set of rules, hence decreasing the chances of errors and ambiguities.</p>\n    </div>",
          "vote": "12"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use Strict is used to show common and repeated errors so that it is handled differently , and changes the way java script runs , such changes are :</p>\n\n<ul>\n<li><p>Prevents accidental globals</p></li>\n<li><p>No duplicates</p></li>\n<li><p>Eliminates with</p></li>\n<li><p>Eliminates this coercion</p></li>\n<li><p>Safer eval()</p></li>\n<li><p>Errors for immutables</p></li>\n</ul>\n\n<p>you can also read this <a href=\"https://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/\" rel=\"noreferrer\">article</a> for the details </p>\n    </div>",
          "vote": "11"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>\"use strict\"; Defines that JavaScript code should be executed in\n   \"strict mode\".</strong></p>\n\n<ul>\n<li>The \"use strict\" directive was new in ECMAScript version 5.</li>\n<li>It is not a statement, but a literal expression, ignored by earlier\nversions of JavaScript.</li>\n<li>The purpose of \"use strict\" is to indicate that the code should be\nexecuted in \"strict mode\".</li>\n<li>With strict mode, you can not, for example, use undeclared variables.</li>\n</ul>\n\n<p>All modern browsers support \"use strict\" except <em>Internet Explorer 9 and lower</em>.</p>\n\n<p><strong>Disadvantage</strong></p>\n\n<p>If a developer used a library that was in strict mode, but the developer was used to working in normal mode, they might call some actions on the library that wouldn’t work as expected.</p>\n\n<p>Worse, since the developer is in normal mode, they don’t have the advantages of extra errors being thrown, so the error might fail silently.</p>\n\n<p>Also, as listed above, strict mode stops you from doing certain things.</p>\n\n<p>People generally think that you shouldn’t use those things in the first place, but some developers don’t like the constraint and want to use all the features of the language.</p>\n\n<ul>\n<li><p><strong>For basic example and for reference go through :</strong></p>\n\n<p><a href=\"https://www.tutorialsteacher.com/javascript/javascript-strict\" rel=\"nofollow noreferrer\">https://www.tutorialsteacher.com/javascript/javascript-strict</a></p></li>\n</ul>\n    </div>",
          "vote": "7"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Strict mode can prevent memory leaks.</strong></p>\n\n<p>Please check the function below written in non-strict mode:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getname</span>(<span class=\"hljs-params\"></span>)</span>{\n    name = <span class=\"hljs-string\">\"Stack Overflow\"</span>; <span class=\"hljs-comment\">// Not using var keyword</span>\n    <span class=\"hljs-keyword\">return</span> name;\n}\ngetname();\n<span class=\"hljs-built_in\">console</span>.log(name); <span class=\"hljs-comment\">// Stack Overflow</span>\n</code></pre>\n\n<p>In this function, we are using a variable called <code>name</code> inside the function. Internally, the compiler will first check if there is any variable declared with that particular name in that particular function scope. Since the compiler understood that there is no such variable, it will check in the outer scope. In our case, it is the global scope. Again, the compiler understood that there is also no variable declared in the global space with that name, so it creates such a variable for us in the global space. Conceptually, this variable will be created in the global scope and will be available in the entire application.</p>\n\n<p>Another scenario is that, say, the variable is declared in a child function. In that case, the compiler checks the validity of that variable in the outer scope, i.e., the parent function. Only then it will check in the global space and create a variable for us there.\nThat means additional checks need to be done. This will affect the performance of the application.</p>\n\n<hr>\n\n<p>Now let's write the same function in strict mode.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">\"use strict\"</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getname</span>(<span class=\"hljs-params\"></span>)</span>{\n    name = <span class=\"hljs-string\">\"Stack Overflow\"</span>; <span class=\"hljs-comment\">// Not using var keyword</span>\n    <span class=\"hljs-keyword\">return</span> name;\n}\ngetname();\n<span class=\"hljs-built_in\">console</span>.log(name); \n</code></pre>\n\n<p>We will get the following error.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>Uncaught <span class=\"hljs-built_in\">ReferenceError</span>: name is not defined\nat getname (&lt;anonymous&gt;:<span class=\"hljs-number\">3</span>:<span class=\"hljs-number\">15</span>)\nat &lt;anonymous&gt;:<span class=\"hljs-number\">6</span>:<span class=\"hljs-number\">5</span>\n</code></pre>\n\n<p>Here, the compiler throws the reference error. In strict mode, the compiler does not allow us to use the variable without declaring it. So memory leaks can be prevented. In addition, we can write more optimized code.</p>\n    </div>",
          "vote": "4"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Strict mode eliminates errors that would be ignored in non-strict mode, thus making javascript “more secured”.</p>\n<blockquote>\n<p>Is it considered among best practices?</p>\n</blockquote>\n<p><strong>Yes</strong>, It's considered part of the best practices while working with javascript to include <em>Strict mode</em>. This is done by adding the below line of code in your JS file.</p>\n<p><code>'use strict'; </code></p>\n<p>in your code.</p>\n<blockquote>\n<p>What does it mean to user agents?</p>\n</blockquote>\n<p>Indicating that code should be interpreted in strict mode specifies to user agents like browsers that they should treat code literally as written, and throw an error if the code doesn't make sense.</p>\n<p><strong>For example:</strong> Consider in your <code>.js</code> file you have the following code:</p>\n<p><strong>Scenario 1: [NO STRICT MODE]</strong></p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> city = <span class=\"hljs-string\">\"Chicago\"</span>\n<span class=\"hljs-built_in\">console</span>.log(city) <span class=\"hljs-comment\">// Prints the city name, i.e. Chicago</span>\n</code></pre>\n<p><strong>Scenario 2: [NO STRICT MODE]</strong></p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>city = <span class=\"hljs-string\">\"Chicago\"</span>\n<span class=\"hljs-built_in\">console</span>.log(city) <span class=\"hljs-comment\">// Prints the city name, i.e. Chicago</span>\n</code></pre>\n<blockquote>\n<p>So why does the variable name is being printed in both cases?</p>\n</blockquote>\n<p>Without strict mode turned on, user agents often go through a series of modifications to problematic code in an attempt to get it to make sense. On the surface, this can seem like a fine thing, and indeed, working outside of strict mode makes it possible for people to get their feet wet with JavaScript code without having all the details quite nailed down. However, as a developer, I don't want to leave a bug in my code, because I know it could come back and bite me later on, and I also just want to write good code. And that's where strict mode helps out.</p>\n<p><strong>Scenario 3: [STRICT MODE]</strong></p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">'use strict'</span>;\n\ncity = <span class=\"hljs-string\">\"Chicago\"</span>\n<span class=\"hljs-built_in\">console</span>.log(city) <span class=\"hljs-comment\">// Reference Error: asignment is undeclared variable city.</span>\n</code></pre>\n<p><em><strong>Additional tip:</strong></em> To maintain code quality using strict mode, you don't need to write this over and again especially if you have multiple <code>.js</code> file. You can enforce this rule globally in <code>eslint</code> rules as follows:</p>\n<p><em>Filename:</em> <code>.eslintrc.js</code></p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">env</span>: {\n        <span class=\"hljs-attr\">es6</span>: <span class=\"hljs-literal\">true</span>\n    },\n    <span class=\"hljs-attr\">rules</span> : {\n        <span class=\"hljs-attr\">strict</span>: [<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-string\">'global'</span>],\n        },\n    };\n    \n</code></pre>\n<blockquote>\n<p>Okay, so what is prevented in strict mode?</p>\n</blockquote>\n<ul>\n<li><p><em>Using a variable without declaring it</em> will throw an error in strict mode. This is to prevent unintentionally creating global variables throughout your application. The example with printing Chicago covers this in particular.</p>\n</li>\n<li><p><em>Deleting a variable or a function or an argument</em> is a no-no in strict mode.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">\"use strict\"</span>;\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\">p1, p2</span>) </span>{}; \n <span class=\"hljs-keyword\">delete</span> x; <span class=\"hljs-comment\">// This will cause an error</span>\n</code></pre>\n</li>\n<li><p><em>Duplicating a parameter name</em> is <strong>not</strong> allowed in strict mode.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\"> \"use strict\"</span>;\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\">p1, p1</span>) </span>{};   <span class=\"hljs-comment\">// This will cause an error</span>\n</code></pre>\n</li>\n<li><p><em>Reserved words in the Javascript language are not allowed</em> in strict mode. The words are implements interface, let, packages, private, protected, public. static, and yield</p>\n</li>\n</ul>\n<p>For a more comprehensive list check out the MDN documentation here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode</a></p>\n    </div>",
          "vote": "2"
        }
      ]
    },
    {
      "question": "How do I redirect to another webpage?",
      "url": "https://stackoverflow.com/questions/503093/how-do-i-redirect-to-another-webpage",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M16 9a2 2 0 00-2-2V6A5 5 0 004 6v1a2 2 0 00-2 2v6c0 1.1.9 2 2 2h10a2 2 0 002-2V9zm-7 5a2 2 0 110-4 2 2 0 010 4zm3.1-7H5.9V6a3.1 3.1 0 016.2 0v1z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>This question's answers are a <a href=\"/help/privileges/edit-community-wiki\">community effort</a></b>. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n</aside>\n\n    </div>\n\n<p>How can I redirect the user from one page to another using jQuery or pure JavaScript?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>One does not simply redirect using jQuery</h2>\n\n<p>jQuery is not necessary, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location/replace\" rel=\"noreferrer\"><strong><code>window.location.replace(...)</code></strong></a> will best simulate an HTTP redirect.  </p>\n\n<p><code>window.location.replace(...)</code> is better than using <code>window.location.href</code>, because <code>replace()</code> does not keep the originating page in the session history, meaning the user won't get stuck in a never-ending back-button fiasco.</p>\n\n<p>If you want to simulate someone clicking on a link, use\n <strong><code>location.href</code></strong></p>\n\n<p>If you want to simulate an HTTP redirect, use <strong><code>location.replace</code></strong></p>\n\n<p><strong>For example:</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// similar behavior as an HTTP redirect</span>\n<span class=\"hljs-built_in\">window</span>.location.replace(<span class=\"hljs-string\">\"http://stackoverflow.com\"</span>);\n\n<span class=\"hljs-comment\">// similar behavior as clicking on a link</span>\n<span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">\"http://stackoverflow.com\"</span>;\n</code></pre>\n    </div>",
          "vote": "15400"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>WARNING:</strong> This answer has merely been provided as a possible solution; it is obviously <em>not</em> the best solution, as it requires jQuery. Instead, prefer the pure JavaScript solution.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(location).attr(<span class=\"hljs-string\">'href'</span>, <span class=\"hljs-string\">'http://stackoverflow.com'</span>)\n</code></pre>\n    </div>",
          "vote": "1741"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Standard \"vanilla\" JavaScript way to redirect a page</h1>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">'newPage.html'</span>;\n</code></pre>\n<h2>Or more simply:  (since <code>window</code> is Global)</h2>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>location.href = <span class=\"hljs-string\">'newPage.html'</span>;\n</code></pre>\n<hr>\n<blockquote>\n<p><strong>If you are here because you are <em>losing</em> HTTP_REFERER when redirecting, keep reading:</strong></p>\n<p>(Otherwise ignore this last part)</p>\n</blockquote>\n<hr>\n<p>The following section is for those using <code>HTTP_REFERER</code> as one of many security measures (although it isn't a great protective measure). If you're using <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;8</a> or lower, these variables get lost when using any form of JavaScript page redirection (location.href,  etc.).</p>\n<p>Below we are going to implement an alternative for <strong>IE8 &amp; lower</strong> so that we don't lose HTTP_REFERER. Otherwise, you can almost always simply use <code>window.location.href</code>.</p>\n<p>Testing against <code>HTTP_REFERER</code> (URL pasting, session, etc.) <em>can</em> help tell whether a request is legitimate.\n<em>(<strong>Note:</strong> there are also ways to work-around / spoof these referrers, as noted by droop's link in the comments)</em></p>\n<hr>\n<p>Simple cross-browser testing solution (fallback to window.location.href for Internet&nbsp;Explorer&nbsp;9+ and all other browsers)</p>\n<p><strong>Usage: <code>redirect('anotherpage.aspx');</code></strong></p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">redirect</span> (<span class=\"hljs-params\">url</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> ua        = navigator.userAgent.toLowerCase(),\n        isIE      = ua.indexOf(<span class=\"hljs-string\">'msie'</span>) !== -<span class=\"hljs-number\">1</span>,\n        version   = <span class=\"hljs-built_in\">parseInt</span>(ua.substr(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">2</span>), <span class=\"hljs-number\">10</span>);\n\n    <span class=\"hljs-comment\">// Internet Explorer 8 and lower</span>\n    <span class=\"hljs-keyword\">if</span> (isIE &amp;&amp; version &lt; <span class=\"hljs-number\">9</span>) {\n        <span class=\"hljs-keyword\">var</span> link = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'a'</span>);\n        link.href = url;\n        <span class=\"hljs-built_in\">document</span>.body.appendChild(link);\n        link.click();\n    }\n\n    <span class=\"hljs-comment\">// All other browsers can use the standard window.location.href (they don't lose HTTP_REFERER like Internet Explorer 8 &amp; lower does)</span>\n    <span class=\"hljs-keyword\">else</span> { \n        <span class=\"hljs-built_in\">window</span>.location.href = url; \n    }\n}\n</code></pre>\n    </div>",
          "vote": "746"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are lots of ways of doing this.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// window.location</span>\n<span class=\"hljs-built_in\">window</span>.location.replace(<span class=\"hljs-string\">'http://www.example.com'</span>)\n<span class=\"hljs-built_in\">window</span>.location.assign(<span class=\"hljs-string\">'http://www.example.com'</span>)\n<span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">'http://www.example.com'</span>\n<span class=\"hljs-built_in\">document</span>.location.href = <span class=\"hljs-string\">'/path'</span>\n\n<span class=\"hljs-comment\">// window.history</span>\n<span class=\"hljs-built_in\">window</span>.history.back()\n<span class=\"hljs-built_in\">window</span>.history.go(-<span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-comment\">// window.navigate; ONLY for old versions of Internet Explorer</span>\n<span class=\"hljs-built_in\">window</span>.navigate(<span class=\"hljs-string\">'top.jsp'</span>)\n\n\n<span class=\"hljs-comment\">// Probably no bueno</span>\nself.location = <span class=\"hljs-string\">'http://www.example.com'</span>;\ntop.location = <span class=\"hljs-string\">'http://www.example.com'</span>;\n\n<span class=\"hljs-comment\">// jQuery</span>\n$(location).attr(<span class=\"hljs-string\">'href'</span>,<span class=\"hljs-string\">'http://www.example.com'</span>)\n$(<span class=\"hljs-built_in\">window</span>).attr(<span class=\"hljs-string\">'location'</span>,<span class=\"hljs-string\">'http://www.example.com'</span>)\n$(location).prop(<span class=\"hljs-string\">'href'</span>, <span class=\"hljs-string\">'http://www.example.com'</span>)\n</code></pre>\n    </div>",
          "vote": "453"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This works for every browser:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">'your_url'</span>;\n</code></pre>\n    </div>",
          "vote": "347"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It would help if you were a little more descriptive in what you are trying to do.  If you are trying to generate paged data, there are some options in how you do this.  You can generate separate links for each page that you want to be able to get directly to.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>&lt;a href=<span class=\"hljs-string\">'/path-to-page?page=1'</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">'pager-link'</span>&gt;<span class=\"hljs-number\">1</span>&lt;/a&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">'/path-to-page?page=2'</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'pager-link'</span>&gt;</span>2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'pager-link current-page'</span>&gt;</span>3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></span>\n...\n</code></pre>\n\n<p>Note that the current page in the example is handled differently in the code and with CSS.</p>\n\n<p>If you want the paged data to be changed via AJAX, this is where jQuery would come in.  What you would do is add a click handler to each of the anchor tags corresponding to a different page.  This click handler would invoke some jQuery code that goes and fetches the next page via AJAX and updates the table with the new data.  The example below assumes that you have a web service that returns the new page data.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-built_in\">document</span>).ready( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    $(<span class=\"hljs-string\">'a.pager-link'</span>).click( <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> page = $(<span class=\"hljs-built_in\">this</span>).attr(<span class=\"hljs-string\">'href'</span>).split(<span class=\"hljs-regexp\">/\\?/</span>)[<span class=\"hljs-number\">1</span>];\n        $.ajax({\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">'POST'</span>,\n            <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">'/path-to-service'</span>,\n            <span class=\"hljs-attr\">data</span>: page,\n            <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">content</span>) </span>{\n               $(<span class=\"hljs-string\">'#myTable'</span>).html(content);  <span class=\"hljs-comment\">// replace</span>\n            }\n        });\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// to stop link</span>\n    });\n});\n</code></pre>\n    </div>",
          "vote": "307"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I also think that <code>location.replace(URL)</code> is the best way, but if you want to notify the search engines about your redirection (they don't analyze JavaScript code to see the redirection) you should add the <code>rel=\"canonical\"</code> meta tag to your website.</p>\n\n<p>Adding a noscript section with a HTML refresh meta tag in it, is also a good solution. I suggest you to use this <a href=\"http://insider.zone/tools/client-side-url-redirect-generator/\" rel=\"noreferrer\" title=\"Client-side URL redirect code generator\">JavaScript redirection tool</a> to create redirections. It also has Internet&nbsp;Explorer support to pass the HTTP referrer.</p>\n\n<p>Sample code without delay looks like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>&lt;!-- Place <span class=\"hljs-built_in\">this</span> snippet right after opening the head tag to make it work properly --&gt;\n\n&lt;!-- This code is licensed under GNU GPL v3 --&gt;\n&lt;!-- You are allowed to freely copy, distribute and use <span class=\"hljs-built_in\">this</span> code, but removing author credit is strictly prohibited --&gt;\n&lt;!-- Generated by http:<span class=\"hljs-comment\">//insider.zone/tools/client-side-url-redirect-generator/ --&gt;</span>\n\n&lt;!-- REDIRECTING STARTS --&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"canonical\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://yourdomain.com/\"</span>/&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"refresh\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"0;URL=https://yourdomain.com/\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--[if lt IE 9]&gt;&lt;script type=\"text/javascript\"&gt;var IE_fix=true;&lt;/script&gt;&lt;![endif]--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">\"https://yourdomain.com/\"</span>;\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> IE_fix != <span class=\"hljs-string\">\"undefined\"</span>) <span class=\"hljs-comment\">// IE8 and lower fix to pass the http referer</span>\n    {\n        <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">\"redirecting...\"</span>); <span class=\"hljs-comment\">// Don't remove this line or appendChild() will fail because it is called before document.onload to make the redirect as fast as possible. Nobody will see this text, it is only a tech fix.</span>\n        <span class=\"hljs-keyword\">var</span> referLink = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">\"a\"</span>);\n        referLink.href = url;\n        <span class=\"hljs-built_in\">document</span>.body.appendChild(referLink);\n        referLink.click();\n    }\n    <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-built_in\">window</span>.location.replace(url); } <span class=\"hljs-comment\">// All other browsers</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- Credit goes to http://insider.zone/ --&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- REDIRECTING ENDS --&gt;</span>\n</span></code></pre>\n    </div>",
          "vote": "261"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>But if someone wants to redirect back to home page then he may use the following snippet.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location = <span class=\"hljs-built_in\">window</span>.location.host\n</code></pre>\n\n<p>It would be helpful if you have three different environments as development, staging, and production.</p>\n\n<p>You can explore this window or window.location object by just putting these words in Chrome Console or <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\">Firebug</a>'s Console.</p>\n    </div>",
          "vote": "235"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>JavaScript provides you many methods to retrieve and change the current URL which is displayed in browser's address bar. All these methods uses the Location object, which is  a property of the Window object. You can create a new Location object that has the current URL as follows..</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> currentLocation = <span class=\"hljs-built_in\">window</span>.location;\n</code></pre>\n\n<p><strong>Basic Structure of a URL</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>&lt;protocol&gt;<span class=\"hljs-comment\">//&lt;hostname&gt;:&lt;port&gt;/&lt;pathname&gt;&lt;search&gt;&lt;hash&gt;</span>\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/4kiBE.jpg\" alt=\"enter image description here\"></p>\n\n<ol>\n<li><p>Protocol -- Specifies the protocol name be used to access the resource on the Internet. (HTTP (without SSL) or HTTPS (with SSL))</p></li>\n<li><p>hostname -- Host name specifies the host that owns the resource. For example, www.stackoverflow.com. A server provides services using the name of the host.</p></li>\n<li><p>port -- A port number used to recognize a specific process to which an Internet or other network message is to be forwarded when it arrives at a server.</p></li>\n<li><p>pathname -- The path gives info about the specific resource within the host that the Web client wants to access. For example, stackoverflow.com/index.html.</p></li>\n<li><p>query --  A query string follows the path component, and provides a string of information that the resource can utilize for some purpose (for example, as parameters for a search or as data to be processed). </p></li>\n<li><p>hash -- The anchor portion of a URL, includes the hash sign (#).</p></li>\n</ol>\n\n<p>With these Location object properties you can access all of these URL components</p>\n\n<ol>\n<li><strong>hash</strong>   -Sets or returns the anchor portion of a URL.  </li>\n<li><strong>host</strong>   -Sets\nor returns the hostname and port of a URL.   </li>\n<li><strong>hostname</strong>   -Sets or\nreturns the hostname of a URL.   </li>\n<li><strong>href</strong>   -Sets or returns the entire\nURL.  </li>\n<li><strong>pathname</strong>   -Sets or returns the path name of a URL.   </li>\n<li><strong>port</strong> -Sets or returns the port number the server uses for a URL.  </li>\n<li><strong>protocol</strong>   -Sets or returns the protocol of a URL.   </li>\n<li><strong>search</strong>   -Sets\nor returns the query portion of a URL</li>\n</ol>\n\n<p>Now If you want to change a page or redirect the user to some other page you can use the <code>href</code> property of the Location object like this</p>\n\n<p>You can use the href property of the Location object.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">\"http://www.stackoverflow.com\"</span>;\n</code></pre>\n\n<p><strong>Location Object</strong> also have these three methods</p>\n\n<ol>\n<li><strong>assign()</strong> -- Loads a new document.</li>\n<li><strong>reload()</strong> -- Reloads the current document.</li>\n<li><strong>replace()</strong> -- Replaces the current document with a new one</li>\n</ol>\n\n<p>You can use assign() and replace methods also to redirect to other pages like these</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>location.assign(<span class=\"hljs-string\">\"http://www.stackoverflow.com\"</span>);\n\nlocation.replace(<span class=\"hljs-string\">\"http://www.stackoverflow.com\"</span>);\n</code></pre>\n\n<p><strong><em>How assign() and replace() differs</em></strong><em> -- The difference between replace() method and assign() method(), is that replace() removes the URL of the current document from the document history, means it is not possible to use the \"back\" button to navigate back to the original document. So Use the assign() method if you want to load a new document, andwant to give the option to navigate back to the original document.</em></p>\n\n<p>You can change the location object href property using <strong>jQuery</strong> also  like this</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(location).attr(<span class=\"hljs-string\">'href'</span>,url);\n</code></pre>\n\n<p>And hence you can redirect the user to some other url.</p>\n    </div>",
          "vote": "219"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically <strong>jQuery</strong> is just a <strong>JavaScript</strong> framework and for doing some of the things like <strong>redirection</strong> in this case, you can just use pure JavaScript, so in that case you have 3 options using vanilla JavaScript:</p>\n\n<p>1) Using location <strong>replace</strong>, this will replace the current history of the page, means that it is not possible to use the <strong>back</strong> button to go back to the original page.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.replace(<span class=\"hljs-string\">\"http://stackoverflow.com\"</span>);\n</code></pre>\n\n<p>2) Using location <strong>assign</strong>, this will keep the history for you and with using back button, you can go back to the original page:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.assign(<span class=\"hljs-string\">\"http://stackoverflow.com\"</span>);\n</code></pre>\n\n<p>3) I recommend using one of those previous ways, but this could be the third option using pure JavaScript: </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href=<span class=\"hljs-string\">\"http://stackoverflow.com\"</span>;\n</code></pre>\n\n<p>You can also write a function in jQuery to handle it, but not recommended as it's only one line pure JavaScript function, also you can use all of above functions without window if you are already in the window scope, for example <code>window.location.replace(\"http://stackoverflow.com\");</code> could be <code>location.replace(\"http://stackoverflow.com\");</code></p>\n\n<p>Also I show them all on the image below:</p>\n\n<p><a href=\"https://i.stack.imgur.com/ODheM.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/ODheM.jpg\" alt=\"location.replace location.assign\"></a></p>\n    </div>",
          "vote": "211"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Should just be able to set using <code>window.location</code>.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location = <span class=\"hljs-string\">\"https://stackoverflow.com/\"</span>;\n</code></pre>\n\n<p>Here is a past post on the subject: <a href=\"https://stackoverflow.com/questions/503093/how-can-i-make-a-redirect-page-in-jquery-javascript\">How do I redirect to another webpage?</a></p>\n    </div>",
          "vote": "198"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Before I start, jQuery is a JavaScript library used for DOM manipulation. So you should not be using jQuery for a page redirect.</strong></p>\n\n<p>A quote from Jquery.com:</p>\n\n<blockquote>\n  <p>While jQuery might run without major issues in older browser versions,\n  we do not actively test jQuery in them and generally do not fix bugs\n  that may appear in them.</p>\n</blockquote>\n\n<p>It was found here:\n<a href=\"https://jquery.com/browser-support/\" rel=\"noreferrer\">https://jquery.com/browser-support/</a></p>\n\n<p>So jQuery is not an end-all and be-all solution for backwards compatibility.</p>\n\n<p>The following solution using raw JavaScript works in all browsers and have been standard for a long time so you don't need any libraries for cross browser support.</p>\n\n<p>This page will redirect to <strong><a href=\"http://www.google.com\" rel=\"noreferrer\">Google</a></strong> after 3000 milliseconds</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>&lt;!DOCTYPE html&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>example<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>You will be redirected to google shortly.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n                <span class=\"hljs-built_in\">window</span>.location.href=<span class=\"hljs-string\">\"http://www.google.com\"</span>; <span class=\"hljs-comment\">// The URL that will be redirected too.</span>\n            }, <span class=\"hljs-number\">3000</span>); <span class=\"hljs-comment\">// The bigger the number the longer the delay.</span>\n        </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span>\n</code></pre>\n\n<p>Different options are as follows:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href=<span class=\"hljs-string\">\"url\"</span>; <span class=\"hljs-comment\">// Simulates normal navigation to a new page</span>\n<span class=\"hljs-built_in\">window</span>.location.replace(<span class=\"hljs-string\">\"url\"</span>); <span class=\"hljs-comment\">// Removes current URL from history and replaces it with a new URL</span>\n<span class=\"hljs-built_in\">window</span>.location.assign(<span class=\"hljs-string\">\"url\"</span>); <span class=\"hljs-comment\">// Adds new URL to the history stack and redirects to the new URL</span>\n\n<span class=\"hljs-built_in\">window</span>.history.back(); <span class=\"hljs-comment\">// Simulates a back button click</span>\n<span class=\"hljs-built_in\">window</span>.history.go(-<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Simulates a back button click</span>\n<span class=\"hljs-built_in\">window</span>.history.back(-<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// Simulates a back button click</span>\n<span class=\"hljs-built_in\">window</span>.navigate(<span class=\"hljs-string\">\"page.html\"</span>); <span class=\"hljs-comment\">// Same as window.location=\"url\"</span>\n</code></pre>\n\n<p>When using replace, the back button will not go back to the redirect page, as if it was never in the history. If you want the user to be able to go back to the redirect page then use <code>window.location.href</code> or <code>window.location.assign</code>. If you do use an option that lets the user go back to the redirect page, remember that when you enter the redirect page it will redirect you back. So put that into consideration when picking an option for your redirect. Under conditions where the page is only redirecting when an action is done by the user then having the page in the back button history will be okay. But if the page auto redirects then you should use replace so that the user can use the back button without getting forced back to the page the redirect sends.</p>\n\n<p>You can also use meta data to run a page redirect as followed.</p>\n\n<p><strong>META Refresh</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>&lt;meta http-equiv=<span class=\"hljs-string\">\"refresh\"</span> content=<span class=\"hljs-string\">\"0;url=http://evil.com/\"</span> /&gt;\n</code></pre>\n\n<p><strong>META Location</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>&lt;meta http-equiv=<span class=\"hljs-string\">\"location\"</span> content=<span class=\"hljs-string\">\"URL=http://evil.com\"</span> /&gt;\n</code></pre>\n\n<p><strong>BASE Hijacking</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>&lt;base href=<span class=\"hljs-string\">\"http://evil.com/\"</span> /&gt;\n</code></pre>\n\n<p>Many more methods to redirect your unsuspecting client to a page they may not wish to go can be found on this page (not one of them is reliant on jQuery):</p>\n\n<blockquote>\n  <p><a href=\"https://code.google.com/p/html5security/wiki/RedirectionMethods\" rel=\"noreferrer\">https://code.google.com/p/html5security/wiki/RedirectionMethods</a></p>\n</blockquote>\n\n<p>I would also like to point out, people don't like to be randomly redirected. Only redirect people when absolutely needed. If you start redirecting people randomly they will never go to your site again.</p>\n\n<p>The next paragraph is hypothetical:</p>\n\n<p>You also may get reported as a malicious site. If that happens then when people click on a link to your site the users browser may warn them that your site is malicious. What may also happen is search engines may start dropping your rating if people are reporting a bad experience on your site.</p>\n\n<p>Please review Google Webmaster Guidelines about redirects:\n<a href=\"https://support.google.com/webmasters/answer/2721217?hl=en&amp;ref_topic=6001971\" rel=\"noreferrer\">https://support.google.com/webmasters/answer/2721217?hl=en&amp;ref_topic=6001971</a></p>\n\n<p>Here is a fun little page that kicks you out of the page.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>&lt;!DOCTYPE html&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Go Away<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Go Away<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n            <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n                <span class=\"hljs-built_in\">window</span>.history.back();\n            }, <span class=\"hljs-number\">3000</span>);\n        </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span></span>\n</code></pre>\n\n<p>If you combine the two page examples together you would have an infant loop of rerouting that will guarantee that your user will never want to use your site ever again.</p>\n    </div>",
          "vote": "175"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-string\">'asdf.html'</span>;\n<span class=\"hljs-built_in\">window</span>.location.href = url;\n</code></pre>\n    </div>",
          "vote": "171"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can do that without jQuery as:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location = <span class=\"hljs-string\">\"http://yourdomain.com\"</span>;\n</code></pre>\n\n<p>And if you want only jQuery then you can do it like:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$jq(<span class=\"hljs-built_in\">window</span>).attr(<span class=\"hljs-string\">\"location\"</span>,<span class=\"hljs-string\">\"http://yourdomain.com\"</span>);\n</code></pre>\n    </div>",
          "vote": "149"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This works with jQuery:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-built_in\">window</span>).attr(<span class=\"hljs-string\">\"location\"</span>, <span class=\"hljs-string\">\"http://google.fr\"</span>);\n</code></pre>\n    </div>",
          "vote": "146"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong># HTML Page Redirect Using jQuery/JavaScript Method</strong></p>\n<p>Try this example code:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">YourJavaScriptFunction</span>(<span class=\"hljs-params\"></span>)\n</span>{\n    <span class=\"hljs-keyword\">var</span> i = $(<span class=\"hljs-string\">'#login'</span>).val();\n    <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-string\">'login'</span>)\n        <span class=\"hljs-built_in\">window</span>.location = <span class=\"hljs-string\">\"Login.php\"</span>;\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-built_in\">window</span>.location = <span class=\"hljs-string\">\"Logout.php\"</span>;\n}\n</code></pre>\n<p>If you want to give a complete URL as <strong><code>window.location = \"www.google.co.in\";</code></strong>.</p>\n    </div>",
          "vote": "94"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Original question:</strong> \"How to redirect using jQuery?\", hence the answer implements jQuery &gt;&gt; Complimentary usage case.</p>\n\n<hr>\n\n<p>To just redirect to a page with JavaScript:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">\"/contact/\"</span>;\n</code></pre>\n\n<p>Or if you need a delay:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">\"/contact/\"</span>;\n}, <span class=\"hljs-number\">2000</span>);   <span class=\"hljs-comment\">// Time in milliseconds</span>\n</code></pre>\n\n<p>jQuery allows you to select elements from a web page with ease. You can find anything you want on a page and then use jQuery to add special effects, react to user actions, or show and hide content inside or outside the element you have selected. All these tasks start with knowing <a href=\"http://learn.jquery.com/using-jquery-core/selecting-elements/\" rel=\"noreferrer\">how to select an element or an event</a>.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-string\">'a,img'</span>).on(<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n  e.preventDefault();\n  $(<span class=\"hljs-built_in\">this</span>).animate({\n    <span class=\"hljs-attr\">opacity</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">//Put some CSS animation here</span>\n  }, <span class=\"hljs-number\">500</span>);\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-comment\">// OK, finished jQuery staff, let's go redirect</span>\n    <span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">\"/contact/\"</span>;\n  },<span class=\"hljs-number\">500</span>);\n});\n</code></pre>\n\n<p>Imagine someone wrote a script/plugin with 10000 lines of code. With jQuery you can connect to this code with just a line or two.</p>\n    </div>",
          "vote": "87"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You need to put this line in your code:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(location).attr(<span class=\"hljs-string\">\"href\"</span>,<span class=\"hljs-string\">\"http://stackoverflow.com\"</span>);\n</code></pre>\n\n<p>If you don't have jQuery, go with JavaScript:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.replace(<span class=\"hljs-string\">\"http://stackoverflow.com\"</span>);\n<span class=\"hljs-built_in\">window</span>.location.href(<span class=\"hljs-string\">\"http://stackoverflow.com\"</span>);\n</code></pre>\n    </div>",
          "vote": "82"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>So, the question is how to make a redirect page, and not how to redirect to a website?</p>\n<p>You only need to use JavaScript for this. Here is some tiny code that will create a dynamic redirect page.</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>&lt;script&gt;\n    <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-built_in\">window</span>.location.search.split(<span class=\"hljs-string\">'url='</span>)[<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// Get the URL after ?url=</span>\n    <span class=\"hljs-keyword\">if</span>( url ) <span class=\"hljs-built_in\">window</span>.location.replace(url);\n&lt;/script&gt;\n</code></pre>\n<p>So say you just put this snippet into a <code>redirect/index.html</code> file on your website you can use it like so.</p>\n<blockquote>\n<p><code>http://www.mywebsite.com/redirect?url=http://stackoverflow.com</code></p>\n</blockquote>\n<p>And if you go to that link it will automatically redirect you to <strong>stackoverflow.com</strong>.</p>\n<blockquote>\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.location\" rel=\"noreferrer\">Link to Documentation</a></strong></p>\n</blockquote>\n<p><strong>And that's how you make a <em>Simple</em> redirect page with JavaScript</strong></p>\n<p>Edit:</p>\n<p>There is also one thing to note. I have added <code>window.location.replace</code> in my code because I think it suits a redirect page, but, you must know that when using <code>window.location.replace</code> and you get redirected, when you press the back button in your browser it will <strong>not</strong> got back to the redirect page, and it will go back to the page before it, take a look at this little demo thing.</p>\n<p>Example:</p>\n<blockquote>\n<p>The process: <strong>store home</strong> =&gt; <strong>redirect page to google</strong> =&gt; <strong>google</strong></p>\n<p>When at google: <strong>google</strong> =&gt; <strong>back button in browser</strong> =&gt; <strong>store home</strong></p>\n</blockquote>\n<p>So, if this suits your needs then everything should be fine. If you want to include the redirect page in the browser history replace this</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span>( url ) <span class=\"hljs-built_in\">window</span>.location.replace(url);\n</code></pre>\n<p>with</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span>( url ) <span class=\"hljs-built_in\">window</span>.location.href = url;\n</code></pre>\n    </div>",
          "vote": "80"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>On your click function, just add:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">\"The URL where you want to redirect\"</span>;\n$(<span class=\"hljs-string\">'#id'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">\"http://www.google.com\"</span>;\n});\n</code></pre>\n    </div>",
          "vote": "77"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>location.assign(<span class=\"hljs-string\">\"http://www.google.com\"</span>);\n</code></pre>\n\n<p><a href=\"http://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_loc_assign\" rel=\"noreferrer\">Code snippet of example</a>.</p>\n    </div>",
          "vote": "64"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>jQuery is not needed. You can do this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.open(<span class=\"hljs-string\">\"URL\"</span>,<span class=\"hljs-string\">\"_self\"</span>,<span class=\"hljs-string\">\"\"</span>,<span class=\"hljs-string\">\"\"</span>)\n</code></pre>\n\n<p>It is that easy!</p>\n\n<p>The best way to initiate an HTTP request is with <code>document.loacation.href.replace('URL')</code>.</p>\n    </div>",
          "vote": "60"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First write properly. You want to navigate within an application for another link from your application for another link. Here is the code:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href = <span class=\"hljs-string\">\"http://www.google.com\"</span>;\n</code></pre>\n\n<p>And if you want to navigate pages within your application then I also have code, if you want.</p>\n    </div>",
          "vote": "54"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can redirect in jQuery like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(location).attr(<span class=\"hljs-string\">'href'</span>, <span class=\"hljs-string\">'http://yourPage.com/'</span>);\n</code></pre>\n    </div>",
          "vote": "54"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Using JavaScript:</h1>\n\n<h3>Method 1:</h3>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href=<span class=\"hljs-string\">\"http://google.com\"</span>;\n</code></pre>\n\n<h3>Method 2:</h3>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.replace(<span class=\"hljs-string\">\"http://google.com\"</span>);\n</code></pre>\n\n<hr>\n\n<h1>Using jQuery:</h1>\n\n<h3>Method 1: $(location)</h3>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(location).attr(<span class=\"hljs-string\">'href'</span>, <span class=\"hljs-string\">'http://google.com'</span>);\n</code></pre>\n\n<h3>Method 2: Reusable Function</h3>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>jQuery.fn.redirectTo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">url</span>)</span>{\n    <span class=\"hljs-built_in\">window</span>.location.href = url;\n}\n\njQuery(<span class=\"hljs-built_in\">window</span>).redirectTo(<span class=\"hljs-string\">\"http://google.com\"</span>);\n</code></pre>\n    </div>",
          "vote": "52"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In JavaScript and jQuery we can use the following code to redirect the one page to another page:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href=<span class=\"hljs-string\">\"http://google.com\"</span>;\n<span class=\"hljs-built_in\">window</span>.location.replace(<span class=\"hljs-string\">\"page1.html\"</span>);\n</code></pre>\n    </div>",
          "vote": "47"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>ECMAScript 6 + jQuery, 85 bytes</h1>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$({<span class=\"hljs-attr\">jQueryCode</span>:<span class=\"hljs-function\">(<span class=\"hljs-params\">url</span>)=&gt;</span>location.replace(url)}).attr(<span class=\"hljs-string\">\"jQueryCode\"</span>)(<span class=\"hljs-string\">\"http://example.com\"</span>)\n</code></pre>\n\n<p>Please don't kill me, this is a joke. It's a joke. <em>This is a joke.</em></p>\n\n<p>This did \"provide an answer to the question\", in the sense that it asked for a solution \"using jQuery\" which in this case entails forcing it into the equation somehow.</p>\n\n<p>Ferrybig apparently needs the joke explained (still joking, I'm sure there are limited options on the review form), so without further ado:</p>\n\n<p>Other answers are using jQuery's <code>attr()</code> on the <code>location</code> or <code>window</code> objects unnecessarily.</p>\n\n<p>This answer also abuses it, but in a more ridiculous way. Instead of using it to set the location, this uses <code>attr()</code> to retrieve a function that sets the location.</p>\n\n<p>The function is named <code>jQueryCode</code> even though there's nothing jQuery about it, and calling a function <code>somethingCode</code> is just horrible, especially when the something is not even a language.</p>\n\n<p>The \"85 bytes\" is a reference to Code Golf. Golfing is obviously not something you should do outside of code golf, and furthermore this answer is clearly not actually golfed.</p>\n\n<p>Basically, cringe.</p>\n    </div>",
          "vote": "47"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Javascript:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href=<span class=\"hljs-string\">'www.your_url.com'</span>;\n<span class=\"hljs-built_in\">window</span>.top.location.href=<span class=\"hljs-string\">'www.your_url.com'</span>;\n<span class=\"hljs-built_in\">window</span>.location.replace(<span class=\"hljs-string\">'www.your_url.com'</span>);\n</code></pre>\n\n<p>Jquery:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> url=<span class=\"hljs-string\">'www.your_url.com'</span>;\n$(location).attr(<span class=\"hljs-string\">'href'</span>,url);\n$(location).prop(<span class=\"hljs-string\">'href'</span>,url);<span class=\"hljs-comment\">//instead of location you can use window</span>\n</code></pre>\n    </div>",
          "vote": "47"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is a time-delay redirection. You can set the delay time to whatever you want:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>&lt;!doctype html&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Your Document Title<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">delayer</span>(<span class=\"hljs-params\">delay</span>) </span>{\n            onLoad = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-string\">'window.location.href = \"http://www.google.com/\"'</span>, delay);\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n        delayer(8000)\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>You will be redirected in 8 seconds!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</span></code></pre>\n    </div>",
          "vote": "43"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are three main ways to do this,</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.href=<span class=\"hljs-string\">'blaah.com'</span>;\n<span class=\"hljs-built_in\">window</span>.location.assign(<span class=\"hljs-string\">'blaah.com'</span>);\n</code></pre>\n<p>and...</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">window</span>.location.replace(<span class=\"hljs-string\">'blaah.com'</span>);\n</code></pre>\n<p>The last one is best, for a traditional redirect, because it will not save the page you went to before being redirected in your search history. However, if you just want to open a tab with JavaScript, you can use any of the above.<a href=\"http://basicuse.net/tips/pl/scripting_languages/javascript/how_to_make_a_page_redirect_in_javascript\" rel=\"noreferrer\">1</a></p>\n<p>EDIT: The <code>window</code> prefix is optional.</p>\n    </div>",
          "vote": "40"
        }
      ]
    },
    {
      "question": "How to modify existing, unpushed commit messages?",
      "url": "https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commit-messages",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M16 9a2 2 0 00-2-2V6A5 5 0 004 6v1a2 2 0 00-2 2v6c0 1.1.9 2 2 2h10a2 2 0 002-2V9zm-7 5a2 2 0 110-4 2 2 0 010 4zm3.1-7H5.9V6a3.1 3.1 0 016.2 0v1z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>This question's answers are a <a href=\"/help/privileges/edit-community-wiki\">community effort</a></b>. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n</aside>\n\n    </div>\n\n<p>I wrote the wrong thing in a commit message.</p>\n\n<p>How can I change the message? The commit has not been pushed yet.</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Amending the most recent commit message</h1>\n<pre class=\"lang-sh s-code-block hljs bash\"><code>git commit --amend\n</code></pre>\n<p>will open your editor, allowing you to change the commit message of the most recent commit. Additionally, you can set the commit message directly in the command line with:</p>\n<pre class=\"lang-sh s-code-block hljs bash\"><code>git commit --amend -m <span class=\"hljs-string\">\"New commit message\"</span>\n</code></pre>\n<p>…however, this can make multi-line commit messages or small corrections more cumbersome to enter.</p>\n<p>Make sure you don't have any working copy changes <em>staged</em> before doing this or they will get committed too. (<em>Unstaged</em> changes will not get committed.)</p>\n<h2>Changing the message of a commit that you've already pushed to your remote branch</h2>\n<p>If you've already pushed your commit up to your remote branch, then - after amending your commit locally (as described above) - you'll also <a href=\"https://stackoverflow.com/questions/41003071/why-must-i-force-push-after-changing-a-commit-message\">need to force push the commit</a> with:</p>\n<pre class=\"lang-bash s-code-block hljs\"><code>git push &lt;remote&gt; &lt;branch&gt; --force\n<span class=\"hljs-comment\"># Or</span>\ngit push &lt;remote&gt; &lt;branch&gt; -f\n</code></pre>\n<p><strong>Warning: force-pushing will overwrite the remote branch with the state of your local one</strong>. If there are commits on the remote branch that you don't have in your local branch, you <em>will</em> lose those commits.</p>\n<p><strong>Warning: be cautious about amending commits that you have already shared with other people.</strong> Amending commits essentially <em>rewrites</em> them to have different <a href=\"http://en.wikipedia.org/wiki/SHA-1\" rel=\"noreferrer\">SHA</a> IDs, which poses a problem if other people have copies of the old commit that you've rewritten. Anyone who has a copy of the old commit will need to synchronize their work with your newly re-written commit, which can sometimes be difficult, so make sure you coordinate with others when attempting to rewrite shared commit history, or just avoid rewriting shared commits altogether.</p>\n<hr>\n<h3>Perform an interactive rebase</h3>\n<p>Another option is to use interactive rebase.\nThis allows you to edit any message you want to update even if it's not the latest message.</p>\n<p>In order to do a Git squash, follow these steps:</p>\n<pre><code>// n is the number of commits up to the last commit you want to be able to edit\ngit rebase -i HEAD~n\n</code></pre>\n<p>Once you squash your commits - choose the <code>e/r</code> for editing the message:</p>\n<p><a href=\"https://i.stack.imgur.com/LVcm9.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/LVcm9.png\" alt=\"Enter image description here\"></a></p>\n<h3>Important note about interactive rebase</h3>\n<p>When you use <code>git rebase -i HEAD~n</code> there can be <strong>more</strong> than n commits. Git will \"collect\" all the commits in the last n commits, and if there was a merge somewhere in between that range you will see all the commits as well, so the outcome will be n + .</p>\n<h3>Good tip:</h3>\n<p>If you have to do it for more than a single branch and you might face conflicts when amending the content, set up <a href=\"https://stackoverflow.com/questions/35415925/is-it-possible-to-setup-git-merge-for-automatic-resolving-git-rerere/35417944#35417944\"><code>git rerere</code></a> and let Git resolve those conflicts automatically for you.</p>\n<hr>\n<h2>Documentation</h2>\n<ul>\n<li><p><a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-commit.html\" rel=\"noreferrer\">git-commit(1) Manual Page</a></p>\n</li>\n<li><p><a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-rebase.html\" rel=\"noreferrer\">git-rebase(1) Manual Page</a></p>\n</li>\n<li><p><a href=\"https://www.kernel.org/pub/software/scm/git/docs/git-push.html\" rel=\"noreferrer\">git-push(1) Manual Page</a></p>\n</li>\n</ul>\n    </div>",
          "vote": "16894"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-sh s-code-block hljs bash\"><code>git commit --amend -m <span class=\"hljs-string\">\"your new message\"</span>\n</code></pre>\n    </div>",
          "vote": "2564"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the commit you want to fix isn’t the most recent one:</p>\n\n<ol>\n<li><p><code>git rebase --interactive $parent_of_flawed_commit</code></p>\n\n<p>If you want to fix several flawed commits, pass the parent of the oldest one of them.</p></li>\n<li><p>An editor will come up, with a list of all commits since the one you gave.</p>\n\n<ol>\n<li>Change <code>pick</code> to <code>reword</code> (or on old versions of Git, to <code>edit</code>) in front of any commits you want to fix.</li>\n<li>Once you save, Git will replay the listed commits. <br> <br></li>\n</ol></li>\n<li><p>For each commit you want to <em>reword</em>, Git will drop you back into your editor. For each commit you want to <em>edit</em>, Git drops you into the shell. If you’re in the shell:</p>\n\n<ol>\n<li>Change the commit in any way you like.</li>\n<li><code>git commit --amend</code></li>\n<li><code>git rebase --continue</code></li>\n</ol></li>\n</ol>\n\n<p>Most of this sequence will be explained to you by the output of the various commands as you go. It’s very easy; you don’t need to memorise it – just remember that <code>git rebase --interactive</code> lets you correct commits no matter how long ago they were.</p>\n\n<hr>\n\n<p>Note that you will not want to change commits that you have already pushed. Or maybe you do, but in that case you will have to take great care to communicate with everyone who may have pulled your commits and done work on top of them. <em><a href=\"https://stackoverflow.com/questions/4084868/how-do-i-recover-resynchronise-after-someone-pushes-a-rebase-or-a-reset-to-a-pub\">How do I recover/resynchronise after someone pushes a rebase or a reset to a published branch?</a></em></p>\n    </div>",
          "vote": "2419"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To amend the previous commit, make the changes you want and stage those changes, and then run</p>\n\n\n\n<pre class=\"lang-none s-code-block\"><code>git commit --amend\n</code></pre>\n\n<p>This will open a file in your text editor representing your new commit message. It starts out populated with the text from your old commit message. Change the commit message as you want, then save the file and quit your editor to finish.</p>\n\n<p>To amend the previous commit and keep the same log message, run</p>\n\n<pre class=\"lang-none s-code-block\"><code>git commit --amend -C HEAD\n</code></pre>\n\n<p>To fix the previous commit by removing it entirely, run</p>\n\n<pre class=\"lang-none s-code-block\"><code>git reset --hard HEAD^\n</code></pre>\n\n<p>If you want to edit more than one commit message, run</p>\n\n<pre class=\"lang-none s-code-block\"><code>git rebase -i HEAD~<b>commit_count</b></code></pre>\n\n<p>(Replace <b>commit_count</b> with number of commits that you want to edit.) This command launches your editor. Mark the first commit (the one that you want to change) as “edit” instead of “pick”, then save and exit your editor. Make the change you want to commit and then run</p>\n\n<pre class=\"lang-none s-code-block\"><code>git commit --amend\ngit rebase --continue\n</code></pre>\n\n<p>Note: You can also \"Make the change you want\" from the editor opened by <code>git commit --amend</code></p>\n    </div>",
          "vote": "796"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As already mentioned, <code>git commit --amend</code> is the way to overwrite the last commit. One note: if you would like to also <strong>overwrite the files</strong>, the command would be </p>\n\n<pre class=\"lang-c s-code-block hljs\"><code>git commit -a --amend -m <span class=\"hljs-string\">\"My new commit message\"</span>\n</code></pre>\n    </div>",
          "vote": "405"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You also can use <code>git filter-branch</code> for that.</p>\n\n<pre class=\"lang-c s-code-block hljs\"><code>git filter-branch -f --msg-filter <span class=\"hljs-string\">\"sed 's/errror/error/'\"</span> $flawed_commit..HEAD\n</code></pre>\n\n<p>It's not as easy as a trivial <code>git commit --amend</code>, but it's especially useful, if you already have some merges after your erroneous commit message.</p>\n\n<p>Note that this will try to rewrite <em>every</em> commit between <code>HEAD</code> and the flawed commit, so you should choose your <code>msg-filter</code> command very wisely ;-)</p>\n    </div>",
          "vote": "364"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I prefer this way:</p>\n\n<pre><code>git commit --amend -c &lt;commit ID&gt;\n</code></pre>\n\n<p>Otherwise, there will be a new commit with a new commit ID.</p>\n    </div>",
          "vote": "323"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you are using the Git GUI tool, there is a button named <em>Amend last commit</em>. Click on that button and then it will display your last commit files and message. Just edit that message, and you can commit it with a new commit message.</p>\n\n<p>Or use this command from a console/terminal:</p>\n\n<pre><code>git commit -a --amend -m \"My new commit message\"\n</code></pre>\n    </div>",
          "vote": "316"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use <a href=\"http://git-scm.com/book/en/Git-Branching-Rebasing\">Git rebasing</a>. For example, if you want to modify back to commit bbc643cd, run</p>\n\n<pre><code>$ git rebase bbc643cd^ --interactive\n</code></pre>\n\n<p>In the default editor, modify 'pick' to 'edit' in the line whose commit you want to modify. Make your changes and then stage them with</p>\n\n<pre><code>$ git add &lt;filepattern&gt;\n</code></pre>\n\n<p>Now you can use</p>\n\n<pre><code>$ git commit --amend\n</code></pre>\n\n<p>to modify the commit, and after that</p>\n\n<pre><code>$ git rebase --continue\n</code></pre>\n\n<p>to return back to the previous head commit.</p>\n    </div>",
          "vote": "288"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li><p>If you only want to modify your last commit message, then do:</p>\n\n<pre><code>git commit --amend\n</code></pre></li>\n</ol>\n\n<p>That will drop you into your text editor and let you change the last commit message.</p>\n\n<ol start=\"2\">\n<li><p>If you want to change the last three commit messages, or any of the commit messages up to that point, supply <code>HEAD~3</code> to the <code>git rebase -i</code> command:</p>\n\n<pre><code>git rebase -i HEAD~3\n</code></pre></li>\n</ol>\n    </div>",
          "vote": "281"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have to change an old commit message over multiple branches (i.e., the commit with the erroneous message is present in multiple branches) you might want to use:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git filter-branch -f --msg-filter \\\n<span class=\"hljs-string\">'sed \"s/&lt;old message&gt;/&lt;new message&gt;/g\"'</span> -- --all\n</code></pre>\n\n<p>Git will create a temporary directory for rewriting and additionally backup old references in <code>refs/original/</code>.</p>\n\n<ul>\n<li><p><code>-f</code> will enforce the execution of the operation. This is necessary if the temporary directory is already present or if there are already references stored under <code>refs/original</code>. If that is not the case, you can drop this flag.</p></li>\n<li><p><code>--</code> separates filter-branch options from revision options.</p></li>\n<li><p><code>--all</code> will make sure that all <em>branches</em> and <em>tags</em> are rewritten.</p></li>\n</ul>\n\n<p>Due to the backup of your old references, you can easily go back to the state before executing the command.</p>\n\n<p>Say, you want to recover your master and access it in branch <code>old_master</code>:</p>\n\n<pre><code>git checkout -b old_master refs/original/refs/heads/master\n</code></pre>\n    </div>",
          "vote": "264"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use</p>\n\n<pre><code>git commit --amend\n</code></pre>\n\n<p>To understand it in detail, an excellent post is <em><a href=\"https://www.atlassian.com/git/tutorials/rewriting-history#git-commit--amend\" rel=\"noreferrer\">4. Rewriting Git History</a></em>. It also talks about <strong>when not to use</strong> <code>git commit --amend</code>.</p>\n    </div>",
          "vote": "228"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If it's your last commit, just <strong>amend</strong> the commit:</p>\n\n<pre><code>git commit --amend -o -m \"New commit message\"\n</code></pre>\n\n<p><em>(Using the <code>-o</code> (<code>--only</code>) flag to make sure you change only the commit message)</em></p>\n\n<p><br></p>\n\n<p>If it's a buried commit, use the awesome <strong>interactive rebase</strong>:</p>\n\n<pre><code>git rebase -i @~9   # Show the last 9 commits in a text editor\n</code></pre>\n\n<p>Find the commit you want, change <code>pick</code> to <code>r</code> (<code>reword</code>), and save and close the file. Done!</p>\n\n<p><br></p>\n\n<hr>\n\n<p>Miniature Vim tutorial (or, how to rebase with only 8 keystrokes <kbd><code>3j</code></kbd><kbd><code>cw</code></kbd><code>r</code><kbd>Esc</kbd><kbd><code>ZZ</code></kbd>):</p>\n\n<ul>\n<li>Run <code>vimtutor</code> if you have time</li>\n<li><kbd><code>h</code></kbd><kbd><code>j</code></kbd><kbd><code>k</code></kbd><kbd><code>l</code></kbd> correspond to movement keys <kbd>←</kbd><kbd>↓</kbd><kbd>↑</kbd><kbd>→</kbd></li>\n<li>All commands can be prefixed with a \"range\", e.g. <kbd><code>3j</code></kbd> moves down three lines</li>\n<li><kbd><code>i</code></kbd> to enter insert mode — text you type will appear in the file</li>\n<li><kbd>Esc</kbd> or <kbd>Ctrl</kbd><kbd><code>c</code></kbd> to exit insert mode and return to \"normal\" mode</li>\n<li><kbd><code>u</code></kbd> to undo</li>\n<li><kbd>Ctrl</kbd><kbd><code>r</code></kbd> to redo</li>\n<li><kbd><code>dd</code></kbd>, <kbd><code>dw</code></kbd>, <kbd><code>dl</code></kbd> to delete a line, word, or letter, respectively</li>\n<li><kbd><code>cc</code></kbd>, <kbd><code>cw</code></kbd>, <kbd><code>cl</code></kbd> to change a line, word, or letter, respectively (same as <kbd><code>dd</code></kbd><kbd><code>i</code></kbd>)</li>\n<li><kbd><code>yy</code></kbd>, <kbd><code>yw</code></kbd>, <kbd><code>yl</code></kbd> to copy (\"yank\") a line, word, or letter, respectively</li>\n<li><kbd><code>p</code></kbd> or <kbd><code>P</code></kbd> to paste after, or before current position, respectively</li>\n<li><kbd><code>:w</code></kbd><kbd>Enter</kbd> to save (write) a file</li>\n<li><kbd><code>:q!</code></kbd><kbd>Enter</kbd> to quit without saving</li>\n<li><kbd><code>:wq</code></kbd><kbd>Enter</kbd> or <kbd><code>ZZ</code></kbd> to save and quit</li>\n</ul>\n\n<p>If you edit text a lot, then switch to the <a href=\"https://en.wikipedia.org/wiki/Dvorak_keyboard_layout\" rel=\"noreferrer\">Dvorak keyboard layout</a>, learn to touch-type, and learn Vim. <a href=\"https://stackoverflow.com/questions/597077/is-learning-vim-worth-the-effort\">Is it worth the effort?</a> Yes.</p>\n\n<p><br></p>\n\n<hr>\n\n<p>ProTip™: Don't be afraid to experiment with \"dangerous\" commands that rewrite history* — Git doesn't delete your commits for 90 days by default; you can find them in the reflog:</p>\n\n<pre><code>$ git reset @~3   # Go back three commits\n$ git reflog\nc4f708b HEAD@{0}: reset: moving to @~3\n2c52489 HEAD@{1}: commit: more changes\n4a5246d HEAD@{2}: commit: make important changes\ne8571e4 HEAD@{3}: commit: make some changes\n... earlier commits ...\n$ git reset 2c52489\n... and you're back where you started\n</code></pre>\n\n<p>* <em>Watch out for options like <code>--hard</code> and <code>--force</code> though — they can discard data.</em>\n*  <em>Also, don't rewrite history on any branches you're collaborating on.</em></p>\n    </div>",
          "vote": "208"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h3>Amend</h3>\n\n<p>You have a couple of options here. You can do</p>\n\n<pre><code>git commit --amend\n</code></pre>\n\n<p>as long as it's your last commit.</p>\n\n<h3>Interactive rebase</h3>\n\n<p>Otherwise, if it's not your last commit, you can do an interactive rebase,</p>\n\n<pre><code>git rebase -i [branched_from] [hash before commit]\n</code></pre>\n\n<p>Then inside the interactive rebase you simply add edit to that commit. When it comes up, do a <code>git commit --amend</code> and modify the commit message. If you want to roll back before that commit point, you could also use <code>git reflog</code> and just delete that commit. Then you just do a <code>git commit</code> again.</p>\n    </div>",
          "vote": "200"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you are using the Git GUI, you can amend the last commit which hasn't been pushed with:  </p>\n\n<pre><code>Commit/Amend Last Commit\n</code></pre>\n    </div>",
          "vote": "185"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I use the <a href=\"http://git-scm.com/docs/git-gui\">Git GUI</a> as much as I can, and that gives you the option to amend the last commit:</p>\n\n<p><img src=\"https://i.stack.imgur.com/qXMzu.png\" alt=\"Tick that box\" title=\"Check that box &quot;Amend Last Commit&quot;!\"></p>\n\n<p>Also, <code>git rebase -i origin/master</code>is a nice mantra that will always present you with the commits you have done on top of master, and give you the option to amend, delete, reorder or squash. No need to get hold of that hash first.</p>\n    </div>",
          "vote": "168"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Wow, so there are a lot of ways to do this.</p>\n\n<p>Yet another way to do this is to delete the last commit, but keep its changes so that you won't lose your work. You can then do another commit with the corrected message. This would look something like this:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git reset --soft HEAD~1\ngit commit -m <span class=\"hljs-string\">'New and corrected commit message'</span>\n</code></pre>\n\n<p>I always do this if I forget to add a file or do a change.</p>\n\n<p><strong>Remember</strong> to specify <code>--soft</code> instead of <code>--hard</code>, otherwise you lose that commit entirely.</p>\n    </div>",
          "vote": "139"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For anyone looking for a Windows/Mac GUI to help with editing older messages (i.e. not just the latest message), I'd recommend <a href=\"http://www.sourcetreeapp.com\" rel=\"nofollow noreferrer\">Sourcetree</a>. The steps to follow are below the image.</p>\n<p><img src=\"https://i.stack.imgur.com/CcA2P.png\" alt=\"Sourcetree interactive rebase\"></p>\n<p><strong>For commits that haven't been pushed to a remote yet:</strong></p>\n<ol>\n<li>Make sure you've committed or stashed all current changes (i.e., so there are no files listed in the \"File Status\" tab) - it won't work otherwise.</li>\n<li>In the \"Log / History\" tab, right click on the entry with an adjoining line in the graph <strong>one below</strong> the commit(s) you wish to edit and select \"Rebase children of <em>&lt;commit ref&gt;</em> interactively...\"</li>\n<li>Select the whole row for a commit message you wish to change <em>(click on the \"Message\" column)</em>.</li>\n<li>Click the \"Edit Message\" button.</li>\n<li>Edit the message as desired in the dialog that comes up and then click <kbd>OK</kbd>.</li>\n<li>Repeat steps 3-4 if there are other commit messages to change.</li>\n<li>Click <kbd>OK</kbd>: Rebasing will commence. If all is well, the output will end \"Completed successfully\". <em><strong>NOTE:</strong> I've sometimes seen this fail with <code>Unable to create 'project_path/.git/index.lock': File exists.</code> when trying to modify multiple commit messages at the same time. Not sure exactly what the issue is, or whether it will be fixed in a future version of Sourcetree, but if this happens would recommend rebasing them one at a time (slower but seems more reliable).</em></li>\n</ol>\n<p><strong>...Or... for commits that have already been pushed:</strong></p>\n<p>Follow the steps in <a href=\"https://stackoverflow.com/questions/17604232#23239109\">this answer</a>, which are similar to above, but require a further command to be run from the command line (<code>git push origin &lt;branch&gt; -f</code>) to force-push the branch. I'd recommend reading it all and applying the necessary caution!</p>\n    </div>",
          "vote": "136"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you just want to edit the latest commit, use:</p>\n\n<pre><code>git commit --amend\n</code></pre>\n\n<p>or</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git commit --amend -m <span class=\"hljs-string\">'one line message'</span>\n</code></pre>\n\n<p>But if you want to edit several commits in a row, you should use rebasing instead:</p>\n\n<pre><code>git rebase -i &lt;hash of one commit before the wrong commit&gt;\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/jRTRr.png\" alt=\"Git rebase editing\"></p>\n\n<p>In a file, like the one above, write <code>edit/e</code> or one of the other options, and hit save and exit.</p>\n\n<p>Now you'll be at the first wrong commit. Make changes in the files, and they'll be automatically staged for you. Type</p>\n\n<pre><code>git commit --amend\n</code></pre>\n\n<p>Save and exit that and type</p>\n\n<pre><code>git rebase --continue\n</code></pre>\n\n<p>to move to next selection until finished with all your selections.</p>\n\n<p>Note that these things change all your SHA hashes after that particular commit.</p>\n    </div>",
          "vote": "128"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you only want to change your last message you should use the <code>--only</code> flag or its shortcut <code>-o</code> with <code>commit --amend</code>:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git commit --amend -o -m <span class=\"hljs-string\">\"New commit message\"</span>\n</code></pre>\n\n<p>This ensures that you don't accidentally enhance your commit with staged stuff. Of course it's best to have a proper <code>$EDITOR</code> configuration. Then you can leave the <code>-m</code> option out, and Git will pre-fill the commit message with the old one. In this way it can be easily edited.</p>\n    </div>",
          "vote": "127"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Update your last wrong commit message with the new commit message in one line:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git commit --amend -m <span class=\"hljs-string\">\"your new commit message\"</span>\n</code></pre>\n\n<p>Or, try Git reset like below:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code><span class=\"hljs-comment\"># You can reset your head to n number of commit</span>\n<span class=\"hljs-comment\"># NOT a good idea for changing last commit message,</span>\n<span class=\"hljs-comment\"># but you can get an idea to split commit into multiple commits</span>\ngit reset --soft HEAD^\n\n<span class=\"hljs-comment\"># It will reset you last commit. Now, you</span>\n<span class=\"hljs-comment\"># can re-commit it with new commit message.</span>\n</code></pre>\n\n<h3>Using reset to split commits into smaller commits</h3>\n\n<p><code>git reset</code> can help you to break one commit into multiple commits too:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code><span class=\"hljs-comment\"># Reset your head. I am resetting to last commits:</span>\ngit reset --soft HEAD^\n<span class=\"hljs-comment\"># (You can reset multiple commit by doing HEAD~2(no. of commits)</span>\n\n<span class=\"hljs-comment\"># Now, reset your head for splitting it to multiple commits</span>\ngit reset HEAD\n\n<span class=\"hljs-comment\"># Add and commit your files separately to make multiple commits: e.g</span>\ngit add app/\ngit commit -m <span class=\"hljs-string\">\"add all files in app directory\"</span>\n\ngit add config/\ngit commit -m <span class=\"hljs-string\">\"add all files in config directory\"</span>\n</code></pre>\n\n<p>Here you have successfully broken your last commit into two commits.</p>\n    </div>",
          "vote": "103"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>On this question there are a lot of answers, but none of them explains in super detail how to change older commit messages using <a href=\"http://en.wikipedia.org/wiki/Vim_%28text_editor%29\" rel=\"noreferrer\">Vim</a>. I was stuck trying to do this myself, so here I'll write down in detail how I did this especially for people who have no experience in Vim!</p>\n\n<p>I wanted to change my five latest commits that I already pushed to the server. This is quite 'dangerous' because if someone else already pulled from this, you can mess things up by changing the commit messages. However, when you’re working on your own little branch and are sure no one pulled it you can change it like this:</p>\n\n<p>Let's say you want to change your five latest commits, and then you type this in the terminal:</p>\n\n<pre><code>git rebase -i HEAD~5\n</code></pre>\n\n<p>*Where 5 is the number of commit messages you want to change (so if you want to change the 10th to last commit, you type in 10).</p>\n\n<p>This command will get you into Vim there you can ‘edit’ your commit history. You’ll see your last five commits at the top like this:</p>\n\n<pre><code>pick &lt;commit hash&gt; commit message\n</code></pre>\n\n<p>Instead of <code>pick</code> you need to write <code>reword</code>. You can do this in Vim by typing in <code>i</code>. That makes you go in to <em>insert</em> mode. (You see that you’re in insert mode by the word <em>INSERT</em> at the bottom.) For the commits you want to change, type in <code>reword</code> instead of <code>pick</code>.</p>\n\n<p>Then you need to save and quit this screen. You do that by first going in to ‘command-mode’ by pressing the <kbd>Esc</kbd>button (you can check that you’re in command-mode if the word <em>INSERT</em> at the bottom has disappeared). Then you can type in a command by typing <code>:</code>. The command to save and quit is <code>wq</code>. So if you type in <code>:wq</code> you’re on the right track.</p>\n\n<p>Then Vim will go over every commit message you want to reword, and here you can actually change the commit messages. You’ll do this by going into insert mode, changing the commit message, going into the command-mode, and save and quit. Do this five times and you’re out of Vim!</p>\n\n<p>Then, if you already pushed your wrong commits, you need to <code>git push --force</code> to overwrite them. Remember that <code>git push --force</code> is quite a dangerous thing to do, so make sure that no one pulled from the server since you pushed your wrong commits!</p>\n\n<p>Now you have changed your commit messages!</p>\n\n<p>(As you see, I'm not that experienced in Vim, so if I used the wrong 'lingo' to explain what's happening, feel free to correct me!)</p>\n    </div>",
          "vote": "88"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use <a href=\"https://github.com/albfan/git-rebase-reword\">git-rebase-reword</a></p>\n\n<p>It is designed to edit any commit (not just last) same way as <code>commit --amend</code></p>\n\n<pre><code>$ git rebase-reword &lt;commit-or-refname&gt;\n</code></pre>\n\n<p>It is named after the action on rebase interactive to amend a commit: \"reword\". See <a href=\"https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history\">this post</a> and <a href=\"http://git-scm.com/docs/git-rebase\">man</a> -section interactive mode-</p>\n\n<p>Examples:</p>\n\n<pre><code>$ git rebase-reword b68f560\n$ git rebase-reword HEAD^\n</code></pre>\n    </div>",
          "vote": "79"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have added the aliases <code>reci</code> and <code>recm</code> for <code>recommit (amend)</code> it. Now I can do it with <code>git recm</code> or <code>git recm -m</code>:</p>\n\n<pre><code>$ vim ~/.gitconfig\n\n[alias]\n\n    ......\n    cm = commit\n    reci = commit --amend\n    recm = commit --amend\n    ......\n</code></pre>\n    </div>",
          "vote": "79"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I realised that I had pushed a commit with a typo in it. In order to undo, I did the following:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code>git commit --amend -m <span class=\"hljs-string\">\"T-1000, advanced prototype\"</span>\ngit push --force\n</code></pre>\n\n<p><strong>Warning:</strong> force pushing your changes will overwrite the remote branch with your local one. Make sure that you aren't going to be overwriting anything that you want to keep. Also be cautious about force pushing an amended (rewritten) commit if anyone else shares the branch with you, because they'll need to rewrite their own history if they have the old copy of the commit that you've just rewritten.</p>\n    </div>",
          "vote": "57"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I like to use the following:</p>\n\n<ol>\n<li><code>git status</code></li>\n<li><code>git add --all</code></li>\n<li><code>git commit -am \"message goes here about the change\"</code></li>\n<li><code>git pull &lt;origin master&gt;</code></li>\n<li><code>git push &lt;origin master&gt;</code></li>\n</ol>\n    </div>",
          "vote": "52"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you have not pushed the code to your remote branch (<a href=\"http://en.wikipedia.org/wiki/GitHub\">GitHub</a>/<a href=\"http://en.wikipedia.org/wiki/Bitbucket\">Bitbucket</a>) you can change the commit message on the command line as below.</p>\n\n<pre><code> git commit --amend -m \"Your new message\"\n</code></pre>\n\n<p>If you're working on a specific branch do this:</p>\n\n<pre><code>git commit --amend -m \"BRANCH-NAME: new message\"\n</code></pre>\n\n<p>If you've already pushed the code with the wrong message, and you need to be careful when changing the message. That is, after you change the commit message and try pushing it again, you end up with having issues. To make it smooth, follow these steps.</p>\n\n<p><strong>Please read my entire answer before doing it.</strong></p>\n\n<pre><code>git commit --amend -m \"BRANCH-NAME : your new message\"\n\ngit push -f origin BRANCH-NAME                # Not a best practice. Read below why?\n</code></pre>\n\n<p><strong>Important note:</strong> When you use the force push directly you might end up with code issues that other developers are working on the same branch. So to avoid those conflicts, you need to pull the code from your branch before making the <strong>force push</strong>:</p>\n\n<pre><code> git commit --amend -m \"BRANCH-NAME : your new message\"\n git pull origin BRANCH-NAME\n git push -f origin BRANCH-NAME\n</code></pre>\n\n<p>This is the best practice when changing the commit message, if it was already pushed.</p>\n    </div>",
          "vote": "46"
        }
      ]
    },
    {
      "question": "How do JavaScript closures work?",
      "url": "https://stackoverflow.com/questions/111102/how-do-javascript-closures-work",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M16 9a2 2 0 00-2-2V6A5 5 0 004 6v1a2 2 0 00-2 2v6c0 1.1.9 2 2 2h10a2 2 0 002-2V9zm-7 5a2 2 0 110-4 2 2 0 010 4zm3.1-7H5.9V6a3.1 3.1 0 016.2 0v1z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>This question's answers are a <a href=\"/help/privileges/edit-community-wiki\">community effort</a></b>. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n</aside>\n\n    </div>\n\n<p>How would you explain JavaScript closures to someone with a knowledge of the concepts they consist of (for example functions, variables and the like), but does not understand closures themselves?</p>\n\n<p>I have seen <a href=\"http://en.wikipedia.org/wiki/Scheme_%28programming_language%29\" rel=\"noreferrer\">the Scheme example</a> given on Wikipedia, but unfortunately it did not help.</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A closure is a pairing of:</p>\n<ol>\n<li>A function, and</li>\n<li>A reference to that function's outer scope (lexical environment)</li>\n</ol>\n<p>A lexical environment is part of every execution context (stack frame) and is a map between identifiers (ie. local variable names) and values.</p>\n<p>Every function in JavaScript maintains a reference to its outer lexical environment. This reference is used to configure the execution context created when a function is invoked. This reference enables code inside the function to \"see\" variables declared outside the function, regardless of when and where the function is called.</p>\n<p>If a function was called by a function, which in turn was called by another function, then a chain of references to outer lexical environments is created. This chain is called the scope chain.</p>\n<p>In the following code, <code>inner</code> forms a closure with the lexical environment of the execution context created when <code>foo</code> is invoked, <em>closing over</em> variable <code>secret</code>:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> secret = <span class=\"hljs-built_in\">Math</span>.trunc(<span class=\"hljs-built_in\">Math</span>.random()*<span class=\"hljs-number\">100</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`The secret number is <span class=\"hljs-subst\">${secret}</span>.`</span>)\n  }\n}\n<span class=\"hljs-keyword\">const</span> f = foo() <span class=\"hljs-comment\">// `secret` is not directly accessible from outside `foo`</span>\nf() <span class=\"hljs-comment\">// The only way to retrieve `secret`, is to invoke `f`</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif1\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>In other words: in JavaScript, functions carry a reference to a private \"box of state\", to which only they (and any other functions declared within the same lexical environment) have access. This box of the state is invisible to the caller of the function, delivering an excellent mechanism for data-hiding and encapsulation.</p>\n<p>And remember: functions in JavaScript can be passed around like variables (first-class functions), meaning these pairings of functionality and state can be passed around your program: similar to how you might pass an instance of a class around in C++.</p>\n<p>If JavaScript did not have closures, then more states would have to be passed between functions <em>explicitly</em>, making parameter lists longer and code noisier.</p>\n<p>So, if you want a function to always have access to a private piece of state, you can use a closure.</p>\n<p>...and frequently we <em>do</em> want to associate the state with a function. For example, in Java or C++, when you add a private instance variable and a method to a class, you are associating state with functionality.</p>\n<p>In C and most other common languages, after a function returns, all the local variables are no longer accessible because the stack-frame is destroyed. In JavaScript, if you declare a function within another function, then the local variables of the outer function can remain accessible after returning from it. In this way, in the code above, <code>secret</code> remains available to the function object <code>inner</code>, <em>after</em> it has been returned from <code>foo</code>.</p>\n<h2>Uses of Closures</h2>\n<p>Closures are useful whenever you need a private state associated with a function. This is a very common scenario - and remember: JavaScript did not have a class syntax until 2015, and it still does not have a private field syntax. Closures meet this need.</p>\n<h3>Private Instance Variables</h3>\n<p>In the following code, the function <code>toString</code> closes over the details of the car.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Car</span>(<span class=\"hljs-params\">manufacturer, model, year, color</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${manufacturer}</span> <span class=\"hljs-subst\">${model}</span> (<span class=\"hljs-subst\">${year}</span>, <span class=\"hljs-subst\">${color}</span>)`</span>\n    }\n  }\n}\n<span class=\"hljs-keyword\">const</span> car = <span class=\"hljs-keyword\">new</span> Car(<span class=\"hljs-string\">'Aston Martin'</span>,<span class=\"hljs-string\">'V8 Vantage'</span>,<span class=\"hljs-string\">'2012'</span>,<span class=\"hljs-string\">'Quantum Silver'</span>)\n<span class=\"hljs-built_in\">console</span>.log(car.toString())</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif2\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<h3>Functional Programming</h3>\n<p>In the following code, the function <code>inner</code> closes over both <code>fn</code> and <code>args</code>.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">curry</span>(<span class=\"hljs-params\">fn</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> args = []\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\">arg</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(args.length === fn.length) <span class=\"hljs-keyword\">return</span> fn(...args)\n    args.push(arg)\n    <span class=\"hljs-keyword\">return</span> inner\n  }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> a + b\n}\n\n<span class=\"hljs-keyword\">const</span> curriedAdd = curry(add)\n<span class=\"hljs-built_in\">console</span>.log(curriedAdd(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>)()) <span class=\"hljs-comment\">// 5</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif3\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<h3>Event-Oriented Programming</h3>\n<p>In the following code, function <code>onClick</code> closes over variable <code>BACKGROUND_COLOR</code>.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> $ = <span class=\"hljs-built_in\">document</span>.querySelector.bind(<span class=\"hljs-built_in\">document</span>)\n<span class=\"hljs-keyword\">const</span> BACKGROUND_COLOR = <span class=\"hljs-string\">'rgba(200,200,242,1)'</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">onClick</span>(<span class=\"hljs-params\"></span>) </span>{\n  $(<span class=\"hljs-string\">'body'</span>).style.background = BACKGROUND_COLOR\n}\n\n$(<span class=\"hljs-string\">'button'</span>).addEventListener(<span class=\"hljs-string\">'click'</span>, onClick)</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>Set background color<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif4\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<h3>Modularization</h3>\n<p>In the following example, all the implementation details are hidden inside an immediately executed function expression. The functions <code>tick</code> and <code>toString</code> close over the private state and functions they need to complete their work. Closures have enabled us to modularise and encapsulate our code.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> namespace = {};\n\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">n</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> numbers = []\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">format</span>(<span class=\"hljs-params\">n</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.trunc(n)\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">tick</span>(<span class=\"hljs-params\"></span>) </span>{\n    numbers.push(<span class=\"hljs-built_in\">Math</span>.random() * <span class=\"hljs-number\">100</span>)\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> numbers.map(format)\n  }\n  n.counter = {\n    tick,\n    toString\n  }\n}(namespace))\n\n<span class=\"hljs-keyword\">const</span> counter = namespace.counter\ncounter.tick()\ncounter.tick()\n<span class=\"hljs-built_in\">console</span>.log(counter.toString())</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif5\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<h2>Examples</h2>\n<h3>Example 1</h3>\n<p>This example shows that the local variables are not copied in the closure: the closure maintains a reference to the original variables <em>themselves</em>. It is as though the stack-frame stays alive in memory even after the outer function exits.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">42</span>\n  <span class=\"hljs-keyword\">let</span> inner  = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(x) }\n  x = x+<span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">return</span> inner\n}\n<span class=\"hljs-keyword\">var</span> f = foo()\nf() <span class=\"hljs-comment\">// logs 43</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif6\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<h3>Example 2</h3>\n<p>In the following code, three methods <code>log</code>, <code>increment</code>, and <code>update</code> all close over the same lexical environment.</p>\n<p>And every time <code>createObject</code> is called, a new execution context (stack frame) is created and a completely new variable <code>x</code>, and a new set of functions (<code>log</code> etc.) are created, that close over this new variable.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createObject</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> x = <span class=\"hljs-number\">42</span>;\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">log</span>(<span class=\"hljs-params\"></span>)</span> { <span class=\"hljs-built_in\">console</span>.log(x) },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">increment</span>(<span class=\"hljs-params\"></span>)</span> { x++ },\n    <span class=\"hljs-function\"><span class=\"hljs-title\">update</span>(<span class=\"hljs-params\">value</span>)</span> { x = value }\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> o = createObject()\no.increment()\no.log() <span class=\"hljs-comment\">// 43</span>\no.update(<span class=\"hljs-number\">5</span>)\no.log() <span class=\"hljs-comment\">// 5</span>\n<span class=\"hljs-keyword\">const</span> p = createObject()\np.log() <span class=\"hljs-comment\">// 42</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif7\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<h3>Example 3</h3>\n<p>If you are using variables declared using <code>var</code>, be careful you understand which variable you are closing over. Variables declared using <code>var</code> are hoisted. This is much less of a problem in modern JavaScript due to the introduction of <code>let</code> and <code>const</code>.</p>\n<p>In the following code, each time around the loop, a new function <code>inner</code> is created, which closes over <code>i</code>. But because <code>var i</code> is hoisted outside the loop, all of these inner functions close over the same variable, meaning that the final value of <code>i</code> (3) is printed, three times.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> result = []\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i++) {\n    result.push(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inner</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-built_in\">console</span>.log(i) } )\n  }\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-keyword\">const</span> result = foo()\n<span class=\"hljs-comment\">// The following will print `3`, three times...</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">3</span>; i++) {\n  result[i]() \n}</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif8\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<h2>Final points:</h2>\n<ul>\n<li>Whenever a function is declared in JavaScript closure is created.</li>\n<li>Returning a <code>function</code> from inside another function is the classic example of closure, because the state inside the outer function is implicitly available to the returned inner function, even after the outer function has completed execution.</li>\n<li>Whenever you use <code>eval()</code> inside a function, a closure is used. The text you <code>eval</code> can reference local variables of the function, and in the non-strict mode, you can even create new local variables by using <code>eval('var foo = …')</code>.</li>\n<li>When you use <code>new Function(…)</code> (the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" rel=\"noreferrer\">Function constructor</a>) inside a function, it does not close over its lexical environment: it closes over the global context instead. The new function cannot reference the local variables of the outer function.</li>\n<li>A closure in JavaScript is like keeping a reference (<strong>NOT</strong> a copy) to the scope at the point of function declaration, which in turn keeps a reference to its outer scope, and so on, all the way to the global object at the top of the scope chain.</li>\n<li>A closure is created when a function is declared; this closure is used to configure the execution context when the function is invoked.</li>\n<li>A new set of local variables is created every time a function is called.</li>\n</ul>\n<h2>Links</h2>\n<ul>\n<li>Douglas Crockford's simulated <a href=\"http://www.crockford.com/javascript/private.html\" rel=\"noreferrer\">private attributes and private methods</a> for an object, using closures.</li>\n<li>A great explanation of how closures can <a href=\"https://www.codeproject.com/Articles/12231/Memory-Leakage-in-Internet-Explorer-revisited\" rel=\"noreferrer\">cause memory leaks in IE</a> if you are not careful.</li>\n<li>MDN documentation on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" rel=\"noreferrer\">JavaScript Closures</a>.</li>\n</ul>\n    </div>",
          "vote": "7729"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Every function in JavaScript maintains a link to its outer lexical environment. A lexical environment is a map of all the names (eg. variables, parameters) within a scope, with their values.</p>\n\n<p>So, whenever you see the <code>function</code> keyword, code inside that function has access to variables declared outside the function.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-number\">3</span>;\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\">y</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(x + y + (++tmp)); <span class=\"hljs-comment\">// will log 16</span>\n  }\n\n  bar(<span class=\"hljs-number\">10</span>);\n}\n\nfoo(<span class=\"hljs-number\">2</span>);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif9\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>This will log <code>16</code> because function <code>bar</code> closes over the parameter <code>x</code> and the variable <code>tmp</code>, both of which exist in the lexical environment of outer function <code>foo</code>.</p>\n\n<p>Function <code>bar</code>, together with its link with the lexical environment of function <code>foo</code> is a closure. </p>\n\n<p>A function doesn't have to <em>return</em> in order to create a closure. Simply by virtue of its declaration, every function closes over its enclosing lexical environment, forming a closure.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-number\">3</span>;\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">y</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(x + y + (++tmp)); <span class=\"hljs-comment\">// will also log 16</span>\n  }\n}\n\n<span class=\"hljs-keyword\">var</span> bar = foo(<span class=\"hljs-number\">2</span>);\nbar(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// 16</span>\nbar(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// 17</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif10\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>The above function will also log 16, because the code inside <code>bar</code> can still refer to argument <code>x</code> and variable <code>tmp</code>, even though they are no longer directly in scope.</p>\n\n<p>However, since <code>tmp</code> is still hanging around inside <code>bar</code>'s closure, it is available to be incremented. It will be incremented each time you call <code>bar</code>.</p>\n\n<p>The simplest example of a closure is this:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">10</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">// will output 10</span>\n  <span class=\"hljs-built_in\">console</span>.log(b); <span class=\"hljs-comment\">// will output 6</span>\n}\n<span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">6</span>;\ntest();</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif11\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>When a JavaScript function is invoked, a new execution context <code>ec</code> is created. Together with the function arguments and the target object, this execution context also receives a link to the lexical environment of the calling execution context, meaning the variables declared in the outer lexical environment (in the above example, both <code>a</code> and <code>b</code>) are available from <code>ec</code>.</p>\n\n<p>Every function creates a closure because every function has a link to its outer lexical environment. </p>\n\n<p>Note that variables <em>themselves</em> are visible from within a closure, <em>not</em> copies.</p>\n    </div>",
          "vote": "4051"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>FOREWORD: this answer was written when the question was:</p>\n\n<blockquote>\n  <p>Like the old Albert said : \"If you can't explain it to a six-year old, you really don't understand it yourself.”. Well I tried to explain JS closures to a 27 years old friend and completely failed.</p>\n  \n  <p>Can anybody consider that I am 6 and strangely interested in that subject ?</p>\n</blockquote>\n\n<p>I'm pretty sure I was one of the only people that attempted to take the initial question literally. Since then, the question has mutated several times, so my answer may now seem incredibly silly &amp; out of place. Hopefully the general idea of the story remains fun for some.</p>\n\n<hr>\n\n<p>I'm a big fan of analogy and metaphor when explaining difficult concepts, so let me try my hand with a story.</p>\n\n<p><strong>Once upon a time:</strong></p>\n\n<p>There was a princess...</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">princess</span>(<span class=\"hljs-params\"></span>) </span>{\n</code></pre>\n\n<p>She lived in a wonderful world full of adventures. She met her Prince Charming, rode around her world on a unicorn, battled dragons, encountered talking animals, and many other fantastical things.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>    <span class=\"hljs-keyword\">var</span> adventures = [];\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">princeCharming</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">/* ... */</span> }\n\n    <span class=\"hljs-keyword\">var</span> unicorn = { <span class=\"hljs-comment\">/* ... */</span> },\n        dragons = [ <span class=\"hljs-comment\">/* ... */</span> ],\n        squirrel = <span class=\"hljs-string\">\"Hello!\"</span>;\n\n    <span class=\"hljs-comment\">/* ... */</span>\n</code></pre>\n\n<p>But she would always have to return back to her dull world of chores and grown-ups.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>    <span class=\"hljs-keyword\">return</span> {\n</code></pre>\n\n<p>And she would often tell them of her latest amazing adventure as a princess.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>        story: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> adventures[adventures.length - <span class=\"hljs-number\">1</span>];\n        }\n    };\n}\n</code></pre>\n\n<p>But all they would see is a little girl...</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> littleGirl = princess();\n</code></pre>\n\n<p>...telling stories about magic and fantasy.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>littleGirl.story();\n</code></pre>\n\n<p>And even though the grown-ups knew of real princesses, they would never believe in the unicorns or dragons because they could never see them. The grown-ups said that they only existed inside the little girl's imagination.</p>\n\n<p>But we know the real truth; that the little girl with the princess inside...</p>\n\n<p>...is really a princess with a little girl inside.</p>\n    </div>",
          "vote": "2503"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Taking the question seriously, we should find out what a typical 6-year-old is capable of cognitively, though admittedly, one who is interested in JavaScript is not so typical.  </p>\n\n<p>On  <a href=\"http://www.howkidsdevelop.com/5-7years.html\" rel=\"noreferrer\">Childhood Development: 5 to 7 Years </a> it says:</p>\n\n<blockquote>\n  <p>Your child will be able to follow two-step directions. For example, if you say to your child, \"Go to the kitchen and get me a trash bag\" they will be able to remember that direction.</p>\n</blockquote>\n\n<p>We can use this example to explain closures, as follows:</p>\n\n<blockquote>\n  <p>The kitchen is a closure that has a local variable, called <code>trashBags</code>.  There is a function inside the kitchen called <code>getTrashBag</code> that gets one trash bag and returns it.</p>\n</blockquote>\n\n<p>We can code this in JavaScript like this:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeKitchen</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> trashBags = [<span class=\"hljs-string\">'A'</span>, <span class=\"hljs-string\">'B'</span>, <span class=\"hljs-string\">'C'</span>]; <span class=\"hljs-comment\">// only 3 at first</span>\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">getTrashBag</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">return</span> trashBags.pop();\n    }\n  };\n}\n\n<span class=\"hljs-keyword\">var</span> kitchen = makeKitchen();\n\n<span class=\"hljs-built_in\">console</span>.log(kitchen.getTrashBag()); <span class=\"hljs-comment\">// returns trash bag C</span>\n<span class=\"hljs-built_in\">console</span>.log(kitchen.getTrashBag()); <span class=\"hljs-comment\">// returns trash bag B</span>\n<span class=\"hljs-built_in\">console</span>.log(kitchen.getTrashBag()); <span class=\"hljs-comment\">// returns trash bag A</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif12\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>Further points that explain why closures are interesting:</p>\n\n<ul>\n<li>Each time <code>makeKitchen()</code> is called, a new closure is created with its own separate <code>trashBags</code>.</li>\n<li>The <code>trashBags</code> variable is local to the inside of each kitchen and is not accessible outside, but the inner function on the <code>getTrashBag</code> property does have access to it.  </li>\n<li>Every function call creates a closure, but there would be no need to keep the closure around unless an inner function, which has access to the inside of the closure, can be called from outside the closure.  Returning the object with the <code>getTrashBag</code> function does that here.</li>\n</ul>\n    </div>",
          "vote": "779"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>The Straw Man</h1>\n<p>I need to know how many times a button has been clicked and do something on every third click...</p>\n<h2>Fairly Obvious Solution</h2>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// Declare counter outside event handler's scope</span>\n<span class=\"hljs-keyword\">var</span> counter = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">var</span> element = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'button'</span>);\n\nelement.addEventListener(<span class=\"hljs-string\">\"click\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// Increment outside counter</span>\n  counter++;\n\n  <span class=\"hljs-keyword\">if</span> (counter === <span class=\"hljs-number\">3</span>) {\n    <span class=\"hljs-comment\">// Do something every third time</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Third time's the charm!\"</span>);\n\n    <span class=\"hljs-comment\">// Reset counter</span>\n    counter = <span class=\"hljs-number\">0</span>;\n  }\n});</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"button\"</span>&gt;</span>Click Me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif13\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>Now this will work, but it does encroach into the outer scope by adding a variable, whose sole purpose is to keep track of the count. In some situations, this would be preferable as your outer application might need access to this information. But in this case, we are only changing every third click's behavior, so it is preferable to <strong>enclose this functionality inside the event handler</strong>.</p>\n<h2>Consider this option</h2>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> element = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'button'</span>);\n\nelement.addEventListener(<span class=\"hljs-string\">\"click\"</span>, (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// init the count to 0</span>\n  <span class=\"hljs-keyword\">var</span> count = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{ <span class=\"hljs-comment\">// &lt;- This function becomes the click handler</span>\n    count++; <span class=\"hljs-comment\">//    and will retain access to the above `count`</span>\n\n    <span class=\"hljs-keyword\">if</span> (count === <span class=\"hljs-number\">3</span>) {\n      <span class=\"hljs-comment\">// Do something every third time</span>\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Third time's the charm!\"</span>);\n\n      <span class=\"hljs-comment\">//Reset counter</span>\n      count = <span class=\"hljs-number\">0</span>;\n    }\n  };\n})());</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"button\"</span>&gt;</span>Click Me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif14\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>Notice a few things here.</p>\n<p>In the above example, I am using the closure behavior of JavaScript. <strong>This behavior allows any function to have access to the scope in which it was created, indefinitely.</strong> To practically apply this, I immediately invoke a function that returns another function, and because the function I'm returning has access to the internal count variable (because of the closure behavior explained above) this results in a private scope for usage by the resulting function... Not so simple? Let's dilute it down...</p>\n<p><strong>A simple one-line closure</strong></p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">//          _______________________Immediately invoked______________________</span>\n<span class=\"hljs-comment\">//         |                                                                |</span>\n<span class=\"hljs-comment\">//         |        Scope retained for use      ___Returned as the____      |</span>\n<span class=\"hljs-comment\">//         |       only by returned function   |    value of func     |     |</span>\n<span class=\"hljs-comment\">//         |             |            |        |                      |     |</span>\n<span class=\"hljs-comment\">//         v             v            v        v                      v     v</span>\n<span class=\"hljs-keyword\">var</span> func = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-string\">'val'</span>; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ alert(a); }; })();\n</code></pre>\n<p>All variables outside the returned function are available to the returned function, but they are not directly available to the returned function object...</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>func();  <span class=\"hljs-comment\">// Alerts \"val\"</span>\nfunc.a;  <span class=\"hljs-comment\">// Undefined</span>\n</code></pre>\n<p>Get it? So in our primary example, the count variable is contained within the closure and always available to the event handler, so it retains its state from click to click.</p>\n<p>Also, this private variable state is <strong>fully</strong> accessible, for both readings and assigning to its private scoped variables.</p>\n<p>There you go; you're now fully encapsulating this behavior.</p>\n<p><strong><a href=\"http://jondavidjohn.com/javascript-closure-explained-using-events/\" rel=\"noreferrer\">Full Blog Post</a></strong> (including jQuery considerations)</p>\n    </div>",
          "vote": "602"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Closures are hard to explain because they are used to make some behaviour work that everybody intuitively expects to work anyway. I find the best way to explain them (and the way that <em>I</em> learned what they do) is to imagine the situation without them:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> makePlus = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">y</span>) </span>{ <span class=\"hljs-keyword\">return</span> x + y; };\n}\n\n<span class=\"hljs-keyword\">const</span> plus5 = makePlus(<span class=\"hljs-number\">5</span>);\n<span class=\"hljs-built_in\">console</span>.log(plus5(<span class=\"hljs-number\">3</span>));</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif15\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>What would happen here if JavaScript <em>didn't</em> know closures? Just replace the call in the last line by its method body (which is basically what function calls do) and you get:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">console</span>.log(x + <span class=\"hljs-number\">3</span>);\n</code></pre>\n<p>Now, where's the definition of <code>x</code>? We didn't define it in the current scope. The only solution is to let <code>plus5</code> <em>carry</em> its scope (or rather, its parent's scope) around. This way, <code>x</code> is well-defined and it is bound to the value 5.</p>\n    </div>",
          "vote": "513"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>TLDR</strong></p>\n\n<p>A closure is a link between a function and its outer lexical (ie. as-written) environment, such that the identifiers (variables, parameters, function declarations etc) defined within that environment are visible from within the function, regardless of when or from where the function is invoked.</p>\n\n<p><strong>Details</strong></p>\n\n<p>In the terminology of the ECMAScript specification, a closure can be said to be implemented by the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-functioninitialize\" rel=\"noreferrer\"><code>[[Environment]]</code></a> reference of every function-object, which points to the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-lexical-environments\" rel=\"noreferrer\">lexical environment</a> within which the function is defined.</p>\n\n<p>When a function is invoked via the internal <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-ecmascript-function-objects-call-thisargument-argumentslist\" rel=\"noreferrer\"><code>[[Call]]</code></a> method, the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-functioninitialize\" rel=\"noreferrer\"><code>[[Environment]]</code></a> reference on the function-object is copied into the <em>outer environment reference</em> of the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-environment-records\" rel=\"noreferrer\">environment record</a> of the newly-created <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-execution-contexts\" rel=\"noreferrer\">execution context</a> (stack frame).</p>\n\n<p>In the following example, function <code>f</code> closes over the lexical environment of the global execution context:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n\n<p>In the following example, function <code>h</code> closes over the lexical environment of function <code>g</code>, which, in turn, closes over the lexical environment of the global execution context.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">g</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">h</span>(<span class=\"hljs-params\"></span>) </span>{}\n}\n</code></pre>\n\n<p>If an inner function is returned by an outer, then the outer lexical environment will persist after the outer function has returned. This is because the outer lexical environment needs to be available if the inner function is eventually invoked.</p>\n\n<p>In the following example, function <code>j</code> closes over the lexical environment of function <code>i</code>, meaning that variable <code>x</code> is visible from inside function <code>j</code>, long after function <code>i</code> has completed execution:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">i</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-string\">'mochacchino'</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">j</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Printing the value of x, from within function j: '</span>, x)\n    }\n} \n\n<span class=\"hljs-keyword\">const</span> k = i()\n<span class=\"hljs-built_in\">setTimeout</span>(k, <span class=\"hljs-number\">500</span>) <span class=\"hljs-comment\">// invoke k (which is j) after 500ms</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif16\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>In a closure, the variables in the outer lexical environment <em>themselves</em> are available, <em>not</em> copies.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">l</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-string\">'vanilla'</span>;\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">setY</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n      y = value;\n    },\n    <span class=\"hljs-attr\">logY</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'The value of y is: '</span>, y);\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> o = l()\no.logY() <span class=\"hljs-comment\">// The value of y is: vanilla</span>\no.setY(<span class=\"hljs-string\">'chocolate'</span>)\no.logY() <span class=\"hljs-comment\">// The value of y is: chocolate</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif17\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>The chain of lexical environments, linked between execution contexts via outer environment references, forms a <em>scope chain</em> and defines the identifiers visible from any given function.</p>\n\n<p><strong>Please note that in an attempt to improve clarity and accuracy, this answer has been substantially changed from the original.</strong></p>\n    </div>",
          "vote": "395"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>OK, 6-year-old closures fan. Do you want to hear the simplest example of closure?</p>\n\n<p>Let's imagine the next situation: a driver is sitting in a car. That car is inside a plane. Plane is in the airport. The ability of driver to access things outside his car, but inside the plane, even if that plane leaves an airport, is a closure. That's it. When you turn 27, look at the <a href=\"https://stackoverflow.com/a/111200/1393791\">more detailed explanation</a> or at the example below.</p>\n\n<p>Here is how I can convert my plane story into the code.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> plane = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">defaultAirport</span>) </span>{\n\n  <span class=\"hljs-keyword\">var</span> lastAirportLeft = defaultAirport;\n\n  <span class=\"hljs-keyword\">var</span> car = {\n    <span class=\"hljs-attr\">driver</span>: {\n      <span class=\"hljs-attr\">startAccessPlaneInfo</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Last airport was \"</span> + lastAirportLeft);\n        }, <span class=\"hljs-number\">2000</span>);\n      }\n    }\n  };\n  car.driver.startAccessPlaneInfo();\n\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">leaveTheAirport</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">airPortName</span>) </span>{\n      lastAirportLeft = airPortName;\n    }\n  }\n}(<span class=\"hljs-string\">\"Boryspil International Airport\"</span>);\n\nplane.leaveTheAirport(<span class=\"hljs-string\">\"John F. Kennedy\"</span>);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif18\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "388"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is an attempt to clear up several (possible) misunderstandings about closures that appear in some of the other answers.</p>\n\n<ul>\n<li><strong>A closure is not only created when you return an inner function.</strong> In fact, the enclosing function <em>does not need to return at all</em> in order for its closure to be created. You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be called immediately or any time later. Therefore, the closure of the enclosing function is probably created <em>as soon as the enclosing function is called</em> since any inner function has access to that closure whenever the inner function is called, before or after the enclosing function returns. </li>\n<li><strong>A closure does not reference a copy of the <em>old values</em> of variables in its scope.</strong> The variables themselves are part of the closure, and so the value seen when accessing one of those variables is the latest value at the time it is accessed. This is why inner functions created inside of loops can be tricky, since each one has access to the same outer variables rather than grabbing a copy of the variables at the time the function is created or called.</li>\n<li><strong>The \"variables\" in a closure include any named functions</strong> declared within the function. They also include arguments of the function. A closure also has access to its containing closure's variables, all the way up to the global scope.</li>\n<li><strong>Closures use memory, but they don't cause memory leaks</strong> since JavaScript by itself cleans up its own circular structures that are not referenced. Internet&nbsp;Explorer memory leaks involving closures are created when it fails to disconnect DOM attribute values that reference closures, thus maintaining references to possibly circular structures.</li>\n</ul>\n    </div>",
          "vote": "371"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I wrote a blog post a while back explaining closures. Here's what I said about closures in terms of <strong>why</strong> you'd want one.</p>\n\n<blockquote>\n  <p>Closures are a way to let a function\n  have <strong>persistent, private variables</strong> -\n  that is, variables that only one\n  function knows about, where it can\n  keep track of info from previous times\n  that it was run.</p>\n</blockquote>\n\n<p>In that sense, they let a function act a bit like an object with private attributes.</p>\n\n<p>Full post:</p>\n\n<p><a href=\"http://sleeplessgeek.blogspot.com/2009/12/so-what-are-these-closure-thingys.html\" rel=\"noreferrer\">So what are these closure thingys?</a></p>\n    </div>",
          "vote": "239"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2><strong>Closures are simple:</strong></h2>\n\n<p>The following simple example covers all the main points of JavaScript closures.<sup>*</sup>\n&nbsp;</p>\n\n<p>Here is a factory that produces calculators that can add and multiply:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">make_calculator</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// this calculator stores a single number n</span>\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-attr\">add</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) </span>{\n      n += a;\n      <span class=\"hljs-keyword\">return</span> n;\n    },\n    <span class=\"hljs-attr\">multiply</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) </span>{\n      n *= a;\n      <span class=\"hljs-keyword\">return</span> n;\n    }\n  };\n}\n\nfirst_calculator = make_calculator();\nsecond_calculator = make_calculator();\n\nfirst_calculator.add(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// returns 3</span>\nsecond_calculator.add(<span class=\"hljs-number\">400</span>); <span class=\"hljs-comment\">// returns 400</span>\n\nfirst_calculator.multiply(<span class=\"hljs-number\">11</span>); <span class=\"hljs-comment\">// returns 33</span>\nsecond_calculator.multiply(<span class=\"hljs-number\">10</span>); <span class=\"hljs-comment\">// returns 4000</span>\n</code></pre>\n\n<p><strong>The key point:</strong> Each call to <code>make_calculator</code> creates a new local variable <code>n</code>, which continues to be usable by that calculator's <code>add</code> and <code>multiply</code> functions long after <code>make_calculator</code> returns.</p>\n\n<p><em>If you are familiar with stack frames, these calculators seem strange: How can they keep accessing <code>n</code> after <code>make_calculator</code> returns?  The answer is to imagine that JavaScript doesn't use \"stack frames\", but instead uses \"heap frames\", which can persist after the function call that made them returns.</em></p>\n\n<p>Inner functions like <code>add</code> and <code>multiply</code>, which access variables declared in an outer function<sup>**</sup>, are called <em>closures</em>.</p>\n\n<p><strong>That is pretty much all there is to closures.</strong></p>\n\n<p><br></p>\n\n<hr>\n\n<p><sup><sup>*</sup> For example, it covers all the points in the \"Closures for Dummies\" article given in <a href=\"https://stackoverflow.com/a/111111/706054\">another answer</a>, except example 6, which simply shows that variables can be used before they are declared, a nice fact to know but completely unrelated to closures. It also covers all the points in <a href=\"https://stackoverflow.com/a/111200/706054\">the accepted answer</a>, except for the points (1) that functions copy their arguments into local variables (the named function arguments), and (2) that copying numbers creates a new number, but copying an object reference gives you another reference to the same object. These are also good to know but again completely unrelated to closures. It is also very similar to the example in <a href=\"https://stackoverflow.com/a/111114/706054\">this answer</a> but a bit shorter and less abstract. It does not cover the point of <a href=\"https://stackoverflow.com/a/17200991/706054\">this answer</a> or <a href=\"https://stackoverflow.com/questions/111102/how-do-javascript-closures-work/17308587?noredirect=1#comment26377355_111111\">this comment</a>, which is that JavaScript makes it difficult to plug the <em>current</em> value of a loop variable into your inner function: The \"plugging in\" step can only be done with a helper function that encloses your inner function and is invoked on each loop iteration. (Strictly speaking, the inner function accesses the helper function's copy of the variable, rather than having anything plugged in.) Again, very useful when creating closures, but not part of what a closure is or how it works. There is additional confusion due to closures working differently in functional languages like ML, where variables are bound to values rather than to storage space, providing a constant stream of people who understand closures in a way (namely the \"plugging in\" way) that is simply incorrect for JavaScript, where variables are always bound to storage space, and never to values. </sup></p>\n\n<p><sup><sup>**</sup> Any outer function, if several are nested, or even in the global context, as <a href=\"https://stackoverflow.com/a/5099447/706054\">this answer</a> points out clearly.</sup></p>\n    </div>",
          "vote": "216"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How I'd explain it to a six-year-old:</p>\n\n<p>You know how grown-ups can own a house, and they call it home? When a mom has a child, the child doesn't really own anything, right? But its parents own a house, so whenever someone asks the child \"Where's your home?\", he/she can answer \"that house!\", and point to the house of its parents. A \"Closure\" is the ability of the child to always (even if abroad) be able to say it has a home, even though it's really the parent's who own the house.</p>\n    </div>",
          "vote": "207"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2><a href=\"https://stackoverflow.com/questions/1700514/how-do-you-explain-closure-to-a-5-year-old/1700627#1700627\">Can you explain closures to a 5-year-old?*</a></h2>\n<p>I still think <a href=\"http://code.google.com/apis/ajax/playground/?exp=maps#closure_simple\" rel=\"noreferrer\">Google's explanation</a> works very well and is concise:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">/*\n*    When a function is defined in another function and it\n*    has access to the outer function's context even after\n*    the outer function returns.\n*\n* An important concept to learn in JavaScript.\n*/</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerFunction</span>(<span class=\"hljs-params\">someNum</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> someString = <span class=\"hljs-string\">'Hey!'</span>;\n    <span class=\"hljs-keyword\">var</span> content = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">'content'</span>);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">innerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n        content.innerHTML = someNum + <span class=\"hljs-string\">': '</span> + someString;\n        content = <span class=\"hljs-literal\">null</span>; <span class=\"hljs-comment\">// Internet Explorer memory leak for DOM reference</span>\n    }\n    innerFunction();\n}\n\nouterFunction(<span class=\"hljs-number\">1</span>);​\n</code></pre>\n<p><img src=\"https://i.stack.imgur.com/N0mn0.png\" alt=\"Proof that this example creates a closure even if the inner function doesn't return\"></p>\n<p><sub>*A C# question</sub></p>\n    </div>",
          "vote": "203"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I tend to learn better by GOOD/BAD comparisons. I like to see working code followed by non-working code that someone is likely to encounter. I put together <a href=\"http://jsfiddle.net/KMQZK/\" rel=\"noreferrer\">a jsFiddle</a> that does a comparison and tries to boil down the differences to the simplest explanations I could come up with.</p>\n<h2>Closures done right:</h2>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'CLOSURES DONE RIGHT'</span>);\n\n<span class=\"hljs-keyword\">var</span> arr = [];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createClosure</span>(<span class=\"hljs-params\">n</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'n = '</span> + n;\n    }\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">0</span>; index &lt; <span class=\"hljs-number\">10</span>; index++) {\n    arr[index] = createClosure(index);\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> index <span class=\"hljs-keyword\">in</span> arr) {\n    <span class=\"hljs-built_in\">console</span>.log(arr[index]());\n}\n</code></pre>\n<ul>\n<li><p>In the above code <code>createClosure(n)</code> is invoked in every iteration of the loop. Note that I named the variable <code>n</code> to highlight that it is a <strong>new</strong> variable created in a new function scope and is not the same variable as <code>index</code> which is bound to the outer scope.</p>\n</li>\n<li><p>This creates a new scope and <code>n</code> is bound to that scope; this means we have 10 separate scopes, one for each iteration.</p>\n</li>\n<li><p><code>createClosure(n)</code> returns a function that returns the n within that scope.</p>\n</li>\n<li><p>Within each scope <code>n</code> is bound to whatever value it had when <code>createClosure(n)</code> was invoked so the nested function that gets returned will always return the value of <code>n</code> that it had when <code>createClosure(n)</code> was invoked.</p>\n</li>\n</ul>\n<h2>Closures done wrong:</h2>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'CLOSURES DONE WRONG'</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createClosureArray</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> badArr = [];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> index = <span class=\"hljs-number\">0</span>; index &lt; <span class=\"hljs-number\">10</span>; index++) {\n        badArr[index] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'n = '</span> + index;\n        };\n    }\n    <span class=\"hljs-keyword\">return</span> badArr;\n}\n\n<span class=\"hljs-keyword\">var</span> badArr = createClosureArray();\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> index <span class=\"hljs-keyword\">in</span> badArr) {\n    <span class=\"hljs-built_in\">console</span>.log(badArr[index]());\n}\n</code></pre>\n<ul>\n<li><p>In the above code the loop was moved within the <code>createClosureArray()</code> function and the function now just returns the completed array, which at first glance seems more intuitive.</p>\n</li>\n<li><p>What might not be obvious is that since <code>createClosureArray()</code> is only invoked once only one scope is created for this function instead of one for every iteration of the loop.</p>\n</li>\n<li><p>Within this function a variable named <code>index</code> is defined. The loop runs and adds functions to the array that return <code>index</code>. Note that <code>index</code> is defined within the <code>createClosureArray</code> function which only ever gets invoked one time.</p>\n</li>\n<li><p>Because there was only one scope within the <code>createClosureArray()</code> function, <code>index</code> is only bound to a value within that scope. In other words, each time the loop changes the value of <code>index</code>, it changes it for everything that references it within that scope.</p>\n</li>\n<li><p>All of the functions added to the array return the SAME <code>index</code> variable from the parent scope where it was defined instead of 10 different ones from 10 different scopes like the first example. The end result is that all 10 functions return the same variable from the same scope.</p>\n</li>\n<li><p>After the loop finished and <code>index</code> was done being modified the end value was 10, therefore every function added to the array returns the value of the single <code>index</code> variable which is now set to 10.</p>\n</li>\n</ul>\n<h2>Result</h2>\n<blockquote>\n<p>CLOSURES DONE RIGHT<br>\nn = 0<br>\nn = 1<br>\nn = 2<br>\nn = 3<br>\nn = 4<br>\nn = 5<br>\nn = 6<br>\nn = 7<br>\nn = 8<br>\nn = 9</p>\n<p>CLOSURES DONE WRONG<br>\nn = 10<br>\nn = 10<br>\nn = 10<br>\nn = 10<br>\nn = 10<br>\nn = 10<br>\nn = 10<br>\nn = 10<br>\nn = 10<br>\nn = 10</p>\n</blockquote>\n    </div>",
          "vote": "179"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://en.wikipedia.org/wiki/Closure_(computer_science)\" rel=\"noreferrer\">Wikipedia on closures</a>:</p>\n\n<blockquote>\n  <p>In computer science, a closure is a function together with a referencing environment for the nonlocal names (free variables) of that function.</p>\n</blockquote>\n\n<p>Technically, in <a href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"noreferrer\">JavaScript</a>, <strong>every function is a closure</strong>. It always has an access to variables defined in the surrounding scope.</p>\n\n<p>Since <strong>scope-defining construction in JavaScript is a function</strong>, not a code block like in many other languages, <strong>what we usually mean by <em>closure</em> in JavaScript</strong> is a <strong>function working with nonlocal variables defined in already executed surrounding function</strong>.</p>\n\n<p>Closures are often used for creating functions with some hidden private data (but it's not always the case).</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> db = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// Create a hidden object, which will hold the data</span>\n    <span class=\"hljs-comment\">// it's inaccessible from the outside.</span>\n    <span class=\"hljs-keyword\">var</span> data = {};\n\n    <span class=\"hljs-comment\">// Make a function, which will provide some access to the data.</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key, val</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-literal\">undefined</span>) { <span class=\"hljs-keyword\">return</span> data[key] } <span class=\"hljs-comment\">// Get</span>\n        <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-keyword\">return</span> data[key] = val } <span class=\"hljs-comment\">// Set</span>\n    }\n    <span class=\"hljs-comment\">// We are calling the anonymous surrounding function,</span>\n    <span class=\"hljs-comment\">// returning the above inner function, which is a closure.</span>\n})();\n\ndb(<span class=\"hljs-string\">'x'</span>)    <span class=\"hljs-comment\">// -&gt; undefined</span>\ndb(<span class=\"hljs-string\">'x'</span>, <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// Set x to 1</span>\ndb(<span class=\"hljs-string\">'x'</span>)    <span class=\"hljs-comment\">// -&gt; 1</span>\n<span class=\"hljs-comment\">// It's impossible to access the data object itself.</span>\n<span class=\"hljs-comment\">// We are able to get or set individual it.</span>\n</code></pre>\n\n<p>ems</p>\n\n<p>The example above is using an anonymous function, which was executed once. But it does not have to be. It can be named (e.g. <code>mkdb</code>) and executed later, generating a database function each time it is invoked. Every generated function will have its own hidden database object. Another usage example of closures is when we don't return a function, but an object containing multiple functions for different purposes, each of those function having access to the same data.</p>\n    </div>",
          "vote": "165"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I put together an interactive JavaScript tutorial to explain how closures work.\n<a href=\"http://nathansjslessons.appspot.com\" rel=\"noreferrer\">What's a Closure?</a></p>\n\n<p>Here's one of the examples:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> create = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> x; <span class=\"hljs-comment\">// We can refer to x here!</span>\n    };\n    <span class=\"hljs-keyword\">return</span> f;\n};\n<span class=\"hljs-comment\">// 'create' takes one argument, creates a function</span>\n\n<span class=\"hljs-keyword\">var</span> g = create(<span class=\"hljs-number\">42</span>);\n<span class=\"hljs-comment\">// g is a function that takes no arguments now</span>\n\n<span class=\"hljs-keyword\">var</span> y = g();\n<span class=\"hljs-comment\">// y is 42 here</span>\n</code></pre>\n    </div>",
          "vote": "136"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>The children will always remember the secrets they have shared with their parents, even after their parents are\n  gone. This is what closures are for functions.</p>\n</blockquote>\n\n<p>The secrets for JavaScript functions are the private variables</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> parent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">\"Mary\"</span>; <span class=\"hljs-comment\">// secret</span>\n}\n</code></pre>\n\n<p>Every time you call it, local variable \"name\" is created and given name \"Mary\". And every time the function exits the variable is lost and the name is forgotten.</p>\n\n<p>As you may guess, because the variables are re-created every time the function is called, and nobody else will know them, there must be a secret place where they are stored. It could be called <strong>Chamber of Secrets</strong> or <strong>stack</strong> or <strong>local scope</strong> but it doesn't really matter. We know they are there, somewhere, hidden in the memory.</p>\n\n<p>But, in JavaScript there is this very special thing that functions which are created inside other functions, can also know the local variables of their parents and keep them as long as they live.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> parent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">\"Mary\"</span>;\n  <span class=\"hljs-keyword\">var</span> child = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">childName</span>) </span>{\n    <span class=\"hljs-comment\">// I can also see that \"name\" is \"Mary\"</span>\n  }\n}\n</code></pre>\n\n<p>So, as long as we are in the parent -function, it can create one or more child functions which do share the secret variables from the secret place.</p>\n\n<p>But the sad thing is, if the child is also a private variable of its parent function, it would also die when the parent ends, and the secrets would die with them.</p>\n\n<p>So to live, the child has to leave before it's too late</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> parent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">\"Mary\"</span>;\n  <span class=\"hljs-keyword\">var</span> child = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">childName</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"My name is \"</span> + childName  +<span class=\"hljs-string\">\", child of \"</span> + name; \n  }\n  <span class=\"hljs-keyword\">return</span> child; <span class=\"hljs-comment\">// child leaves the parent -&gt;</span>\n}\n<span class=\"hljs-keyword\">var</span> child = parent(); <span class=\"hljs-comment\">// &lt; - and here it is outside </span>\n</code></pre>\n\n<p>And now, even though Mary is \"no longer running\", the memory of her is not lost and her child will always remember her name and other secrets they shared during their time together.</p>\n\n<p>So, if you call the child \"Alice\", she will respond</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>child(<span class=\"hljs-string\">\"Alice\"</span>) =&gt; <span class=\"hljs-string\">\"My name is Alice, child of Mary\"</span>\n</code></pre>\n\n<p>That's all there is to tell.</p>\n    </div>",
          "vote": "131"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>I do not understand why the answers are so complex here.</strong></p>\n<p>Here is a closure:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">42</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">b</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> a; }\n</code></pre>\n<p>Yes. You probably use that many times a day.</p>\n<br>\n<blockquote>\n<p>There is no reason to believe closures are a complex design hack to address specific problems. No, closures are just about using a variable that comes from a higher scope <strong>from the perspective of where the function was declared (not run)</strong>.</p>\n<p>Now what it <em>allows</em> you to do can be more spectacular, see other answers.</p>\n</blockquote>\n    </div>",
          "vote": "105"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Example for the first point by dlaliberte:</p>\n\n<blockquote>\n  <p>A closure is not only created when you return an inner function. In fact, the enclosing function does not need to return at all. You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be used immediately. Therefore, the closure of the enclosing function probably already exists at the time that enclosing function was called since any inner function has access to it as soon as it is called.</p>\n</blockquote>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> i;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">x</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> tmp = <span class=\"hljs-number\">3</span>;\n    i = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">y</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(x + y + (++tmp));\n    }\n}\nfoo(<span class=\"hljs-number\">2</span>);\ni(<span class=\"hljs-number\">3</span>);\n</code></pre>\n    </div>",
          "vote": "93"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A closure is where an inner function has access to variables in its outer function. That's probably the simplest one-line explanation you can get for closures.</p>\n    </div>",
          "vote": "91"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I know there are plenty of solutions already, but I guess that this small and simple script can be useful to demonstrate the concept:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// makeSequencer will return a \"sequencer\" function</span>\n<span class=\"hljs-keyword\">var</span> makeSequencer = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> _count = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// not accessible outside this function</span>\n    <span class=\"hljs-keyword\">var</span> sequencer = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> _count++;\n    }\n    <span class=\"hljs-keyword\">return</span> sequencer;\n}\n\n<span class=\"hljs-keyword\">var</span> fnext = makeSequencer();\n<span class=\"hljs-keyword\">var</span> v0 = fnext();     <span class=\"hljs-comment\">// v0 = 0;</span>\n<span class=\"hljs-keyword\">var</span> v1 = fnext();     <span class=\"hljs-comment\">// v1 = 1;</span>\n<span class=\"hljs-keyword\">var</span> vz = fnext._count <span class=\"hljs-comment\">// vz = undefined</span>\n</code></pre>\n    </div>",
          "vote": "85"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You're having a sleep over and you invite Dan.\nYou tell Dan to bring one XBox controller.</p>\n\n<p>Dan invites Paul.\nDan asks Paul to bring one controller. How many controllers were brought to the party?</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sleepOver</span>(<span class=\"hljs-params\">howManyControllersToBring</span>) </span>{\n\n    <span class=\"hljs-keyword\">var</span> numberOfDansControllers = howManyControllersToBring;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">danInvitedPaul</span>(<span class=\"hljs-params\">numberOfPaulsControllers</span>) </span>{\n        <span class=\"hljs-keyword\">var</span> totalControllers = numberOfDansControllers + numberOfPaulsControllers;\n        <span class=\"hljs-keyword\">return</span> totalControllers;\n    }\n}\n\n<span class=\"hljs-keyword\">var</span> howManyControllersToBring = <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-keyword\">var</span> inviteDan = sleepOver(howManyControllersToBring);\n\n<span class=\"hljs-comment\">// The only reason Paul was invited is because Dan was invited. </span>\n<span class=\"hljs-comment\">// So we set Paul's invitation = Dan's invitation.</span>\n\n<span class=\"hljs-keyword\">var</span> danInvitedPaul = inviteDan(howManyControllersToBring);\n\nalert(<span class=\"hljs-string\">\"There were \"</span> + danInvitedPaul + <span class=\"hljs-string\">\" controllers brought to the party.\"</span>);\n</code></pre>\n    </div>",
          "vote": "82"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The author of <em><a href=\"http://javascript.info/tutorial/closures\" rel=\"noreferrer\">Closures</a></em> has explained closures pretty well, explaining the reason why we need them and also explaining LexicalEnvironment which is necessary to understanding closures. <br>\nHere is the summary:</p>\n\n<p>What if a variable is accessed, but it isn’t local? Like here:</p>\n\n<p><a href=\"https://i.stack.imgur.com/SLlVB.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/SLlVB.png\" alt=\"Enter image description here\"></a></p>\n\n<p>In this case, the interpreter finds the variable in the\nouter <a href=\"http://javascript.info/tutorial/initialization\" rel=\"noreferrer\"><code>LexicalEnvironment</code></a> object.</p>\n\n<p>The process consists of two steps:</p>\n\n<ol>\n<li>First, when a function f is created, it is not created in an empty\nspace. There is a current LexicalEnvironment object. In the case\nabove, it’s window (a is undefined at the time of function\ncreation).</li>\n</ol>\n\n<p><a href=\"https://i.stack.imgur.com/0KBin.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/0KBin.png\" alt=\"Enter image description here\"></a></p>\n\n<p>When a function is created, it gets a hidden property, named [[Scope]], which references the current LexicalEnvironment.</p>\n\n<p><a href=\"https://i.stack.imgur.com/U3yt7.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/U3yt7.png\" alt=\"Enter image description here\"></a></p>\n\n<p>If a variable is read, but can not be found anywhere, an error is generated.</p>\n\n<p><strong>Nested functions</strong></p>\n\n<p>Functions can be nested one inside another, forming a chain of LexicalEnvironments which can also be called a scope chain.</p>\n\n<p><a href=\"https://i.stack.imgur.com/2hUwr.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/2hUwr.png\" alt=\"Enter image description here\"></a></p>\n\n<p>So, function g has access to g, a and f.</p>\n\n<p><strong>Closures</strong></p>\n\n<p>A nested function may continue to live after the outer function has finished:</p>\n\n<p><a href=\"https://i.stack.imgur.com/S1mlB.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/S1mlB.png\" alt=\"Enter image description here\"></a></p>\n\n<p>Marking up LexicalEnvironments:</p>\n\n<p><a href=\"https://i.stack.imgur.com/BzUNi.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/BzUNi.png\" alt=\"Enter image description here\"></a></p>\n\n<p>As we see, <code>this.say</code> is a property in the user object, so it continues to live after User completed.</p>\n\n<p>And if you remember, when <code>this.say</code> is created, it (as every function) gets an internal reference <code>this.say.[[Scope]]</code> to the current LexicalEnvironment. So, the LexicalEnvironment of the current User execution stays in memory. All variables of User also are its properties, so they are also carefully kept, not junked as usually.</p>\n\n<p><strong>The whole point is to ensure that if the inner function wants to access an outer variable in the future, it is able to do so.</strong></p>\n\n<p>To summarize:</p>\n\n<ol>\n<li>The inner function keeps a reference to the outer\nLexicalEnvironment.</li>\n<li>The inner function may access variables from it\nany time even if the outer function is finished.</li>\n<li>The browser keeps the LexicalEnvironment and all its properties (variables) in memory until there is an inner function which references it.</li>\n</ol>\n\n<p>This is called a closure.</p>\n    </div>",
          "vote": "81"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>JavaScript functions can access their:</p>\n\n<ol>\n<li>Arguments</li>\n<li>Locals (that is, their local variables and local functions)</li>\n<li>Environment, which includes:\n\n<ul>\n<li>globals, including the DOM</li>\n<li>anything in outer functions</li>\n</ul></li>\n</ol>\n\n<p>If a function accesses its environment, then the function is a closure.</p>\n\n<p>Note that outer functions are not required, though they do offer benefits I don't discuss here. By accessing data in its environment, a closure keeps that data alive. In the subcase of outer/inner functions, an outer function can create local data and eventually exit, and yet, if any inner function(s) survive after the outer function exits, then the inner function(s) keep the outer function's local data alive.</p>\n\n<p>Example of a closure that uses the global environment:</p>\n\n<p>Imagine that the Stack Overflow Vote-Up and Vote-Down button events are implemented as closures, voteUp_click and voteDown_click, that have access to external variables isVotedUp and isVotedDown, which are defined globally. (For simplicity's sake, I am referring to StackOverflow's Question Vote buttons, not the array of Answer Vote buttons.)</p>\n\n<p>When the user clicks the VoteUp button, the voteUp_click function checks whether isVotedDown == true to determine whether to vote up or merely cancel a down vote. Function voteUp_click is a closure because it is accessing its environment.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> isVotedUp = <span class=\"hljs-literal\">false</span>;\n<span class=\"hljs-keyword\">var</span> isVotedDown = <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">voteUp_click</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (isVotedUp)\n    <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isVotedDown)\n    SetDownVote(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">else</span>\n    SetUpVote(<span class=\"hljs-literal\">true</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">voteDown_click</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (isVotedDown)\n    <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (isVotedUp)\n    SetUpVote(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-keyword\">else</span>\n    SetDownVote(<span class=\"hljs-literal\">true</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SetUpVote</span>(<span class=\"hljs-params\">status</span>) </span>{\n  isVotedUp = status;\n  <span class=\"hljs-comment\">// Do some CSS stuff to Vote-Up button</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SetDownVote</span>(<span class=\"hljs-params\">status</span>) </span>{\n  isVotedDown = status;\n  <span class=\"hljs-comment\">// Do some CSS stuff to Vote-Down button</span>\n}\n</code></pre>\n\n<p>All four of these functions are closures as they all access their environment.</p>\n    </div>",
          "vote": "77"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As a father of a 6-year-old, currently teaching young children (and a relative novice to coding with no formal education so corrections will be required), I think the lesson would stick best through hands-on play. If the 6-year-old is ready to understand what a closure is, then they are old enough to have a go themselves. I'd suggest pasting the code into jsfiddle.net, explaining a bit, and leaving them alone to concoct a unique song. The explanatory text below is probably more appropriate for a 10 year old.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sing</span>(<span class=\"hljs-params\">person</span>) </span>{\n\n    <span class=\"hljs-keyword\">var</span> firstPart = <span class=\"hljs-string\">\"There was \"</span> + person + <span class=\"hljs-string\">\" who swallowed \"</span>;\n\n    <span class=\"hljs-keyword\">var</span> fly = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> creature = <span class=\"hljs-string\">\"a fly\"</span>;\n        <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-string\">\"Perhaps she'll die\"</span>;\n        alert(firstPart + creature + <span class=\"hljs-string\">\"\\n\"</span> + result);\n    };\n\n    <span class=\"hljs-keyword\">var</span> spider = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> creature = <span class=\"hljs-string\">\"a spider\"</span>;\n        <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-string\">\"that wiggled and jiggled and tickled inside her\"</span>;\n        alert(firstPart + creature + <span class=\"hljs-string\">\"\\n\"</span> + result);\n    };\n\n    <span class=\"hljs-keyword\">var</span> bird = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> creature = <span class=\"hljs-string\">\"a bird\"</span>;\n        <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-string\">\"How absurd!\"</span>;\n        alert(firstPart + creature + <span class=\"hljs-string\">\"\\n\"</span> + result);\n    };\n\n    <span class=\"hljs-keyword\">var</span> cat = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">var</span> creature = <span class=\"hljs-string\">\"a cat\"</span>;\n        <span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-string\">\"Imagine That!\"</span>;\n        alert(firstPart + creature + <span class=\"hljs-string\">\"\\n\"</span> + result);\n    };\n\n    fly();\n    spider();\n    bird();\n    cat();\n}\n\n<span class=\"hljs-keyword\">var</span> person=<span class=\"hljs-string\">\"an old lady\"</span>;\n\nsing(person);\n</code></pre>\n\n<p><strong>INSTRUCTIONS</strong></p>\n\n<p>DATA: Data is a collection of facts. It can be numbers, words, measurements, observations or even just descriptions of things. You can't touch it, smell it or taste it. You can write it down, speak it and hear it. You could use it to <em>create</em> touch smell and taste using a computer. It can be made useful by a computer using code.</p>\n\n<p>CODE: All the writing above is called <em>code</em>. It is written in JavaScript.</p>\n\n<p>JAVASCRIPT: JavaScript is a language. Like English or French or Chinese are languages. There are lots of languages that are understood by computers and other electronic processors. For JavaScript to be understood by a computer it needs an interpreter. Imagine if a teacher who only speaks Russian comes to teach your class at school. When the teacher says \"все садятся\", the class would not understand. But luckily you have a Russian pupil in your class who tells everyone this means \"everybody sit down\" - so you all do. The class is like a computer and the Russian pupil is the interpreter. For JavaScript the most common interpreter is called a browser.</p>\n\n<p>BROWSER: When you connect to the Internet on a computer, tablet or phone to visit a website, you use a browser. Examples you may know are Internet Explorer, Chrome, Firefox and Safari. The browser can understand JavaScript and tell the computer what it needs to do. The JavaScript instructions are called functions.</p>\n\n<p>FUNCTION: A function in JavaScript is like a factory. It might be a little factory with only one machine inside. Or it might contain many other little factories, each with many machines doing different jobs. In a real life clothes factory you might have reams of cloth and bobbins of thread going in and T-shirts and jeans coming out. Our JavaScript factory only processes data, it can't sew, drill a hole or melt metal. In our JavaScript factory data goes in and data comes out.</p>\n\n<p>All this data stuff sounds a bit boring, but it is really very cool; we might have a function that tells a robot what to make for dinner. Let's say I invite you and your friend to my house. You like chicken legs best, I like sausages, your friend always wants what you want and my friend does not eat meat.</p>\n\n<p>I haven't got time to go shopping, so the function needs to know what we have in the fridge to make decisions. Each ingredient has a different cooking time and we want everything to be served hot by the robot at the same time. We need to provide the function with the data about what we like, the function could 'talk' to the fridge, and the function could control the robot.</p>\n\n<p>A function normally has a name, parentheses and braces. Like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">cookMeal</span>(<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-comment\">/*  STUFF INSIDE THE FUNCTION  */</span>  }\n</code></pre>\n\n<p><em>Note that <code>/*...*/</code> and <code>//</code> stop code being read by the browser.</em></p>\n\n<p>NAME: You can call a function just about whatever word you want. The example \"cookMeal\" is typical in joining two words together and giving the second one a capital letter at the beginning - but this is not necessary. It can't have a space in it, and it can't be a number on its own.</p>\n\n<p>PARENTHESES: \"Parentheses\" or <code>()</code> are the letter box on the JavaScript function factory's door or a post box in the street for sending packets of information to the factory. Sometimes the postbox might be marked <em>for example</em> <code>cookMeal(you, me, yourFriend, myFriend, fridge, dinnerTime)</code>, in which case you know what data you have to give it.</p>\n\n<p>BRACES: \"Braces\" which look like this <code>{}</code> are the tinted windows of our factory. From inside the factory you can see out, but from the outside you can't see in.</p>\n\n<p><strong>THE LONG CODE EXAMPLE ABOVE</strong></p>\n\n<p>Our code begins with the word <em>function</em>, so we know that it is one! Then the name of the function <em>sing</em> - that's my own description of what the function is about. Then parentheses <em>()</em>. The parentheses are always there for a function. Sometimes they are empty, and sometimes they have something in. This one has a word in: <code>(person)</code>. After this there is a brace like this <code>{</code> . This marks the start of the function <em>sing()</em>. It has a partner which marks the end of <em>sing()</em> like this <code>}</code></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sing</span>(<span class=\"hljs-params\">person</span>) </span>{  <span class=\"hljs-comment\">/* STUFF INSIDE THE FUNCTION */</span>  }\n</code></pre>\n\n<p>So this function might have something to do with singing, and might need some data about a person. It has instructions inside to do something with that data.</p>\n\n<p>Now, after the function <em>sing()</em>, near the end of the code is the line</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> person=<span class=\"hljs-string\">\"an old lady\"</span>;\n</code></pre>\n\n<p>VARIABLE: The letters <em>var</em> stand for \"variable\". A variable is like an envelope. On the outside this envelope is marked \"person\". On the inside it contains a slip of paper with the information our function needs, some letters and spaces joined together like a piece of string (it's called a string) that make a phrase reading \"an old lady\". Our envelope could contain other kinds of things like numbers (called integers), instructions (called functions), lists (called <em>arrays</em>). Because this variable is written outside of all the braces <code>{}</code>, and because you can see out through the tinted windows when you are inside the braces, this variable can be seen from anywhere in the code. We call this a 'global variable'.</p>\n\n<p>GLOBAL VARIABLE: <em>person</em> is a global variable, meaning that if you change its value from \"an old lady\" to \"a young man\", the <em>person</em> will keep being a young man until you decide to change it again and that any other function in the code can see that it's a young man. Press the <kbd>F12</kbd> button or look at the Options settings to open the developer console of a browser and type \"person\" to see what this value is. Type <code>person=\"a young man\"</code> to change it and then type \"person\" again to see that it has changed.</p>\n\n<p>After this we have the line</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>sing(person);\n</code></pre>\n\n<p>This line is calling the function, as if it were calling a dog</p>\n\n<blockquote>\n  <p>\"Come on <em>sing</em>, Come and get <em>person</em>!\"</p>\n</blockquote>\n\n<p>When the browser has loaded the JavaScript code an reached this line, it will start the function. I put the line at the end to make sure that the browser has all the information it needs to run it.</p>\n\n<p>Functions define actions  - the main function is about singing. It contains a variable called <em>firstPart</em> which applies to the singing about the person that applies to each of the verses of the song: \"There was \" + person + \" who swallowed\". If you type <em>firstPart</em> into the console, you won't get an answer because the variable is locked up in a function - the browser can't see inside the tinted windows of the braces.</p>\n\n<p>CLOSURES: The closures are the smaller functions that are inside the big <em>sing()</em> function. The little factories inside the big factory. They each have their own braces which mean that the variables inside them can't be seen from the outside. That's why the names of the variables (<em>creature</em> and <em>result</em>) can be repeated in the closures but with different values. If you type these variable names in the console window, you won't get its value because it's hidden by two layers of tinted windows.</p>\n\n<p>The closures all know what the <em>sing()</em> function's variable called <em>firstPart</em> is, because they can see out from their tinted windows.</p>\n\n<p>After the closures come the lines</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>fly();\nspider();\nbird();\ncat();\n</code></pre>\n\n<p>The sing() function will call each of these functions in the order they are given. Then the sing() function's work will be done.</p>\n    </div>",
          "vote": "59"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Okay, talking with a 6-year old child, I would possibly use following associations.</p>\n\n<blockquote>\n  <p>Imagine - you are playing with your little brothers and sisters in the entire house, and you are moving around with your toys and brought some of them into your older brother's room. After a while your brother returned from the school and went to his room, and he locked inside it, so now you could not access toys left there anymore in a direct way. But you could knock the door and ask your brother for that toys. This is called toy's <em>closure</em>; your brother made it up for you, and he is now into outer <em>scope</em>.</p>\n</blockquote>\n\n<p>Compare with a situation when a door was locked by draft and nobody inside (general function execution), and then some local fire occur and burn down the room (garbage collector:D), and then a new room was build and now you may leave another toys there (new function instance), but never get the same toys which were left in the first room instance.</p>\n\n<p>For an advanced child I would put something like the following. It is not perfect, but it makes you feel about what it is:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">playingInBrothersRoom</span> (<span class=\"hljs-params\">withToys</span>) </span>{\n  <span class=\"hljs-comment\">// We closure toys which we played in the brother's room. When he come back and lock the door</span>\n  <span class=\"hljs-comment\">// your brother is supposed to be into the outer [[scope]] object now. Thanks god you could communicate with him.</span>\n  <span class=\"hljs-keyword\">var</span> closureToys = withToys || [],\n      returnToy, countIt, toy; <span class=\"hljs-comment\">// Just another closure helpers, for brother's inner use.</span>\n\n  <span class=\"hljs-keyword\">var</span> brotherGivesToyBack = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">toy</span>) </span>{\n    <span class=\"hljs-comment\">// New request. There is not yet closureToys on brother's hand yet. Give him a time.</span>\n    returnToy = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">if</span> (toy &amp;&amp; closureToys.length &gt; <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// If we ask for a specific toy, the brother is going to search for it.</span>\n\n      <span class=\"hljs-keyword\">for</span> ( countIt = closureToys.length; countIt; countIt--) {\n        <span class=\"hljs-keyword\">if</span> (closureToys[countIt - <span class=\"hljs-number\">1</span>] == toy) {\n          returnToy = <span class=\"hljs-string\">'Take your '</span> + closureToys.splice(countIt - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">', little boy!'</span>;\n          <span class=\"hljs-keyword\">break</span>;\n        }\n      }\n      returnToy = returnToy || <span class=\"hljs-string\">'Hey, I could not find any '</span> + toy + <span class=\"hljs-string\">' here. Look for it in another room.'</span>;\n    }\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (closureToys.length &gt; <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// Otherwise, just give back everything he has in the room.</span>\n      returnToy = <span class=\"hljs-string\">'Behold! '</span> + closureToys.join(<span class=\"hljs-string\">', '</span>) + <span class=\"hljs-string\">'.'</span>;\n      closureToys = [];\n    }\n    <span class=\"hljs-keyword\">else</span> {\n      returnToy = <span class=\"hljs-string\">'Hey, lil shrimp, I gave you everything!'</span>;\n    }\n    <span class=\"hljs-built_in\">console</span>.log(returnToy);\n  }\n  <span class=\"hljs-keyword\">return</span> brotherGivesToyBack;\n}\n<span class=\"hljs-comment\">// You are playing in the house, including the brother's room.</span>\n<span class=\"hljs-keyword\">var</span> toys = [<span class=\"hljs-string\">'teddybear'</span>, <span class=\"hljs-string\">'car'</span>, <span class=\"hljs-string\">'jumpingrope'</span>],\n    askBrotherForClosuredToy = playingInBrothersRoom(toys);\n\n<span class=\"hljs-comment\">// The door is locked, and the brother came from the school. You could not cheat and take it out directly.</span>\n<span class=\"hljs-built_in\">console</span>.log(askBrotherForClosuredToy.closureToys); <span class=\"hljs-comment\">// Undefined</span>\n\n<span class=\"hljs-comment\">// But you could ask your brother politely, to give it back.</span>\naskBrotherForClosuredToy(<span class=\"hljs-string\">'teddybear'</span>); <span class=\"hljs-comment\">// Hooray, here it is, teddybear</span>\naskBrotherForClosuredToy(<span class=\"hljs-string\">'ball'</span>); <span class=\"hljs-comment\">// The brother would not be able to find it.</span>\naskBrotherForClosuredToy(); <span class=\"hljs-comment\">// The brother gives you all the rest</span>\naskBrotherForClosuredToy(); <span class=\"hljs-comment\">// Nothing left in there</span>\n</code></pre>\n\n<p>As you can see, the toys left in the room are still accessible via the brother and no matter if the room is locked. Here is <a href=\"http://jsbin.com/ubakor/9/edit\" rel=\"noreferrer\">a jsbin</a> to play around with it.</p>\n    </div>",
          "vote": "57"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An answer for a six-year-old (assuming he knows what a function is and what a variable is, and what data is):</p>\n\n<p>Functions can return data. One kind of data you can return from a function is another function. When that new function gets returned, all the variables and arguments used in the function that created it don't go away. Instead, that parent function \"closes.\" In other words, nothing can look inside of it and see the variables it used except for the function it returned. That new function has a special ability to look back inside the function that created it and see the data inside of it.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">the_closure</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> x = <span class=\"hljs-number\">4</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> x; <span class=\"hljs-comment\">// Here, we look back inside the_closure for the value of x</span>\n  }\n}\n\n<span class=\"hljs-keyword\">var</span> myFn = the_closure();\nmyFn(); <span class=\"hljs-comment\">//=&gt; 4</span>\n</code></pre>\n\n<p>Another really simple way to explain it is in terms of scope:</p>\n\n<p>Any time you create a smaller scope inside of a larger scope, the smaller scope will always be able to see what is in the larger scope.</p>\n    </div>",
          "vote": "50"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A function in JavaScript is not just a reference to a set of instructions (as in C language), but it also includes a hidden data structure which is composed of references to all nonlocal variables it uses (captured variables). Such two-piece functions are called closures. Every function in JavaScript can be considered a closure.</p>\n\n<p>Closures are functions with a state. It is somewhat similar to \"this\" in the sense that \"this\" also provides state for a function but function and \"this\" are separate objects (\"this\" is just a fancy parameter, and the only way to bind it permanently to a function is to create a closure). While \"this\" and function always live separately, a function cannot be separated from its closure and the language provides no means to access captured variables.</p>\n\n<p>Because all these external variables referenced by a lexically nested function are actually local variables in the chain of its lexically enclosing functions (global variables can be assumed to be local variables of some root function), and every single execution of a function creates new instances of its local variables, it follows that every execution of a function returning (or otherwise transferring it out, such as registering it as a callback) a nested function creates a new closure (with its own potentially unique set of referenced nonlocal variables which represent its execution context).</p>\n\n<p>Also, it must be understood that local variables in JavaScript are created not on the stack frame, but on the heap and destroyed only when no one is referencing them. When a function returns, references to its local variables are decremented, but they can still be non-null if during the current execution they became part of a closure and are still referenced by its lexically nested functions (which can happen only if the references to these nested functions were returned or otherwise transferred to some external code).</p>\n\n<p>An example:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span> (<span class=\"hljs-params\">initValue</span>) </span>{\n   <span class=\"hljs-comment\">//This variable is not destroyed when the foo function exits.</span>\n   <span class=\"hljs-comment\">//It is 'captured' by the two nested functions returned below.</span>\n   <span class=\"hljs-keyword\">var</span> value = initValue;\n\n   <span class=\"hljs-comment\">//Note that the two returned functions are created right now.</span>\n   <span class=\"hljs-comment\">//If the foo function is called again, it will return</span>\n   <span class=\"hljs-comment\">//new functions referencing a different 'value' variable.</span>\n   <span class=\"hljs-keyword\">return</span> {\n       <span class=\"hljs-attr\">getValue</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> value; },\n       <span class=\"hljs-attr\">setValue</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">newValue</span>) </span>{ value = newValue; }\n   }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">//foo sets its local variable 'value' to 5 and returns an object with</span>\n    <span class=\"hljs-comment\">//two functions still referencing that local variable</span>\n    <span class=\"hljs-keyword\">var</span> obj = foo(<span class=\"hljs-number\">5</span>);\n\n    <span class=\"hljs-comment\">//Extracting functions just to show that no 'this' is involved here</span>\n    <span class=\"hljs-keyword\">var</span> getValue = obj.getValue;\n    <span class=\"hljs-keyword\">var</span> setValue = obj.setValue;\n\n    alert(getValue()); <span class=\"hljs-comment\">//Displays 5</span>\n    setValue(<span class=\"hljs-number\">10</span>);\n    alert(getValue()); <span class=\"hljs-comment\">//Displays 10</span>\n\n    <span class=\"hljs-comment\">//At this point getValue and setValue functions are destroyed</span>\n    <span class=\"hljs-comment\">//(in reality they are destroyed at the next iteration of the garbage collector).</span>\n    <span class=\"hljs-comment\">//The local variable 'value' in the foo is no longer referenced by</span>\n    <span class=\"hljs-comment\">//anything and is destroyed too.</span>\n}\n\nbar();\n</code></pre>\n    </div>",
          "vote": "50"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Perhaps a little beyond all but the most precocious of six-year-olds, but a few examples that helped make the concept of closure in JavaScript click for me.</p>\n\n<p>A closure is a function that has access to another function's scope (its variables and functions). The easiest way to create a closure is with a function within a function; the reason being that in JavaScript a function always has access to its containing function’s scope.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> outerVar = <span class=\"hljs-string\">\"monkey\"</span>;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">innerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n        alert(outerVar);\n    }\n    \n    innerFunction();\n}\n\nouterFunction();</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif19\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>ALERT: monkey</p>\n\n<p>In the above example, outerFunction is called which in turn calls innerFunction. Note how outerVar is available to innerFunction, evidenced by its correctly alerting the value of outerVar.</p>\n\n<p>Now consider the following:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> outerVar = <span class=\"hljs-string\">\"monkey\"</span>;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">innerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> outerVar;\n    }\n    \n    <span class=\"hljs-keyword\">return</span> innerFunction;\n}\n\n<span class=\"hljs-keyword\">var</span> referenceToInnerFunction = outerFunction();\nalert(referenceToInnerFunction());</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif20\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>ALERT: monkey</p>\n\n<p>referenceToInnerFunction is set to outerFunction(), which simply returns a reference to innerFunction. When referenceToInnerFunction is called, it returns outerVar. Again, as above, this demonstrates that innerFunction has access to outerVar, a variable of outerFunction. Furthermore, it is interesting to note that it retains this access even after outerFunction has finished executing.</p>\n\n<p>And here is where things get really interesting. If we were to get rid of outerFunction, say set it to null, you might think that referenceToInnerFunction would loose its access to the value of outerVar. But this is not the case. </p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> outerVar = <span class=\"hljs-string\">\"monkey\"</span>;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">innerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> outerVar;\n    }\n    \n    <span class=\"hljs-keyword\">return</span> innerFunction;\n}\n\n<span class=\"hljs-keyword\">var</span> referenceToInnerFunction = outerFunction();\nalert(referenceToInnerFunction());\n\nouterFunction = <span class=\"hljs-literal\">null</span>;\nalert(referenceToInnerFunction());</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif21\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>ALERT: monkey\nALERT: monkey</p>\n\n<p>But how is this so? How can referenceToInnerFunction still know the value of outerVar now that outerFunction has been set to null?</p>\n\n<p>The reason that referenceToInnerFunction can still access the value of outerVar is because when the closure was first created by placing innerFunction inside of outerFunction, innerFunction added a reference to outerFunction’s scope (its variables and functions) to its scope chain. What this means is that innerFunction has a pointer or reference to all of outerFunction’s variables, including outerVar. So even when outerFunction has finished executing, or even if it is deleted or set to null, the variables in its scope, like outerVar, stick around in memory because of the outstanding reference to them on the part of the innerFunction that has been returned to referenceToInnerFunction. To truly release outerVar and the rest of outerFunction’s variables from memory you would have to get rid of this outstanding reference to them, say by setting referenceToInnerFunction to null as well.</p>\n\n<p>//////////</p>\n\n<p>Two other things about closures to note. First, the closure will always have access to the last values of its containing function.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> outerVar = <span class=\"hljs-string\">\"monkey\"</span>;\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">innerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n        alert(outerVar);\n    }\n    \n    outerVar = <span class=\"hljs-string\">\"gorilla\"</span>;\n\n    innerFunction();\n}\n\nouterFunction();</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif22\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>ALERT: gorilla</p>\n\n<p>Second, when a closure is created, it retains a reference to all of its enclosing function’s variables and functions; it doesn’t get to pick and choose. And but so, closures should be used sparingly, or at least carefully, as they can be memory intensive; a lot of variables can be kept in memory long after a containing function has finished executing.</p>\n    </div>",
          "vote": "48"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd simply point them to the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures\">Mozilla Closures page</a>. It's the best, most <strong>concise and simple explanation</strong> of closure basics and practical usage that I've found. It is highly recommended to anyone learning JavaScript.</p>\n\n<p>And yes, I'd even recommend it to a 6-year old -- if the 6-year old is learning about closures, then it's logical they're ready to comprehend the <em>concise and simple explanation</em> provided in the article.</p>\n    </div>",
          "vote": "46"
        }
      ]
    },
    {
      "question": "How do I revert a Git repository to a previous commit?",
      "url": "https://stackoverflow.com/questions/4114095/how-do-i-revert-a-git-repository-to-a-previous-commit",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M16 9a2 2 0 00-2-2V6A5 5 0 004 6v1a2 2 0 00-2 2v6c0 1.1.9 2 2 2h10a2 2 0 002-2V9zm-7 5a2 2 0 110-4 2 2 0 010 4zm3.1-7H5.9V6a3.1 3.1 0 016.2 0v1z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>This question's answers are a <a href=\"/help/privileges/edit-community-wiki\">community effort</a></b>. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n</aside>\n\n    </div>\n\n<p>How do I revert from my current state to a snapshot made on a certain commit?</p>\n\n<p>If I do <code>git log</code>, then I get the following output:</p>\n\n<pre><code>$ git log\ncommit a867b4af366350be2e7c21b8de9cc6504678a61b`\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 18:59:41 2010 -0400\n\nblah blah blah...\n\ncommit 25eee4caef46ae64aa08e8ab3f988bc917ee1ce4\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 05:13:39 2010 -0400\n\nmore blah blah blah...\n\ncommit 0766c053c0ea2035e90f504928f8df3c9363b8bd\nAuthor: Me &lt;me@me.com&gt;\nDate:   Thu Nov 4 00:55:06 2010 -0400\n\nAnd yet more blah blah...\n\ncommit 0d1d7fc32e5a947fbd92ee598033d85bfc445a50\nAuthor: Me &lt;me@me.com&gt;\nDate:   Wed Nov 3 23:56:08 2010 -0400\n\nYep, more blah blah.\n</code></pre>\n\n<p>How do I revert to the commit from November 3, i.e. commit <code>0d1d7fc</code>?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This depends a lot on what you mean by \"revert\".</p>\n<h2>Temporarily switch to a different commit</h2>\n<p>If you want to temporarily go back to it, fool around, then come back to where you are, all you have to do is check out the desired commit:</p>\n<pre class=\"lang-sh s-code-block hljs bash\"><code><span class=\"hljs-comment\"># This will detach your HEAD, that is, leave you with no branch checked out:</span>\ngit checkout 0d1d7fc32\n</code></pre>\n<p>Or if you want to make commits while you're there, go ahead and make a new branch while you're at it:</p>\n<pre><code>git checkout -b old-state 0d1d7fc32\n</code></pre>\n<p>To go back to where you were, just check out the branch you were on again. (If you've made changes, as always when switching branches, you'll have to deal with them as appropriate. You could reset to throw them away; you could stash, checkout, stash pop to take them with you; you could commit them to a branch there if you want a branch there.)</p>\n<h2>Hard delete unpublished commits</h2>\n<p>If, on the other hand, you want to really get rid of everything you've done since then, there are two possibilities. One, if you haven't published any of these commits, simply reset:</p>\n<pre class=\"lang-sh s-code-block hljs bash\"><code><span class=\"hljs-comment\"># This will destroy any local modifications.</span>\n<span class=\"hljs-comment\"># Don't do it if you have uncommitted work you want to keep.</span>\ngit reset --hard 0d1d7fc32\n\n<span class=\"hljs-comment\"># Alternatively, if there's work to keep:</span>\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n<span class=\"hljs-comment\"># This saves the modifications, then reapplies that patch after resetting.</span>\n<span class=\"hljs-comment\"># You could get merge conflicts, if you've modified things which were</span>\n<span class=\"hljs-comment\"># changed since the commit you reset to.</span>\n</code></pre>\n<p>If you mess up, you've already thrown away your local changes, but you can at least get back to where you were before by resetting again.</p>\n<h2>Undo published commits with new commits</h2>\n<p>On the other hand, if you've published the work, you probably don't want to reset the branch, since that's effectively rewriting history. In that case, you could indeed revert the commits. With Git, revert has a very specific meaning: create a commit with the reverse patch to cancel it out. This way you don't rewrite any history.</p>\n<pre class=\"lang-sh s-code-block hljs bash\"><code><span class=\"hljs-comment\"># This will create three separate revert commits:</span>\ngit revert a867b4af 25eee4ca 0766c053\n\n<span class=\"hljs-comment\"># It also takes ranges. This will revert the last two commits:</span>\ngit revert HEAD~2..HEAD\n\n<span class=\"hljs-comment\">#Similarly, you can revert a range of commits using commit hashes (non inclusive of first hash):</span>\ngit revert 0d1d7fc..a867b4a\n\n<span class=\"hljs-comment\"># Reverting a merge commit</span>\ngit revert -m 1 &lt;merge_commit_sha&gt;\n\n<span class=\"hljs-comment\"># To get just one, you could use `rebase -i` to squash them afterwards</span>\n<span class=\"hljs-comment\"># Or, you could do it manually (be sure to do this at top level of the repo)</span>\n<span class=\"hljs-comment\"># get your index and work tree into the desired state, without changing HEAD:</span>\ngit checkout 0d1d7fc32 .\n\n<span class=\"hljs-comment\"># Then commit. Be sure and write a good message describing what you just did</span>\ngit commit\n</code></pre>\n<p>The <a href=\"http://schacon.github.com/git/git-revert.html\" rel=\"noreferrer\"><code>git-revert</code> manpage</a> actually covers a lot of this in its description. Another useful link is <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging#_undoing_merges\" rel=\"noreferrer\">this git-scm.com section discussing git-revert</a>.</p>\n<p>If you decide you didn't want to revert after all, you can revert the revert (as described here) or reset back to before the revert (see the previous section).</p>\n<p>You may also find this answer helpful in this case:<br>\n<a href=\"https://stackoverflow.com/questions/34519665/how-to-move-head-forward-checkout-revet-reflog-reset/34519716#34519716\">How can I move HEAD back to a previous location? (Detached head) &amp; Undo commits</a></p>\n    </div>",
          "vote": "10538"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Lots of complicated and dangerous answers here, but it's actually easy:</p>\n\n<pre><code>git revert --no-commit 0766c053..HEAD\ngit commit\n</code></pre>\n\n<p>This will revert everything from the HEAD back to the commit hash, meaning it will recreate that commit state in the working tree <em>as if</em> every commit after <code>0766c053</code> had been walked back. You can then commit the current tree, and it will create a brand new commit essentially equivalent to the commit you \"reverted\" to.  </p>\n\n<p>(The <code>--no-commit</code> flag lets git revert all the commits at once- otherwise you'll be prompted for a message for each commit in the range, littering your history with unnecessary new commits.)</p>\n\n<p>This is a <strong>safe and easy way to rollback to a previous state</strong>. No history is destroyed, so it can be used for commits that have already been made public.</p>\n    </div>",
          "vote": "2373"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Rogue Coder?</h2>\n\n<p>Working on your own and just want it to work? Follow these instructions below, they’ve worked reliably for me and many others for years.</p>\n\n<p>Working with others? Git is complicated. Read the comments below this answer before you do something rash.</p>\n\n<h3>Reverting Working Copy to Most Recent Commit</h3>\n\n<p>To revert to a previous commit, ignoring any changes:</p>\n\n<pre><code>git reset --hard HEAD\n</code></pre>\n\n<p>where HEAD is the last commit in your current branch</p>\n\n<h3>Reverting The Working Copy to an Older Commit</h3>\n\n<p>To revert to a commit that's older than the most recent commit:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code><span class=\"hljs-comment\"># Resets index to former commit; replace '56e05fced' with your commit code</span>\ngit reset 56e05fced \n\n<span class=\"hljs-comment\"># Moves pointer back to previous HEAD</span>\ngit reset --soft HEAD@{1}\n\ngit commit -m <span class=\"hljs-string\">\"Revert to 56e05fced\"</span>\n\n<span class=\"hljs-comment\"># Updates working copy to reflect the new commit</span>\ngit reset --hard\n</code></pre>\n\n<p>Credits go to a similar Stack Overflow question, <em><a href=\"https://stackoverflow.com/questions/1895059/git-revert-to-a-commit-by-sha-hash\">Revert to a commit by a SHA hash in Git?</a></em>.</p>\n    </div>",
          "vote": "1700"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The best option for me and probably others is the Git reset option:</p>\n\n<pre><code>git reset --hard &lt;commidId&gt; &amp;&amp; git clean -f\n</code></pre>\n\n<p>This has been the best option for me! It is simple, fast and effective!</p>\n\n<hr>\n\n<blockquote>\n  <p>** Note:** As mentioned in comments don't do this if you're sharing your branch with other people who have copies of the old commits</p>\n</blockquote>\n\n<p>Also from the comments, if you wanted a less 'ballzy' method you could use </p>\n\n<pre><code>git clean -i\n</code></pre>\n    </div>",
          "vote": "242"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Before answering let's add some background, explaining what this <code>HEAD</code> is.</p>\n<h1><em><strong><code>First of all what is HEAD?</code></strong></em></h1>\n<p><code>HEAD</code> is simply a reference to the current commit (latest) on the current branch. There can only be a single <code>HEAD</code> at any given time (excluding <code>git worktree</code>).</p>\n<p>The content of <code>HEAD</code> is stored inside <code>.git/HEAD</code>, and it contains the 40 bytes SHA-1 of the current commit.</p>\n<hr>\n<h1><em><strong><code>detached HEAD</code></strong></em></h1>\n<p>If you are not on the latest commit - meaning that <code>HEAD</code> is pointing to a prior commit in history it's called <em><strong><code>detached HEAD</code></strong></em>.</p>\n<p><a href=\"https://i.stack.imgur.com/OlavO.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/OlavO.png\" alt=\"Enter image description here\"></a></p>\n<p>On the command line it will look like this - SHA-1 instead of the branch name since the <code>HEAD</code> is not pointing to the the tip of the current branch:</p>\n<p><a href=\"https://i.stack.imgur.com/U0l3s.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/U0l3s.png\" alt=\"Enter image description here\"></a></p>\n<hr>\n<h3>A few options on how to recover from a detached HEAD:</h3>\n<hr>\n<h3><a href=\"https://git-scm.com/docs/git-checkout\" rel=\"noreferrer\"><code>git checkout</code></a></h3>\n<pre><code>git checkout &lt;commit_id&gt;\ngit checkout -b &lt;new branch&gt; &lt;commit_id&gt;\ngit checkout HEAD~X // x is the number of commits t go back\n</code></pre>\n<p>This will checkout new branch pointing to the desired commit. This command will checkout to a given commit.</p>\n<p>At this point you can create a branch and start to work from this point on:</p>\n<pre><code># Checkout a given commit.\n# Doing so will result in a `detached HEAD` which mean that the `HEAD`\n# is not pointing to the latest so you will need to checkout branch\n# in order to be able to update the code.\ngit checkout &lt;commit-id&gt;\n\n# Create a new branch forked to the given commit\ngit checkout -b &lt;branch name&gt;\n</code></pre>\n<hr>\n<h3><a href=\"https://git-scm.com/docs/git-reflog\" rel=\"noreferrer\"><code>git reflog</code></a></h3>\n<p>You can always use the <code>reflog</code> as well. <code>git reflog </code> will display any change which updated the <code>HEAD</code> and checking out the desired reflog entry will set the <code>HEAD</code> back to this commit.</p>\n<p><strong>Every time the HEAD is modified there will be a new entry in the <code>reflog</code></strong></p>\n<pre><code>git reflog\ngit checkout HEAD@{...}\n</code></pre>\n<p>This will get you back to your desired commit</p>\n<p><a href=\"https://i.stack.imgur.com/atW9w.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/atW9w.png\" alt=\"Enter image description here\"></a></p>\n<hr>\n<h3><em><strong><a href=\"https://git-scm.com/docs/git-reset\" rel=\"noreferrer\"><code>git reset HEAD --hard &lt;commit_id&gt;</code></a></strong></em></h3>\n<p>\"Move\" your head back to the desired commit.</p>\n<pre class=\"lang-sh s-code-block hljs bash\"><code><span class=\"hljs-comment\"># This will destroy any local modifications.</span>\n<span class=\"hljs-comment\"># Don't do it if you have uncommitted work you want to keep.</span>\ngit reset --hard 0d1d7fc32\n\n<span class=\"hljs-comment\"># Alternatively, if there's work to keep:</span>\ngit stash\ngit reset --hard 0d1d7fc32\ngit stash pop\n<span class=\"hljs-comment\"># This saves the modifications, then reapplies that patch after resetting.</span>\n<span class=\"hljs-comment\"># You could get merge conflicts, if you've modified things which were</span>\n<span class=\"hljs-comment\"># changed since the commit you reset to.</span>\n</code></pre>\n<ul>\n<li>Note: (<a href=\"https://github.com/git/git/blob/master/Documentation/RelNotes/2.7.0.txt\" rel=\"noreferrer\">Since Git 2.7</a>) you can also use the <code>git rebase --no-autostash</code> as well.</li>\n</ul>\n<hr>\n<p>This schema illustrates which command does what. As you can see there <code>reset &amp;&amp; checkout</code> modify the <code>HEAD</code>.</p>\n<p><a href=\"https://i.stack.imgur.com/NuThL.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/NuThL.png\" alt=\"Enter image description here\"></a></p>\n    </div>",
          "vote": "203"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want to \"uncommit\", erase the last commit message, and put the modified files back in staging, you would use the command:</p>\n\n<pre><code>git reset --soft HEAD~1\n</code></pre>\n\n<ul>\n<li><code>--soft</code> indicates that the uncommitted files should be retained as working files opposed to <code>--hard</code> which would discard them.</li>\n<li><code>HEAD~1</code> is the last commit.  If you want to rollback 3 commits you could use <code>HEAD~3</code>.  If you want to rollback to a specific revision number, you could also do that using its SHA hash.</li>\n</ul>\n\n<p>This is an extremely useful command in situations where you committed the wrong thing and you want to undo that last commit.</p>\n\n<p>Source: <a href=\"http://nakkaya.com/2009/09/24/git-delete-last-commit/\">http://nakkaya.com/2009/09/24/git-delete-last-commit/</a></p>\n    </div>",
          "vote": "162"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can do this by the following two commands:</p>\n\n<pre><code>git reset --hard [previous Commit SHA id here]\ngit push origin [branch Name] -f\n</code></pre>\n\n<p>It will remove your previous Git commit.</p>\n\n<p>If you want to keep your changes, you can also use:</p>\n\n<pre><code>git reset --soft [previous Commit SHA id here]\n</code></pre>\n\n<p>Then it will save your changes.</p>\n    </div>",
          "vote": "153"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have tried a lot of ways to revert local changes in Git, and it seems that this works the best if you just want to revert to the latest commit state. </p>\n\n<pre><code>git add . &amp;&amp; git checkout master -f\n</code></pre>\n\n<p>Short description: </p>\n\n<ul>\n<li>It will NOT create any commits as <code>git revert</code> does.</li>\n<li>It will NOT detach your HEAD like <code>git checkout &lt;commithashcode&gt;</code> does.</li>\n<li>It WILL override all your local changes and DELETE all added files since the last commit in the branch.</li>\n<li>It works only with branches names, so you can revert only to latest commit in the branch this way.</li>\n</ul>\n\n<p>I found a much more convenient and simple way to achieve the results above: </p>\n\n<pre><code>git add . &amp;&amp; git reset --hard HEAD\n</code></pre>\n\n<p>where HEAD points to the latest commit at you current branch.</p>\n\n<p>It is the same code code as boulder_ruby suggested, but I have added <code>git add .</code> before  <code>git reset --hard HEAD</code> to erase all new files created since the last commit since this is what most people expect I believe when reverting to the latest commit.</p>\n    </div>",
          "vote": "114"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The best way is:</p>\n<pre><code>git reset --hard &lt;commidId&gt; &amp;&amp; git push --force\n</code></pre>\n<p>This will reset the branch to the specific commit and then will upload the remote server with the same commits as you have in local.</p>\n<p>Be careful with the <code>--force</code> flag as it removes all the subsequent commits after the selected commit without the option to recover them.</p>\n    </div>",
          "vote": "95"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>OK,</strong> going back to a previous commit in Git is quite easy...</p>\n\n<p>Revert back <strong>without keeping</strong> the changes:</p>\n\n<pre><code>git reset --hard &lt;commit&gt;\n</code></pre>\n\n<p>Revert back <strong>with keeping</strong> the changes:</p>\n\n<pre><code>git reset --soft &lt;commit&gt;\n</code></pre>\n\n<p><strong>Explanation:</strong> using <code>git reset</code>, you can reset to a specific state. It's common using it with a commit hash as you see above.</p>\n\n<p>But as you see the difference is using the two flags <code>--soft</code> and <code>--hard</code>, by default <code>git reset</code> using <code>--soft</code> flag, but it's a good practice always using the flag, I explain each flag:</p>\n\n<hr>\n\n<h2>--soft</h2>\n\n<p>The default flag as explained, not need to provide it, does not change the working tree, but it adds all changed files ready to commit, so you go back to the commit status which changes to files get unstaged.</p>\n\n<hr>\n\n<h2>--hard</h2>\n\n<p>Be careful with this flag. It resets the working tree and all changes to tracked files and all will be gone!</p>\n\n<hr>\n\n<p>I also created the image below that may happen in a real life working with Git:</p>\n\n<p><a href=\"https://i.stack.imgur.com/y6Xgj.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/y6Xgj.png\" alt=\"Git reset to a commit\"></a></p>\n    </div>",
          "vote": "93"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Assuming you're talking about master and on that respective branch (that said, this could be any working branch you're concerned with):</p>\n\n<pre><code># Reset local master branch to November 3rd commit ID\ngit reset --hard 0d1d7fc32e5a947fbd92ee598033d85bfc445a50\n\n# Reset remote master branch to November 3rd commit ID\ngit push -f origin 0d1d7fc32e5a947fbd92ee598033d85bfc445a50:master\n</code></pre>\n\n<p>I found the answer from in a blog post (now no longer exists)</p>\n\n<p>Note that this is Resetting and Forcing the change to the remote, so that if others on your team have already git pulled, you will cause problems for them. You are destroying the change history, which is an important reason why people use git in the first place.</p>\n\n<p>Better to use revert (see other answers) than reset. \nIf you're a one man team then it probably doesn't matter.</p>\n    </div>",
          "vote": "75"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Say you have the following commits in a text file named <code>~/commits-to-revert.txt</code> (I used <code>git log --pretty=oneline</code> to get them)</p>\n\n<pre><code>fe60adeba6436ed8f4cc5f5c0b20df7ac9d93219\n0c27ecfdab3cbb08a448659aa61764ad80533a1b\nf85007f35a23a7f29fa14b3b47c8b2ef3803d542\ne9ec660ba9c06317888f901e3a5ad833d4963283\n6a80768d44ccc2107ce410c4e28c7147b382cd8f\n9cf6c21f5adfac3732c76c1194bbe6a330fb83e3\nfff2336bf8690fbfb2b4890a96549dc58bf548a5\n1f7082f3f52880cb49bc37c40531fc478823b4f5\ne9b317d36a9d1db88bd34831a32de327244df36a\nf6ea0e7208cf22fba17952fb162a01afb26de806\n137a681351037a2204f088a8d8f0db6e1f9179ca\n</code></pre>\n\n<p>Create a <a href=\"http://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\" rel=\"noreferrer\">Bash</a> shell script to revert each of them:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code><span class=\"hljs-meta\">#!/bin/bash</span>\n<span class=\"hljs-built_in\">cd</span> /path/to/working/copy\n<span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> `cat ~/commits-to-revert.txt`\n<span class=\"hljs-keyword\">do</span>\n    git revert <span class=\"hljs-variable\">$i</span> --no-commit\n<span class=\"hljs-keyword\">done</span>\n</code></pre>\n\n<p>This reverts everything back to the previous state, including file and directory creations, and deletions, commit it to your branch and you retain the history, but you have it reverted back to the same file structure. Why Git doesn't have a <code>git revert --to &lt;hash&gt;</code> is beyond me.</p>\n    </div>",
          "vote": "63"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Extra Alternatives to Jefromi's Solutions</h2>\n\n<p><a href=\"https://stackoverflow.com/a/4114122/456814\">Jefromi's solutions</a> are definitely the best ones, and you should definitely use them. However, for the sake of completeness, I also wanted to show these other alternative solutions that can also be used to revert a commit (in the sense that you <strong>create a new commit that undoes changes in previous commit</strong>, just like what <code>git revert</code> does).</p>\n\n<p>To be clear, these alternatives <strong><em>are not the best way to revert commits</em></strong>, <a href=\"https://stackoverflow.com/a/4114122/456814\">Jefromi's solutions are</a>, but I just want to point out that you can also use these other methods to achieve the same thing as <code>git revert</code>.</p>\n\n<h2>Alternative 1: Hard and Soft Resets</h2>\n\n<p>This is a very slightly modified version of Charles Bailey's solution to <a href=\"https://stackoverflow.com/questions/1895059/revert-to-a-commit-by-sha-hash-in-git/1895095#1895095\">Revert to a commit by a SHA hash in Git?</a>:</p>\n\n<pre class=\"lang-bash s-code-block hljs\"><code><span class=\"hljs-comment\"># Reset the index to the desired commit</span>\ngit reset --hard &lt;commit&gt;\n\n<span class=\"hljs-comment\"># Move the branch pointer back to the previous HEAD</span>\ngit reset --soft HEAD@{1}\n\n<span class=\"hljs-comment\"># Commit the changes</span>\ngit commit -m <span class=\"hljs-string\">\"Revert to &lt;commit&gt;\"</span>\n</code></pre>\n\n<p>This basically works by using the fact that soft resets will leave the state of the previous commit staged in the index/staging-area, which you can then commit.</p>\n\n<h2>Alternative 2: Delete the Current Tree and Replace with the New One</h2>\n\n<p>This solution comes from svick's solution to <a href=\"https://stackoverflow.com/questions/3380805/checkout-old-commit-and-make-it-a-new-commit/3382249#3382249\">Checkout old commit and make it a new commit</a>:</p>\n\n<pre><code>git rm -r .\ngit checkout &lt;commit&gt; .\ngit commit\n</code></pre>\n\n<p>Similarly to alternative #1, this reproduces the state of <code>&lt;commit&gt;</code> in the current working copy. It is necessary to do <code>git rm</code> first because <code>git checkout</code> won't remove files that have been added since <code>&lt;commit&gt;</code>.</p>\n    </div>",
          "vote": "61"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is a <strong>much simpler</strong> way to go back to a previous commit (and have it in an uncommited state, to do with it whatever you like):</p>\n\n<pre><code>git reset HEAD~1\n</code></pre>\n\n<p>So, no need for commit ids and so on :)</p>\n    </div>",
          "vote": "58"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is a command (not a part of core Git, but it is in the <a href=\"https://github.com/visionmedia/git-extras\">git-extras</a> package) specifically for reverting and staging old commits:</p>\n\n<pre><code>git back\n</code></pre>\n\n<p>Per the <a href=\"https://en.wikipedia.org/wiki/Man_page\">man page</a>, it can also be used as such:</p>\n\n<pre><code># Remove the latest three commits\ngit back 3\n</code></pre>\n    </div>",
          "vote": "39"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>After all the changes, when you push all these commands, you might have to use:</p>\n\n<pre><code>git push -f ...\n</code></pre>\n\n<p>And not only <code>git push</code>.</p>\n    </div>",
          "vote": "38"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can complete all these initial steps yourself and push back to the Git repository.</p>\n\n<ol>\n<li><p>Pull the latest version of your repository from Bitbucket using the <code>git pull --all</code> command.</p></li>\n<li><p>Run the Git log command with <code>-n 4</code> from your terminal. The number after the <code>-n</code> determines the number of commits in the log starting from the most recent commit in your local history.</p>\n\n<pre><code>$ git log -n 4\n</code></pre></li>\n<li><p>Reset the head of your repository's history using the <code>git reset --hard HEAD~N</code> where N is the number of commits you want to take the head back. In the following example the head would be set back one commit, to the last commit in the repository history:</p></li>\n<li><p>Push the change to Git repository using <code>git push --force</code> to force push the change.</p></li>\n</ol>\n\n<p>If you want the Git repository to a previous commit:</p>\n\n<pre><code>git pull --all\ngit reset --hard HEAD~1\ngit push --force\n</code></pre>\n    </div>",
          "vote": "33"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Revert to <em>most recent</em> commit and ignoring all local changes:</p>\n\n<pre><code>git reset --hard HEAD\n</code></pre>\n    </div>",
          "vote": "30"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Select your required commit, and check it by</p>\n\n<pre><code>git show HEAD\ngit show HEAD~1\ngit show HEAD~2 \n</code></pre>\n\n<p>till you get the required commit. To make the HEAD point to that, do</p>\n\n<pre><code>git reset --hard HEAD~1\n</code></pre>\n\n<p>or <code>git reset --hard HEAD~2</code> or whatever.</p>\n    </div>",
          "vote": "29"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the situation is an <strong>urgent one</strong>, and you just want to do what the questioner asked in a <strong>quick and dirty</strong> way, assuming your project is under a directory called, for example, \"my project\":</p>\n\n<hr>\n\n<p><strong>QUICK AND DIRTY</strong>: depending on the circumstances, quick and dirty may in fact be very GOOD. What my solution here does is <strong>NOT</strong> replace irreversibly the files you have in your working directory with files hauled up/extracted from the depths of the git repository lurking beneath your .git/ directory using fiendishly clever and diabolically powerful git commands, of which there are many. <strong>YOU DO NOT HAVE TO DO SUCH DEEP-SEA DIVING TO RECOVER what may appear to be a disastrous situation, and attempting to do so without sufficient expertise may prove fatal</strong>.</p>\n\n<hr>\n\n<ol>\n<li><p>Copy the whole directory and call it something else, like \"my project - copy\". Assuming your git repository (\"repo\") files are under the \"my project\" directory (the default place for them, under a directory called \".git\"), you will now have copied both your work files and your repo files.</p></li>\n<li><p>Do this in the directory \"my project\":</p>\n\n<pre><code>.../my project $ git reset --hard [first-4-letters&amp;numbers-of-commit's-SHA]\n</code></pre></li>\n</ol>\n\n<p>This will return the state of the repo under \"my project\" to what it was when you made that commit (a \"commit\" means a snapshot of your working files). All commits since then will be lost forever under \"my project\", BUT... <strong>they will still be present</strong> in the repo under \"my project - copy\" since you copied <em>all</em> those files - including the ones under .../.git/.</p>\n\n<p>You then have two versions on your system... you can examine or copy or modify files of interest, or whatever, from the previous commit. You can completely discard the files under \"my project - copy\", if you have decided the new work since the restored commit was going nowhere... </p>\n\n<p>The obvious thing if you want to carry on with the state of the project without actually discarding the work since this retrieved commit is to rename your directory again: Delete the project containing the retrieved commit (or give it a temporary name) and rename your \"my project - copy\" directory back to \"my project\". Then maybe try to understand some of the other answers here, and probably do another commit fairly soon.</p>\n\n<p>Git is a brilliant creation but absolutely no-one is able to just \"pick it up on the fly\": also people who try to explain it <strong>far too often</strong> assume prior knowledge of other VCS [Version Control Systems] and delve far too deep far too soon, and commit other crimes, like using interchangeable terms for \"checking out\" - in ways which sometimes appear almost calculated to confuse a beginner.  </p>\n\n<p>To save yourself much stress, learn from my scars. You have to pretty much have to read a book on Git - I'd recommend <a href=\"http://shop.oreilly.com/product/0636920022862.do\" rel=\"nofollow noreferrer\">\"Version Control with Git\"</a>. Do it sooner rather than later. If you do, bear in mind that much of the complexity of Git comes from branching and then remerging: you can skip those parts in any book. From your question there's <strong>no reason why people should be blinding you with science</strong>.  </p>\n\n<p>Especially if, for example, this is a desperate situation and you're a newbie with Git!</p>\n\n<p>PS: One other thought: It is (now) actually quite simple to keep the Git repo in a directory other than the one with the working files. This would mean you would not have to copy the entire Git repository using the above quick &amp; dirty solution. See the answer by Fryer using <code>--separate-git-dir</code> <a href=\"https://stackoverflow.com/questions/505467/can-i-store-the-git-folder-outside-the-files-i-want-tracked\">here</a>. <strong>Be warned</strong>, though: If you have a \"separate-directory\" repository which you don't copy, and you do a hard reset, all versions subsequent to the reset commit will be lost forever, unless you have, as you absolutely should, regularly backed up your repository, preferably to the Cloud (e.g. <a href=\"https://en.wikipedia.org/wiki/Google_Drive\" rel=\"nofollow noreferrer\">Google Drive</a>) among other places.</p>\n\n<p>On this subject of \"backing up to the Cloud\", the next step is to open an account (free of course) with GitHub or (better in my view) <a href=\"https://gitlab.com\" rel=\"nofollow noreferrer\">GitLab</a>. You can then regularly do a <code>git push</code> command to make your Cloud repo up-to-date \"properly\". But again, talking about this may be too much too soon.</p>\n    </div>",
          "vote": "25"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>This is one more way to directly reset to a recent commit</h2>\n\n<pre><code>git stash\ngit stash clear\n</code></pre>\n\n<p>It directly clears all the changes that you have been making since the last commit.</p>\n\n<p>PS: It has a little problem; it also deletes all you recently stored stash changes. Which I guess in most cases should not matter.</p>\n    </div>",
          "vote": "23"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p><strong>Caution!</strong> This command can cause losing commit history, if user put the wrong commit mistakenly. Always have en extra backup of your git some\nwhere else just in case if you do mistakes, than you are a bit safer.\n:)</p>\n</blockquote>\n<p>I have had a similar issue and wanted to revert back to an earlier commit. In my case I was not interested to keep the newer commit, hence I used <code>Hard</code>.</p>\n<p>This is how I did it:</p>\n<pre><code>git reset --hard CommitId &amp;&amp; git clean -f\n</code></pre>\n<p>This will revert on the local repository, and here after using <code>git push -f</code> will update the remote repository.</p>\n<pre><code>git push -f\n</code></pre>\n<hr>\n<p>For instance, if you want to completely ignore the commit with the name <code>enforce non-group manage policies</code> from the next image</p>\n<p><a href=\"https://i.stack.imgur.com/JyrDu.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/JyrDu.png\" alt=\"enter image description here\"></a></p>\n<p>you'd run</p>\n<pre><code>git reset --hard dd52eb9 &amp;&amp; git clean -f\n</code></pre>\n<p>followed by</p>\n<pre><code>git push -f\n</code></pre>\n<p>After, you won't see that commit (<code>enforce non-group manage policies</code>) there</p>\n<p><a href=\"https://i.stack.imgur.com/Dkljl.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Dkljl.png\" alt=\"enter image description here\"></a></p>\n    </div>",
          "vote": "23"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To completely clean a coder's directory up from some accidental changes, we used:</p>\n\n<pre><code>git add -A .\ngit reset --hard HEAD\n</code></pre>\n\n<p>Just <code>git reset --hard HEAD</code> will get rid of modifications, but it won't get rid of \"new\" files. In their case they'd accidentally dragged an important folder somewhere random, and all those files were being treated as new by Git, so a <code>reset --hard</code> didn't fix it. By running the <code>git add -A .</code> beforehand, it explicitly tracked them all with git, to be wiped out by the reset.</p>\n    </div>",
          "vote": "22"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To keep the changes from the previous commit to HEAD and move to the previous commit, do:</p>\n\n<pre><code>git reset &lt;SHA&gt;\n</code></pre>\n\n<p>If changes are not required from the previous commit to HEAD and just discard all changes, do:</p>\n\n<pre><code>git reset --hard &lt;SHA&gt;\n</code></pre>\n    </div>",
          "vote": "21"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I believe some people may come to this question wanting to know how to rollback committed changes they've made in their master - ie throw everything away and go back to origin/master, in which case, do this:</p>\n\n<pre><code>git reset --hard origin/master\n</code></pre>\n\n<p><a href=\"https://superuser.com/questions/273172/how-to-reset-master-to-origin-master\">https://superuser.com/questions/273172/how-to-reset-master-to-origin-master</a></p>\n    </div>",
          "vote": "20"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Revert is the command to rollback the commits.</p>\n\n<pre><code>git revert &lt;commit1&gt; &lt;commit2&gt; \n</code></pre>\n\n<p><em>Sample:</em></p>\n\n<p><code>git revert 2h3h23233</code></p>\n\n<p>It is capable of taking range from the HEAD like below. Here 1 says \"revert last commit.\"</p>\n\n<p><code>git revert HEAD~1..HEAD</code></p>\n\n<p>and then do <code>git push</code></p>\n    </div>",
          "vote": "19"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try resetting to the desired commit -</p>\n\n<p><code>git reset &lt;COMMIT_ID&gt;</code></p>\n\n<p>(to check COMMIT_ID use <code>git log</code>)</p>\n\n<p>This will reset all changed files to un-added state.</p>\n\n<p>Now you can <code>checkout</code> all un-added files by </p>\n\n<p><code>git checkout .</code></p>\n\n<p>Check <code>git log</code> to verify your changes.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>If you have <strong>one and only</strong> commit in your repo, try</p>\n\n<p><code>git update-ref -d HEAD</code></p>\n    </div>",
          "vote": "14"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As your commits are pushed remotely, you need to remove them. Let me assume your branch is <em>develop</em> and it is pushed over <em>origin</em>.</p>\n\n<p>You first need to remove <em>develop</em> from <em>origin</em>:</p>\n\n<pre><code>git push origin :develop (note the colon)\n</code></pre>\n\n<p>Then you need to get develop to the status you want, let me assume the commit hash is EFGHIJK:</p>\n\n<pre><code>git reset --hard EFGHIJK\n</code></pre>\n\n<p>Lastly, push <em>develop</em> again:</p>\n\n<pre><code>git push origin develop\n</code></pre>\n    </div>",
          "vote": "14"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For rollback (or to revert):</p>\n\n<pre><code>1. git revert --no-commit \"commit-code-to-remove\" HEAD\n(e.g. git revert --no-commit d57a39d HEAD)\n2. git commit\n3. git push\n</code></pre>\n\n<p>Try the above two steps, and if you find this is what you want then <code>git push</code>.</p>\n\n<p>If you find something wrong, do:</p>\n\n<pre><code>git revert --abort\n</code></pre>\n    </div>",
          "vote": "13"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Idea:</strong> You basically want to replace the current working tree state with the one from a previous commit and then create a commit out of it. Ignored files should best be not changed. Here is how:</p>\n<ol>\n<li><p>Emtpy the working tree *.</p>\n<pre><code> git rm -r --cached . &amp;&amp; git clean -f -d\n</code></pre>\n</li>\n<li><p>Bring the working tree in the state we want **.</p>\n<pre><code> git checkout 0d1d7fc3 .\n</code></pre>\n</li>\n<li><p>Create the revert commit.</p>\n<pre><code> git add --all &amp;&amp; git commit -m \"revert to 0d1d7fc3\"\n</code></pre>\n</li>\n</ol>\n<hr>\n<p>At first I thought that <a href=\"https://stackoverflow.com/a/21718540/1788806\">Yarins answer</a> would be the best, but it doesn't work for merge commits. This solution does.</p>\n<p>Additionally it does not delete anything (pushed or upushed) from the history. It produces one clean commit which represents the state we want to revert back to.</p>\n<hr>\n<p><sub>* by removing untracked but not ignored files (the ones specified in <em>.gitignore</em>) from working tree. The working tree is empty except for the ignored files which we wanted to keep (if not specifiy <code>-x</code> option for <code>clean</code>)</sub></p>\n<p><sub>** When a path is specified (here: <code>.</code>), checkout leaves HEAD alone.</sub></p>\n    </div>",
          "vote": "13"
        }
      ]
    },
    {
      "question": "How to check whether a string contains a substring in JavaScript?",
      "url": "https://stackoverflow.com/questions/1789945/how-to-check-whether-a-string-contains-a-substring-in-javascript",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M16 9a2 2 0 00-2-2V6A5 5 0 004 6v1a2 2 0 00-2 2v6c0 1.1.9 2 2 2h10a2 2 0 002-2V9zm-7 5a2 2 0 110-4 2 2 0 010 4zm3.1-7H5.9V6a3.1 3.1 0 016.2 0v1z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>This question's answers are a <a href=\"/help/privileges/edit-community-wiki\">community effort</a></b>. Edit existing answers to improve this post. It is not currently accepting new answers or interactions.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n</aside>\n\n    </div>\n\n<p>Usually I would expect a <code>String.contains()</code> method, but there doesn't seem to be one. </p>\n\n<p>What is a reasonable way to check for this?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>ECMAScript&nbsp;6  introduced <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" rel=\"noreferrer\"><code>String.prototype.includes</code></a>:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> string = <span class=\"hljs-string\">\"foo\"</span>;\n<span class=\"hljs-keyword\">const</span> substring = <span class=\"hljs-string\">\"oo\"</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(string.includes(substring));</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif1\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p><code>includes</code> <a href=\"https://caniuse.com/#feat=es6-string-includes\" rel=\"noreferrer\">doesn’t have Internet&nbsp;Explorer support</a>, though. In ECMAScript&nbsp;5 or older environments, use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\" rel=\"noreferrer\"><code>String.prototype.indexOf</code></a>, which returns -1 when a substring cannot be found:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> string = <span class=\"hljs-string\">\"foo\"</span>;\n<span class=\"hljs-keyword\">var</span> substring = <span class=\"hljs-string\">\"oo\"</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(string.indexOf(substring) !== -<span class=\"hljs-number\">1</span>);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif2\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>For more detailed brief, <a href=\"https://flaviocopes.com/how-to-string-contains-substring-javascript/\" rel=\"noreferrer\">How to check if a string contains a substring in JavaScript</a> has comprehensive information about it with many examples and parameters.</p>\n    </div>",
          "vote": "14501"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" rel=\"noreferrer\">There is a <code>String.prototype.includes</code> in ES6</a>:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-string\">\"potato\"</span>.includes(<span class=\"hljs-string\">\"to\"</span>);\n&gt; <span class=\"hljs-literal\">true</span>\n</code></pre>\n\n<p>Note that this <a href=\"https://caniuse.com/?v=1#feat=es6-string-includes\" rel=\"noreferrer\">does not work in Internet Explorer or some other old browsers</a> with no or incomplete ES6 support. To make it work in old browsers, you may wish to use a transpiler like <a href=\"https://babeljs.io/\" rel=\"noreferrer\">Babel</a>, a shim library like <a href=\"https://github.com/paulmillr/es6-shim\" rel=\"noreferrer\">es6-shim</a>, or this <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Polyfill\" rel=\"noreferrer\">polyfill from MDN</a>:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">String</span>.prototype.includes) {\n  <span class=\"hljs-built_in\">String</span>.prototype.includes = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">search, start</span>) </span>{\n<span class=\"hljs-meta\">    'use strict'</span>;\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> start !== <span class=\"hljs-string\">'number'</span>) {\n      start = <span class=\"hljs-number\">0</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (start + search.length &gt; <span class=\"hljs-built_in\">this</span>.length) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.indexOf(search, start) !== -<span class=\"hljs-number\">1</span>;\n    }\n  };\n}\n</code></pre>\n    </div>",
          "vote": "635"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another alternative is <a href=\"https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm\" rel=\"noreferrer\">KMP</a> (Knuth–Morris–Pratt).</p>\n\n<p>The KMP algorithm searches for a length-<em>m</em> substring in a length-<em>n</em> string in worst-case O(<em>n</em>+<em>m</em>) time, compared to a worst-case of O(<em>n</em>⋅<em>m</em>) for the naive algorithm, so using KMP may be reasonable if you care about worst-case time complexity.</p>\n\n<p>Here's a JavaScript implementation by Project Nayuki, taken from <a href=\"https://www.nayuki.io/res/knuth-morris-pratt-string-matching/kmp-string-matcher.js\" rel=\"noreferrer\">https://www.nayuki.io/res/knuth-morris-pratt-string-matching/kmp-string-matcher.js</a>:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// Searches for the given pattern string in the given text string using the Knuth-Morris-Pratt string matching algorithm.</span>\n<span class=\"hljs-comment\">// If the pattern is found, this returns the index of the start of the earliest match in 'text'. Otherwise -1 is returned.</span>\n</code></pre>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">kmpSearch</span>(<span class=\"hljs-params\">pattern, text</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (pattern.length == <span class=\"hljs-number\">0</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Immediate match</span>\n\n  <span class=\"hljs-comment\">// Compute longest suffix-prefix table</span>\n  <span class=\"hljs-keyword\">var</span> lsp = [<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">// Base case</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span>; i &lt; pattern.length; i++) {\n    <span class=\"hljs-keyword\">var</span> j = lsp[i - <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// Start by assuming we're extending the previous LSP</span>\n    <span class=\"hljs-keyword\">while</span> (j &gt; <span class=\"hljs-number\">0</span> &amp;&amp; pattern.charAt(i) != pattern.charAt(j))\n      j = lsp[j - <span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-keyword\">if</span> (pattern.charAt(i) == pattern.charAt(j))\n      j++;\n    lsp.push(j);\n  }\n\n  <span class=\"hljs-comment\">// Walk through text string</span>\n  <span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// Number of chars matched in pattern</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; text.length; i++) {\n    <span class=\"hljs-keyword\">while</span> (j &gt; <span class=\"hljs-number\">0</span> &amp;&amp; text.charAt(i) != pattern.charAt(j))\n      j = lsp[j - <span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// Fall back in the pattern</span>\n    <span class=\"hljs-keyword\">if</span> (text.charAt(i) == pattern.charAt(j)) {\n      j++; <span class=\"hljs-comment\">// Next char matched, increment position</span>\n      <span class=\"hljs-keyword\">if</span> (j == pattern.length)\n        <span class=\"hljs-keyword\">return</span> i - (j - <span class=\"hljs-number\">1</span>);\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// Not found</span>\n}\n\n<span class=\"hljs-built_in\">console</span>.log(kmpSearch(<span class=\"hljs-string\">'ays'</span>, <span class=\"hljs-string\">'haystack'</span>) != -<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(kmpSearch(<span class=\"hljs-string\">'asdf'</span>, <span class=\"hljs-string\">'haystack'</span>) != -<span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// false</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif3\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "75"
        }
      ]
    },
    {
      "question": "How do I check out a remote Git branch?",
      "url": "https://stackoverflow.com/questions/1783405/how-do-i-check-out-a-remote-git-branch",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Somebody pushed a branch called <code>test</code> with <code>git push origin test</code> to a shared repository. I can see the branch with <code>git branch -r</code>.</p>\n\n<p>Now I'm trying to check out the remote <code>test</code> branch.</p>\n\n<p>I've tried:</p>\n\n<ul>\n<li><p><code>git checkout test</code> which does nothing</p></li>\n<li><p><code>git checkout origin/test</code> gives <code>* (no branch)</code>. Which is confusing. How can I be on \"no branch\"?</p></li>\n</ul>\n\n<p>How do I check out a remote Git branch?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>With One Remote</h2>\n<p><a href=\"https://stackoverflow.com/a/1787014/456814\">Jakub's answer</a> actually improves on this. With Git versions ≥ 1.6.6, with only one remote, you can do:</p>\n<pre><code>git fetch\ngit checkout test\n</code></pre>\n<p>As user masukomi points out in a comment, <code>git checkout test</code> will NOT work in modern git if you have multiple remotes. In this case use</p>\n<pre><code>git checkout -b test &lt;name of remote&gt;/test\n</code></pre>\n<p>or the shorthand</p>\n<pre><code>git checkout -t &lt;name of remote&gt;/test\n</code></pre>\n<h2>With &gt;1 Remotes</h2>\n<p>Before you can start working locally on a remote branch, you need to fetch it as called out in answers below.</p>\n<p>To fetch a branch, you simply need to:</p>\n<pre><code>git fetch origin\n</code></pre>\n<p>This will fetch all of the remote branches for you. You can see the branches available for checkout with:</p>\n<pre><code>git branch -v -a\n</code></pre>\n<p>With the remote branches in hand, you now  need to check out the branch you are interested in, giving you a local working copy:</p>\n<pre><code>git checkout -b test origin/test\n</code></pre>\n    </div>",
          "vote": "9858"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em><strong>Sidenote:</strong></em> With modern Git (&gt;= <a href=\"https://raw.github.com/git/git/master/Documentation/RelNotes/1.6.6.txt\" rel=\"noreferrer\">1.6.6</a>), you are able to use just</p>\n<pre><code>git checkout test\n</code></pre>\n<p>(note that it is 'test' not 'origin/test') to perform magical <a href=\"http://en.wikipedia.org/wiki/DWIM\" rel=\"noreferrer\" title=\"Do What I Mean\">DWIM</a>-mery and create local branch 'test' for you, for which upstream would be remote-tracking branch 'origin/test'.</p>\n<hr>\n<p>The <code>* (no branch)</code> in <code>git branch</code> output means that you are on unnamed branch, in so called \"detached HEAD\" state (HEAD points directly to commit, and is not symbolic reference to some local branch).  If you made some commits on this unnamed branch, you can always create local branch off current commit:</p>\n<pre><code>git checkout -b test HEAD\n</code></pre>\n<h1>** EDIT (by editor <em>not</em> author) **</h1>\n<p><em>I found a comment buried below which seems to modernize this answer:</em></p>\n<blockquote>\n<p>@Dennis: <code>git checkout &lt;non-branch&gt;</code>, for example <code>git checkout origin/test</code> results in detached HEAD / unnamed branch, while <code>git checkout test</code> or <code>git checkout -b test origin/test</code> results in local\nbranch <code>test</code> (with remote-tracking branch <code>origin/test</code> as <em>upstream</em>) –\nJakub Narębski Jan 9 '14 at 8:17</p>\n</blockquote>\n<p>emphasis on <code>git checkout origin/test</code></p>\n    </div>",
          "vote": "1325"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In this case, you probably want to create a local <code>test</code> branch which is tracking the remote <code>test</code> branch:</p>\n\n<pre><code>$ git branch test origin/test\n</code></pre>\n\n<p>In earlier versions of <code>git</code>, you needed an explicit <code>--track</code> option, but that is the default now when you are branching off a remote branch.</p>\n    </div>",
          "vote": "591"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2><a href=\"https://stackoverflow.com/a/1783426/456814\">Accepted answer</a> not working for you?</h2>\n\n<p>While the first and selected answer is technically <em>correct</em>, there's the possibility you have not yet retrieved all objects and refs from the remote repository. If that is the case, you'll receive the following error:</p>\n\n<pre><code>$ git checkout -b remote_branch origin/remote_branch\n</code></pre>\n\n<blockquote>\n  <p>fatal: git checkout: updating paths is incompatible with switching branches.<br>\n  Did you intend to checkout 'origin/remote_branch' which can not be resolved as commit?</p>\n</blockquote>\n\n<h2>Solution</h2>\n\n<p>If you receive this message, you must first do a <code>git fetch origin</code> where <code>origin</code> is the name of the remote repository prior to running <code>git checkout remote_branch</code>. Here's a full example with responses:</p>\n\n<pre><code>$ git fetch origin\nremote: Counting objects: 140, done.\nremote: Compressing objects: 100% (30/30), done.\nremote: Total 69 (delta 36), reused 66 (delta 33)\nUnpacking objects: 100% (69/69), done.\nFrom https://github.com/githubuser/repo-name\n   e6ef1e0..5029161  develop    -&gt; origin/develop\n * [new branch]      demo       -&gt; origin/demo\n   d80f8d7..359eab0  master     -&gt; origin/master\n\n$ git checkout demo\nBranch demo set up to track remote branch demo from origin.\nSwitched to a new branch 'demo'\n</code></pre>\n\n<p>As you can see, running <code>git fetch origin</code> retrieved any remote branches we were not yet setup to track on our local machine. From there, since we now have a ref to the remote branch, we can simply run <code>git checkout remote_branch</code> and we'll gain the benefits of remote tracking.</p>\n    </div>",
          "vote": "495"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I tried the above solution, but it didn't work. Try this, it works:</p>\n\n<pre><code>git fetch origin 'remote_branch':'local_branch_name'\n</code></pre>\n\n<p>This will fetch the remote branch and create a new local branch (if not exists already) with name <code>local_branch_name</code> and track the remote one in it.</p>\n    </div>",
          "vote": "290"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This will <a href=\"https://en.wikipedia.org/wiki/DWIM\">DWIM</a> for a remote not named origin (<a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-checkout.html\">documentation</a>):</p>\n\n<pre><code>$ git checkout -t remote_name/remote_branch\n</code></pre>\n\n<p>To add a new remote, you will need to do the following first:</p>\n\n<pre><code>$ git remote add remote_name location_of_remote\n$ git fetch remote_name\n</code></pre>\n\n<p>The first tells Git the remote exists, the second gets the commits.</p>\n    </div>",
          "vote": "111"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use:</p>\n\n<pre><code>git checkout -b &lt;BRANCH-NAME&gt; &lt;REMOTE-NAME&gt;/&lt;BRANCH-NAME&gt;\n</code></pre>\n\n<p>Other answers do not work with modern Git in my benign case. You might need to pull first if the remote branch is new, but I haven't checked that case.</p>\n    </div>",
          "vote": "111"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>OK</strong>, the answer is easy... You basically see the branch, but you don't have a local copy yet!...</p>\n\n<p>You need to <code>fetch</code> the branch... </p>\n\n<p>You can simply fetch and then checkout to the branch, use the one line command below to do that:</p>\n\n<pre><code>git fetch &amp;&amp; git checkout test\n</code></pre>\n\n<p>I also created the image below for you to share the differences, look at how <code>fetch</code> works and also how it's different to <code>pull</code>:</p>\n\n<p><a href=\"https://i.stack.imgur.com/ODFYa.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/ODFYa.png\" alt=\"git fetch\"></a></p>\n    </div>",
          "vote": "93"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To clone a Git repository, do:</p>\n<pre><code>git clone &lt;either ssh url /http url&gt;\n</code></pre>\n<p>The above command checks out all of the branches, but only the <code>master</code> branch will be initialized. If you want to checkout the other branches, do:</p>\n<pre><code>git checkout -t origin/future_branch (for example)\n</code></pre>\n<p>This command checks out the remote branch, and your local branch name will be same as the remote branch.</p>\n<p>If you want to override your local branch name on checkout:</p>\n<pre><code>git checkout -t -b enhancement origin/future_branch\n</code></pre>\n<p>Now your local branch name is <code>enhancement</code>, but your remote branch name is <code>future_branch</code>.</p>\n    </div>",
          "vote": "67"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can try</p>\n\n<pre><code>git fetch remote\ngit checkout --track -b local_branch_name origin/branch_name\n</code></pre>\n\n<p>or</p>\n\n<pre><code>git fetch\ngit checkout -b local_branch_name origin/branch_name\n</code></pre>\n    </div>",
          "vote": "43"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First, you need to do:</p>\n\n<p><code>git fetch</code> # If you don't know about branch name</p>\n\n<pre><code>git fetch origin branch_name\n</code></pre>\n\n<p>Second, you can check out remote branch into your local by:</p>\n\n<pre><code>git checkout -b branch_name origin/branch_name\n</code></pre>\n\n<p><code>-b</code> will create new branch in specified name from your selected remote branch.</p>\n    </div>",
          "vote": "37"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I use the following command:</p>\n\n<pre><code>git checkout --track origin/other_remote_branch\n</code></pre>\n    </div>",
          "vote": "32"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Commands</p>\n\n<pre><code>git fetch --all\ngit checkout -b &lt;ur_new_local_branch_name&gt; origin/&lt;Remote_Branch_Name&gt;\n</code></pre>\n\n<p>are equal to</p>\n\n<pre><code> git fetch --all\n</code></pre>\n\n<p>and then</p>\n\n<pre><code> git checkout -b fixes_for_dev origin/development\n</code></pre>\n\n<p>Both will create a <code>latest fixes_for_dev</code> from <code>development</code></p>\n    </div>",
          "vote": "29"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the branch is on something other than the <code>origin</code> remote I like to do the following:</p>\n\n<pre><code>$ git fetch\n$ git checkout -b second/next upstream/next\n</code></pre>\n\n<p>This will checkout the <code>next</code> branch on the <code>upstream</code> remote in to a local branch called <code>second/next</code>. Which means if you already have a local branch named next it will not conflict.</p>\n\n<pre><code>$ git branch -a\n* second/next\n  remotes/origin/next\n  remotes/upstream/next\n</code></pre>\n    </div>",
          "vote": "25"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Simply run <code>git checkout</code> with the name of the remote branch. Git will <a href=\"https://git-scm.com/book/id/v2/Git-Branching-Remote-Branches#_tracking_branches\" rel=\"noreferrer\">automatically create</a> a local branch that tracks the remote one:</p>\n\n<pre><code>git fetch\ngit checkout test\n</code></pre>\n\n<p>However, if that branch name is found in more than one remote, this won't work as Git doesn't know which to use. In that case you can use either:</p>\n\n<pre><code>git checkout --track origin/test\n</code></pre>\n\n<p>or</p>\n\n<pre><code>git checkout -b test origin/test\n</code></pre>\n\n<p>In <a href=\"https://github.com/git/git/blob/master/Documentation/RelNotes/2.19.0.txt\" rel=\"noreferrer\">2.19</a>, Git learned the <a href=\"https://git-scm.com/docs/git-config#Documentation/git-config.txt-checkoutdefaultRemote\" rel=\"noreferrer\"><code>checkout.defaultRemote</code></a> configuration, which specifies a remote to default to when resolving such an ambiguity.</p>\n    </div>",
          "vote": "24"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>none of these answers worked for me. this worked: </p>\n\n<p><code>git checkout -b feature/branch remotes/origin/feature/branch</code></p>\n    </div>",
          "vote": "23"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>git fetch &amp;&amp; git checkout your-branch-name</code></p>\n    </div>",
          "vote": "21"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I was stuck in a situation seeing <code>error: pathspec 'desired-branch' did not match any file(s) known to git.</code> for all of the suggestions above. I'm on git version 1.8.3.1.  </p>\n\n<p>So this <strong>worked for me</strong>:  </p>\n\n<pre><code>git fetch origin desired-branch\ngit checkout -b desired-branch FETCH_HEAD\n</code></pre>\n\n<p>The explanation behind is that I've noticed that when fetching the remote branch, it was fetched to FETCH_HEAD:</p>\n\n<pre><code>$ git fetch origin desired-branch\nFrom github.com:MYTEAM/my-repo\n    * branch            desired-branch -&gt; FETCH_HEAD\n</code></pre>\n    </div>",
          "vote": "21"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>git branch -r</code> says the object name is invalid, because that branch name isn't in Git's local branch list. Update your local branch list from origin with:</p>\n\n<pre><code>git remote update\n</code></pre>\n\n<p>And then try checking out your remote branch again.</p>\n\n<p>This worked for me.</p>\n\n<p>I believe <code>git fetch</code> pulls in <em>all</em> remote branches, which is not what the original poster wanted.</p>\n    </div>",
          "vote": "17"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>git remote show &lt;origin name&gt;</code> command will list all branches (including un-tracked branches). Then you can find the remote branch name that you need to fetch.</p>\n\n<p>Example:</p>\n\n<pre><code>$ git remote show origin\n</code></pre>\n\n<p>Use these steps to fetch remote branches:</p>\n\n<pre><code>git fetch &lt;origin name&gt; &lt;remote branch name&gt;:&lt;local branch name&gt;\ngit checkout &lt;local branch name &gt; (local branch name should the name that you given fetching)\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>$ git fetch origin test:test\n$ git checkout test\n</code></pre>\n    </div>",
          "vote": "17"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Fetch from the remote and checkout the branch.</p>\n\n<pre><code>git fetch &lt;remote_name&gt; &amp;&amp; git checkout &lt;branch_name&gt; \n</code></pre>\n\n<p>E.g.:</p>\n\n<blockquote>\n  <p>git fetch origin &amp;&amp; git checkout feature/XYZ-1234-Add-alerts </p>\n</blockquote>\n    </div>",
          "vote": "13"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Other guys and gals give the solutions, but maybe I can tell you why.</p>\n\n<blockquote>\n  <p>git checkout test which does nothing</p>\n</blockquote>\n\n<p><code>Does nothing</code> doesn't equal <code>doesn't work</code>, so I guess when you type 'git checkout test' in your terminal and press enter key, no message appears and no error occurs. Am I right?</p>\n\n<p>If the answer is 'yes', I can tell you the cause.</p>\n\n<p>The cause is that there is a file (or folder) named 'test' in your work tree.</p>\n\n<p>When <code>git checkout xxx</code> parsed,</p>\n\n<ol>\n<li>Git looks on <code>xxx</code> as a branch name at first, but there isn't any branch named test.</li>\n<li>Then Git thinks <code>xxx</code> is a path, and fortunately (or unfortunately), there is a file named test. So <code>git checkout xxx</code> means discard any modification in <code>xxx</code> file.</li>\n<li>If there isn't file named <code>xxx</code> either, then Git will try to create the <code>xxx</code> according to some rules. One of the rules is create a branch named <code>xxx</code> if <code>remotes/origin/xxx</code> exists.</li>\n</ol>\n    </div>",
          "vote": "12"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>To get newly created branches</strong> </p>\n\n<pre><code>git fetch\n</code></pre>\n\n<p><strong>To switch into another branch</strong></p>\n\n<pre><code>git checkout BranchName\n</code></pre>\n    </div>",
          "vote": "12"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>git checkout -b \"Branch_name\" [ B means Create local branch]</strong></p>\n\n<p>git branch --all</p>\n\n<p>git checkout -b \"Your Branch name\"</p>\n\n<p>git branch </p>\n\n<p>successfully checkout from the master branch to dev branch </p>\n\n<p><a href=\"https://i.stack.imgur.com/0WQfH.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/0WQfH.png\" alt=\"enter image description here\"></a></p>\n    </div>",
          "vote": "10"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can start tracking all remote branches with the following Bash script:</p>\n\n<pre><code>#!/bin/bash\ngit fetch --all\nfor branch in `git branch -r --format=\"%(refname:short)\" | sed 's/origin\\///'`\n  do git branch -f --track \"$branch\" \"origin/$branch\"\ndone\n</code></pre>\n\n<p>Here is also a single-line version:</p>\n\n<pre><code>git fetch --all; for branch in `git branch -r --format=\"%(refname:short)\" | sed 's/origin\\///'`; do git branch --track \"$branch\" \"origin/$branch\" ; done ;\n</code></pre>\n    </div>",
          "vote": "8"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>to get all remote branches use this : </p>\n\n<pre><code>git fetch --all\n</code></pre>\n\n<p>then checkout to the branch :</p>\n\n<pre><code>git checkout test\n</code></pre>\n    </div>",
          "vote": "8"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For us, it seems the <code>remote.origin.fetch</code> configuration gave a problem. Therefore, we could not see any other remote branches than <code>master</code>, so <code>git fetch [--all]</code> did not help. Neither <code>git checkout mybranch</code> nor <code>git checkout -b mybranch --track origin/mybranch</code> did work, although it certainly was at remote. </p>\n\n<p>The previous configuration only allowed <code>master</code> to be fetched:</p>\n\n<pre><code>$ git config --list | grep fetch\nremote.origin.fetch=+refs/heads/master:refs/remotes/origin/master\n</code></pre>\n\n<p>Fix it by using <code>*</code> and fetch the new information from origin:</p>\n\n<pre><code>$ git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'\n\n$ git fetch\n...\n * [new branch] ...\n...\n</code></pre>\n\n<p>Now we could <code>git checkout</code> the remote branch locally.</p>\n\n<p>No idea how this config ended up in our local repo.</p>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the remote branch name begins with special characteres you need to use single quotes around it in the checkout command, or else git won't know which branch you are talking about.</p>\n\n<p>For example, I tried to checkout a remote branch named as <code>#9773</code> but the command didn't work properly, as shown in the picture below:</p>\n\n<p><a href=\"https://i.stack.imgur.com/yK8Rb.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/yK8Rb.png\" alt=\"enter image description here\"></a></p>\n\n<p>For some reason I wondered if the sharp symbol (#) could have something to do with it, and then I tried surrounding the branch name with single quotes, like <code>'#9773'</code> rathen than just <code>#9773</code>, and fortunately it worked fine.</p>\n\n<pre><code>$ git checkout -b '#9773' origin/'#9773'\n</code></pre>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I used that one:</p>\n<pre><code>git fetch origin\ngit reset --hard origin/{branchname}\n</code></pre>\n    </div>",
          "vote": "5"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use <code>fetch</code> to pull all your remote</p>\n\n<pre><code>   git fetch --all\n</code></pre>\n\n<p>To list remote branches:</p>\n\n<pre><code>   git branch -r\n</code></pre>\n\n<p>For list all your branches</p>\n\n<pre><code>   git branch -l\n   &gt;&gt;outpots like-\n     * develop\n       test\n       master\n</code></pre>\n\n<p>To checkout/change a branch</p>\n\n<pre><code>   git checkout master\n</code></pre>\n    </div>",
          "vote": "4"
        }
      ]
    },
    {
      "question": "How to remove local (untracked) files from the current Git working tree",
      "url": "https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>How do you delete untracked local files from your current working tree?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<h2><a href=\"https://git-scm.com/docs/git-clean\" rel=\"noreferrer\">git-clean</a> - Remove untracked files from the working tree</h2>\n<h3>Synopsis</h3>\n<pre><code>git clean [-d] [-f] [-i] [-n] [-q] [-e &lt;pattern&gt;] [-x | -X] [--] &lt;path&gt;…​\n</code></pre>\n<h3>Description</h3>\n<p>Cleans the working tree by recursively removing files that are not under version control, <strong>starting from the current directory</strong>.</p>\n<p>Normally, only files unknown to Git are removed, but if the <code>-x</code> option is specified, ignored files are also removed. This can, for example, be useful to remove all build products.</p>\n<p>If any optional <code>&lt;path&gt;...</code> arguments are given, only those paths are affected.</p>\n</blockquote>\n<hr>\n<p>Step 1 is to show what will be deleted by using the <code>-n</code> option:</p>\n<pre><code># Print out the list of files and directories which will be removed (dry run)\ngit clean -n -d\n</code></pre>\n<p>Clean Step - <strong>beware: this will delete files</strong>:</p>\n<pre><code># Delete the files from the repository\ngit clean -f\n</code></pre>\n<ul>\n<li>To remove directories, run <code>git clean -f -d</code> or <code>git clean -fd</code></li>\n<li>To remove ignored files, run <code>git clean -f -X</code> or <code>git clean -fX</code></li>\n<li>To remove ignored and non-ignored files, run <code>git clean -f -x</code> or <code>git clean -fx</code></li>\n</ul>\n<p><strong>Note</strong> the case difference on the <code>X</code> for the two latter commands.</p>\n<p>If <code>clean.requireForce</code> is set to \"true\" (the default) in your configuration, one needs to specify <code>-f</code> otherwise nothing will actually happen.</p>\n<p>Again see the <a href=\"http://git-scm.com/docs/git-clean\" rel=\"noreferrer\"><code>git-clean</code></a> docs for more information.</p>\n<hr>\n<blockquote>\n<h3>Options</h3>\n<p><strong><code>-f</code>, <code>--force</code></strong></p>\n<p>If the Git configuration variable clean.requireForce is not set to\nfalse, git clean will refuse to run unless given <code>-f</code>, <code>-n</code> or <code>-i</code>.</p>\n<p><strong><code>-x</code></strong></p>\n<p>Don’t use the standard ignore rules read from .gitignore (per\ndirectory) and <code>$GIT_DIR/info/exclude</code>, but do still use the ignore\nrules given with <code>-e</code> options. This allows removing all untracked files,\nincluding build products. This can be used (possibly in conjunction\nwith git reset) to create a pristine working directory to test a clean\nbuild.</p>\n<p><strong><code>-X</code></strong></p>\n<p>Remove only files ignored by Git. This may be useful to rebuild\neverything from scratch, but keep manually created files.</p>\n<p><strong><code>-n</code>, <code>--dry-run</code></strong></p>\n<p>Don’t actually remove anything, just show what would be done.</p>\n<p><strong><code>-d</code></strong></p>\n<p>Remove untracked directories in addition to untracked files. If an\nuntracked directory is managed by a different Git repository, it is\nnot removed by default. Use <code>-f</code> option twice if you really want to\nremove such a directory.</p>\n</blockquote>\n    </div>",
          "vote": "9069"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use <code>git clean -f -d</code> to make sure that <strong>directories</strong> are also removed.</p>\n\n<ol>\n<li><p>Don’t actually remove anything, just show what would be done.</p>\n\n<pre><code>git clean -n\n</code></pre>\n\n<p>or </p>\n\n<pre><code>git clean --dry-run\n</code></pre></li>\n<li><p>Remove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository, it is not removed by default. Use the <code>-f</code> option twice if you really want to remove such a directory.</p>\n\n<pre><code>git clean -fd\n</code></pre></li>\n</ol>\n\n<p>You can then check if your files are really gone with <code>git status</code>.</p>\n    </div>",
          "vote": "1079"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am surprised nobody mentioned this before:</p>\n\n<pre><code>git clean -i\n</code></pre>\n\n<p>That stands for <em>interactive</em> and you will get a quick overview of what is going to be deleted offering you the possibility to include/exclude the affected files. Overall, still faster than running the mandatory <code>--dry-run</code> before the real cleaning.</p>\n\n<p>You will have to toss in a <code>-d</code> if you also want to take care of empty folders. At the end, it makes  for a nice alias:</p>\n\n<pre><code>git iclean\n</code></pre>\n\n<p>That being said, the extra hand holding of interactive commands can be tiring for experienced users.  These days I just use the already mentioned <code>git clean -fd</code> </p>\n    </div>",
          "vote": "512"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://git-scm.com/docs/git-clean\" rel=\"noreferrer\"><code>git-clean</code> - Remove untracked files from the working tree</a></p>\n    </div>",
          "vote": "405"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>Simple Way to remove untracked files</h2>\n\n<p>To remove all untracked files, The simple\nway is to <strong>add all of them first</strong> and <strong>reset the repo</strong> as below</p>\n\n<pre><code>git add --all\ngit reset --hard HEAD\n</code></pre>\n\n<hr>\n    </div>",
          "vote": "289"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If untracked directory is a git repository of its own (e.g. submodule), you need to use <code>-f</code> twice:</p>\n\n<p><code>git clean -d -f -f</code></p>\n    </div>",
          "vote": "270"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I like <code>git stash push -u</code> because you can undo them all with <code>git stash pop</code>.</p>\n\n<p>EDIT: Also I found a way to show untracked file in a stash (e.g. <code>git show stash@{0}^3</code>) <a href=\"https://stackoverflow.com/a/12681856/338986\">https://stackoverflow.com/a/12681856/338986</a></p>\n\n<p>EDIT2: <code>git stash save</code> is deprecated in favor of <code>push</code>. Thanks @script-wolf.</p>\n    </div>",
          "vote": "148"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is what I always use:</p>\n\n<pre><code>git clean -fdx\n</code></pre>\n\n<p>For a very large project you might want to run it a couple of times.</p>\n    </div>",
          "vote": "130"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-clean.html\" rel=\"noreferrer\">git-clean</a> is what you are looking for. It is used to remove untracked files from the working tree.</p>\n    </div>",
          "vote": "96"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If needed to remove untracked files from particular subdirectory,</p>\n\n<pre><code>git clean -f {dir_path}\n</code></pre>\n\n<p>And combined way to delete untracked dir/files and ignored files. </p>\n\n<pre><code>git clean -fxd {dir_path}\n</code></pre>\n\n<p>after this you will have modified files only in <code>git status</code>.</p>\n    </div>",
          "vote": "90"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Remove all extra folders and files in this repo + submodules</strong></p>\n\n<p>This gets you in same state as fresh clone.</p>\n\n<pre><code>git clean -ffdx\n</code></pre>\n\n<p><strong>Remove all extra folders and files in this repo but not its submodules</strong></p>\n\n<pre><code>git clean -fdx\n</code></pre>\n\n<p><strong>Remove extra folders but not files (ex. build or logs folder)</strong></p>\n\n<pre><code>git clean -fd\n</code></pre>\n\n<p><strong>Remove extra folders + ignored files (but not newly added files)</strong></p>\n\n<p>If file wasn't ignored and not yet checked-in then  it stays. Note the capital X.</p>\n\n<pre><code>git clean -fdX\n</code></pre>\n\n<p><strong>New interactive mode</strong></p>\n\n<pre><code>git clean\n</code></pre>\n    </div>",
          "vote": "78"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>git clean -fd</code> removes directory</p>\n\n<p><code>git clean -fX</code> removes ignored files</p>\n\n<p><code>git clean -fx</code> removes ignored and un-ignored files</p>\n\n<p>can be used all above options in combination as </p>\n\n<p><code>git clean -fdXx</code> </p>\n\n<p>check git manual for more help</p>\n    </div>",
          "vote": "62"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>OK,</strong> deleting <strong>unwanted untracked files and folders</strong> are easy using <code>git</code> in command line, just do it like this:</p>\n\n<pre><code>git clean -fd\n</code></pre>\n\n<p><strong>Double check</strong> before doing it as it will delete the files and folders without making any history...</p>\n\n<p>Also in this case, <code>-f</code> stands for force and <code>-d</code> stands for directory...</p>\n\n<p>So, if you want to delete files only, you can use <code>-f</code> only:</p>\n\n<pre><code>git clean -f\n</code></pre>\n\n<p>If you want to <strong>delete</strong>(directories) and files, you can delete only untracked directories and files like this:</p>\n\n<pre><code>git clean -fd\n</code></pre>\n\n<p>Also, you can use <code>-x</code> flag for including the files which are ignored by git. This would be helpful if you want to delete everything.</p>\n\n<p>And adding <code>-i</code> flag, makes git asking you for permission for deleting files one by one on the go.</p>\n\n<p>If you not sure and want to check things first, add <code>-n</code> flag.</p>\n\n<p>Use <code>-q</code> if you don't want to see any report after successful deletion.</p>\n\n<p>I also create the image below to make it more memorable, especially I have seen many people confuse <code>-f</code> for cleaning folder sometimes or mix it up somehow!</p>\n\n<p><br>\n<a href=\"https://i.stack.imgur.com/3W563.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/3W563.png\" alt=\"deleting unwanted untracked files and folder\"></a> </p>\n    </div>",
          "vote": "61"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A better way is to use: git clean</p>\n\n<pre><code>git clean -d -x -f\n</code></pre>\n\n<p>This removes untracked files, including directories <code>(-d)</code> and files ignored by <code>git (-x)</code>.</p>\n\n<p>Also, replace the <code>-f</code> argument with <code>-n</code> to perform a <code>dry-run</code> or <code>-i</code> for interactive mode and it will tell you what will be removed.</p>\n    </div>",
          "vote": "39"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong><em>User interactive approach:</em></strong>    </p>\n\n<pre><code>git clean -i -fd\n\nRemove .classpath [y/N]? N\nRemove .gitignore [y/N]? N\nRemove .project [y/N]? N\nRemove .settings/ [y/N]? N\nRemove src/com/arsdumpgenerator/inspector/ [y/N]? y\nRemove src/com/arsdumpgenerator/manifest/ [y/N]? y\nRemove src/com/arsdumpgenerator/s3/ [y/N]? y\nRemove tst/com/arsdumpgenerator/manifest/ [y/N]? y\nRemove tst/com/arsdumpgenerator/s3/ [y/N]? y\n</code></pre>\n\n<p>-i for interactive<br>\n-f for force<br>\n-d for directory<br>\n-x for ignored files(add if required)<br><br>\n<strong>Note:</strong> <em>Add <strong>-n</strong> or <strong>--dry-run</strong> to just check what it will do.</em></p>\n    </div>",
          "vote": "28"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A lifehack for such situation I just invented and tried (that works perfectly):</p>\n\n<pre><code>git add .\ngit reset --hard HEAD\n</code></pre>\n\n<p><strong>Beware!</strong> Be sure to <strong>commit any needed changes</strong> (even in non-untracked files) <strong>before performing this</strong>.</p>\n    </div>",
          "vote": "22"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For me only following worked:</p>\n\n<pre><code>git clean -ffdx\n</code></pre>\n\n<p>In all other cases, I was getting message <em>\"Skipping Directory\"</em> for some subdirectories. </p>\n    </div>",
          "vote": "21"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>git clean -f -d -x $(git rev-parse --show-cdup)</code> applies clean to the root directory, no matter where you call it within a repository directory tree. I use it all the time as it does not force you to leave the folder where you working now and allows to clean &amp; commit right from the place where you are.</p>\n\n<p>Be sure that flags <code>-f</code>, <code>-d</code>, <code>-x</code> match your needs:</p>\n\n<pre><code>-d\n       Remove untracked directories in addition to untracked files. If an\n       untracked directory is managed by a different Git repository, it is\n       not removed by default. Use -f option twice if you really want to\n       remove such a directory.\n\n-f, --force\n       If the Git configuration variable clean.requireForce is not set to\n       false, git clean will refuse to delete files or directories unless\n       given -f, -n or -i. Git will refuse to delete directories with .git\n       sub directory or file unless a second -f is given. This affects\n       also git submodules where the storage area of the removed submodule\n       under .git/modules/ is not removed until -f is given twice.\n\n-x\n       Don't use the standard ignore rules read from .gitignore (per\n       directory) and $GIT_DIR/info/exclude, but do still use the ignore\n       rules given with -e options. This allows removing all untracked\n       files, including build products. This can be used (possibly in\n       conjunction with git reset) to create a pristine working directory\n       to test a clean build.\n</code></pre>\n\n<p>There are other flags as well available, just check <code>git clean --help</code>.</p>\n    </div>",
          "vote": "20"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you just want to delete the files listed as untracked by 'git status'</p>\n\n<pre><code>git stash save -u\ngit stash drop \"stash@{0}\"\n</code></pre>\n\n<p>I prefer this to 'git clean' because 'git clean' will delete files\nignored by git, so your next build will have to rebuild everything\nand you may lose your IDE settings too.</p>\n    </div>",
          "vote": "17"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To remove Untracked files :</p>\n\n<pre><code>git add .\ngit reset --hard HEAD\n</code></pre>\n    </div>",
          "vote": "16"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To know what will be deleted before actually deleting:</p>\n\n<p><code>git clean -d -n</code></p>\n\n<p>It will output something like:</p>\n\n<p><strong>Would remove sample.txt</strong></p>\n\n<p>To delete everything listed in the output of the previous command:</p>\n\n<p><code>git clean -d -f</code></p>\n\n<p>It will output something like:</p>\n\n<p><strong>Removing sample.txt</strong></p>\n    </div>",
          "vote": "15"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To remove the untracked files you should first use command to view the files that will be affected by cleaning </p>\n\n<pre><code>git clean -fdn\n</code></pre>\n\n<p>This will show you the list of files that will be deleted. Now to actually delete those files use this command:</p>\n\n<pre><code>git clean -fd\n</code></pre>\n    </div>",
          "vote": "12"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Be careful while running `git clean` command.</h1>\n\n<p><strong>Always use</strong> <code>-n</code> before running the actual command as it will show you what files would get removed. </p>\n\n<pre><code>git clean -n -d \ngit clean -f -d\n</code></pre>\n\n<p>By default, <code>git clean</code> will only remove untracked files that are not ignored. Any file that matches a pattern in your .gitignore or other ignore files will not be removed. If you want to remove those files too, you can add a <code>-x</code> to the clean command.</p>\n\n<pre><code>git clean -f -d -x\n</code></pre>\n\n<p>There is also interactive mode available <code>-i</code> with the clean command</p>\n\n<pre><code>git clean -x -i\n</code></pre>\n\n<h1>Alternatively</h1>\n\n<p>If you are not 100% sure that deleting your uncommitted work is safe, you could use stashing instead</p>\n\n<pre><code>git stash --all\n</code></pre>\n\n<p>It will also clear your directory but give you flexibility to retrieve the files at any point in time using <strong>stash</strong> with <strong>apply</strong> or <strong>pop</strong>. Then at later point you could clear your stash using:</p>\n\n<pre><code>git stash drop // or clean\n</code></pre>\n    </div>",
          "vote": "12"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>uggested Command for <strong>Removing Untracked Files from git docs</strong> is <strong>git clean</strong> </p>\n\n<p><strong>git clean</strong> - Remove untracked files from the working tree</p>\n\n<p><strong>Suggested Method:</strong>  Interative Mode by using <code>git clean -i</code>\nso we can have control over it. let see remaining available options.</p>\n\n<p><strong>Available Options:</strong></p>\n\n<pre><code>git clean \n    -d -f -i -n -q -e -x -X (can use either)\n</code></pre>\n\n<p><strong>Explanation:</strong></p>\n\n<p><strong>1.</strong> <strong>-d</strong></p>\n\n<p>Remove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository,\n   it is not removed by default. Use -f option twice if you really want to remove such a directory.</p>\n\n<p><strong>2. -f, --force</strong></p>\n\n<p>If the Git configuration variable clean.requireForce is not set to false, git clean will refuse to run unless given -f, -n or\n   -i.</p>\n\n<p><strong>3. -i, --interactive</strong></p>\n\n<p>Show what would be done and clean files interactively. See “Interactive mode” for details.</p>\n\n<p><strong>4. -n, --dry-run</strong></p>\n\n<p>Don’t actually remove anything, just show what would be done.</p>\n\n<p><strong>5. -q, --quiet</strong></p>\n\n<p>Be quiet, only report errors, but not the files that are successfully removed.</p>\n\n<p><strong>6. -e , --exclude=</strong></p>\n\n<p>In addition to those found in .gitignore (per directory) and $GIT_DIR/info/exclude, also consider these patterns to be in the\n   set of the ignore rules in effect.</p>\n\n<p><strong>7. -x</strong></p>\n\n<p>Don’t use the standard ignore rules read from .gitignore (per directory) and $GIT_DIR/info/exclude, but do still use the ignore\n   rules given with -e options. This allows removing all untracked files, including build products. This can be used (possibly in\n   conjunction with git reset) to create a pristine working directory to test a clean build.</p>\n\n<p><strong>8. -X</strong></p>\n\n<p>Remove only files ignored by Git. This may be useful to rebuild everything from scratch, but keep manually created files.</p>\n    </div>",
          "vote": "10"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Normal <code>git clean</code> command doesn't remove untracked files with my <code>git version 2.9.0.windows.1</code>.</p>\n\n<pre><code>$ git clean -fdx     # doesn't remove untracked files\n$ git clean -fdx *   # Append star then it works!\n</code></pre>\n    </div>",
          "vote": "9"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>git clean -f to remove untracked files from working directory.</code></p>\n\n<p>I have covered some basics here in my blog, <a href=\"https://vaisakh.github.io/2017/02/14/git-intro-basic-commands.html\" rel=\"noreferrer\">git-intro-basic-commands</a></p>\n    </div>",
          "vote": "9"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>We can easily removed local untracked files from the current git working tree by using below git comments.</p>\n\n<pre><code>git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [&lt;commit&gt;]\n</code></pre>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>git reset --hard HEAD\n</code></pre>\n\n<p><strong>Links :</strong></p>\n\n<ol>\n<li><a href=\"https://git-scm.com/docs/git-reset\" rel=\"noreferrer\">https://git-scm.com/docs/git-reset</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9529078/how-do-i-use-git-reset-hard-head-to-revert-to-a-previous-commit\">How do I use 'git reset --hard HEAD' to revert to a previous commit?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/1628088/reset-local-repository-branch-to-be-just-like-remote-repository-head\">Reset local repository branch to be just like remote repository HEAD</a></li>\n<li><a href=\"https://jwiegley.github.io/git-from-the-bottom-up/3-Reset/4-doing-a-hard-reset.html\" rel=\"noreferrer\">https://jwiegley.github.io/git-from-the-bottom-up/3-Reset/4-doing-a-hard-reset.html</a> </li>\n</ol>\n    </div>",
          "vote": "7"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <h2><strong>Clean out git repository and all submodules recursively</strong></h2>\n  \n  <p>The following command will clean out\n  the current git repository and all its submodules recursively:</p>\n\n<pre><code>(git clean -d -x -f &amp;&amp; git submodule foreach --recursive git clean -d -x -f)\n</code></pre>\n</blockquote>\n    </div>",
          "vote": "7"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre><code>git clean -f\n</code></pre>\n\n<p>will remove the untracked files from the current git </p>\n\n<pre><code>git clean -fd\n</code></pre>\n\n<p>when you want to remove directories and files, this will delete only untracked directories and files</p>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>oh-my-zsh</strong> with <strong>zsh</strong> provides those great aliases via the git plugin. They can be used in bash as well.</p>\n\n<p><code>gclean='git clean -fd'</code><br>\n<code>gpristine='git reset --hard &amp;&amp; git clean -dfx'</code></p>\n\n<ul>\n<li><code>gclean</code> <em>removes untracked directories in addition to untracked files</em>.</li>\n<li><code>gpristine</code> hard reset the local changes, remove untracked directories, \nuntracked files and <em>don't use the standard ignore rules read from .gitignore (per directory) and $GIT_DIR/info/exclude, but do still use the ignore rules given with -e options. This allows removing all untracked files, including build products. This can be used (possibly in conjunction with git reset) to create a pristine working directory to test a clean build</em>.</li>\n</ul>\n    </div>",
          "vote": "5"
        }
      ]
    },
    {
      "question": "var functionName = function() {} vs function functionName() {}",
      "url": "https://stackoverflow.com/questions/336859/var-functionname-function-vs-function-functionname",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I've recently started maintaining someone else's JavaScript code. I'm fixing bugs, adding features and also trying to tidy up the code and make it more consistent.</p>\n\n<p>The previous developer used two ways of declaring functions and I can't work out if there is a reason behind it or not.</p>\n\n<p>The two ways are:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> functionOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// Some code</span>\n};\n</code></pre>\n\n\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">functionTwo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// Some code</span>\n}\n</code></pre>\n\n<p>What are the reasons for using these two different methods and what are the pros and cons of each? Is there anything that can be done with one method that can't be done with the other?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The difference is that <code>functionOne</code> is a function expression and so only defined when that line is reached, whereas <code>functionTwo</code> is a function declaration and is defined as soon as its surrounding function or script is executed (due to <a href=\"http://adripofjavascript.com/blog/drips/variable-and-function-hoisting.html\" rel=\"noreferrer\">hoisting</a>).  </p>\n\n<p>For example, a function expression:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// TypeError: functionOne is not a function</span>\nfunctionOne();\n\n<span class=\"hljs-keyword\">var</span> functionOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello!\"</span>);\n};</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif1\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>And, a function declaration:   </p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// Outputs: \"Hello!\"</span>\nfunctionTwo();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">functionTwo</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello!\"</span>);\n}</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif2\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>Historically, function declarations defined within blocks were handled inconsistently between browsers. Strict mode (introduced in ES5) resolved this by scoping function declarations to their enclosing block.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">'use strict'</span>;    \n{ <span class=\"hljs-comment\">// note this block!</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">functionThree</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello!\"</span>);\n  }\n}\nfunctionThree(); <span class=\"hljs-comment\">// ReferenceError</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif3\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "5251"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>First I want to correct Greg: <code>function abc(){}</code> is scoped too — the name <code>abc</code> is defined in the scope where this definition is encountered. Example:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">xyz</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{};\n  <span class=\"hljs-comment\">// abc is defined here...</span>\n}\n<span class=\"hljs-comment\">// ...but not here</span>\n</code></pre>\n\n<p>Secondly, it is possible to combine both styles:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> xyz = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{};\n</code></pre>\n\n<p><code>xyz</code> is going to be defined as usual, <code>abc</code> is undefined in all browsers but Internet&nbsp;Explorer — do not rely on it being defined. But it will be defined inside its body:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> xyz = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-comment\">// xyz is visible here</span>\n  <span class=\"hljs-comment\">// abc is visible here</span>\n}\n<span class=\"hljs-comment\">// xyz is visible here</span>\n<span class=\"hljs-comment\">// abc is undefined here</span>\n</code></pre>\n\n<p>If you want to alias functions on all browsers, use this kind of declaration:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> xyz = abc;\n</code></pre>\n\n<p>In this case, both <code>xyz</code> and <code>abc</code> are aliases of the same object:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">console</span>.log(xyz === abc); <span class=\"hljs-comment\">// prints \"true\"</span>\n</code></pre>\n\n<p>One compelling reason to use the combined style is the \"name\" attribute of function objects (<strong>not supported by Internet&nbsp;Explorer</strong>). Basically when you define a function like</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-built_in\">console</span>.log(abc.name); <span class=\"hljs-comment\">// prints \"abc\"</span>\n</code></pre>\n\n<p>its name is automatically assigned. But when you define it like</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-built_in\">console</span>.log(abc.name); <span class=\"hljs-comment\">// prints \"\"</span>\n</code></pre>\n\n<p>its name is empty — we created an anonymous function and assigned it to some variable.</p>\n\n<p>Another good reason to use the combined style is to use a short internal name to refer to itself, while providing a long non-conflicting name for external users:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// Assume really.long.external.scoped is {}</span>\nreally.long.external.scoped.name = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shortcut</span>(<span class=\"hljs-params\">n</span>)</span>{\n  <span class=\"hljs-comment\">// Let it call itself recursively:</span>\n  shortcut(n - <span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-comment\">// Let it pass itself as a callback:</span>\n  someFunction(shortcut);\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n\n<p>In the example above we can do the same with an external name, but it'll be too unwieldy (and slower).</p>\n\n<p><em>(Another way to refer to itself is to use <code>arguments.callee</code>, which is still relatively long, and not supported in the strict mode.)</em></p>\n\n<p>Deep down, JavaScript treats both statements differently. This is a function declaration:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{}\n</code></pre>\n\n<p><code>abc</code> here is defined everywhere in the current scope:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// We can call it here</span>\nabc(); <span class=\"hljs-comment\">// Works</span>\n\n<span class=\"hljs-comment\">// Yet, it is defined down there.</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{}\n\n<span class=\"hljs-comment\">// We can call it again</span>\nabc(); <span class=\"hljs-comment\">// Works</span>\n</code></pre>\n\n<p>Also, it hoisted through a <code>return</code> statement:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// We can call it here</span>\nabc(); <span class=\"hljs-comment\">// Works</span>\n<span class=\"hljs-keyword\">return</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{}\n</code></pre>\n\n<p>This is a function expression:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> xyz = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n</code></pre>\n\n<p><code>xyz</code> here is defined from the point of assignment:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// We can't call it here</span>\nxyz(); <span class=\"hljs-comment\">// UNDEFINED!!!</span>\n\n<span class=\"hljs-comment\">// Now it is defined</span>\nxyz = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{}\n\n<span class=\"hljs-comment\">// We can call it here</span>\nxyz(); <span class=\"hljs-comment\">// works</span>\n</code></pre>\n\n<p>Function declaration vs. function expression is the real reason why there is a difference demonstrated by Greg.</p>\n\n<p>Fun fact:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> xyz = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-built_in\">console</span>.log(xyz.name); <span class=\"hljs-comment\">// Prints \"abc\"</span>\n</code></pre>\n\n<p>Personally, I prefer the \"function expression\" declaration because this way I can control the visibility. When I define the function like</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n</code></pre>\n\n<p>I know that I defined the function locally. When I define the function like</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n</code></pre>\n\n<p>I know that I defined it globally providing that I didn't define <code>abc</code> anywhere in the chain of scopes. This style of definition is resilient even when used inside <code>eval()</code>. While the definition</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{};\n</code></pre>\n\n<p>depends on the context and may leave you guessing where it is actually defined, especially in the case of <code>eval()</code> — the answer is: It depends on the browser.</p>\n    </div>",
          "vote": "1997"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's the rundown on the standard forms that create functions: <em>(Originally written for another question, but adapted after being moved into the canonical question.)</em></p>\n\n<p>Terms:</p>\n\n<ul>\n<li><strong>ES5</strong>: <a href=\"http://ecma-international.org/ecma-262/5.1/\" rel=\"noreferrer\">ECMAScript 5th edition</a>, 2009</li>\n<li><strong>ES2015</strong>: <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html\" rel=\"noreferrer\">ECMAScript 2015</a> (also known as \"ES6\")</li>\n</ul>\n\n<p>The quick list:</p>\n\n<ul>\n<li><p>Function Declaration</p></li>\n<li><p>\"Anonymous\" <code>function</code> Expression <em>(which despite the term, sometimes create functions with names)</em></p></li>\n<li><p>Named <code>function</code> Expression</p></li>\n<li><p>Accessor Function Initializer (ES5+)</p></li>\n<li><p>Arrow Function Expression (ES2015+) <em>(which, like anonymous function expressions, don't involve an explicit name, and yet can create functions with names)</em></p></li>\n<li><p>Method Declaration in Object Initializer (ES2015+)</p></li>\n<li><p>Constructor and Method Declarations in <code>class</code> (ES2015+)</p></li>\n</ul>\n\n<h3>Function Declaration</h3>\n\n<p>The first form is a <em>function declaration</em>, which looks like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'x'</span>);\n}\n</code></pre>\n\n<p>A function declaration is a <em>declaration</em>; it's not a statement or expression. As such, you don't follow it with a <code>;</code> (although doing so is harmless).</p>\n\n<p>A function declaration is processed when execution enters the context in which it appears, <strong>before</strong> any step-by-step code is executed. The function it creates is given a proper name (<code>x</code> in the example above), and that name is put in the scope in which the declaration appears.</p>\n\n<p>Because it's processed before any step-by-step code in the same context, you can do things like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>x(); <span class=\"hljs-comment\">// Works even though it's above the declaration</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'x'</span>);\n}\n</code></pre>\n\n<p>Until ES2015, the spec didn't cover what a JavaScript engine should do if you put a function declaration inside a control structure like <code>try</code>, <code>if</code>, <code>switch</code>, <code>while</code>, etc., like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> (someCondition) {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-comment\">// &lt;===== HERE THERE</span>\n    }                   <span class=\"hljs-comment\">// &lt;===== BE DRAGONS</span>\n}\n</code></pre>\n\n<p>And since they're processed <em>before</em> step-by-step code is run, it's tricky to know what to do when they're in a control structure.</p>\n\n<p>Although doing this wasn't <em>specified</em> until ES2015, it was an <em>allowable extension</em> to support function declarations in blocks. Unfortunately (and inevitably), different engines did different things.</p>\n\n<p>As of ES2015, the specification says what to do. In fact, it gives three separate things to do:</p>\n\n<ol>\n<li>If in loose mode <em>not</em> on a web browser, the JavaScript engine is supposed to do one thing</li>\n<li>If in loose mode on a web browser, the JavaScript engine is supposed to do something else</li>\n<li>If in <em>strict</em> mode (browser or not), the JavaScript engine is supposed to do yet another thing</li>\n</ol>\n\n<p>The rules for the loose modes are tricky, but in <em>strict</em> mode, function declarations in blocks are easy: They're local to the block (they have <em>block scope</em>, which is also new in ES2015), and they're hoisted to the top of the block. So:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">\"use strict\"</span>;\n<span class=\"hljs-keyword\">if</span> (someCondition) {\n    foo();               <span class=\"hljs-comment\">// Works just fine</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    }\n}\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> foo); <span class=\"hljs-comment\">// \"undefined\" (`foo` is not in scope here</span>\n                         <span class=\"hljs-comment\">// because it's not in the same block)</span>\n</code></pre>\n\n<h3>\"Anonymous\" <code>function</code> Expression</h3>\n\n<p>The second common form is called an <em>anonymous function expression</em>:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> y = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'y'</span>);\n};\n</code></pre>\n\n<p>Like all expressions, it's evaluated when it's reached in the step-by-step execution of the code.</p>\n\n<p>In ES5, the function this creates has no name (it's anonymous). In ES2015, the function is assigned a name if possible by inferring it from context. In the example above, the name would be <code>y</code>. Something similar is done when the function is the value of a property initializer. (For details on when this happens and the rules, search for <code>SetFunctionName</code> in the <a href=\"https://tc39.github.io/ecma262/\" rel=\"noreferrer\">the specification</a>&nbsp;— it appears <em>all over</em> the place.)</p>\n\n<h3>Named <code>function</code> Expression</h3>\n\n<p>The third form is a <em>named function expression</em> (\"NFE\"):</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">w</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'zw'</span>)\n};\n</code></pre>\n\n<p>The function this creates has a proper name (<code>w</code> in this case). Like all expressions, this is evaluated when it's reached in the step-by-step execution of the code. The name of the function is <em>not</em> added to the scope in which the expression appears; the name <em>is</em> in scope within the function itself:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> z = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">w</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> w); <span class=\"hljs-comment\">// \"function\"</span>\n};\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> w);     <span class=\"hljs-comment\">// \"undefined\"</span>\n</code></pre>\n\n<p>Note that NFEs have frequently been a source of bugs for JavaScript implementations. IE8 and earlier, for instance, handle NFEs <a href=\"http://blog.niftysnippets.org/2010/09/double-take.html\" rel=\"noreferrer\">completely incorrectly</a>, creating two different functions at two different times. Early versions of Safari had issues as well. The good news is that current versions of browsers (IE9 and up, current Safari) don't have those issues any more. (But as of this writing, sadly, IE8 remains in widespread use, and so using NFEs with code for the web in general is still problematic.)</p>\n\n<h3>Accessor Function Initializer (ES5+)</h3>\n\n<p>Sometimes functions can sneak in largely unnoticed; that's the case with <em>accessor functions</em>. Here's an example:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> obj = {\n    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">0</span>,\n    <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">f</span>() {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.value;\n    },\n    <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\">v</span>) {\n        <span class=\"hljs-built_in\">this</span>.value = v;\n    }\n};\n<span class=\"hljs-built_in\">console</span>.log(obj.f);         <span class=\"hljs-comment\">// 0</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">typeof</span> obj.f);  <span class=\"hljs-comment\">// \"number\"</span>\n</code></pre>\n\n<p>Note that when I used the function, I didn't use <code>()</code>! That's because it's an <em>accessor function</em> for a property. We get and set the property in the normal way, but behind the scenes, the function is called.</p>\n\n<p>You can also create accessor functions with <code>Object.defineProperty</code>, <code>Object.defineProperties</code>, and the lesser-known second argument to <code>Object.create</code>.</p>\n\n<h3>Arrow Function Expression (ES2015+)</h3>\n\n<p>ES2015 brings us the <em>arrow function</em>. Here's one example:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> b = a.map(<span class=\"hljs-function\"><span class=\"hljs-params\">n</span> =&gt;</span> n * <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-built_in\">console</span>.log(b.join(<span class=\"hljs-string\">\", \"</span>)); <span class=\"hljs-comment\">// 2, 4, 6</span>\n</code></pre>\n\n<p>See that <code>n =&gt; n * 2</code> thing hiding in the <code>map()</code> call? That's a function.</p>\n\n<p>A couple of things about arrow functions:</p>\n\n<ol>\n<li><p>They don't have their own <code>this</code>. Instead, they <em>close over</em> the <code>this</code> of the context where they're defined. (They also close over <code>arguments</code> and, where relevant, <code>super</code>.) This means that the <code>this</code> within them is the same as the <code>this</code> where they're created, and cannot be changed.</p></li>\n<li><p>As you'll have noticed with the above, you don't use the keyword <code>function</code>; instead, you use <code>=&gt;</code>.</p></li>\n</ol>\n\n<p>The <code>n =&gt; n * 2</code> example above is one form of them. If you have multiple arguments to pass the function, you use parens:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">var</span> b = a.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">n, i</span>) =&gt;</span> n * i);\n<span class=\"hljs-built_in\">console</span>.log(b.join(<span class=\"hljs-string\">\", \"</span>)); <span class=\"hljs-comment\">// 0, 2, 6</span>\n</code></pre>\n\n<p>(Remember that <code>Array#map</code> passes the entry as the first argument, and the index as the second.)</p>\n\n<p>In both cases, the body of the function is just an expression; the function's return value will automatically be the result of that expression (you don't use an explicit <code>return</code>).</p>\n\n<p>If you're doing more than just a single expression, use <code>{}</code> and an explicit <code>return</code> (if you need to return a value), as normal:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = [\n  {<span class=\"hljs-attr\">first</span>: <span class=\"hljs-string\">\"Joe\"</span>, <span class=\"hljs-attr\">last</span>: <span class=\"hljs-string\">\"Bloggs\"</span>},\n  {<span class=\"hljs-attr\">first</span>: <span class=\"hljs-string\">\"Albert\"</span>, <span class=\"hljs-attr\">last</span>: <span class=\"hljs-string\">\"Bloggs\"</span>},\n  {<span class=\"hljs-attr\">first</span>: <span class=\"hljs-string\">\"Mary\"</span>, <span class=\"hljs-attr\">last</span>: <span class=\"hljs-string\">\"Albright\"</span>}\n];\na = a.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">var</span> rv = a.last.localeCompare(b.last);\n  <span class=\"hljs-keyword\">if</span> (rv === <span class=\"hljs-number\">0</span>) {\n    rv = a.first.localeCompare(b.first);\n  }\n  <span class=\"hljs-keyword\">return</span> rv;\n});\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">JSON</span>.stringify(a));\n</code></pre>\n\n<p>The version without <code>{ ... }</code> is called an arrow function with an <em>expression body</em> or <em>concise body</em>. (Also: A <em>concise</em> arrow function.) The one with <code>{ ... }</code> defining the body is an arrow function with a <em>function body</em>. (Also: A <em>verbose</em> arrow function.)</p>\n\n<h3>Method Declaration in Object Initializer (ES2015+)</h3>\n\n<p>ES2015 allows a shorter form of declaring a property that references a function called a <em>method definition</em>; it looks like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> o = {\n    <span class=\"hljs-function\"><span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>)</span> {\n    }\n};\n</code></pre>\n\n<p>the almost-equivalent in ES5 and earlier would be:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> o = {\n    <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    }\n};\n</code></pre>\n\n<p>the difference (other than verbosity) is that a method can use <code>super</code>, but a function cannot. So for instance, if you had an object that defined (say) <code>valueOf</code> using method syntax, it could use <code>super.valueOf()</code> to get the value <code>Object.prototype.valueOf</code> would have returned (before presumably doing something else with it), whereas the ES5 version would have to do <code>Object.prototype.valueOf.call(this)</code> instead.</p>\n\n<p>That also means that the method has a reference to the object it was defined on, so if that object is temporary (for instance, you're passing it into <code>Object.assign</code> as one of the source objects), method syntax <em>could</em> mean that the object is retained in memory when otherwise it could have been garbage collected (if the JavaScript engine doesn't detect that situation and handle it if none of the methods uses <code>super</code>).</p>\n\n<h3>Constructor and Method Declarations in <code>class</code> (ES2015+)</h3>\n\n<p>ES2015 brings us <code>class</code> syntax, including declared constructors and methods:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Person</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">firstName, lastName</span>)</span> {\n        <span class=\"hljs-built_in\">this</span>.firstName = firstName;\n        <span class=\"hljs-built_in\">this</span>.lastName = lastName;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">getFullName</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.firstName + <span class=\"hljs-string\">\" \"</span> + <span class=\"hljs-built_in\">this</span>.lastName;\n    }\n}\n</code></pre>\n\n<p>There are two function declarations above: One for the constructor, which gets the name <code>Person</code>, and one for <code>getFullName</code>, which is a function assigned to <code>Person.prototype</code>.</p>\n    </div>",
          "vote": "672"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Speaking about the global context, both, the <code>var</code> statement and a <code>FunctionDeclaration</code> at the end will create a <em>non-deleteable</em> property on the global object, but the value of both <em>can be overwritten</em>.</p>\n\n<p>The subtle difference between the two ways is that when the <a href=\"http://bclary.com/2004/11/07/#a-10.1.3\" rel=\"noreferrer\">Variable Instantiation</a> process runs (before the actual code execution) all identifiers declared with <code>var</code> will be initialized with <code>undefined</code>, and the ones used by the <code>FunctionDeclaration</code>'s will be available since that moment, for example:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code> alert(<span class=\"hljs-keyword\">typeof</span> foo); <span class=\"hljs-comment\">// 'function', it's already available</span>\n alert(<span class=\"hljs-keyword\">typeof</span> bar); <span class=\"hljs-comment\">// 'undefined'</span>\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span> (<span class=\"hljs-params\"></span>) </span>{}\n <span class=\"hljs-keyword\">var</span> bar = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{};\n alert(<span class=\"hljs-keyword\">typeof</span> bar); <span class=\"hljs-comment\">// 'function'</span>\n</code></pre>\n\n<p>The assignment of the <code>bar</code> <code>FunctionExpression</code> takes place until runtime.</p>\n\n<p>A global property created by a <code>FunctionDeclaration</code> can be overwritten without any problems just like a variable value, e.g.:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span> (<span class=\"hljs-params\"></span>) </span>{}\n test = <span class=\"hljs-literal\">null</span>;\n</code></pre>\n\n<p>Another obvious difference between your two examples is that the first function doesn't have a name, but the second has it, which can be really useful when debugging (i.e. inspecting a call stack).</p>\n\n<p>About your edited first example (<code>foo = function() { alert('hello!'); };</code>), it is an undeclared assignment, I would highly encourage you to always use the <code>var</code> keyword.</p>\n\n<p>With an assignment, without the <code>var</code> statement, if the referenced identifier is not found in the scope chain, it will become a <em>deleteable</em> property of the global object.</p>\n\n<p>Also, undeclared assignments throw a <code>ReferenceError</code> on ECMAScript 5 under <a href=\"http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/\" rel=\"noreferrer\">Strict Mode</a>.</p>\n\n<p>A must read:</p>\n\n<ul>\n<li><a href=\"http://kangax.github.com/nfe/\" rel=\"noreferrer\">Named function expressions demystified</a></li>\n</ul>\n\n<p><strong>Note</strong>: This answer has been merged from <a href=\"https://stackoverflow.com/questions/3435709/why-are-functions-in-javascript-set-to-global-variables-instead-of-plain-function\">another question</a>, in which the major doubt and misconception from the OP was that identifiers declared with a <code>FunctionDeclaration</code>, couldn't be overwritten which is not the case.</p>\n    </div>",
          "vote": "155"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The two code snippets you've posted there will, for almost all purposes, behave the same way.</p>\n\n<p>However, the difference in behaviour is that with the first variant (<code>var functionOne = function() {}</code>), that function can only be called after that point in the code.</p>\n\n<p>With the second variant (<code>function functionTwo()</code>), the function is available to code that runs above where the function is declared.</p>\n\n<p>This is because with the first variant, the function is assigned to the variable <code>foo</code> at run time. In the second, the function is assigned to that identifier, <code>foo</code>, at parse time.</p>\n\n<p><strong>More technical information</strong></p>\n\n<p>JavaScript has three ways of defining functions.</p>\n\n<ol>\n<li>Your first snippet shows a <strong>function expression</strong>. This involves using the <em>\"function\" operator</em> to create a function - the result of that operator can be stored in any variable or object property. The function expression is powerful that way. The function expression is often called an \"anonymous function\", because it does not have to have a name,</li>\n<li>Your second example is a <strong>function declaration</strong>. This uses the <em>\"function\" statement</em> to create a function. The function is made available at parse time and can be called anywhere in that scope. You can still store it in a variable or object property later.</li>\n<li>The third way of defining a function is the <strong>\"Function()\" constructor</strong>, which is not shown in your original post. It's not recommended to use this as it works the same way as <code>eval()</code>, which has its problems.</li>\n</ol>\n    </div>",
          "vote": "133"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A better explanation to <a href=\"https://stackoverflow.com/a/336868/2351696\">Greg's answer</a></p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>functionTwo();\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">functionTwo</span>(<span class=\"hljs-params\"></span>) </span>{\n}\n</code></pre>\n<p><strong>Why no error? We were always taught that expressions are executed from top to bottom(??)</strong></p>\n<h2>Because:</h2>\n<blockquote>\n<p>Function declarations and variable declarations are always moved (<code>hoisted</code>) invisibly to the top of their containing scope by the JavaScript interpreter. Function parameters and language-defined names are, obviously, already there. <a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\" rel=\"noreferrer\">ben cherry</a></p>\n</blockquote>\n<p>This means that code like this:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>functionOne();                  ---------------      <span class=\"hljs-keyword\">var</span> functionOne;\n                                | is actually |      functionOne();\n<span class=\"hljs-keyword\">var</span> functionOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{   | interpreted |--&gt;\n};                              |    like     |      functionOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n                                ---------------      };\n</code></pre>\n<p>Notice that the assignment portion of the declarations were not hoisted. Only the name is hoisted.</p>\n<p><em>But in the case with function declarations, the entire function body will be hoisted as well</em>:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>functionTwo();              ---------------      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">functionTwo</span>(<span class=\"hljs-params\"></span>) </span>{\n                            | is actually |      };\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">functionTwo</span>(<span class=\"hljs-params\"></span>) </span>{    | interpreted |--&gt;\n}                           |    like     |      functionTwo();\n                            ---------------\n</code></pre>\n    </div>",
          "vote": "112"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Other commenters have already covered the semantic difference of the two variants above. I wanted to note a stylistic difference: Only the \"assignment\" variation can set a property of another object.</p>\n\n<p>I often build JavaScript modules with a pattern like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">exports</span> = {};\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">privateUtil</span>(<span class=\"hljs-params\"></span>) </span>{\n            ...\n    }\n\n    <span class=\"hljs-built_in\">exports</span>.publicUtil = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            ...\n    };\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">exports</span>;\n})();\n</code></pre>\n\n<p>With this pattern, your public functions will all use assignment, while your private functions use declaration.</p>\n\n<p>(Note also that assignment should require a semicolon after the statement, while declaration prohibits it.)</p>\n    </div>",
          "vote": "97"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An illustration of when to prefer the first method to the second one is when you need to avoid overriding a function's previous definitions.</p>\n\n<p>With</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> (condition){\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">myfunction</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-comment\">// Some code</span>\n    }\n}\n</code></pre>\n\n<p>, this definition of <code>myfunction</code> will override any previous definition, since it will be done at parse-time.</p>\n\n<p>While</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> (condition){\n    <span class=\"hljs-keyword\">var</span> myfunction = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-comment\">// Some code</span>\n    }\n}\n</code></pre>\n\n<p>does the correct job of defining <code>myfunction</code> only when <code>condition</code> is met.</p>\n    </div>",
          "vote": "81"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An important reason is to add one and only one variable as the \"Root\" of your namespace...</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> MyNamespace = {}\nMyNamespace.foo= <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n}\n</code></pre>\n\n<p>or</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> MyNamespace = {\n  <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  },\n  ...\n}\n</code></pre>\n\n<p>There are many techniques for namespacing. It's become more important with the plethora of JavaScript modules available.</p>\n\n<p>Also see <em><a href=\"https://stackoverflow.com/questions/881515/\">How do I declare a namespace in JavaScript?</a></em></p>\n    </div>",
          "vote": "66"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong><a href=\"http://www.sitepoint.com/back-to-basics-javascript-hoisting/\" rel=\"noreferrer\">Hoisting</a></strong> <em>is the JavaScript interpreter’s action of moving all variable and function declarations to the top of the current scope.</em> </p>\n\n<p><em>However, only the actual declarations are hoisted. by leaving assignments where they are.</em></p>\n\n<ul>\n<li>variable's/Function's declared inside the page are global can access anywhere in that page.</li>\n<li>variable's/Functions declared inside the function are having local scope. means they are available/accessed inside the function body (scope), they are not available outside the function body.</li>\n</ul>\n\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Variables\" rel=\"noreferrer\">Variable</a></strong></p>\n\n<p><em>Javascript is called loosely typed language. Which means Javascript variables can hold value of any <a href=\"https://msdn.microsoft.com/en-us/library/7wkd9z69(v=vs.94).aspx\" rel=\"noreferrer\">Data-Type</a>. Javascript automatically takes care of changing the variable-type based on the value/literal provided during runtime.</em></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>global_Page = <span class=\"hljs-number\">10</span>;                                               <span class=\"hljs-keyword\">var</span> global_Page;      « <span class=\"hljs-literal\">undefined</span>\n    « Integer literal, <span class=\"hljs-built_in\">Number</span> Type.   -------------------       global_Page = <span class=\"hljs-number\">10</span>;     « <span class=\"hljs-built_in\">Number</span>         \nglobal_Page = <span class=\"hljs-string\">'Yash'</span>;                 |   Interpreted   |       global_Page = <span class=\"hljs-string\">'Yash'</span>; « <span class=\"hljs-built_in\">String</span>\n    « <span class=\"hljs-built_in\">String</span> literal, <span class=\"hljs-built_in\">String</span> Type.    «       AS        «       global_Page = <span class=\"hljs-literal\">true</span>;   « <span class=\"hljs-built_in\">Boolean</span> \n<span class=\"hljs-keyword\">var</span> global_Page = <span class=\"hljs-literal\">true</span>;               |                 |       global_Page = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{          « <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>\n    « <span class=\"hljs-title\">Boolean</span> <span class=\"hljs-title\">Type</span>                    -------------------                 <span class=\"hljs-title\">var</span> <span class=\"hljs-title\">local_functionblock</span></span>;  « <span class=\"hljs-literal\">undefined</span>\nglobal_Page = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{                                                local_functionblock = <span class=\"hljs-number\">777</span>;« <span class=\"hljs-built_in\">Number</span>\n    <span class=\"hljs-keyword\">var</span> local_functionblock = <span class=\"hljs-number\">777</span>;                              };  \n    <span class=\"hljs-comment\">// Assigning function as a data.</span>\n};  \n</code></pre>\n\n<hr>\n\n<p><strong>Function</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Identifier_opt</span> (<span class=\"hljs-params\"> FormalParameterList_opt </span>) </span>{ \n      FunctionBody | sequence <span class=\"hljs-keyword\">of</span> statements\n\n      « <span class=\"hljs-keyword\">return</span>;  Default <span class=\"hljs-literal\">undefined</span>\n      « <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'some data'</span>;\n}\n</code></pre>\n\n<ul>\n<li>functions declared inside the page are hoisted to top of the page having global access.</li>\n<li>functions declared inside the function-block are hoisted to top of the block.</li>\n<li><p>Default return value of function is '<a href=\"https://javascriptweblog.wordpress.com/2010/08/16/understanding-undefined-and-preventing-referenceerrors/\" rel=\"noreferrer\">undefined</a>', <a href=\"http://javascript.info/tutorial/variables-and-statements\" rel=\"noreferrer\">Variable</a> declaration default value also 'undefined'</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>Scope <span class=\"hljs-keyword\">with</span> respect to <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>-<span class=\"hljs-title\">block</span> <span class=\"hljs-title\">global</span>. \n<span class=\"hljs-title\">Scope</span> <span class=\"hljs-title\">with</span> <span class=\"hljs-title\">respect</span> <span class=\"hljs-title\">to</span> <span class=\"hljs-title\">page</span> <span class=\"hljs-title\">undefined</span> | <span class=\"hljs-title\">not</span> <span class=\"hljs-title\">available</span>.\n</span></code></pre></li>\n</ul>\n\n<p><strong>Function Declaration</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">globalAccess</span>(<span class=\"hljs-params\"></span>) </span>{                                  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">globalAccess</span>(<span class=\"hljs-params\"></span>) </span>{      \n}                                  -------------------     }\nglobalAccess();                    |                 |     <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">globalAccess</span>(<span class=\"hljs-params\"></span>) </span>{ « Re-Defined / overridden.\nlocalAccess();                     «   Hoisted  As   «         <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">localAccess</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">globalAccess</span>(<span class=\"hljs-params\"></span>) </span>{          |                 |         }\n     localAccess();                -------------------         localAccess(); « <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">accessed</span> <span class=\"hljs-title\">with</span> <span class=\"hljs-title\">in</span> <span class=\"hljs-title\">globalAccess</span>(<span class=\"hljs-params\"></span>) <span class=\"hljs-title\">only</span>.\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">localAccess</span>(<span class=\"hljs-params\"></span>) </span>{                              }\n     }                                                     <span class=\"hljs-title\">globalAccess</span>(<span class=\"hljs-params\"></span>)</span>;\n}                                                          localAccess(); « <span class=\"hljs-built_in\">ReferenceError</span> <span class=\"hljs-keyword\">as</span> the <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">is</span> <span class=\"hljs-title\">not</span> <span class=\"hljs-title\">defined</span>\n</span></code></pre>\n\n<p><strong>Function Expression</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>        <span class=\"hljs-number\">10</span>;                 « literal\n       (<span class=\"hljs-number\">10</span>);                « Expression                (<span class=\"hljs-number\">10</span>).toString() -&gt; <span class=\"hljs-string\">'10'</span>\n<span class=\"hljs-keyword\">var</span> a;                      \n    a = <span class=\"hljs-number\">10</span>;                 « Expression <span class=\"hljs-keyword\">var</span>              a.toString()  -&gt; <span class=\"hljs-string\">'10'</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">invoke</span>(<span class=\"hljs-params\"></span>) </span>{        « Expression <span class=\"hljs-built_in\">Function</span>\n <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Self Invoking'</span>);                      (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n});                                                               }) () -&gt; <span class=\"hljs-string\">'Self Invoking'</span>\n\n<span class=\"hljs-keyword\">var</span> f; \n    f = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{        « Expression <span class=\"hljs-keyword\">var</span> <span class=\"hljs-built_in\">Function</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'var Function'</span>);                                   f ()  -&gt; <span class=\"hljs-string\">'var Function'</span>\n    };\n</code></pre>\n\n<p><em>Function assigned to variable Example:</em></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">selfExecuting</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'IIFE - Immediately-Invoked Function Expression'</span>);\n}());\n\n<span class=\"hljs-keyword\">var</span> anonymous = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'anonymous function Expression'</span>);\n};\n\n<span class=\"hljs-keyword\">var</span> namedExpression = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">for_InternalUSE</span>(<span class=\"hljs-params\">fact</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(fact === <span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n\n    <span class=\"hljs-keyword\">var</span> localExpression = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Local to the parent Function Scope'</span>);\n    };\n    globalExpression = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ \n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'creates a new global variable, then assigned this function.'</span>);\n    };\n\n    <span class=\"hljs-comment\">//return; //undefined.</span>\n    <span class=\"hljs-keyword\">return</span> fact * for_InternalUSE( fact - <span class=\"hljs-number\">1</span>);   \n};\n\nnamedExpression();\nglobalExpression();\n</code></pre>\n\n<p>javascript interpreted as</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> anonymous;\n<span class=\"hljs-keyword\">var</span> namedExpression;\n<span class=\"hljs-keyword\">var</span> globalExpression;\n\nanonymous = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'anonymous function Expression'</span>);\n};\n\nnamedExpression = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">for_InternalUSE</span>(<span class=\"hljs-params\">fact</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> localExpression;\n\n    <span class=\"hljs-keyword\">if</span>(fact === <span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n    localExpression = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Local to the parent Function Scope'</span>);\n    };\n    globalExpression = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ \n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'creates a new global variable, then assigned this function.'</span>);\n    };\n\n    <span class=\"hljs-keyword\">return</span> fact * for_InternalUSE( fact - <span class=\"hljs-number\">1</span>);    <span class=\"hljs-comment\">// DEFAULT UNDEFINED.</span>\n};\n\nnamedExpression(<span class=\"hljs-number\">10</span>);\nglobalExpression();\n</code></pre>\n\n<p>You can check function declaration, expression test over different browser's using <a href=\"http://jsperf.com/yashfunctions\" rel=\"noreferrer\"><code>jsperf Test Runner</code></a></p>\n\n<hr>\n\n<p><strong><a href=\"https://stackoverflow.com/a/45759444/5081877\">ES5 Constructor Function Classes</a>: Function objects created using Function.prototype.bind</strong></p>\n\n<p>JavaScript treats functions as first-class objects, so being an object, you can assign properties to a function.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Shape</span>(<span class=\"hljs-params\">id</span>) </span>{ <span class=\"hljs-comment\">// Function Declaration</span>\n    <span class=\"hljs-built_in\">this</span>.id = id;\n};\n    <span class=\"hljs-comment\">// Adding a prototyped method to a function.</span>\n    Shape.prototype.getID = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.id;\n    };\n    Shape.prototype.setID = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"> id </span>) </span>{\n        <span class=\"hljs-built_in\">this</span>.id = id;\n    };\n\n<span class=\"hljs-keyword\">var</span> expFn = Shape; <span class=\"hljs-comment\">// Function Expression</span>\n\n<span class=\"hljs-keyword\">var</span> funObj = <span class=\"hljs-keyword\">new</span> Shape( ); <span class=\"hljs-comment\">// Function Object</span>\nfunObj.hasOwnProperty(<span class=\"hljs-string\">'prototype'</span>); <span class=\"hljs-comment\">// false</span>\nfunObj.setID( <span class=\"hljs-number\">10</span> );\n<span class=\"hljs-built_in\">console</span>.log( funObj.getID() ); <span class=\"hljs-comment\">// 10</span>\n</code></pre>\n\n<hr>\n\n<p>ES6 introduced <strong>Arrow function</strong>: An arrow function expression has a shorter syntax, they are best suited for non-method functions, and they cannot be used as constructors.</p>\n\n<blockquote>\n  <p><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-arrow-function-definitions-static-semantics-early-errors\" rel=\"noreferrer\"><code>ArrowFunction : ArrowParameters =&gt; ConciseBody</code></a>.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> fn = <span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> { <span class=\"hljs-keyword\">return</span> item &amp; <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">'Odd'</span> : <span class=\"hljs-string\">'Even'</span>; };\n<span class=\"hljs-built_in\">console</span>.log( fn(<span class=\"hljs-number\">2</span>) ); <span class=\"hljs-comment\">// Even</span>\n<span class=\"hljs-built_in\">console</span>.log( fn(<span class=\"hljs-number\">3</span>) ); <span class=\"hljs-comment\">// Odd</span>\n</code></pre>\n</blockquote>\n    </div>",
          "vote": "59"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm adding my own answer just because everyone else has covered the hoisting part thoroughly.</p>\n\n<p>I've wondered about which way is better for a long while now, and thanks to <a href=\"http://jsperf.com\" rel=\"noreferrer\">http://jsperf.com</a> now I know :)</p>\n\n<p><img src=\"https://i.stack.imgur.com/bCrSm.png\" alt=\"enter image description here\"></p>\n\n<p><strong>Function declarations</strong> are faster, and that's what really matters in web dev right? ;)</p>\n    </div>",
          "vote": "45"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>A function declaration and a function expression assigned to a variable behave the same once the binding is established.</p>\n\n<p>There is a difference however at <em>how</em> and <em>when</em> the function object is actually associated with its variable. This difference is due to the mechanism called <em>variable hoisting</em> in JavaScript.</p>\n\n<p>Basically, all function declarations and variable declarations are hoisted to the top of the <em>function</em> in which the declaration occurs (this is why we say that JavaScript has <em>function scope</em>).</p>\n\n<ul>\n<li><p>When a function declaration is hoisted, the function body \"follows\"\nso when the function body is evaluated, the variable will immediately\nbe bound to a function object.</p></li>\n<li><p>When a variable declaration is hoisted, the initialization does <em>not</em>\nfollow, but is \"left behind\". The variable is initialized to\n<code>undefined</code> at the start of the function body, and will be <em>assigned</em>\na value at its original location in the code. (Actually, it will be assigned a value at <em>every</em> location where a declaration of a variable with the same name occurs.)</p></li>\n</ul>\n\n<p>The order of hoisting is also important: function declarations take precedence over variable declarations with the same name, and the last function declaration takes precedence over previous function declarations with the same name.</p>\n\n<p>Some examples...</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">bar</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (!foo) {\n    <span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">10</span> }\n  <span class=\"hljs-keyword\">return</span> foo; }\nbar() <span class=\"hljs-comment\">// 10</span>\n</code></pre>\n\n<p>Variable <code>foo</code> is hoisted to the top of the function, initialized to <code>undefined</code>, so that <code>!foo</code> is <code>true</code>, so <code>foo</code> is assigned <code>10</code>. The <code>foo</code> outside of <code>bar</code>'s scope plays no role and is untouched. </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> a; \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>}; \n  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">4</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>}}\nf()() <span class=\"hljs-comment\">// 2</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> a;\n  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">4</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>};\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>}}\nf()() <span class=\"hljs-comment\">// 2</span>\n</code></pre>\n\n<p>Function declarations take precedence over variable declarations, and the last function declaration \"sticks\".</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">4</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>}; \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>}; \n  <span class=\"hljs-keyword\">return</span> a; }\nf() <span class=\"hljs-comment\">// 4</span>\n</code></pre>\n\n<p>In this example <code>a</code> is initialized with the function object resulting from evaluating the second function declaration, and then is assigned <code>4</code>.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">b</span>(<span class=\"hljs-params\"></span>) </span>{\n  a = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>) </span>{}}\nb();\na <span class=\"hljs-comment\">// 1</span>\n</code></pre>\n\n<p>Here the function declaration is hoisted first, declaring and initializing variable <code>a</code>. Next, this variable is assigned <code>10</code>. In other words: the assignment does not assign to outer variable <code>a</code>.</p>\n    </div>",
          "vote": "37"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The first example is a function declaration:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{}\n</code></pre>\n\n<p>The second example is a function expression:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n\n<p>The main difference is how they are hoisted (lifted and declared). In the first example, the whole function declaration is hoisted. In the second example only the var 'abc' is hoisted, its value (the function) will be undefined, and the function itself remains at the position that it is declared.</p>\n\n<p>To put it simply:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">//this will work</span>\nabc(param);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abc</span>(<span class=\"hljs-params\"></span>)</span>{}\n\n<span class=\"hljs-comment\">//this would fail</span>\nabc(param);\n<span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{}\n</code></pre>\n\n<p>To study more about this topic I strongly recommend you this\n<a href=\"http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/#comment-43792\">link</a></p>\n    </div>",
          "vote": "35"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In terms of code maintenance cost, named functions are more preferable:</p>\n\n<ul>\n<li>Independent from the place where they are declared (but still limited by scope).</li>\n<li>More resistant to mistakes like conditional initialization (you are still able to override if wanted to).</li>\n<li>The code becomes more readable by allocating local functions separately of scope functionality. Usually in the scope the functionality goes first, followed by declarations of local functions.</li>\n<li>In a debugger you will clearly see the function name on the call stack instead of an \"anonymous/evaluated\" function.</li>\n</ul>\n\n<p>I suspect more PROS for named functions are follow. And what is listed as an advantage of named functions is a disadvantage for anonymous ones.</p>\n\n<p>Historically, anonymous functions appeared from the inability of JavaScript as a language to list members with named functions:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>{\n    <span class=\"hljs-attr\">member</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-comment\">/* How do I make \"this.member\" a named function? */</span>\n    }\n}\n</code></pre>\n    </div>",
          "vote": "33"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>𝗧𝗵𝗲𝗿𝗲 𝗮𝗿𝗲 𝗳𝗼𝘂𝗿 𝗻𝗼𝘁𝗲𝘄𝗼𝗿𝘁𝗵𝘆 𝗰𝗼𝗺𝗽𝗮𝗿𝗶𝘀𝗼𝗻𝘀 𝗯𝗲𝘁𝘄𝗲𝗲𝗻 𝘁𝗵𝗲 𝘁𝘄𝗼 𝗱𝗶𝗳𝗳𝗲𝗿𝗲𝗻𝘁 𝗱𝗲𝗰𝗹𝗮𝗿𝗮𝘁𝗶𝗼𝗻𝘀 𝗼𝗳 𝗳𝘂𝗻𝗰𝘁𝗶𝗼𝗻𝘀 𝗮𝘀 𝗹𝗶𝘀𝘁𝗲𝗱 𝗯𝗲𝗹𝗼𝘄.</h1>\n<ol>\n<li>Availability (scope) of the function</li>\n</ol>\n<p>The following works because <code>function add()</code> is scoped to the nearest block:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Success: \"</span>, add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>));\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ERROR: \"</span> + e);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>{\n  <span class=\"hljs-keyword\">return</span> a + b;\n}</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif4\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>The following does not work because the variable is called before a function value is assigned to the variable <code>add</code>.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Success: \"</span>, add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>));\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ERROR: \"</span> + e);\n}\n\n<span class=\"hljs-keyword\">var</span> add=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>)</span>{\n  <span class=\"hljs-keyword\">return</span> a + b;\n}</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif5\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>The above code is identical in functionality to the code below. Note that explicitly assigning <code>add = undefined</code> is superfluous because simply doing <code>var add;</code> is the exact same as <code>var add=undefined</code>.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> add = <span class=\"hljs-literal\">undefined</span>;\n\n<span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Success: \"</span>, add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>));\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ERROR: \"</span> + e);\n}\n\nadd = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>)</span>{\n  <span class=\"hljs-keyword\">return</span> a + b;\n}</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif6\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>The following does not work because <code>var add=</code> begins an expression and causes the following <code>function add()</code> to be an expression instead of a block. Named functions are only visible to themselves and their surrounding block. As <code>function add()</code> is an expression here, it has no surrounding block, so it is only visible to itself.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Success: \"</span>, add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>));\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ERROR: \"</span> + e);\n}\n\n<span class=\"hljs-keyword\">var</span> add=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>{\n  <span class=\"hljs-keyword\">return</span> a + b;\n}</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif7\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<ol start=\"2\">\n<li><em>(function)</em>.name</li>\n</ol>\n<p>The name of a function <code>function thefuncname(){}</code> is <em>thefuncname</em> when it is declared this way.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foobar</span>(<span class=\"hljs-params\">a, b</span>)</span>{}\n\n<span class=\"hljs-built_in\">console</span>.log(foobar.name);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif8\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foobar</span>(<span class=\"hljs-params\"></span>)</span>{};\n\n<span class=\"hljs-built_in\">console</span>.log(a.name);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif9\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>Otherwise, if a function is declared as <code>function(){}</code>, the <em>function</em>.name is the first variable used to store the function.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> b = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{} });\n\n<span class=\"hljs-built_in\">console</span>.log(a.name);\n<span class=\"hljs-built_in\">console</span>.log(b.name);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif10\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>If there are no variables set to the function, then the functions name is the empty string (<code>\"\"</code>).</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">console</span>.log((<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{}).name === <span class=\"hljs-string\">\"\"</span>);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif11\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>Lastly, while the variable the function is assigned to initially sets the name, successive variables set to the function do not change the name.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{};\n<span class=\"hljs-keyword\">var</span> b = a;\n<span class=\"hljs-keyword\">var</span> c = b;\n\n<span class=\"hljs-built_in\">console</span>.log(a.name);\n<span class=\"hljs-built_in\">console</span>.log(b.name);\n<span class=\"hljs-built_in\">console</span>.log(c.name);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif12\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<ol start=\"3\">\n<li>Performance</li>\n</ol>\n<p>In Google's V8 and Firefox's Spidermonkey there might be a few microsecond JIST compilation difference, but ultimately the result is the exact same. To prove this, let's examine the efficiency of JSPerf at microbenchmarks by comparing the speed of two blank code snippets. The <a href=\"https://jsperf.com/microbenchmark-analysis/1\" rel=\"nofollow noreferrer\">JSPerf tests are found here</a>. And, the <a href=\"http://jsben.ch/Ov6eJ\" rel=\"nofollow noreferrer\">jsben.ch testsare  found here</a>. As you can see, there is a noticable difference when there should be none. If you are really a performance freak like me, then it might be more worth your while trying to reduce the number of variables and functions in the scope and especially eliminating polymorphism (such as using the same variable to store two different types).</p>\n<ol start=\"4\">\n<li>Variable Mutability</li>\n</ol>\n<p>When you use the <code>var</code> keyword to declare a variable, you can then reassign a different value to the variable like so.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-meta\">    \"use strict\"</span>;\n    <span class=\"hljs-keyword\">var</span> foobar = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{}; <span class=\"hljs-comment\">// initial value</span>\n    <span class=\"hljs-keyword\">try</span> {\n        foobar = <span class=\"hljs-string\">\"Hello World!\"</span>; <span class=\"hljs-comment\">// new value</span>\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"[no error]\"</span>);\n    } <span class=\"hljs-keyword\">catch</span>(error) {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ERROR: \"</span> + error.message);\n    }\n    <span class=\"hljs-built_in\">console</span>.log(foobar, <span class=\"hljs-built_in\">window</span>.foobar);\n})();</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif13\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>However, when we use the const-statement, the variable reference becomes immutable. This means that we cannot assign a new value to the variable. Please note, however, that this does not make the contents of the variable immutable: if you do <code>const arr = []</code>, then you can still do <code>arr[10] = \"example\"</code>. Only doing something like <code>arr = \"new value\"</code> or <code>arr = []</code> would throw an error as seen below.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-meta\">    \"use strict\"</span>;\n    <span class=\"hljs-keyword\">const</span> foobar = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{}; <span class=\"hljs-comment\">// initial value</span>\n    <span class=\"hljs-keyword\">try</span> {\n        foobar = <span class=\"hljs-string\">\"Hello World!\"</span>; <span class=\"hljs-comment\">// new value</span>\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"[no error]\"</span>);\n    } <span class=\"hljs-keyword\">catch</span>(error) {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ERROR: \"</span> + error.message);\n    }\n    <span class=\"hljs-built_in\">console</span>.log(foobar, <span class=\"hljs-built_in\">window</span>.foobar);\n})();</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif14\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>Interestingly, if we declare the variable as <code>function funcName(){}</code>, then the immutability of the variable is the same as declaring it with <code>var</code>.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-meta\">    \"use strict\"</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foobar</span>(<span class=\"hljs-params\"></span>)</span>{}; <span class=\"hljs-comment\">// initial value</span>\n    <span class=\"hljs-keyword\">try</span> {\n        foobar = <span class=\"hljs-string\">\"Hello World!\"</span>; <span class=\"hljs-comment\">// new value</span>\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"[no error]\"</span>);\n    } <span class=\"hljs-keyword\">catch</span>(error) {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"ERROR: \"</span> + error.message);\n    }\n    <span class=\"hljs-built_in\">console</span>.log(foobar, <span class=\"hljs-built_in\">window</span>.foobar);\n})();</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif15\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<h2>𝗪𝗵𝗮𝘁 𝗜𝘀 𝗧𝗵𝗲 \"𝗡𝗲𝗮𝗿𝗲𝘀𝘁 𝗕𝗹𝗼𝗰𝗸\"</h2>\n<p>The \"nearest block\" is the nearest \"function,\" (including asynchronous functions, generator functions, and asynchronous generator functions). However, interestingly, a <code>function functionName() {}</code> behaves like a <code>var functionName = function() {}</code> when in a non-closure block to items outside said closure. Observe.</p>\n<ul>\n<li>Normal <code>var add=function(){}</code></li>\n</ul>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-comment\">// typeof will simply return \"undefined\" if the variable does not exist</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> add !== <span class=\"hljs-string\">\"undefined\"</span>) {\n    add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// just to prove it</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Not a block\"</span>);\n  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(add===<span class=\"hljs-literal\">undefined</span>){ <span class=\"hljs-comment\">// this throws an exception if add doesn't exist</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Behaves like var add=function(a,b){return a+b}'</span>);\n  }\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Is a block\"</span>);\n}\n<span class=\"hljs-keyword\">var</span> add=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>)</span>{<span class=\"hljs-keyword\">return</span> a + b}</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif16\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<ul>\n<li>Normal <code>function add(){}</code></li>\n</ul>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-comment\">// typeof will simply return \"undefined\" if the variable does not exist</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> add !== <span class=\"hljs-string\">\"undefined\"</span>) {\n    add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// just to prove it</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Not a block\"</span>);\n  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(add===<span class=\"hljs-literal\">undefined</span>){ <span class=\"hljs-comment\">// this throws an exception if add doesn't exist</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Behaves like var add=function(a,b){return a+b}'</span>)\n  }\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Is a block\"</span>);\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>{\n  <span class=\"hljs-keyword\">return</span> a + b;\n}</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif17\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<ul>\n<li>Function</li>\n</ul>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-comment\">// typeof will simply return \"undefined\" if the variable does not exist</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> add !== <span class=\"hljs-string\">\"undefined\"</span>) {\n    add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// just to prove it</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Not a block\"</span>);\n  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(add===<span class=\"hljs-literal\">undefined</span>){ <span class=\"hljs-comment\">// this throws an exception if add doesn't exist</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Behaves like var add=function(a,b){return a+b}'</span>)\n  }\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Is a block\"</span>);\n}\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>{\n      <span class=\"hljs-keyword\">return</span> a + b;\n    }\n})();</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif18\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<ul>\n<li>Statement (such as <code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, <code>try</code>/<code>catch</code>/<code>finally</code>, <code>switch</code>, <code>do</code>/<code>while</code>, <code>with</code>)</li>\n</ul>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-comment\">// typeof will simply return \"undefined\" if the variable does not exist</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> add !== <span class=\"hljs-string\">\"undefined\"</span>) {\n    add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// just to prove it</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Not a block\"</span>);\n  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(add===<span class=\"hljs-literal\">undefined</span>){ <span class=\"hljs-comment\">// this throws an exception if add doesn't exist</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Behaves like var add=function(a,b){return a+b}'</span>)\n  }\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Is a block\"</span>);\n}\n{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>{\n      <span class=\"hljs-keyword\">return</span> a + b;\n    }\n}</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif19\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<ul>\n<li>Arrow Function with <code>var add=function()</code></li>\n</ul>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-comment\">// typeof will simply return \"undefined\" if the variable does not exist</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> add !== <span class=\"hljs-string\">\"undefined\"</span>) {\n    add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// just to prove it</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Not a block\"</span>);\n  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(add===<span class=\"hljs-literal\">undefined</span>){ <span class=\"hljs-comment\">// this throws an exception if add doesn't exist</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Behaves like var add=function(a,b){return a+b}'</span>)\n  }\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Is a block\"</span>);\n}\n(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">var</span> add=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a, b</span>)</span>{\n      <span class=\"hljs-keyword\">return</span> a + b;\n    }\n})();</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif20\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<ul>\n<li>Arrow Function With <code>function add()</code></li>\n</ul>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">try</span> {\n  <span class=\"hljs-comment\">// typeof will simply return \"undefined\" if the variable does not exist</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> add !== <span class=\"hljs-string\">\"undefined\"</span>) {\n    add(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// just to prove it</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Not a block\"</span>);\n  }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(add===<span class=\"hljs-literal\">undefined</span>){ <span class=\"hljs-comment\">// this throws an exception if add doesn't exist</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Behaves like var add=function(a,b){return a+b}'</span>)\n  }\n} <span class=\"hljs-keyword\">catch</span>(e) {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Is a block\"</span>);\n}\n(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a, b</span>)</span>{\n      <span class=\"hljs-keyword\">return</span> a + b;\n    }\n})();</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif21\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "31"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In computer science terms, we talk about anonymous functions and named functions. I think the most important difference is that an anonymous function is not bound to a name, hence the name anonymous function. In JavaScript it is a first class object dynamically declared at runtime.</p>\n<p>For more information on anonymous functions and lambda calculus, Wikipedia is a good start: <a href=\"http://en.wikipedia.org/wiki/Anonymous_function\" rel=\"nofollow noreferrer\">Anonymous Functions</a>.</p>\n    </div>",
          "vote": "28"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I use the variable approach in my code for a very specific reason, the theory of which has been covered in an abstract way above, but an example might help some people like me, with limited JavaScript expertise.</p>\n\n<p>I have code that I need to run with 160 independently-designed brandings. Most of the code is in shared files, but branding-specific stuff is in a separate file, one for each branding.</p>\n\n<p>Some brandings require specific functions, and some do not. Sometimes I have to add new functions to do new branding-specific things. I am happy to change the shared coded, but I don't want to have to change all 160 sets of branding files.</p>\n\n<p>By using the variable syntax, I can declare the variable (a function pointer essentially) in the shared code and either assign a trivial stub function, or set to null.</p>\n\n<p>The one or two brandings that need a specific implementation of the function can then define their version of the function and assign this to the variable if they want, and the rest do nothing. I can test for a null function before I execute it in the shared code.</p>\n\n<p>From people's comments above, I gather it may be possible to redefine a static function too, but I think the variable solution is nice and clear.</p>\n    </div>",
          "vote": "27"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://stackoverflow.com/a/336868/2730064\">Greg's Answer</a> is good enough, but I still would like to add something to it that I learned just now watching <a href=\"https://en.wikipedia.org/wiki/Douglas_Crockford\" rel=\"noreferrer\">Douglas Crockford's</a> videos.</p>\n\n<p><strong>Function expression:</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n\n<p><strong>Function statement:</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n\n<p>The function statement is just a shorthand for <code>var</code> statement with a <code>function</code> value.</p>\n\n<p>So</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n\n<p>expands to</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n\n<p>Which expands further to:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-literal\">undefined</span>;\nfoo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{};\n</code></pre>\n\n<p>And they are both hoisted to the top of the code.</p>\n\n<p><img src=\"https://i.stack.imgur.com/6TVZL.jpg\" alt=\"Screenshot from video\"></p>\n    </div>",
          "vote": "27"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://stackoverflow.com/users/26394/eugene-lazutkin\">@EugeneLazutkin</a> gives an example where he <a href=\"https://stackoverflow.com/a/338053/\">names an assigned function to be able to use <code>shortcut()</code></a> as an internal reference to itself. <a href=\"http://ejohn.org/\" rel=\"nofollow noreferrer\">John Resig</a> gives another example - <em>copying a recursive function assigned to another object</em> in his <a href=\"http://ejohn.org/apps/learn/\" rel=\"nofollow noreferrer\">Learning Advanced Javascript</a> tutorial. While assigning functions to properties isn't strictly the question here, I recommend actively trying the tutorial out - run the code by clicking the button in the upper right corner, and double click the code to edit to your liking.</p>\n\n<p>Examples from the tutorial: recursive calls in <code>yell()</code>:</p>\n\n<p><a href=\"http://ejohn.org/apps/learn/#13\" rel=\"nofollow noreferrer\">Tests fail when the original ninja object is removed.</a> (page 13)</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> ninja = { \n  <span class=\"hljs-attr\">yell</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">n</span>)</span>{ \n    <span class=\"hljs-keyword\">return</span> n &gt; <span class=\"hljs-number\">0</span> ? ninja.yell(n-<span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">\"a\"</span> : <span class=\"hljs-string\">\"hiy\"</span>; \n  } \n}; \nassert( ninja.yell(<span class=\"hljs-number\">4</span>) == <span class=\"hljs-string\">\"hiyaaaa\"</span>, <span class=\"hljs-string\">\"A single object isn't too bad, either.\"</span> ); \n\n<span class=\"hljs-keyword\">var</span> samurai = { <span class=\"hljs-attr\">yell</span>: ninja.yell }; \n<span class=\"hljs-keyword\">var</span> ninja = <span class=\"hljs-literal\">null</span>; \n\n<span class=\"hljs-keyword\">try</span> { \n  samurai.yell(<span class=\"hljs-number\">4</span>); \n} <span class=\"hljs-keyword\">catch</span>(e){ \n  assert( <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"Uh, this isn't good! Where'd ninja.yell go?\"</span> ); \n}\n</code></pre>\n\n<p><a href=\"http://ejohn.org/apps/learn/#14\" rel=\"nofollow noreferrer\">If you name the function that will be called recursively, the tests will pass.</a> (page 14)</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> ninja = { \n  <span class=\"hljs-attr\">yell</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">yell</span>(<span class=\"hljs-params\">n</span>)</span>{ \n    <span class=\"hljs-keyword\">return</span> n &gt; <span class=\"hljs-number\">0</span> ? yell(n-<span class=\"hljs-number\">1</span>) + <span class=\"hljs-string\">\"a\"</span> : <span class=\"hljs-string\">\"hiy\"</span>; \n  } \n}; \nassert( ninja.yell(<span class=\"hljs-number\">4</span>) == <span class=\"hljs-string\">\"hiyaaaa\"</span>, <span class=\"hljs-string\">\"Works as we would expect it to!\"</span> ); \n\n<span class=\"hljs-keyword\">var</span> samurai = { <span class=\"hljs-attr\">yell</span>: ninja.yell }; \n<span class=\"hljs-keyword\">var</span> ninja = {}; \nassert( samurai.yell(<span class=\"hljs-number\">4</span>) == <span class=\"hljs-string\">\"hiyaaaa\"</span>, <span class=\"hljs-string\">\"The method correctly calls itself.\"</span> );\n</code></pre>\n    </div>",
          "vote": "19"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another difference that is not mentioned in the other answers is that if you use the anonymous function</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> functionOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// Some code</span>\n};\n</code></pre>\n\n<p>and use that as a constructor as in</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> one = <span class=\"hljs-keyword\">new</span> functionOne();\n</code></pre>\n\n<p>then <code>one.constructor.name</code> will not be defined. <code>Function.name</code> is non-standard but is supported by Firefox, Chrome, other Webkit-derived browsers and IE 9+.</p>\n\n<p>With </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">functionTwo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// Some code</span>\n}\ntwo = <span class=\"hljs-keyword\">new</span> functionTwo();\n</code></pre>\n\n<p>it is possible to retrieve the name of the constructor as a string with <code>two.constructor.name</code>.</p>\n    </div>",
          "vote": "17"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The first one (function doSomething(x)) should be part of an object notation.</p>\n\n<p>The second one (<code>var doSomething = function(x){ alert(x);}</code>) is simply creating an anonymous function and assigning it to a variable, <code>doSomething</code>. So doSomething() will call the function.</p>\n\n<p>You may want to know what a <em>function declaration</em> and <em>function expression</em> is.</p>\n\n<p>A function declaration defines a named function variable without requiring variable assignment. Function declarations occur as standalone constructs and cannot be nested within non-function blocks.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n\n<blockquote>\n  <p>ECMA 5 (13.0) defines the syntax as <br>\n  function Identifier ( FormalParameterList<sub>opt</sub> ) { FunctionBody }</p>\n</blockquote>\n\n<p>In above condition the function name is visible within its scope and the scope of its parent (otherwise it would be unreachable).</p>\n\n<p>And in a function expression</p>\n\n<p>A function expression defines a function as a part of a larger expression syntax (typically a variable assignment ). Functions defined via functions expressions can be named or anonymous. Function expressions should not start with “function”.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-comment\">// Anonymous function expression</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span>;\n}\n\n<span class=\"hljs-comment\">// Named function expression</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">3</span>;\n}\n\n<span class=\"hljs-comment\">// Self-invoking function expression</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    alert(<span class=\"hljs-string\">\"hello!\"</span>);\n})();\n</code></pre>\n\n<blockquote>\n  <p>ECMA 5 (13.0) defines the syntax as <br>\n  function Identifier<sub>opt</sub> ( FormalParameterList<sub>opt</sub> ) { FunctionBody }</p>\n</blockquote>\n    </div>",
          "vote": "16"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm listing out the differences below:</p>\n\n<ol>\n<li><p>A function declaration can be placed anywhere in the code. Even if it is invoked before the definition appears in code, it gets executed as function declaration is committed to memory or in a way it is hoisted up, before any other code in the page starts execution.</p>\n\n<p>Take a look at the function below:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> foo();\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n    }\n}\nalert(outerFunction()); <span class=\"hljs-comment\">// Displays 2</span>\n</code></pre>\n\n<p>This is because, during execution, it looks like:-</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-comment\">// The first function declaration is moved to top</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-comment\">// The second function declaration is moved to top</span>\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> foo();\n}\nalert(outerFunction()); <span class=\"hljs-comment\">//So executing from top to bottom,</span>\n                        <span class=\"hljs-comment\">//the last foo() returns 2 which gets displayed</span>\n</code></pre>\n\n<p>A function expression, if not defined before calling it, will result in an error. Also, here the function definition itself is not moved to the top or committed to memory like in the function declarations. But the variable to which we assign the function gets hoisted up and <strong>undefined</strong> gets assigned to it.</p>\n\n<p>Same function using function expressions:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> foo();\n    <span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n    }\n}\nalert(outerFunction()); <span class=\"hljs-comment\">// Displays 1</span>\n</code></pre>\n\n<p>This is because during execution, it looks like:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">outerFunction</span>(<span class=\"hljs-params\"></span>) </span>{\n   <span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-literal\">undefined</span>;\n   <span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-literal\">undefined</span>;\n\n   foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n   };\n   <span class=\"hljs-keyword\">return</span> foo ();\n   foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{   <span class=\"hljs-comment\">// This function expression is not reachable</span>\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n   };\n}\nalert(outerFunction()); <span class=\"hljs-comment\">// Displays 1</span>\n</code></pre></li>\n<li><p>It is not safe to write function declarations in non-function blocks like <strong>if</strong> because they won't be accessible.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> (test) {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">x</span>(<span class=\"hljs-params\"></span>) </span>{ doSomething(); }\n}\n</code></pre></li>\n<li><p>Named function expression like the one below, may not work in Internet&nbsp;Explorer browsers prior to version 9.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> today = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">today</span>(<span class=\"hljs-params\"></span>) </span>{<span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>()}\n</code></pre></li>\n</ol>\n    </div>",
          "vote": "16"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you would use those functions to create objects, you would get:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> objectOne = <span class=\"hljs-keyword\">new</span> functionOne();\n<span class=\"hljs-built_in\">console</span>.log(objectOne.__proto__); <span class=\"hljs-comment\">// prints \"Object {}\" because constructor is an anonymous function</span>\n\n<span class=\"hljs-keyword\">var</span> objectTwo = <span class=\"hljs-keyword\">new</span> functionTwo();\n<span class=\"hljs-built_in\">console</span>.log(objectTwo.__proto__); <span class=\"hljs-comment\">// prints \"functionTwo {}\" because constructor is a named function</span>\n</code></pre>\n    </div>",
          "vote": "15"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In light of the \"named functions show up in stack traces\" argument, modern JavaScript engines are actually quite capable of representing anonymous functions.</p>\n\n<p>As of this writing, V8, SpiderMonkey, Chakra and Nitro always refer to named functions by their names. They almost always refer to an anonymous function by its identifier if it has one.</p>\n\n<p>SpiderMonkey can figure out the name of an anonymous function returned from another function. The rest can't.</p>\n\n<p>If you really, really wanted your iterator and success callbacks to show up in the trace, you could name those too...</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>[].forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">iterator</span>(<span class=\"hljs-params\"></span>) </span>{});\n</code></pre>\n\n<p>But for the most part it's not worth stressing over.</p>\n\n<h2>Harness (<a href=\"http://jsfiddle.net/us9dg6y8/\">Fiddle</a>)</h2>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();\n},\n    b = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">b</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();\n    },\n    c = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">d</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();\n    },\n    e = {\n        <span class=\"hljs-attr\">f</span>: a,\n        <span class=\"hljs-attr\">g</span>: b,\n        <span class=\"hljs-attr\">h</span>: c,\n        <span class=\"hljs-attr\">i</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();\n        },\n        <span class=\"hljs-attr\">j</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">j</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();\n        },\n        <span class=\"hljs-attr\">k</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">l</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();\n        }\n    },\n    m = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();\n        };\n    }()),\n    n = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">n</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();\n        };\n    }()),\n    o = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">p</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>();\n        };\n    }());\n\n<span class=\"hljs-built_in\">console</span>.log([a, b, c].concat(<span class=\"hljs-built_in\">Object</span>.keys(e).reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">values, key</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> values.concat(e[key]);\n}, [])).concat([m, n, o]).reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">logs, func</span>) </span>{\n\n    <span class=\"hljs-keyword\">try</span> {\n        func();\n    } <span class=\"hljs-keyword\">catch</span> (error) {\n        <span class=\"hljs-keyword\">return</span> logs.concat(<span class=\"hljs-string\">'func.name: '</span> + func.name + <span class=\"hljs-string\">'\\n'</span> +\n                           <span class=\"hljs-string\">'Trace:\\n'</span> +\n                           error.stack);\n        <span class=\"hljs-comment\">// Need to manually log the error object in Nitro.</span>\n    }\n\n}, []).join(<span class=\"hljs-string\">'\\n\\n'</span>));\n</code></pre>\n\n<h2>V8</h2>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>func.name: \nTrace:\n<span class=\"hljs-built_in\">Error</span>\n    at a (http:<span class=\"hljs-comment\">//localhost:8000/test.js:4:11)</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27</span>\n\nfunc.name: b\n<span class=\"hljs-attr\">Trace</span>:\n<span class=\"hljs-built_in\">Error</span>\n    at b (http:<span class=\"hljs-comment\">//localhost:8000/test.js:7:15)</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27</span>\n\nfunc.name: d\n<span class=\"hljs-attr\">Trace</span>:\n<span class=\"hljs-built_in\">Error</span>\n    at d (http:<span class=\"hljs-comment\">//localhost:8000/test.js:10:15)</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27</span>\n\nfunc.name: \nTrace:\n<span class=\"hljs-built_in\">Error</span>\n    at a (http:<span class=\"hljs-comment\">//localhost:8000/test.js:4:11)</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27</span>\n\nfunc.name: b\n<span class=\"hljs-attr\">Trace</span>:\n<span class=\"hljs-built_in\">Error</span>\n    at b (http:<span class=\"hljs-comment\">//localhost:8000/test.js:7:15)</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27</span>\n\nfunc.name: d\n<span class=\"hljs-attr\">Trace</span>:\n<span class=\"hljs-built_in\">Error</span>\n    at d (http:<span class=\"hljs-comment\">//localhost:8000/test.js:10:15)</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27</span>\n\nfunc.name: \nTrace:\n<span class=\"hljs-built_in\">Error</span>\n    at e.i (http:<span class=\"hljs-comment\">//localhost:8000/test.js:17:19)</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27</span>\n\nfunc.name: j\n<span class=\"hljs-attr\">Trace</span>:\n<span class=\"hljs-built_in\">Error</span>\n    at j (http:<span class=\"hljs-comment\">//localhost:8000/test.js:20:19)</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27</span>\n\nfunc.name: l\n<span class=\"hljs-attr\">Trace</span>:\n<span class=\"hljs-built_in\">Error</span>\n    at l (http:<span class=\"hljs-comment\">//localhost:8000/test.js:23:19)</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27</span>\n\nfunc.name: \nTrace:\n<span class=\"hljs-built_in\">Error</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:28:19</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27</span>\n\nfunc.name: n\n<span class=\"hljs-attr\">Trace</span>:\n<span class=\"hljs-built_in\">Error</span>\n    at n (http:<span class=\"hljs-comment\">//localhost:8000/test.js:33:19)</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27</span>\n\nfunc.name: p\n<span class=\"hljs-attr\">Trace</span>:\n<span class=\"hljs-built_in\">Error</span>\n    at p (http:<span class=\"hljs-comment\">//localhost:8000/test.js:38:19)</span>\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n    at <span class=\"hljs-built_in\">Array</span>.reduce (native)\n    at http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:27 test.js:42</span>\n</code></pre>\n\n<h2>SpiderMonkey</h2>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>func.name: \nTrace:\na@http:<span class=\"hljs-comment\">//localhost:8000/test.js:4:5</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n\n\nfunc.name: b\n<span class=\"hljs-attr\">Trace</span>:\nb@http:<span class=\"hljs-comment\">//localhost:8000/test.js:7:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n\n\nfunc.name: d\n<span class=\"hljs-attr\">Trace</span>:\nd@http:<span class=\"hljs-comment\">//localhost:8000/test.js:10:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n\n\nfunc.name: \nTrace:\na@http:<span class=\"hljs-comment\">//localhost:8000/test.js:4:5</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n\n\nfunc.name: b\n<span class=\"hljs-attr\">Trace</span>:\nb@http:<span class=\"hljs-comment\">//localhost:8000/test.js:7:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n\n\nfunc.name: d\n<span class=\"hljs-attr\">Trace</span>:\nd@http:<span class=\"hljs-comment\">//localhost:8000/test.js:10:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n\n\nfunc.name: \nTrace:\ne.i@http:<span class=\"hljs-comment\">//localhost:8000/test.js:17:13</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n\n\nfunc.name: j\n<span class=\"hljs-attr\">Trace</span>:\nj@http:<span class=\"hljs-comment\">//localhost:8000/test.js:20:13</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n\n\nfunc.name: l\n<span class=\"hljs-attr\">Trace</span>:\nl@http:<span class=\"hljs-comment\">//localhost:8000/test.js:23:13</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n\n\nfunc.name: \nTrace:\nm&lt;<span class=\"hljs-regexp\">/&lt;@http:/</span><span class=\"hljs-regexp\">/localhost:8000/</span>test.js:<span class=\"hljs-number\">28</span>:<span class=\"hljs-number\">13</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n\n\nfunc.name: n\n<span class=\"hljs-attr\">Trace</span>:\nn@http:<span class=\"hljs-comment\">//localhost:8000/test.js:33:13</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n\n\nfunc.name: p\n<span class=\"hljs-attr\">Trace</span>:\np@http:<span class=\"hljs-comment\">//localhost:8000/test.js:38:13</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9</span>\n@http:<span class=\"hljs-comment\">//localhost:8000/test.js:54:1</span>\n</code></pre>\n\n<h2>Chakra</h2>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>func.name: <span class=\"hljs-literal\">undefined</span>\n<span class=\"hljs-attr\">Trace</span>:\n<span class=\"hljs-built_in\">Error</span>\n   at a (http:<span class=\"hljs-comment\">//localhost:8000/test.js:4:5)</span>\n   at Anonymous <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n\n\nfunc.name: <span class=\"hljs-literal\">undefined</span>\nTrace:\n<span class=\"hljs-built_in\">Error</span>\n   at b (http:<span class=\"hljs-comment\">//localhost:8000/test.js:7:9)</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n\n\nfunc.name: <span class=\"hljs-literal\">undefined</span>\nTrace:\n<span class=\"hljs-built_in\">Error</span>\n   at d (http:<span class=\"hljs-comment\">//localhost:8000/test.js:10:9)</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n\n\nfunc.name: <span class=\"hljs-literal\">undefined</span>\nTrace:\n<span class=\"hljs-built_in\">Error</span>\n   at a (http:<span class=\"hljs-comment\">//localhost:8000/test.js:4:5)</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n\n\nfunc.name: <span class=\"hljs-literal\">undefined</span>\nTrace:\n<span class=\"hljs-built_in\">Error</span>\n   at b (http:<span class=\"hljs-comment\">//localhost:8000/test.js:7:9)</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n\n\nfunc.name: <span class=\"hljs-literal\">undefined</span>\nTrace:\n<span class=\"hljs-built_in\">Error</span>\n   at d (http:<span class=\"hljs-comment\">//localhost:8000/test.js:10:9)</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n\n\nfunc.name: <span class=\"hljs-literal\">undefined</span>\nTrace:\n<span class=\"hljs-built_in\">Error</span>\n   at e.i (http:<span class=\"hljs-comment\">//localhost:8000/test.js:17:13)</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n\n\nfunc.name: <span class=\"hljs-literal\">undefined</span>\nTrace:\n<span class=\"hljs-built_in\">Error</span>\n   at j (http:<span class=\"hljs-comment\">//localhost:8000/test.js:20:13)</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n\n\nfunc.name: <span class=\"hljs-literal\">undefined</span>\nTrace:\n<span class=\"hljs-built_in\">Error</span>\n   at l (http:<span class=\"hljs-comment\">//localhost:8000/test.js:23:13)</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n\n\nfunc.name: <span class=\"hljs-literal\">undefined</span>\nTrace:\n<span class=\"hljs-built_in\">Error</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:28:13)</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n\n\nfunc.name: <span class=\"hljs-literal\">undefined</span>\nTrace:\n<span class=\"hljs-built_in\">Error</span>\n   at n (http:<span class=\"hljs-comment\">//localhost:8000/test.js:33:13)</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n\n\nfunc.name: <span class=\"hljs-literal\">undefined</span>\nTrace:\n<span class=\"hljs-built_in\">Error</span>\n   at p (http:<span class=\"hljs-comment\">//localhost:8000/test.js:38:13)</span>\n   at Anonymous <span class=\"hljs-keyword\">function</span> (http:<span class=\"hljs-comment\">//localhost:8000/test.js:47:9)</span>\n   at Global code (http:<span class=\"hljs-comment\">//localhost:8000/test.js:42:1)</span>\n</span></span></code></pre>\n\n<h2>Nitro</h2>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>func.name: \nTrace:\na@http:<span class=\"hljs-comment\">//localhost:8000/test.js:4:22</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n\nfunc.name: b\n<span class=\"hljs-attr\">Trace</span>:\nb@http:<span class=\"hljs-comment\">//localhost:8000/test.js:7:26</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n\nfunc.name: d\n<span class=\"hljs-attr\">Trace</span>:\nd@http:<span class=\"hljs-comment\">//localhost:8000/test.js:10:26</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n\nfunc.name: \nTrace:\na@http:<span class=\"hljs-comment\">//localhost:8000/test.js:4:22</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n\nfunc.name: b\n<span class=\"hljs-attr\">Trace</span>:\nb@http:<span class=\"hljs-comment\">//localhost:8000/test.js:7:26</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n\nfunc.name: d\n<span class=\"hljs-attr\">Trace</span>:\nd@http:<span class=\"hljs-comment\">//localhost:8000/test.js:10:26</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n\nfunc.name: \nTrace:\ni@http:<span class=\"hljs-comment\">//localhost:8000/test.js:17:30</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n\nfunc.name: j\n<span class=\"hljs-attr\">Trace</span>:\nj@http:<span class=\"hljs-comment\">//localhost:8000/test.js:20:30</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n\nfunc.name: l\n<span class=\"hljs-attr\">Trace</span>:\nl@http:<span class=\"hljs-comment\">//localhost:8000/test.js:23:30</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n\nfunc.name: \nTrace:\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:28:30</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n\nfunc.name: n\n<span class=\"hljs-attr\">Trace</span>:\nn@http:<span class=\"hljs-comment\">//localhost:8000/test.js:33:30</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n\nfunc.name: p\n<span class=\"hljs-attr\">Trace</span>:\np@http:<span class=\"hljs-comment\">//localhost:8000/test.js:38:30</span>\nhttp:<span class=\"hljs-comment\">//localhost:8000/test.js:47:13</span>\nreduce@[native code]\n<span class=\"hljs-built_in\">global</span> code@http:<span class=\"hljs-comment\">//localhost:8000/test.js:44:33</span>\n</code></pre>\n    </div>",
          "vote": "12"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In JavaScript there are two ways to create functions:</p>\n\n<ol>\n<li><p>Function declaration:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fn</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello\"</span>);\n}\nfn();\n</code></pre>\n\n<p>This is very basic, self-explanatory, used in many languages and standard across C family of languages. We declared a function defined it and executed it by calling it.</p>\n\n<p>What you should be knowing is that functions are actually objects in JavaScript; internally we have created an object for above function and given it a name called fn or the reference to the object is stored in fn. Functions are objects in JavaScript; an instance of function is actually an object instance.</p></li>\n<li><p>Function expression:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> fn=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Hello\"</span>);\n}\nfn();\n</code></pre>\n\n<p>JavaScript has first-class functions, that is, create a function and assign it to a variable just like you create a string or number and assign it to a variable. Here, the fn variable is assigned to a function. The reason for this concept is functions are objects in JavaScript; fn is pointing to the object instance of the above function. We have initialized a function and assigned it to a variable. It's not executing the function and assigning the result.</p></li>\n</ol>\n\n<p>Reference: <em><a href=\"http://jkoder.com/javascript-function-declaration-syntax-var-fn-function-vs-function-fn/\" rel=\"noreferrer\">JavaScript function declaration syntax: var fn = function() {} vs function fn() {}</a></em></p>\n    </div>",
          "vote": "12"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Both are different ways of defining a function. The difference is how the browser interprets and loads them into an execution context. </p>\n\n<p>The first case is of function expressions which loads only when the interpreter reaches that line of code. So if you do it like the following, you will get an error that the <strong>functionOne is not a function</strong>.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>functionOne();\n<span class=\"hljs-keyword\">var</span> functionOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// Some code</span>\n};\n</code></pre>\n\n<p>The reason is that on the first line no value is assigned to functionOne, and hence it is undefined. We are trying to call it as a function, and hence we are getting an error.</p>\n\n<p>On the second line we are assigning the reference of an anonymous function to functionOne.</p>\n\n<p>The second case is of function declarations that loads before any code is executed. So if you do like the following you won't get any error as the declaration loads before code execution.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>functionOne();\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">functionOne</span>(<span class=\"hljs-params\"></span>) </span>{\n   <span class=\"hljs-comment\">// Some code</span>\n}\n</code></pre>\n    </div>",
          "vote": "11"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong><em>About performance:</em></strong></p>\n\n<p>New versions of <code>V8</code> introduced several under-the-hood optimizations and so did <code>SpiderMonkey</code>.</p>\n\n<p>There is almost no difference now between expression and declaration. <br>Function expression <a href=\"https://jsperf.com/fdeclaration-vs-fexpression\" rel=\"noreferrer\">appears to be faster</a> now.</p>\n\n<p><strong><em>Chrome 62.0.3202</em></strong>\n<a href=\"https://i.stack.imgur.com/lW91X.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/lW91X.png\" alt=\"Chrome test\"></a></p>\n\n<p><strong><em>FireFox 55</em></strong>\n<a href=\"https://i.stack.imgur.com/po3gG.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/po3gG.png\" alt=\"Firefox test\"></a></p>\n\n<p><strong><em>Chrome Canary 63.0.3225</em></strong>\n<a href=\"https://i.stack.imgur.com/lcPvN.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/lcPvN.png\" alt=\"Chrome Canary test\"></a></p>\n\n<p><br></p>\n\n<blockquote>\n  <p><code>Anonymous</code> function expressions <a href=\"https://jsperf.com/named-vs-anonymous-expressions\" rel=\"noreferrer\">appear to have better performance</a>\n  against <code>Named</code> function expression.</p>\n</blockquote>\n\n<p><br></p>\n\n<p><strong><em>Firefox</em></strong>\n<a href=\"https://i.stack.imgur.com/npaAl.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/npaAl.png\" alt=\"Firefox named_anonymous\"></a>\n<strong><em>Chrome Canary</em></strong>\n<a href=\"https://i.stack.imgur.com/6YkeY.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/6YkeY.png\" alt=\"Chrome canary named_anonymous\"></a>\n<strong><em>Chrome</em></strong>\n<a href=\"https://i.stack.imgur.com/x9H8J.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/x9H8J.png\" alt=\"Chrome named_anonymous\"></a></p>\n    </div>",
          "vote": "11"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>They are pretty similar with some small differences, first one is a variable which assigned to an anonymous function (Function Declaration) and second one is the normal way to create a function in JavaScript(Anonymous function Declaration), both has usage, cons and pros:</p>\n\n<p><strong>1. Function Expression</strong><br></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> functionOne = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// Some code</span>\n};\n</code></pre>\n\n<blockquote>\n  <p>A Function Expression defines a function as a part of a larger\n  expression syntax (typically a variable assignment ). Functions\n  defined via Functions Expressions can be named or anonymous. Function\n  Expressions must not start with “function” (hence the parentheses\n  around the self invoking example below).</p>\n</blockquote>\n\n<p>Assign a variable to a function, means no Hoisting, as we know functions in JavaScript can Hoist, means they can be called before they get declared, while variables need to be declared before getting access to them, so means in this case we can not access the function before where it's declared, also it could be a way that you write your functions, for the functions which return another function, this kind of declaration could make sense, also in ECMA6 &amp; above you can assign this to an arrow function which can be used to call anonymous functions, also this way of declaring is a better way to create Constructor functions in JavaScript.</p>\n\n<p><strong>2. Function Declaration</strong><br></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">functionTwo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">// Some code</span>\n}\n</code></pre>\n\n<blockquote>\n  <p>A Function Declaration defines a named function variable without\n  requiring variable assignment. Function Declarations occur as\n  standalone constructs and cannot be nested within non-function blocks.\n  It’s helpful to think of them as siblings of Variable Declarations.\n  Just as Variable Declarations must start with “var”, Function\n  Declarations must begin with “function”.</p>\n</blockquote>\n\n<p>This is the normal way of calling a function in JavaScript, this function can be called before you even declare it as in JavaScript all functions get Hoisted, but if you have 'use strict' this won't Hoist as expected, it's a good way to call all normal functions which are not big in lines and neither are a  constructor function.</p>\n\n<p>Also, if you need more info about how hoisting works in JavaScript, visit the link below:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Glossary/Hoisting</a></p>\n    </div>",
          "vote": "10"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is just two possible ways of declaring functions, and in the second way, you can use the function before declaration.</p>\n    </div>",
          "vote": "8"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>new Function()</code> can be used to pass the function's body in a string. And hence this can be used to create dynamic functions. Also passing the script without executing the script.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> func = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">\"x\"</span>, <span class=\"hljs-string\">\"y\"</span>, <span class=\"hljs-string\">\"return x*y;\"</span>);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">secondFunction</span>(<span class=\"hljs-params\"></span>)</span>{\n   <span class=\"hljs-keyword\">var</span> result;\n   result = func(<span class=\"hljs-number\">10</span>,<span class=\"hljs-number\">20</span>);\n   <span class=\"hljs-built_in\">console</span>.log ( result );\n}\n\nsecondFunction()\n</code></pre>\n    </div>",
          "vote": "7"
        }
      ]
    },
    {
      "question": "Why Is Subtracting These Two Times (in 1927) Giving A Strange Result?",
      "url": "https://stackoverflow.com/questions/6841333/why-is-subtracting-these-two-times-in-1927-giving-a-strange-result",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>If I run the following program, which parses two date strings referencing times 1 second apart and compares them:</p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ParseException </span>{\n    SimpleDateFormat sf = <span class=\"hljs-keyword\">new</span> SimpleDateFormat(<span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>);  \n    String str3 = <span class=\"hljs-string\">\"1927-12-31 23:54:07\"</span>;  \n    String str4 = <span class=\"hljs-string\">\"1927-12-31 23:54:08\"</span>;  \n    Date sDt3 = sf.parse(str3);  \n    Date sDt4 = sf.parse(str4);  \n    <span class=\"hljs-keyword\">long</span> ld3 = sDt3.getTime() /<span class=\"hljs-number\">1000</span>;  \n    <span class=\"hljs-keyword\">long</span> ld4 = sDt4.getTime() /<span class=\"hljs-number\">1000</span>;\n    System.out.println(ld4-ld3);\n}\n</code></pre>\n<p><strong>The output is:</strong></p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-number\">353</span>\n</code></pre>\n<p>Why is <code>ld4-ld3</code>, not <code>1</code> (as I would expect from the one-second difference in the times), but <code>353</code>?</p>\n<p>If I change the dates to times 1 second later:</p>\n<pre class=\"lang-java s-code-block hljs\"><code>String str3 = <span class=\"hljs-string\">\"1927-12-31 23:54:08\"</span>;  \nString str4 = <span class=\"hljs-string\">\"1927-12-31 23:54:09\"</span>;  \n</code></pre>\n<p>Then <code>ld4-ld3</code> will be <code>1</code>.</p>\n<hr>\n<p><strong>Java version:</strong></p>\n<pre class=\"lang-none s-code-block\"><code>java version \"1.6.0_22\"\nJava(TM) SE Runtime Environment (build 1.6.0_22-b04)\nDynamic Code Evolution Client VM (build 0.2-b02-internal, 19.0-b04-internal, mixed mode)\n</code></pre>\n<pre class=\"lang-java s-code-block hljs\"><code>Timezone(`TimeZone.getDefault()`):\n\nsun.util.calendar.ZoneInfo[id=<span class=\"hljs-string\">\"Asia/Shanghai\"</span>,\noffset=<span class=\"hljs-number\">28800000</span>,dstSavings=<span class=\"hljs-number\">0</span>,\nuseDaylight=<span class=\"hljs-keyword\">false</span>,\ntransitions=<span class=\"hljs-number\">19</span>,\nlastRule=<span class=\"hljs-keyword\">null</span>]\n\nLocale(Locale.getDefault()): zh_CN\n</code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's a time zone change on December 31st in Shanghai.</p>\n\n<p>See <a href=\"http://www.timeanddate.com/worldclock/clockchange.html?n=237&amp;year=1927\" rel=\"noreferrer\">this page</a> for details of 1927 in Shanghai. Basically at midnight at the end of 1927, the clocks went back 5 minutes and 52 seconds. So \"1927-12-31 23:54:08\" actually happened twice, and it looks like Java is parsing it as the <em>later</em> possible instant for that local date/time - hence the difference.</p>\n\n<p>Just another episode in the often weird and wonderful world of time zones.</p>\n\n<p><strong>EDIT:</strong> Stop press! History changes...</p>\n\n<p>The original question would no longer demonstrate quite the same behaviour, if rebuilt with version 2013a of <a href=\"https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68\" rel=\"noreferrer\">TZDB</a>. In 2013a, the result would be 358 seconds, with a transition time of 23:54:03 instead of 23:54:08.</p>\n\n<p>I only noticed this because I'm collecting questions like this in Noda Time, in the form of <a href=\"https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68\" rel=\"noreferrer\">unit tests</a>... The test has now been changed, but it just goes to show - not even historical data is safe.</p>\n\n<p><strong>EDIT:</strong> History has changed again...</p>\n\n<p>In TZDB 2014f, the time of the change has moved to 1900-12-31, and it's now a mere 343 second change (so the time between <code>t</code> and <code>t+1</code> is 344 seconds, if you see what I mean).</p>\n\n<p><strong>EDIT:</strong> To answer a question around a transition at 1900... it looks like the Java timezone implementation treats <em>all</em> time zones as simply being in their standard time for any instant before the start of 1900 UTC:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">import</span> java.util.TimeZone;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception </span>{\n        <span class=\"hljs-keyword\">long</span> startOf1900Utc = -<span class=\"hljs-number\">2208988800000L</span>;\n        <span class=\"hljs-keyword\">for</span> (String id : TimeZone.getAvailableIDs()) {\n            TimeZone zone = TimeZone.getTimeZone(id);\n            <span class=\"hljs-keyword\">if</span> (zone.getRawOffset() != zone.getOffset(startOf1900Utc - <span class=\"hljs-number\">1</span>)) {\n                System.out.println(id);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The code above produces no output on my Windows machine. So any time zone which has any offset other than its standard one at the start of 1900 will count that as a transition. TZDB itself has some data going back earlier than that, and doesn't rely on any idea of a \"fixed\" standard time (which is what <code>getRawOffset</code> assumes to be a valid concept) so other libraries needn't introduce this artificial transition.</p>\n    </div>",
          "vote": "11327"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You've encountered a <a href=\"http://timeanddate.com/worldclock/clockchange.html?n=237&amp;year=1927\" rel=\"noreferrer\">local time discontinuity</a>:</p>\n\n<blockquote>\n  <p>When local standard time was about to reach Sunday, 1. January 1928,\n  00:00:00 clocks were turned backward 0:05:52 hours to Saturday, 31.\n  December 1927, 23:54:08 local standard time instead</p>\n</blockquote>\n\n<p>This is not particularly strange and has happened pretty much everywhere at one time or another as timezones were switched or changed due to political or administrative actions.</p>\n    </div>",
          "vote": "1663"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The moral of this strangeness is:</p>\n\n<ul>\n<li>Use dates and times in UTC wherever possible.</li>\n<li>If you can not display a date or time in UTC, always indicate the time-zone.</li>\n<li>If you can not require an input date/time in UTC, require an explicitly indicated time-zone.</li>\n</ul>\n    </div>",
          "vote": "701"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When incrementing time you should convert back to UTC and then add or subtract. Use the local time only for display.</p>\n\n<p>This way you will be able to walk through any periods where hours or minutes happen twice.</p>\n\n<p>If you converted to UTC, add each second, and convert to local time for display. You would go through 11:54:08 p.m. <a href=\"http://en.wikipedia.org/wiki/Local_mean_time\" rel=\"noreferrer\">LMT</a> - 11:59:59 p.m. LMT and then 11:54:08 p.m. <a href=\"http://en.wikipedia.org/wiki/Central_Time_Zone_%28North_America%29\" rel=\"noreferrer\">CST</a> - 11:59:59 p.m. CST.</p>\n    </div>",
          "vote": "383"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Instead of converting each date, you can use the following code: </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">long</span> difference = (sDt4.getTime() - sDt3.getTime()) / <span class=\"hljs-number\">1000</span>;\nSystem.out.println(difference);\n</code></pre>\n\n<p>And then see that the result is:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-number\">1</span>\n</code></pre>\n    </div>",
          "vote": "322"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'm sorry to say, but the time discontinuity has moved a bit in</p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_6_.28December_11.2C_2006.29\" rel=\"noreferrer\">JDK 6</a> two years ago, and in <a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_7_.28July_28.2C_2011.29\" rel=\"noreferrer\">JDK 7</a> just recently in <a href=\"https://en.wikipedia.org/wiki/Java_version_history#cite_note-131\" rel=\"noreferrer\">update 25</a>.</p>\n\n<p>Lesson to learn: avoid non-UTC times at all costs, except maybe for display.</p>\n    </div>",
          "vote": "239"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As explained by others, there's a time discontinuity there. There are two possible timezone offsets for <code>1927-12-31 23:54:08</code> at <code>Asia/Shanghai</code>, but only one offset for <code>1927-12-31 23:54:07</code>. So, depending on which offset is used, there's either a one second difference or a 5 minutes and 53 seconds difference.</p>\n\n<p>This slight shift of offsets, instead of the usual one-hour daylight savings (summer time) we are used to, obscures the problem a bit.</p>\n\n<p>Note that the 2013a update of the timezone database moved this discontinuity a few seconds earlier, but the effect would still be observable.</p>\n\n<p>The new <code>java.time</code> package on Java 8 let use see this more clearly, and provide tools to handle it. Given:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>DateTimeFormatterBuilder dtfb = <span class=\"hljs-keyword\">new</span> DateTimeFormatterBuilder();\ndtfb.append(DateTimeFormatter.ISO_LOCAL_DATE);\ndtfb.appendLiteral(<span class=\"hljs-string\">' '</span>);\ndtfb.append(DateTimeFormatter.ISO_LOCAL_TIME);\nDateTimeFormatter dtf = dtfb.toFormatter();\nZoneId shanghai = ZoneId.of(<span class=\"hljs-string\">\"Asia/Shanghai\"</span>);\n\nString str3 = <span class=\"hljs-string\">\"1927-12-31 23:54:07\"</span>;  \nString str4 = <span class=\"hljs-string\">\"1927-12-31 23:54:08\"</span>;  \n\nZonedDateTime zdt3 = LocalDateTime.parse(str3, dtf).atZone(shanghai);\nZonedDateTime zdt4 = LocalDateTime.parse(str4, dtf).atZone(shanghai);\n\nDuration durationAtEarlierOffset = Duration.between(zdt3.withEarlierOffsetAtOverlap(), zdt4.withEarlierOffsetAtOverlap());\n\nDuration durationAtLaterOffset = Duration.between(zdt3.withLaterOffsetAtOverlap(), zdt4.withLaterOffsetAtOverlap());\n</code></pre>\n\n<p>Then <code>durationAtEarlierOffset</code> will be one second, while <code>durationAtLaterOffset</code> will be five minutes and 53 seconds.</p>\n\n<p>Also, these two offsets are the same:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-comment\">// Both have offsets +08:05:52</span>\nZoneOffset zo3Earlier = zdt3.withEarlierOffsetAtOverlap().getOffset();\nZoneOffset zo3Later = zdt3.withLaterOffsetAtOverlap().getOffset();\n</code></pre>\n\n<p>But these two are different:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-comment\">// +08:05:52</span>\nZoneOffset zo4Earlier = zdt4.withEarlierOffsetAtOverlap().getOffset();\n\n<span class=\"hljs-comment\">// +08:00</span>\nZoneOffset zo4Later = zdt4.withLaterOffsetAtOverlap().getOffset();\n</code></pre>\n\n<p>You can see the same problem comparing <code>1927-12-31 23:59:59</code> with <code>1928-01-01 00:00:00</code>, though, in this case, it is the earlier offset that produces the longer divergence, and it is the earlier date that has two possible offsets.</p>\n\n<p>Another way to approach this is to check whether there's a transition going on. We can do this like this:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-comment\">// Null</span>\nZoneOffsetTransition zot3 = shanghai.getRules().getTransition(ld3.toLocalDateTime);\n\n<span class=\"hljs-comment\">// An overlap transition</span>\nZoneOffsetTransition zot4 = shanghai.getRules().getTransition(ld3.toLocalDateTime);\n</code></pre>\n\n<p>You can check whether the transition is an overlap where there's more than one valid offset for that date/time or a gap where that date/time is not valid for that zone id - by using the <code>isOverlap()</code> and <code>isGap()</code> methods on <code>zot4</code>.</p>\n\n<p>I hope this helps people handle this sort of issue once Java 8 becomes widely available, or to those using Java 7 who adopt the JSR 310 backport.</p>\n    </div>",
          "vote": "211"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>IMHO</code> the pervasive, <em>implicit</em> localization in Java is its single largest design flaw. It may be intended for user interfaces, but frankly, who really uses Java for user interfaces today except for some IDEs where you can basically ignore localization because programmers aren't exactly the target audience for it. You can fix it (especially on Linux servers) by:</p>\n<ul>\n<li>export <code>LC_ALL=C TZ=UTC</code></li>\n<li>set your system clock to UTC</li>\n<li>never use localized implementations unless absolutely necessary (ie for display only)</li>\n</ul>\n<p>To the <a href=\"https://www.jcp.org/\" rel=\"noreferrer\">Java Community Process</a> members I recommend:</p>\n<ul>\n<li>make localized methods, not the default, but require the user to explicitly request localization.</li>\n<li>use <code>UTF-8/UTC</code> as the <em>FIXED</em> default instead because that's simply the default today. There is no reason to do something else, except if you want to produce threads like this.</li>\n</ul>\n<p>I mean, come on, aren't global static variables an anti-OO pattern? Nothing else is those pervasive defaults given by some rudimentary environment variables.......</p>\n    </div>",
          "vote": "176"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As others said, it's a time change in 1927 in Shanghai.</p>\n<p>It was <code>23:54:07</code> in Shanghai, in the local standard time, but then after 5 minutes and 52 seconds, it turned to the next day at <code>00:00:00</code>, and then local standard time changed back to <code>23:54:08</code>. So, that's why the difference between the two times is 343 seconds, not 1 second, as you would have expected.</p>\n<p>The time can also mess up in other places like the US. The US has Daylight Saving Time. When the Daylight Saving Time starts the time goes forward 1 hour. But after a while, the Daylight Saving Time ends, and it goes backward 1 hour back to the standard time zone. So sometimes when comparing times in the US the difference is about <code>3600</code> seconds not 1 second.</p>\n<p>But there is something different about these two-time changes. The latter changes continuously and the former was just a change. It didn't change back or change again by the same amount.</p>\n<p><strong>It's better to use UTC unless if needed to use non-UTC time like in display.</strong></p>\n    </div>",
          "vote": "27"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To avoid that issue, when incrementing time you should convert back to UTC and then add or subtract.</p>\n<p>This way you will be able to walk through any periods where hours or minutes happen twice.</p>\n<p>If you converted to UTC, add each second, and convert to local time for display. You would go through 11:54:08 p.m. LMT - 11:59:59 p.m. LMT and then 11:54:08 p.m. CST - 11:59:59 p.m. CST.</p>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "Is Java “pass-by-reference” or “pass-by-value”?",
      "url": "https://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16 js-bounty-notification\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconClock\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M9 17c-4.36 0-8-3.64-8-8 0-4.36 3.64-8 8-8 4.36 0 8 3.64 8 8 0 4.36-3.64 8-8 8zm0-2c3.27 0 6-2.73 6-6s-2.73-6-6-6-6 2.73-6 6 2.73 6 6 6zM8 5h1.01L9 9.36l3.22 2.1-.6.93L8 10V5z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>The <a href=\"https://stackoverflow.com/help/bounty\">bounty</a> expires <span title=\"2021-04-28 13:53:27Z\">in 6 days</span></b>. Answers to this question are eligible for a <span class=\"s-badge__bounty d-inline px4 py2 ba bc-transparent bar-sm fs-caption va-middle\">+150</span> reputation bounty.\n                        <a href=\"/users/2893496/v010dya\">v010dya</a> wants to <b>reward an existing answer</b>:\n                            <blockquote>\n                                    <div>The most complete answer is invisible due to down-voting. I think that it should be brought to the front.</div>\n                            </blockquote>\n                    </div>\n                </div>\n            </div>\n        </div>\n</aside>\n\n    </div>\n\n<p>I always thought Java uses <strong>pass-by-reference</strong>.</p>\n<p>However, I've seen a couple of blog posts (for example, <a href=\"http://javadude.com/articles/passbyvalue.htm\" rel=\"noreferrer\">this blog</a>) that claim that it isn't (the blog post says that Java uses <strong>pass-by-value</strong>).</p>\n<p>I don't think I understand the distinction they're making.</p>\n<p>What is the explanation?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Java is always <strong>pass-by-value</strong>.<br>\nUnfortunately, we never handle an object at all, instead juggling object-handles called <em>references</em> <sub><sup>(which are passed by value of course)</sup></sub>.  The chosen terminology and semantics easily confuse many beginners.</p>\n<p>It goes like this:</p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    Dog aDog = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"Max\"</span>);\n    Dog oldDog = aDog;\n\n    <span class=\"hljs-comment\">// we pass the object to foo</span>\n    foo(aDog);\n    <span class=\"hljs-comment\">// aDog variable is still pointing to the \"Max\" dog when foo(...) returns</span>\n    aDog.getName().equals(<span class=\"hljs-string\">\"Max\"</span>); <span class=\"hljs-comment\">// true</span>\n    aDog.getName().equals(<span class=\"hljs-string\">\"Fifi\"</span>); <span class=\"hljs-comment\">// false</span>\n    aDog == oldDog; <span class=\"hljs-comment\">// true</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(Dog d)</span> </span>{\n    d.getName().equals(<span class=\"hljs-string\">\"Max\"</span>); <span class=\"hljs-comment\">// true</span>\n    <span class=\"hljs-comment\">// change d inside of foo() to point to a new Dog instance \"Fifi\"</span>\n    d = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"Fifi\"</span>);\n    d.getName().equals(<span class=\"hljs-string\">\"Fifi\"</span>); <span class=\"hljs-comment\">// true</span>\n}\n</code></pre>\n<p>In the example above <code>aDog.getName()</code> will still return <code>\"Max\"</code>. The value <code>aDog</code> within <code>main</code> is not changed in the function <code>foo</code> with the <code>Dog</code> <code>\"Fifi\"</code> as the object reference is passed by value. If it were passed by reference, then the <code>aDog.getName()</code> in <code>main</code> would return <code>\"Fifi\"</code> after the call to <code>foo</code>.</p>\n<p>Likewise:</p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    Dog aDog = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"Max\"</span>);\n    Dog oldDog = aDog;\n\n    foo(aDog);\n    <span class=\"hljs-comment\">// when foo(...) returns, the name of the dog has been changed to \"Fifi\"</span>\n    aDog.getName().equals(<span class=\"hljs-string\">\"Fifi\"</span>); <span class=\"hljs-comment\">// true</span>\n    <span class=\"hljs-comment\">// but it is still the same dog:</span>\n    aDog == oldDog; <span class=\"hljs-comment\">// true</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(Dog d)</span> </span>{\n    d.getName().equals(<span class=\"hljs-string\">\"Max\"</span>); <span class=\"hljs-comment\">// true</span>\n    <span class=\"hljs-comment\">// this changes the name of d to be \"Fifi\"</span>\n    d.setName(<span class=\"hljs-string\">\"Fifi\"</span>);\n}\n</code></pre>\n<p>In the above example, <code>Fifi</code> is the dog's name after call to <code>foo(aDog)</code> because the object's name was set inside of <code>foo(...)</code>. Any operations that <code>foo</code> performs on <code>d</code> are such that, for all practical purposes, they are performed on <code>aDog</code>, but it is <strong>not</strong> possible to change the value of the variable <code>aDog</code> itself.</p>\n    </div>",
          "vote": "6256"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I just noticed you referenced <a href=\"http://javadude.com/articles/passbyvalue.htm\" rel=\"noreferrer\">my article</a>.</p>\n\n<p>The Java Spec says that everything in Java is pass-by-value. There is no such thing as \"pass-by-reference\" in Java.</p>\n\n<p>The key to understanding this is that something like</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Dog myDog;\n</code></pre>\n\n<p>is <em>not</em> a Dog; it's actually a <em>pointer</em> to a Dog.</p>\n\n<p>What that means, is when you have</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Dog myDog = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"Rover\"</span>);\nfoo(myDog);\n</code></pre>\n\n<p>you're essentially passing the <em>address</em> of the created <code>Dog</code> object to the <code>foo</code> method.</p>\n\n<p>(I say essentially because Java pointers aren't direct addresses, but it's easiest to think of them that way)</p>\n\n<p>Suppose the <code>Dog</code> object resides at memory address 42. This means we pass 42 to the method.</p>\n\n<p>if the Method were defined as</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(Dog someDog)</span> </span>{\n    someDog.setName(<span class=\"hljs-string\">\"Max\"</span>);     <span class=\"hljs-comment\">// AAA</span>\n    someDog = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"Fifi\"</span>);  <span class=\"hljs-comment\">// BBB</span>\n    someDog.setName(<span class=\"hljs-string\">\"Rowlf\"</span>);   <span class=\"hljs-comment\">// CCC</span>\n}\n</code></pre>\n\n<p>let's look at what's happening.</p>\n\n<ul>\n<li>the parameter <code>someDog</code> is set to the value 42</li>\n<li>at line \"AAA\"\n\n<ul>\n<li><code>someDog</code> is followed to the <code>Dog</code> it points to (the <code>Dog</code> object at address 42)</li>\n<li>that <code>Dog</code> (the one at address 42) is asked to change his name to Max</li>\n</ul></li>\n<li>at line \"BBB\"\n\n<ul>\n<li>a new <code>Dog</code> is created. Let's say he's at address 74</li>\n<li>we assign the parameter <code>someDog</code> to 74 </li>\n</ul></li>\n<li>at line \"CCC\"\n\n<ul>\n<li>someDog is followed to the <code>Dog</code> it points to (the <code>Dog</code> object at address 74)</li>\n<li>that <code>Dog</code> (the one at address 74) is asked to change his name to Rowlf</li>\n</ul></li>\n<li>then, we return</li>\n</ul>\n\n<p>Now let's think about what happens outside the method:</p>\n\n<p><em>Did <code>myDog</code> change?</em></p>\n\n<p>There's the key.</p>\n\n<p>Keeping in mind that <code>myDog</code> is a <em>pointer</em>, and not an actual <code>Dog</code>, the answer is NO. <code>myDog</code> still has the value 42; it's still pointing to the original <code>Dog</code> (but note that because of line \"AAA\", its name is now \"Max\" - still the same Dog; <code>myDog</code>'s value has not changed.)</p>\n\n<p>It's perfectly valid to <em>follow</em> an address and change what's at the end of it; that does not change the variable, however.</p>\n\n<p>Java works exactly like C. You can assign a pointer, pass the pointer to a method, follow the pointer in the method and change the data that was pointed to. However, you cannot change where that pointer points.</p>\n\n<p>In C++, Ada, Pascal and other languages that support pass-by-reference, you can actually change the variable that was passed.</p>\n\n<p>If Java had pass-by-reference semantics, the <code>foo</code> method we defined above would have changed where <code>myDog</code> was pointing when it assigned <code>someDog</code> on line BBB.</p>\n\n<p>Think of reference parameters as being aliases for the variable passed in. When that alias is assigned, so is the variable that was passed in.</p>\n    </div>",
          "vote": "3268"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Java always passes arguments <em>by value</em>, NOT by reference.</p>\n<hr>\n<p>Let me explain this through an <a href=\"https://stackoverflow.com/a/9404727/597657\">example</a>:</p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Main</span> </span>{\n\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n          Foo f = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">\"f\"</span>);\n          changeReference(f); <span class=\"hljs-comment\">// It won't change the reference!</span>\n          modifyReference(f); <span class=\"hljs-comment\">// It will modify the object that the reference variable \"f\" refers to!</span>\n     }\n\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">changeReference</span><span class=\"hljs-params\">(Foo a)</span> </span>{\n          Foo b = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">\"b\"</span>);\n          a = b;\n     }\n\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">modifyReference</span><span class=\"hljs-params\">(Foo c)</span> </span>{\n          c.setAttribute(<span class=\"hljs-string\">\"c\"</span>);\n     }\n\n}\n</code></pre>\n<p>I will explain this in steps:</p>\n<ol>\n<li><p>Declaring a reference named <code>f</code> of type <code>Foo</code> and assign it a new object of type <code>Foo</code> with an attribute <code>\"f\"</code>.</p>\n<pre class=\"lang-java s-code-block hljs\"><code>Foo f = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">\"f\"</span>);\n</code></pre>\n<p><img src=\"https://i.stack.imgur.com/arXpP.png\" alt=\"enter image description here\"></p>\n</li>\n<li><p>From the method side, a reference of type <code>Foo</code> with a name <code>a</code> is declared and it's initially assigned <code>null</code>.</p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">changeReference</span><span class=\"hljs-params\">(Foo a)</span>\n</span></code></pre>\n<p><img src=\"https://i.stack.imgur.com/k2LBD.png\" alt=\"enter image description here\"></p>\n</li>\n<li><p>As you call the method <code>changeReference</code>, the reference <code>a</code> will be assigned the object which is passed as an argument.</p>\n<pre class=\"lang-java s-code-block hljs\"><code>changeReference(f);\n</code></pre>\n<p><img src=\"https://i.stack.imgur.com/1Ez74.png\" alt=\"enter image description here\"></p>\n</li>\n<li><p>Declaring a reference named <code>b</code> of type <code>Foo</code> and assign it a new object of type <code>Foo</code> with an attribute <code>\"b\"</code>.</p>\n<pre class=\"lang-java s-code-block hljs\"><code>Foo b = <span class=\"hljs-keyword\">new</span> Foo(<span class=\"hljs-string\">\"b\"</span>);\n</code></pre>\n<p><img src=\"https://i.stack.imgur.com/Krx4N.png\" alt=\"enter image description here\"></p>\n</li>\n<li><p><code>a = b</code> makes a new assignment to the reference <code>a</code>, <strong>not</strong> <code>f</code>, of the object whose attribute is <code>\"b\"</code>.</p>\n<p><img src=\"https://i.stack.imgur.com/rCluu.png\" alt=\"enter image description here\"></p>\n</li>\n<li><p>As you call <code>modifyReference(Foo c)</code> method, a reference <code>c</code> is created and assigned the object with attribute <code>\"f\"</code>.</p>\n<p><img src=\"https://i.stack.imgur.com/PRZPg.png\" alt=\"enter image description here\"></p>\n</li>\n<li><p><code>c.setAttribute(\"c\");</code> will change the attribute of the object that reference <code>c</code> points to it, and it's the same object that reference <code>f</code> points to it.</p>\n<p><img src=\"https://i.stack.imgur.com/H9Qsf.png\" alt=\"enter image description here\"></p>\n</li>\n</ol>\n<p>I hope you understand now how passing objects as arguments works in Java :)</p>\n    </div>",
          "vote": "1937"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>This will give you some insights of how Java really works to the point that in your next discussion about Java passing by reference or passing by value you'll just smile :-)</strong></p>\n\n<p>Step one please erase from your mind that word that starts with 'p' \"_ _ _ _ _ _ _\", especially if you come from other programming languages. Java and 'p' cannot be written in the same book, forum, or even txt.</p>\n\n<p>Step two remember that when you pass an Object into a method you're passing the Object reference and not the Object itself.</p>\n\n<ul>\n<li><em>Student</em>: Master, does this mean that Java is pass-by-reference?</li>\n<li><em>Master</em>: Grasshopper, No.</li>\n</ul>\n\n<p>Now think of what an Object's reference/variable does/is:</p>\n\n<ol>\n<li><strong>A variable holds the bits that tell the JVM how to get to the referenced Object in memory (Heap).</strong></li>\n<li>When passing arguments to a method <strong>you ARE NOT passing the reference variable, but a copy of the bits in the reference variable</strong>. Something like this: 3bad086a. 3bad086a represents a way to get to the passed object.</li>\n<li>So you're just passing 3bad086a that it's the value of the reference.</li>\n<li>You're passing the value of the reference and not the reference itself (and not the object).</li>\n<li><strong><em>This value is actually COPIED and given to the method</em></strong>. </li>\n</ol>\n\n<p>In the following (please don't try to compile/execute this...):</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-number\">1.</span> Person person;\n<span class=\"hljs-number\">2.</span> person = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">\"Tom\"</span>);\n<span class=\"hljs-number\">3.</span> changeName(person);\n<span class=\"hljs-number\">4.</span>\n<span class=\"hljs-number\">5.</span> <span class=\"hljs-comment\">//I didn't use Person person below as an argument to be nice</span>\n<span class=\"hljs-number\">6.</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">changeName</span><span class=\"hljs-params\">(Person anotherReferenceToTheSamePersonObject)</span> </span>{\n<span class=\"hljs-number\">7.</span>     anotherReferenceToTheSamePersonObject.setName(<span class=\"hljs-string\">\"Jerry\"</span>);\n<span class=\"hljs-number\">8.</span> }\n</code></pre>\n\n<p>What happens?</p>\n\n<ul>\n<li>The variable <em>person</em> is created in line #1 and it's null at the beginning.</li>\n<li>A new Person Object is created in line #2, stored in memory, and the variable <em>person</em> is given the reference to the Person object. That is, its address. Let's say 3bad086a.</li>\n<li>The variable <em>person</em> holding the address of the Object is passed to the function in line #3.</li>\n<li>In line #4 you can listen to the sound of silence </li>\n<li>Check the comment on line #5</li>\n<li>A method local variable -<em>anotherReferenceToTheSamePersonObject</em>- is created and then comes the magic in line #6:\n\n<ul>\n<li>The variable/reference <em>person</em> is copied bit-by-bit and passed to <em>anotherReferenceToTheSamePersonObject</em> inside the function.</li>\n<li>No new instances of Person are created.</li>\n<li>Both \"<em>person</em>\" and \"<em>anotherReferenceToTheSamePersonObject</em>\" hold the same value of 3bad086a.</li>\n<li>Don't try this but person==anotherReferenceToTheSamePersonObject would be true.</li>\n<li>Both variables have IDENTICAL COPIES of the reference and they both refer to the same Person Object, the SAME Object on the Heap and NOT A COPY.</li>\n</ul></li>\n</ul>\n\n<p>A picture is worth a thousand words:</p>\n\n<p><img src=\"https://i.stack.imgur.com/Ba3hJ.jpg\" alt=\"Pass by Value\"></p>\n\n<p><strong>Note that the anotherReferenceToTheSamePersonObject arrows is directed towards the Object and not towards the variable person!</strong></p>\n\n<p>If you didn't get it then just trust me and remember that it's better to say that <strong>Java is pass by value</strong>. Well, <strong>pass by reference value</strong>. Oh well, even better is <strong><em>pass-by-copy-of-the-variable-value! ;)</em></strong></p>\n\n<p>Now feel free to hate me but note that given this <strong>there is no difference between passing primitive data types and Objects</strong> when talking about method arguments.</p>\n\n<p>You always pass a copy of the bits of the value of the reference!</p>\n\n<ul>\n<li>If it's a primitive data type these bits will contain the value of the primitive data type itself.</li>\n<li>If it's an Object the bits will contain the value of the address that tells the JVM how to get to the Object.</li>\n</ul>\n\n<blockquote>\n  <p>Java is pass-by-value because inside a method you can modify the referenced Object as much as you want but no matter how hard you try you'll never be able to modify the passed variable that will keep referencing (not p _ _ _ _ _ _ _) the same Object no matter what!</p>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p>The changeName function above will never be able to modify the actual content (the bit values) of the passed reference. In other word changeName cannot make Person person refer to another Object.</p>\n</blockquote>\n\n<hr>\n\n<p>Of course you can cut it short and just say that  <strong>Java is pass-by-value!</strong></p>\n    </div>",
          "vote": "762"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Java is always pass by value, with no exceptions, <strong>ever</strong>.</p>\n\n<p>So how is it that anyone can be at all confused by this, and believe that Java is pass by reference, or think they have an example of Java acting as pass by reference? The key point is that Java <strong>never</strong> provides direct access to the values of <em>objects themselves</em>, in <em>any</em> circumstances. The only access to objects is through a <em>reference</em> to that object. Because Java objects are <em>always</em> accessed through a reference, rather than directly, it is common to talk about fields and variables <em>and method arguments</em> as being <em>objects</em>, when pedantically they are only <em>references to objects</em>. <strong>The confusion stems from this (strictly speaking, incorrect) change in nomenclature.</strong></p>\n\n<p>So, when calling a method</p>\n\n<ul>\n<li>For primitive arguments (<code>int</code>, <code>long</code>, etc.), the pass by value is <em>the actual value</em> of the primitive (for example, 3).</li>\n<li>For objects, the pass by value is the value of <em>the reference to the object</em>.</li>\n</ul>\n\n<p>So if you have <code>doSomething(foo)</code> and <code>public void doSomething(Foo foo) { .. }</code> the two Foos have copied <em>references</em> that point to the same objects.</p>\n\n<p>Naturally, passing by value a reference to an object looks very much like (and is indistinguishable in practice from) passing an object by reference.</p>\n    </div>",
          "vote": "748"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Java passes references by value.</p>\n\n<p>So you can't change the reference that gets passed in.</p>\n    </div>",
          "vote": "359"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I feel like arguing about \"pass-by-reference vs pass-by-value\" is not super-helpful.</p>\n\n<p>If you say, \"Java is pass-by-whatever (reference/value)\", in either case, you're not provide a complete answer. Here's some additional information that will hopefully aid in understanding what's happening in memory.</p>\n\n<p>Crash course on stack/heap before we get to the Java implementation:\nValues go on and off the stack in a nice orderly fashion, like a stack of plates at a cafeteria.\nMemory in the heap (also known as dynamic memory) is haphazard and disorganized. The JVM just finds space wherever it can, and frees it up as the variables that use it are no longer needed.</p>\n\n<p>Okay. First off, local primitives go on the stack. So this code:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">3</span>;\n<span class=\"hljs-keyword\">float</span> y = <span class=\"hljs-number\">101.1f</span>;\n<span class=\"hljs-keyword\">boolean</span> amIAwesome = <span class=\"hljs-keyword\">true</span>;\n</code></pre>\n\n<p>results in this:</p>\n\n<p><img src=\"https://i.stack.imgur.com/7nGKU.png\" alt=\"primitives on the stack\"></p>\n\n<p>When you declare and instantiate an object. The actual object goes on the heap. What goes on the stack? The address of the object on the heap. C++ programmers would call this a pointer, but some Java developers are against the word \"pointer\". Whatever. Just know that the address of the object goes on the stack.</p>\n\n<p>Like so:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">int</span> problems = <span class=\"hljs-number\">99</span>;\nString name = <span class=\"hljs-string\">\"Jay-Z\"</span>;\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/yTIYp.png\" alt=\"a b*7ch aint one!\"></p>\n\n<p>An array is an object, so it goes on the heap as well. And what about the objects in the array? They get their own heap space, and the address of each object goes inside the array.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>JButton[] marxBros = <span class=\"hljs-keyword\">new</span> JButton[<span class=\"hljs-number\">3</span>];\nmarxBros[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-keyword\">new</span> JButton(<span class=\"hljs-string\">\"Groucho\"</span>);\nmarxBros[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-keyword\">new</span> JButton(<span class=\"hljs-string\">\"Zeppo\"</span>);\nmarxBros[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-keyword\">new</span> JButton(<span class=\"hljs-string\">\"Harpo\"</span>);\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/v2b33.png\" alt=\"marx brothers\"></p>\n\n<p>So, what gets passed in when you call a method? If you pass in an object, what you're actually passing in is the address of the object. Some might say the \"value\" of the address, and some say it's just a reference to the object. This is the genesis of the holy war between \"reference\" and \"value\" proponents. What you call it isn't as important as that you understand that what's getting passed in is the address to the object.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">shout</span><span class=\"hljs-params\">(String name)</span></span>{\n    System.out.println(<span class=\"hljs-string\">\"There goes \"</span> + name + <span class=\"hljs-string\">\"!\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>{\n    String hisName = <span class=\"hljs-string\">\"John J. Jingleheimerschmitz\"</span>;\n    String myName = hisName;\n    shout(myName);\n}\n</code></pre>\n\n<p>One String gets created and space for it is allocated in the heap, and the address to the string is stored on the stack and given the identifier <code>hisName</code>, since the address of the second String is the same as the first, no new String is created and no new heap space is allocated, but a new identifier is created on the stack. Then we call <code>shout()</code>: a new stack frame is created and a new identifier, <code>name</code> is created and assigned the address of the already-existing String.</p>\n\n<p><img src=\"https://i.stack.imgur.com/q0prc.png\" alt=\"la da di da da da da\"></p>\n\n<p>So, value, reference? You say \"potato\".</p>\n    </div>",
          "vote": "259"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Just to show the contrast, compare the following <a href=\"https://en.wikipedia.org/wiki/C++\" rel=\"noreferrer\">C++</a> and <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\" rel=\"noreferrer\">Java</a> snippets:</p>\n\n<p>In C++: <strong>Note: Bad code - memory leaks!</strong>  But it demonstrates the point.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">cppMethod</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val, <span class=\"hljs-keyword\">int</span> &amp;ref, Dog obj, Dog &amp;objRef, Dog *objPtr, Dog *&amp;objPtrRef)</span>\n</span>{\n    val = <span class=\"hljs-number\">7</span>; <span class=\"hljs-comment\">// Modifies the copy</span>\n    ref = <span class=\"hljs-number\">7</span>; <span class=\"hljs-comment\">// Modifies the original variable</span>\n    obj.SetName(<span class=\"hljs-string\">\"obj\"</span>); <span class=\"hljs-comment\">// Modifies the copy of Dog passed</span>\n    objRef.SetName(<span class=\"hljs-string\">\"objRef\"</span>); <span class=\"hljs-comment\">// Modifies the original Dog passed</span>\n    objPtr-&gt;SetName(<span class=\"hljs-string\">\"objPtr\"</span>); <span class=\"hljs-comment\">// Modifies the original Dog pointed to </span>\n                               <span class=\"hljs-comment\">// by the copy of the pointer passed.</span>\n    objPtr = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"newObjPtr\"</span>);  <span class=\"hljs-comment\">// Modifies the copy of the pointer, </span>\n                                   <span class=\"hljs-comment\">// leaving the original object alone.</span>\n    objPtrRef-&gt;SetName(<span class=\"hljs-string\">\"objRefPtr\"</span>); <span class=\"hljs-comment\">// Modifies the original Dog pointed to </span>\n                                    <span class=\"hljs-comment\">// by the original pointer passed. </span>\n    objPtrRef = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"newObjPtrRef\"</span>); <span class=\"hljs-comment\">// Modifies the original pointer passed</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">0</span>;\n    Dog d0 = Dog(<span class=\"hljs-string\">\"d0\"</span>);\n    Dog d1 = Dog(<span class=\"hljs-string\">\"d1\"</span>);\n    Dog *d2 = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"d2\"</span>);\n    Dog *d3 = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"d3\"</span>);\n    cppMethod(a, b, d0, d1, d2, d3);\n    <span class=\"hljs-comment\">// a is still set to 0</span>\n    <span class=\"hljs-comment\">// b is now set to 7</span>\n    <span class=\"hljs-comment\">// d0 still have name \"d0\"</span>\n    <span class=\"hljs-comment\">// d1 now has name \"objRef\"</span>\n    <span class=\"hljs-comment\">// d2 now has name \"objPtr\"</span>\n    <span class=\"hljs-comment\">// d3 now has name \"newObjPtrRef\"</span>\n}\n</code></pre>\n\n<p>In Java, </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">javaMethod</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> val, Dog objPtr)</span>\n</span>{\n   val = <span class=\"hljs-number\">7</span>; <span class=\"hljs-comment\">// Modifies the copy</span>\n   objPtr.SetName(<span class=\"hljs-string\">\"objPtr\"</span>) <span class=\"hljs-comment\">// Modifies the original Dog pointed to </span>\n                            <span class=\"hljs-comment\">// by the copy of the pointer passed.</span>\n   objPtr = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"newObjPtr\"</span>);  <span class=\"hljs-comment\">// Modifies the copy of the pointer, </span>\n                                  <span class=\"hljs-comment\">// leaving the original object alone.</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">0</span>;\n    Dog d0 = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"d0\"</span>);\n    javaMethod(a, d0);\n    <span class=\"hljs-comment\">// a is still set to 0</span>\n    <span class=\"hljs-comment\">// d0 now has name \"objPtr\"</span>\n}\n</code></pre>\n\n<p>Java only has the two types of passing: by value for built-in types, and by value of the pointer for object types.</p>\n    </div>",
          "vote": "207"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Java passes references to objects by value.</p>\n    </div>",
          "vote": "196"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Basically, reassigning Object parameters doesn't affect the argument, e.g.,</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">foo</span><span class=\"hljs-params\">(Object bar)</span> </span>{\n    bar = <span class=\"hljs-keyword\">null</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    String baz = <span class=\"hljs-string\">\"Hah!\"</span>;\n    foo(baz);\n    System.out.println(baz);\n}\n</code></pre>\n\n<p>will print out <code>\"Hah!\"</code> instead of <code>null</code>. The reason this works is because <code>bar</code> is a copy of the value of <code>baz</code>, which is just a reference to <code>\"Hah!\"</code>. If it were the actual reference itself, then <code>foo</code> would have redefined <code>baz</code> to <code>null</code>.</p>\n    </div>",
          "vote": "190"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I can't believe that nobody mentioned Barbara Liskov yet. When she designed CLU in 1974, she ran into this same terminology problem, and she invented the term <em>call by sharing</em> (also known as <em>call by object-sharing</em> and <em>call by object</em>) for this specific case of \"call by value where the value is a reference\".</p>\n    </div>",
          "vote": "158"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The crux of the matter is that the word <em>reference</em> in the expression \"pass by reference\" means something completely different from the usual meaning of the word <em>reference</em> in Java. </p>\n\n<p>Usually in Java <em>reference</em> means a a <em>reference to an object</em>. But the technical terms <em>pass by reference/value</em> from programming language theory is talking about a <em>reference to the memory cell holding the variable</em>, which is something completely different.</p>\n    </div>",
          "vote": "128"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In java everything is reference, so when you have something like:\n    <code>Point pnt1 = new Point(0,0);</code> Java does following:</p>\n\n<ol>\n<li>Creates new Point object</li>\n<li>Creates new Point reference and initialize that reference to <em>point (refer to)</em> on previously created Point object.</li>\n<li>From here, through Point object life, you will access to that object through pnt1\n reference. So we can say that in Java you manipulate object through its reference.<br></li>\n</ol>\n\n<p><img src=\"https://i.stack.imgur.com/jM54f.png\" alt=\"enter image description here\"></p>\n\n<p><strong>Java doesn't pass method arguments by reference; it passes them by value.</strong> I will use example from <a href=\"http://www.javaworld.com/javaqa/2000-05/03-qa-0526-pass.html\" rel=\"noreferrer\">this site</a>: </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">tricky</span><span class=\"hljs-params\">(Point arg1, Point arg2)</span> </span>{\n  arg1.x = <span class=\"hljs-number\">100</span>;\n  arg1.y = <span class=\"hljs-number\">100</span>;\n  Point temp = arg1;\n  arg1 = arg2;\n  arg2 = temp;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String [] args)</span> </span>{\n  Point pnt1 = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n  Point pnt2 = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n  System.out.println(<span class=\"hljs-string\">\"X1: \"</span> + pnt1.x + <span class=\"hljs-string\">\" Y1: \"</span> +pnt1.y); \n  System.out.println(<span class=\"hljs-string\">\"X2: \"</span> + pnt2.x + <span class=\"hljs-string\">\" Y2: \"</span> +pnt2.y);\n  System.out.println(<span class=\"hljs-string\">\" \"</span>);\n  tricky(pnt1,pnt2);\n  System.out.println(<span class=\"hljs-string\">\"X1: \"</span> + pnt1.x + <span class=\"hljs-string\">\" Y1:\"</span> + pnt1.y); \n  System.out.println(<span class=\"hljs-string\">\"X2: \"</span> + pnt2.x + <span class=\"hljs-string\">\" Y2: \"</span> +pnt2.y);  \n}\n</code></pre>\n\n<p>Flow of the program:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Point pnt1 = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\nPoint pnt2 = <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n</code></pre>\n\n<p>Creating two different Point object with two different reference associated.\n<img src=\"https://i.stack.imgur.com/5LIKC.png\" alt=\"enter image description here\"></p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>System.out.println(<span class=\"hljs-string\">\"X1: \"</span> + pnt1.x + <span class=\"hljs-string\">\" Y1: \"</span> +pnt1.y); \nSystem.out.println(<span class=\"hljs-string\">\"X2: \"</span> + pnt2.x + <span class=\"hljs-string\">\" Y2: \"</span> +pnt2.y);\nSystem.out.println(<span class=\"hljs-string\">\" \"</span>);\n</code></pre>\n\n<p>As expected output will be:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>X1: <span class=\"hljs-number\">0</span>     Y1: <span class=\"hljs-number\">0</span>\nX2: <span class=\"hljs-number\">0</span>     Y2: <span class=\"hljs-number\">0</span>\n</code></pre>\n\n<p><strong>On this line 'pass-by-value' goes into the play...</strong> <br></p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>tricky(pnt1,pnt2);           <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">tricky</span><span class=\"hljs-params\">(Point arg1, Point arg2)</span></span>;\n</code></pre>\n\n<p>References <code>pnt1</code> and <code>pnt2</code> are <strong>passed by value</strong> to the tricky method, which means that now yours references <code>pnt1</code> and <code>pnt2</code> have their <code>copies</code> named <code>arg1</code> and <code>arg2</code>.So <code>pnt1</code> and <code>arg1</code> <em>points</em> to the same object. (Same for the <code>pnt2</code> and <code>arg2</code>)\n<img src=\"https://i.stack.imgur.com/qd1GH.png\" alt=\"enter image description here\"></p>\n\n<p>In the <code>tricky</code> method:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code> arg1.x = <span class=\"hljs-number\">100</span>;\n arg1.y = <span class=\"hljs-number\">100</span>;\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/o4WT0.png\" alt=\"enter image description here\"></p>\n\n<p>Next in the <code>tricky</code> method</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Point temp = arg1;\narg1 = arg2;\narg2 = temp;\n</code></pre>\n\n<p>Here, you first create new <code>temp</code> Point reference which will <em>point</em> on same place like <code>arg1</code> reference. Then you move reference <code>arg1</code> to <em>point</em> to the same place like <code>arg2</code> reference.\nFinally <code>arg2</code> will <em>point</em> to the same place like <code>temp</code>.</p>\n\n<p><img src=\"https://i.stack.imgur.com/fX5Q3.png\" alt=\"enter image description here\"></p>\n\n<p>From here scope of <code>tricky</code> method is gone and you don't have access any more to the references: <code>arg1</code>, <code>arg2</code>, <code>temp</code>. <strong>But important note is that everything you do with these references when they are 'in life' will permanently affect object on which they are <em>point</em> to.</strong> </p>\n\n<p>So after executing method <code>tricky</code>, when you return to <code>main</code>, you have this situation:\n<img src=\"https://i.stack.imgur.com/LRETe.png\" alt=\"enter image description here\"></p>\n\n<p>So now, completely execution of program will be:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>X1: <span class=\"hljs-number\">0</span>         Y1: <span class=\"hljs-number\">0</span>\nX2: <span class=\"hljs-number\">0</span>         Y2: <span class=\"hljs-number\">0</span>\nX1: <span class=\"hljs-number\">100</span>       Y1: <span class=\"hljs-number\">100</span>\nX2: <span class=\"hljs-number\">0</span>         Y2: <span class=\"hljs-number\">0</span>\n</code></pre>\n    </div>",
          "vote": "91"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Java is always pass by value, not pass by reference</strong></p>\n<p>First of all, we need to understand what pass by value and pass by reference are.</p>\n<p><strong>Pass by value means that you are making a copy in memory of the actual parameter's value that is passed in. This is a copy of the contents of the actual parameter</strong>.</p>\n<p><strong>Pass by reference (also called pass by address) means that a copy of the address of the actual parameter is stored</strong>.</p>\n<p>Sometimes Java can give the illusion of pass by reference. Let's see how it works by using the example below:</p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PassByValue</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Test t = <span class=\"hljs-keyword\">new</span> Test();\n        t.name = <span class=\"hljs-string\">\"initialvalue\"</span>;\n        <span class=\"hljs-keyword\">new</span> PassByValue().changeValue(t);\n        System.out.println(t.name);\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">changeValue</span><span class=\"hljs-params\">(Test f)</span> </span>{\n        f.name = <span class=\"hljs-string\">\"changevalue\"</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>{\n    String name;\n}\n</code></pre>\n<p>The output of this program is:</p>\n<blockquote>\n<pre class=\"lang-java s-code-block hljs\"><code>changevalue\n</code></pre>\n</blockquote>\n<p>Let's understand step by step:</p>\n<pre class=\"lang-java s-code-block hljs\"><code>Test t = <span class=\"hljs-keyword\">new</span> Test();\n</code></pre>\n<p>As we all know it will create an object in the heap and return the reference value back to t. For example, suppose the value of t is <code>0x100234</code> (we don't know the actual JVM internal value, this is just an example) .</p>\n<p><img src=\"https://i.stack.imgur.com/AVrhI.png\" alt=\"first illustration\"></p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">new</span> PassByValue().changeValue(t);\n</code></pre>\n<p>When passing reference t to the function it will not directly pass the actual reference value of object test,  but it will create a copy of t and then pass it to the function. Since it is <strong>passing by value</strong>, it passes a copy of the variable rather than the actual reference of it. Since we said the value of t was <code>0x100234</code>, both t and f will have the same value and hence they will point to the same object.</p>\n<p><img src=\"https://i.stack.imgur.com/WwdPh.png\" alt=\"second illustration\"></p>\n<p>If you change anything in the function using reference f it will modify the existing contents of the object. That is why we got the output <code>changevalue</code>,   which is updated in the function.</p>\n<p>To understand this more clearly, consider the following example:</p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PassByValue</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Test t = <span class=\"hljs-keyword\">new</span> Test();\n        t.name = <span class=\"hljs-string\">\"initialvalue\"</span>;\n        <span class=\"hljs-keyword\">new</span> PassByValue().changeRefence(t);\n        System.out.println(t.name);\n    }\n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">changeRefence</span><span class=\"hljs-params\">(Test f)</span> </span>{\n        f = <span class=\"hljs-keyword\">null</span>;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>{\n    String name;\n}\n</code></pre>\n<p>Will this throw a <code>NullPointerException</code>? No, because it only passes a copy of the reference.\nIn the case of passing by reference, it could have thrown a <code>NullPointerException</code>, as seen below:</p>\n<p><img src=\"https://i.stack.imgur.com/jH6KP.png\" alt=\"third illustration\"></p>\n<p>Hopefully this will help.</p>\n    </div>",
          "vote": "89"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are already great answers that cover this. I wanted to make a small contribution by sharing a <strong>very simple example</strong> (which will compile) contrasting the behaviors between Pass-by-reference in c++ and Pass-by-value in Java.</p>\n\n<p>A few points:</p>\n\n<ol>\n<li>The term \"reference\" is a overloaded with two separate meanings. In Java it simply means a pointer, but in the context of \"Pass-by-reference\" it means a handle to the original variable which was passed in.</li>\n<li><strong>Java is Pass-by-value</strong>. Java is a descendent of C (among other languages). Before C, several (but not all) earlier languages like FORTRAN and COBOL supported PBR, but C did not. PBR allowed these other languages to make changes to the passed variables inside sub-routines. In order to accomplish the same thing (i.e. change the values of variables inside functions), C programmers passed pointers to variables into functions. Languages inspired by C, such as Java, borrowed this idea and continue to pass pointer to methods as C did, except that Java calls its pointers References. Again, this is a different use of the word \"Reference\" than in \"Pass-By-Reference\".</li>\n<li><strong>C++ allows Pass-by-reference</strong> by declaring a reference parameter using the \"&amp;\" character (which happens to be the same character used to indicate \"the address of a variable\" in both C and C++). For example, if we pass in a pointer by reference, the parameter and the argument are not just pointing to the same object. Rather, they are the same variable. If one gets set to a different address or to null, so does the other.</li>\n<li>In the C++ example below I'm passing a <strong>pointer</strong> to a null terminated string <strong>by reference</strong>. And in the Java example below I'm passing a Java reference to a String (again, the same as a pointer to a String) by value. Notice the output in the comments.</li>\n</ol>\n\n<p>C++ pass by reference example:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>using namespace std;\n#include &lt;iostream&gt;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">change</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">char</span> *&amp;str)</span></span>{   <span class=\"hljs-comment\">// the '&amp;' makes this a reference parameter</span>\n    str = NULL;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">char</span> *str = <span class=\"hljs-string\">\"not Null\"</span>;\n    change(str);\n    cout&lt;&lt;<span class=\"hljs-string\">\"str is \"</span> &lt;&lt; str;      <span class=\"hljs-comment\">// ==&gt;str is &lt;null&gt;</span>\n}\n</code></pre>\n\n<p>Java pass \"a Java reference\" by value example</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ValueDemo</span></span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">change</span> <span class=\"hljs-params\">(String str)</span></span>{\n        str = <span class=\"hljs-keyword\">null</span>;\n    }\n\n     <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String []args)</span></span>{\n        ValueDemo vd = <span class=\"hljs-keyword\">new</span> ValueDemo();\n        String str = <span class=\"hljs-string\">\"not null\"</span>;\n        vd.change(str);\n        System.out.println(<span class=\"hljs-string\">\"str is \"</span> + str);    <span class=\"hljs-comment\">// ==&gt; str is not null!!</span>\n                                                <span class=\"hljs-comment\">// Note that if \"str\" was</span>\n                                                <span class=\"hljs-comment\">// passed-by-reference, it</span>\n                                                <span class=\"hljs-comment\">// WOULD BE NULL after the</span>\n                                                <span class=\"hljs-comment\">// call to change().</span>\n     }\n}\n</code></pre>\n\n<p><strong>EDIT</strong></p>\n\n<p>Several people have written comments which seem to indicate that either they are not looking at my examples or they don't get the c++ example. Not sure where the disconnect is, but guessing the c++ example is not clear. I'm posting the same example in pascal because I think pass-by-reference looks cleaner in pascal, but I could be wrong. I might just be confusing people more; I hope not.</p>\n\n<p>In pascal, parameters passed-by-reference are called \"var parameters\". In the procedure setToNil below, please note the keyword 'var' which precedes the parameter 'ptr'. When a pointer is passed to this procedure, it will be passed <strong>by reference</strong>. Note the behavior: when this procedure sets ptr to nil (that's pascal speak for NULL), it will set the argument to nil--you can't do that in Java.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>program passByRefDemo;\ntype \n   iptr = ^integer;\n<span class=\"hljs-keyword\">var</span>\n   ptr: iptr;\n\n   <span class=\"hljs-function\">procedure <span class=\"hljs-title\">setToNil</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">var</span> ptr : iptr)</span></span>;\n   begin\n       ptr := nil;\n   end;\n\n<span class=\"hljs-function\">begin\n   <span class=\"hljs-title\">new</span><span class=\"hljs-params\">(ptr)</span></span>;\n   ptr^ := <span class=\"hljs-number\">10</span>;\n   setToNil(ptr);\n   <span class=\"hljs-keyword\">if</span> (ptr = nil) <span class=\"hljs-function\">then\n       <span class=\"hljs-title\">writeln</span><span class=\"hljs-params\">(<span class=\"hljs-string\">'ptr seems to be nil'</span>)</span></span>;     { ptr should be nil, so <span class=\"hljs-keyword\">this</span> line will run. }\nend.\n</code></pre>\n\n<p><strong>EDIT 2</strong></p>\n\n<p>Some excerpts from <strong>\"THE Java Programming Language\"</strong> by Ken Arnold, <strong>James Gosling (the guy who invented Java)</strong>, and David Holmes, chapter 2, section 2.6.5</p>\n\n<blockquote>\n  <p><strong>All parameters to methods are passed \"by value\"</strong>. In other words,\n  values of parameter variables in a method are copies of the invoker\n  specified as arguments.</p>\n</blockquote>\n\n<p>He goes on to make the same point regarding objects . . . </p>\n\n<blockquote>\n  <p>You should note that when the parameter is an object reference, it is\n  the object reference-not the object itself-that is <strong>passed \"by value\"</strong>.</p>\n</blockquote>\n\n<p>And towards the end of the same section he makes a broader statement about java being only pass by value and never pass by reference.</p>\n\n<blockquote>\n  <p>The Java programming language <strong>does not pass objects by reference; it</strong>\n  <strong>passes object references by value</strong>. Because two copies of the same\n  reference refer to the same actual object, changes made through one\n  reference variable are visible through the other. There is exactly one\n  parameter passing mode-<strong>pass by value</strong>-and that helps keep things\n  simple.</p>\n</blockquote>\n\n<p>This section of the book has a great explanation of parameter passing in Java and of the distinction between pass-by-reference and pass-by-value and it's by the creator of Java. I would encourage anyone to read it, especially if you're still not convinced.</p>\n\n<p>I think the difference between the two models is very subtle and unless you've done programming where you actually used pass-by-reference, it's easy to miss where two models differ.</p>\n\n<p>I hope this settles the debate, but probably won't.</p>\n\n<p><strong>EDIT 3</strong></p>\n\n<p>I might be a little obsessed with this post. Probably because I feel that the makers of Java inadvertently spread misinformation. If instead of using the word \"reference\" for pointers they had used something else, say \ndingleberry, there would've been no problem. You could say, \"Java passes dingleberries by value and not by reference\", and nobody would be confused.</p>\n\n<p>That's the reason only Java developers have issue with this. They look at the word \"reference\" and think they know exactly what that means, so they don't even bother to consider the opposing argument.</p>\n\n<p>Anyway, I noticed a comment in an older post, which made a balloon analogy which I really liked. So much so that I decided to glue together some clip-art to make a set of cartoons to illustrate the point.</p>\n\n<p><strong>Passing a reference by value</strong>--Changes to the reference are not reflected in the caller's scope, but the changes to the object are. This is because the reference is copied, but the both the original and the copy refer to the same object.\n<a href=\"https://i.stack.imgur.com/RvkqU.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/RvkqU.png\" alt=\"Passing Object references By Value\"></a></p>\n\n<p><strong>Pass by reference</strong>--There is no copy of the reference. Single reference is shared by both the caller and the function being called. Any changes to the reference or the Object's data are reflected in the caller's scope.\n<a href=\"https://i.stack.imgur.com/SHXkC.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/SHXkC.png\" alt=\"Pass by reference\"></a></p>\n\n<p><strong>EDIT 4</strong></p>\n\n<p>I have seen posts on this topic which describe the low level implementation of parameter passing in Java, which I think is great and very helpful because it makes an abstract idea concrete. However, to me the question is more about <strong>the behavior described in the language specification</strong> than about the technical implementation of the behavior. This is an exerpt from the <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1\" rel=\"noreferrer\">Java Language Specification, section 8.4.1</a> :</p>\n\n<blockquote>\n  <p>When the method or constructor is invoked (§15.12), <strong>the values of the\n  actual argument expressions initialize newly created parameter\n  variables, each of the declared type, before execution of the body of\n  the method or constructor.</strong> The Identifier that appears in the\n  DeclaratorId may be used as a simple name in the body of the method or\n  constructor to refer to the formal parameter.</p>\n</blockquote>\n\n<p>Which means, java creates a copy of the passed parameters before executing a method. Like most people who studied compilers in college, I used <a href=\"https://rads.stackoverflow.com/amzn/click/com/0201100886\" rel=\"noreferrer\">\"The Dragon Book\"</a> which is <strong>THE</strong> compilers book. It has a good description of \"Call-by-value\" and \"Call-by-Reference\" in Chapter 1. The Call-by-value description matches up with Java Specs exactly.</p>\n\n<p>Back when I studied compilers-in the 90's, I used the first edition of the book from 1986 which pre-dated Java by about 9 or 10 years. However, I just ran across a copy of the <a href=\"https://rads.stackoverflow.com/amzn/click/com/B009TGD06W\" rel=\"noreferrer\">2nd Eddition</a> from 2007 <strong>which actually mentions Java!</strong> Section 1.6.6 labeled \"Parameter Passing Mechanisms\" describes parameter passing pretty nicely. Here is an excerpt under the heading \"Call-by-value\" which mentions Java:</p>\n\n<blockquote>\n  <p>In call-by-value, the actual parameter is evaluated (if it is an\n  expression) or copied (if it is a variable). The value is placed in\n  the location belonging to the corresponding formal parameter of the\n  called procedure. <strong>This method is used in C and Java, and is a common\n  option in C++ , as well as in most other languages.</strong></p>\n</blockquote>\n    </div>",
          "vote": "83"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Java is a call by value</p>\n<p>How it works</p>\n<ul>\n<li><p>You always pass a copy of the bits of the value of the reference!</p>\n</li>\n<li><p>If it's a primitive data type these bits contain the value of the primitive data type itself, That's why if we change the value of header inside the method then it does not reflect the changes outside.</p>\n</li>\n<li><p>If it's an object data type like <strong>Foo foo=new Foo()</strong> then in this case copy of the address of the object passes like file shortcut  , suppose we have a text file <strong>abc.txt</strong> at <strong>C:\\desktop</strong> and suppose we make shortcut of the same file and put this inside <strong>C:\\desktop\\abc-shortcut</strong> so when you access the file from <strong>C:\\desktop\\abc.txt</strong> and write <strong>'Stack Overflow'</strong> and close the file and again you open the file from shortcut then you write <strong>' is the largest online community for programmers to learn'</strong> then total file change will be <strong>'Stack Overflow is the largest online community for programmers to learn'</strong> which means it doesn't matter from where you open the file , each time we were accessing the same file , here we can assume <strong>Foo</strong> as a file and suppose foo stored at <strong>123hd7h</strong>(original address like <strong>C:\\desktop\\abc.txt</strong> ) address and <strong>234jdid</strong>(copied address like <strong>C:\\desktop\\abc-shortcut</strong> which actually contains the original address of the file inside) ..\nSo for better understanding make shortcut file and feel.</p>\n</li>\n</ul>\n    </div>",
          "vote": "78"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2>A reference is always a value when represented, no matter what language you use.</h2>\n\n<p>Getting an outside of the box view, let's look at Assembly or some low level memory management. At the CPU level a <em>reference</em> to anything immediately becomes a <em>value</em> if it gets written to memory or to one of the CPU registers. (That is why <em>pointer</em> is a good definition. It is a value, which has a purpose at the same time).</p>\n\n<p>Data in memory has a <strong>Location</strong> and at that location there is a value (byte,word, whatever). In Assembly we have a convenient solution to give a <strong>Name</strong> to certain <strong>Location</strong> (aka variable), but when compiling the code, the assembler simply replaces <strong>Name</strong> with the designated location just like your browser replaces domain names with IP addresses.</p>\n\n<p>Down to the core it is technically impossible to pass a reference to anything in any language without representing it (when it immediately becomes a value).</p>\n\n<p>Lets say we have a variable Foo, its <strong>Location</strong> is at the 47th byte in memory and its <strong>Value</strong> is 5. We have another variable <strong>Ref2Foo</strong> which is at 223rd byte in memory, and its value will be 47. This Ref2Foo might be a technical variable, not explicitly created by the program. If you just look at 5 and 47 without any other information, you will see just two <strong>Values</strong>.\nIf you use them as references then to reach to <code>5</code> we have to travel:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>(Name)[Location] -&gt; [Value at the Location]\n---------------------\n(Ref2Foo)[<span class=\"hljs-number\">223</span>]  -&gt; <span class=\"hljs-number\">47</span>\n(Foo)[<span class=\"hljs-number\">47</span>]       -&gt; <span class=\"hljs-number\">5</span>\n</code></pre>\n\n<p>This is how jump-tables work. </p>\n\n<p>If we want to call a method/function/procedure with Foo's value, there are a few possible way to pass the variable to the method, depending on the <strong>language</strong> and its several method invocation modes:</p>\n\n<ol>\n<li>5 gets copied to one of the CPU registers (ie. EAX).</li>\n<li>5 gets PUSHd to the stack.</li>\n<li>47 gets copied to one of the CPU registers</li>\n<li>47 PUSHd to the stack.</li>\n<li>223 gets copied to one of the CPU registers.</li>\n<li>223 gets PUSHd to the stack.</li>\n</ol>\n\n<p>In every cases above a value - a <strong>copy</strong> of an existing value - has been created, it is now upto the receiving method to handle it. When you write \"Foo\" inside the method, it is either read out from EAX, or automatically  <strong>dereferenced</strong>, or double dereferenced, the process depends on how the language works and/or what the type of Foo dictates. This is hidden from the developer until she circumvents the dereferencing process. So a <em>reference</em> is a <em>value</em> when represented, because a reference is a value that has to be processed (at language level).</p>\n\n<p>Now we have passed Foo to the method:</p>\n\n<ul>\n<li>in case 1. and 2. if you change Foo (<code>Foo = 9</code>) it only affects local scope as you have a copy of the Value. From inside the method we cannot even determine where in memory the original Foo was located.</li>\n<li>in case 3. and 4. if you use default language constructs and change Foo (<code>Foo = 11</code>), it could change Foo globally (depends on the language, ie. Java or like Pascal's <code>procedure findMin(x, y, z: integer;</code><strong>var m</strong><code>: integer);</code>). However if the language allows you to circumvent the dereference process, you can change <code>47</code>, say to <code>49</code>. At that point Foo seems to have been changed if you read it, because you have changed the <strong>local pointer</strong> to it. And if you were to modify this Foo inside the method (<code>Foo = 12</code>) you will probably FUBAR the execution of the program (aka. segfault) because you will write to a different memory than expected, you can even modify an area that is destined to hold executable program and writing to it will modify running code (Foo is now not at <code>47</code>). BUT Foo's value of <code>47</code> did not change globally, only the one inside the method, because <code>47</code> was also a copy to the method.</li>\n<li>in case 5. and 6. if you modify <code>223</code> inside the method it creates the same mayhem as in 3. or 4. (a pointer, pointing to a now bad value, that is again used as a pointer) but this is still a local problem, as 223 was <strong>copied</strong>. However if you are able to dereference <code>Ref2Foo</code> (that is <code>223</code>), reach to and modify the pointed value <code>47</code>, say, to <code>49</code>, it will affect Foo <strong>globally</strong>, because in this case the methods got a copy of <code>223</code>  but the referenced <code>47</code> exists only once, and changing that to <code>49</code> will lead every <code>Ref2Foo</code> double-dereferencing to a wrong value.</li>\n</ul>\n\n<p>Nitpicking on insignificant details, even languages that do pass-by-reference will pass values to functions, but those functions know that they have to use it for dereferencing purposes. This pass-the-reference-as-value is just hidden from the programmer because it is practically useless and the terminology is only <em>pass-by-reference</em>.</p>\n\n<p>Strict <em>pass-by-value</em> is also useless, it would mean that a 100 Mbyte array should have to be copied every time we call a method with the array as argument, therefore Java cannot be stricly pass-by-value. Every language would pass a reference to this huge array (as a value) and either employs copy-on-write mechanism if that array can be changed locally inside the method or allows the method (as Java does) to modify the array globally (from the caller's view) and a few languages allows to modify the Value of the reference itself.</p>\n\n<p>So in short and in Java's own terminology, Java is <em>pass-by-value</em> where <em>value</em> can be: either a <strong>real value</strong> or a <strong>value</strong> that is a representation of a <strong>reference</strong>. </p>\n    </div>",
          "vote": "74"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As far as I know, Java only knows call by value. This means for primitive datatypes you will work with an copy and for objects you will work with an copy of the reference to the objects. However I think there are some pitfalls; for example, this will not work:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(StringBuffer s1, StringBuffer s2)</span> </span>{\n    StringBuffer temp = s1;\n    s1 = s2;\n    s2 = temp;\n}\n\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    StringBuffer s1 = <span class=\"hljs-keyword\">new</span> StringBuffer(<span class=\"hljs-string\">\"Hello\"</span>);\n    StringBuffer s2 = <span class=\"hljs-keyword\">new</span> StringBuffer(<span class=\"hljs-string\">\"World\"</span>);\n    swap(s1, s2);\n    System.out.println(s1);\n    System.out.println(s2);\n}\n</code></pre>\n\n<p>This will populate Hello World and not World Hello because in the swap function you use copys which have no impact on the references in the main. But if your objects are not immutable you can change it for example:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">appendWorld</span><span class=\"hljs-params\">(StringBuffer s1)</span> </span>{\n    s1.append(<span class=\"hljs-string\">\" World\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    StringBuffer s = <span class=\"hljs-keyword\">new</span> StringBuffer(<span class=\"hljs-string\">\"Hello\"</span>);\n    appendWorld(s);\n    System.out.println(s);\n}\n</code></pre>\n\n<p>This will populate Hello World on the command line. If you change StringBuffer into String it will produce just Hello because String is immutable. For example:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">appendWorld</span><span class=\"hljs-params\">(String s)</span></span>{\n    s = s+<span class=\"hljs-string\">\" World\"</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    String s = <span class=\"hljs-keyword\">new</span> String(<span class=\"hljs-string\">\"Hello\"</span>);\n    appendWorld(s);\n    System.out.println(s);\n}\n</code></pre>\n\n<p>However you could make a wrapper for String like this which would make it able to use it with Strings:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StringWrapper</span> </span>{\n    <span class=\"hljs-keyword\">public</span> String value;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">StringWrapper</span><span class=\"hljs-params\">(String value)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.value = value;\n    }\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">appendWorld</span><span class=\"hljs-params\">(StringWrapper s)</span></span>{\n    s.value = s.value +<span class=\"hljs-string\">\" World\"</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    StringWrapper s = <span class=\"hljs-keyword\">new</span> StringWrapper(<span class=\"hljs-string\">\"Hello\"</span>);\n    appendWorld(s);\n    System.out.println(s.value);\n}\n</code></pre>\n\n<p>edit: i believe this is also the reason to use StringBuffer when it comes to \"adding\" two Strings because you can modifie the original object which u can't with immutable objects like String is.</p>\n    </div>",
          "vote": "59"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>No, it's not pass by reference.</p>\n\n<p>Java is pass by value according to the Java Language Specification:</p>\n\n<blockquote>\n  <p>When the method or constructor is invoked (§15.12), <strong>the values of the actual argument expressions initialize newly created parameter variables</strong>, each of the declared type, before execution of the body of the method or constructor. The Identifier that appears in the DeclaratorId may be used as a simple name in the body of the method or constructor to refer to the <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.4.1\" rel=\"noreferrer\">formal parameter</a>. </p>\n</blockquote>\n    </div>",
          "vote": "57"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let me try to explain my understanding with the help of four examples. Java is pass-by-value, and not pass-by-reference</p>\n\n<p>/**</p>\n\n<p>Pass By Value</p>\n\n<p>In Java, all parameters are passed by value, i.e. assigning a method argument is not visible to the caller.</p>\n\n<p>*/</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PassByValueString</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-keyword\">new</span> PassByValueString().caller();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">caller</span><span class=\"hljs-params\">()</span> </span>{\n        String value = <span class=\"hljs-string\">\"Nikhil\"</span>;\n        <span class=\"hljs-keyword\">boolean</span> valueflag = <span class=\"hljs-keyword\">false</span>;\n        String output = method(value, valueflag);\n        <span class=\"hljs-comment\">/*\n         * 'output' is insignificant in this example. we are more interested in\n         * 'value' and 'valueflag'\n         */</span>\n        System.out.println(<span class=\"hljs-string\">\"output : \"</span> + output);\n        System.out.println(<span class=\"hljs-string\">\"value : \"</span> + value);\n        System.out.println(<span class=\"hljs-string\">\"valueflag : \"</span> + valueflag);\n\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">method</span><span class=\"hljs-params\">(String value, <span class=\"hljs-keyword\">boolean</span> valueflag)</span> </span>{\n        value = <span class=\"hljs-string\">\"Anand\"</span>;\n        valueflag = <span class=\"hljs-keyword\">true</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"output\"</span>;\n    }\n}\n</code></pre>\n\n<p><strong>Result</strong></p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>output : output\nvalue : Nikhil\nvalueflag : <span class=\"hljs-keyword\">false</span>\n</code></pre>\n\n<p><strong>Example 2:</strong></p>\n\n<p>/**\n * \n * Pass By Value\n *\n */</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PassByValueNewString</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-keyword\">new</span> PassByValueNewString().caller();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">caller</span><span class=\"hljs-params\">()</span> </span>{\n        String value = <span class=\"hljs-keyword\">new</span> String(<span class=\"hljs-string\">\"Nikhil\"</span>);\n        <span class=\"hljs-keyword\">boolean</span> valueflag = <span class=\"hljs-keyword\">false</span>;\n        String output = method(value, valueflag);\n        <span class=\"hljs-comment\">/*\n         * 'output' is insignificant in this example. we are more interested in\n         * 'value' and 'valueflag'\n         */</span>\n        System.out.println(<span class=\"hljs-string\">\"output : \"</span> + output);\n        System.out.println(<span class=\"hljs-string\">\"value : \"</span> + value);\n        System.out.println(<span class=\"hljs-string\">\"valueflag : \"</span> + valueflag);\n\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">method</span><span class=\"hljs-params\">(String value, <span class=\"hljs-keyword\">boolean</span> valueflag)</span> </span>{\n        value = <span class=\"hljs-string\">\"Anand\"</span>;\n        valueflag = <span class=\"hljs-keyword\">true</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"output\"</span>;\n    }\n}\n</code></pre>\n\n<p><strong>Result</strong></p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>output : output\nvalue : Nikhil\nvalueflag : <span class=\"hljs-keyword\">false</span>\n</code></pre>\n\n<p><strong>Example 3:</strong></p>\n\n<p>/**\n  This 'Pass By Value has a feeling of 'Pass By Reference'</p>\n\n<p>Some people say primitive types and 'String' are 'pass by value'\n  and objects are 'pass by reference'.</p>\n\n<p>But from this example, we can understand that it is infact pass by value only,\n  keeping in mind that here we are passing the reference as the value.\n  ie: reference is passed by value.\n  That's why are able to change and still it holds true after the local scope.\n  But we cannot change the actual reference outside the original scope.\n  what that means is demonstrated by next example of PassByValueObjectCase2.</p>\n\n<p>*/</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PassByValueObjectCase1</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Student</span> </span>{\n        <span class=\"hljs-keyword\">int</span> id;\n        String name;\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">()</span> </span>{\n        }\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Student</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id, String name)</span> </span>{\n            <span class=\"hljs-keyword\">super</span>();\n            <span class=\"hljs-keyword\">this</span>.id = id;\n            <span class=\"hljs-keyword\">this</span>.name = name;\n        }\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getId</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> id;\n        }\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> id)</span> </span>{\n            <span class=\"hljs-keyword\">this</span>.id = id;\n        }\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">getName</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> name;\n        }\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setName</span><span class=\"hljs-params\">(String name)</span> </span>{\n            <span class=\"hljs-keyword\">this</span>.name = name;\n        }\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">toString</span><span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Student [id=\"</span> + id + <span class=\"hljs-string\">\", name=\"</span> + name + <span class=\"hljs-string\">\"]\"</span>;\n        }\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-keyword\">new</span> PassByValueObjectCase1().caller();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">caller</span><span class=\"hljs-params\">()</span> </span>{\n        Student student = <span class=\"hljs-keyword\">new</span> Student(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"Nikhil\"</span>);\n        String output = method(student);\n        <span class=\"hljs-comment\">/*\n         * 'output' is insignificant in this example. we are more interested in\n         * 'student'\n         */</span>\n        System.out.println(<span class=\"hljs-string\">\"output : \"</span> + output);\n        System.out.println(<span class=\"hljs-string\">\"student : \"</span> + student);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">method</span><span class=\"hljs-params\">(Student student)</span> </span>{\n        student.setName(<span class=\"hljs-string\">\"Anand\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"output\"</span>;\n    }\n}\n</code></pre>\n\n<p><strong>Result</strong></p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>output : output\nstudent : Student [id=<span class=\"hljs-number\">10</span>, name=Anand]\n</code></pre>\n\n<p><strong>Example 4:</strong></p>\n\n<p>/**</p>\n\n<p>In addition to what was mentioned in Example3 (PassByValueObjectCase1.java),  we cannot change the actual reference outside the original scope.\"</p>\n\n<p>Note: I am not pasting the code for <code>private class Student</code>. The class definition for <code>Student</code> is same as Example3.</p>\n\n<p>*/</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PassByValueObjectCase2</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-keyword\">new</span> PassByValueObjectCase2().caller();\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">caller</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">// student has the actual reference to a Student object created</span>\n        <span class=\"hljs-comment\">// can we change this actual reference outside the local scope? Let's see</span>\n        Student student = <span class=\"hljs-keyword\">new</span> Student(<span class=\"hljs-number\">10</span>, <span class=\"hljs-string\">\"Nikhil\"</span>);\n        String output = method(student);\n        <span class=\"hljs-comment\">/*\n         * 'output' is insignificant in this example. we are more interested in\n         * 'student'\n         */</span>\n        System.out.println(<span class=\"hljs-string\">\"output : \"</span> + output);\n        System.out.println(<span class=\"hljs-string\">\"student : \"</span> + student); <span class=\"hljs-comment\">// Will it print Nikhil or Anand?</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title\">method</span><span class=\"hljs-params\">(Student student)</span> </span>{\n        student = <span class=\"hljs-keyword\">new</span> Student(<span class=\"hljs-number\">20</span>, <span class=\"hljs-string\">\"Anand\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"output\"</span>;\n    }\n\n}\n</code></pre>\n\n<p><strong>Result</strong></p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>output : output\nstudent : Student [id=<span class=\"hljs-number\">10</span>, name=Nikhil]\n</code></pre>\n    </div>",
          "vote": "54"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can never pass by reference in Java, and one of the ways that is obvious is when you want to return more than one value from a method call. Consider the following bit of code in C++:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getValues</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>&amp; arg1, <span class=\"hljs-keyword\">int</span>&amp; arg2)</span> </span>{\n    arg1 = <span class=\"hljs-number\">1</span>;\n    arg2 = <span class=\"hljs-number\">2</span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">caller</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> x;\n    <span class=\"hljs-keyword\">int</span> y;\n    getValues(x, y);\n    cout &lt;&lt; <span class=\"hljs-string\">\"Result: \"</span> &lt;&lt; x &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; y &lt;&lt; endl;\n}\n</code></pre>\n\n<p>Sometimes you want to use the same pattern in Java, but you can't; at least not directly. Instead you could do something like this:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getValues</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] arg1, <span class=\"hljs-keyword\">int</span>[] arg2)</span> </span>{\n    arg1[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n    arg2[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">2</span>;\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">caller</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span>[] x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">1</span>];\n    <span class=\"hljs-keyword\">int</span>[] y = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[<span class=\"hljs-number\">1</span>];\n    getValues(x, y);\n    System.out.println(<span class=\"hljs-string\">\"Result: \"</span> + x[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">\" \"</span> + y[<span class=\"hljs-number\">0</span>]);\n}\n</code></pre>\n\n<p>As was explained in previous answers, in Java you're passing a pointer to the array as a value into <code>getValues</code>. That is enough, because the method then modifies the array element, and by convention you're expecting element 0 to contain the return value. Obviously you can do this in other ways, such as structuring your code so this isn't necessary, or constructing a class that can contain the return value or allow it to be set. But the simple pattern available to you in C++ above is not available in Java.</p>\n    </div>",
          "vote": "52"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I thought I'd contribute this answer to add more details from the Specifications.</p>\n\n<p>First, <a href=\"https://stackoverflow.com/questions/373419/whats-the-difference-between-passing-by-reference-vs-passing-by-value\">What's the difference between passing by reference vs. passing by value?</a></p>\n\n<blockquote>\n  <p>Passing by reference means the called functions' parameter will be the\n  same as the callers' passed argument (not the value, but the identity\n  - the variable itself). </p>\n  \n  <p>Pass by value means the called functions' parameter will be a copy of\n  the callers' passed argument.</p>\n</blockquote>\n\n<p>Or from wikipedia, <a href=\"http://en.wikipedia.org/wiki/Call_by_reference#Call_by_reference\" rel=\"noreferrer\">on the subject of pass-by-reference</a></p>\n\n<blockquote>\n  <p>In call-by-reference evaluation (also referred to as\n  pass-by-reference), a function receives an implicit reference to a\n  variable used as argument, rather than a copy of its value. This\n  typically means that the function can modify (i.e. assign to) the\n  variable used as argument—something that will be seen by its caller.</p>\n</blockquote>\n\n<p>And <a href=\"http://en.wikipedia.org/wiki/Call_by_value#Call_by_value\" rel=\"noreferrer\">on the subject of pass-by-value</a></p>\n\n<blockquote>\n  <p>In call-by-value, the argument expression is evaluated, and the\n  resulting value is bound to the corresponding variable in the function [...]. \n  If the function or procedure is able to assign values to its\n  parameters, only its local copy is assigned [...].</p>\n</blockquote>\n\n<p>Second, we need to know what Java uses in its method invocations. The <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.1\" rel=\"noreferrer\">Java Language Specification</a> states</p>\n\n<blockquote>\n  <p>When the method or constructor is invoked (§15.12), <strong>the values of the\n  actual argument expressions initialize newly created parameter\n  variables</strong>, each of the declared type, before execution of the body of\n  the method or constructor.</p>\n</blockquote>\n\n<p>So it assigns (or binds) the value of the argument to the corresponding parameter variable. </p>\n\n<p><strong>What is the value of the argument?</strong></p>\n\n<p>Let's consider reference types, the <a href=\"http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.4\" rel=\"noreferrer\">Java Virtual Machine Specification</a> states</p>\n\n<blockquote>\n  <p>There are three kinds of <strong>reference types</strong>: class types, array types,\n  and interface types. <strong>Their values are references to dynamically\n  created class instances, arrays, or class instances or arrays that\n  implement interfaces, respectively.</strong></p>\n</blockquote>\n\n<p>The <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.3.1\" rel=\"noreferrer\">Java Language Specification</a> also states</p>\n\n<blockquote>\n  <p><strong>The reference values (often just references) are pointers to these objects</strong>, and a special null reference, which refers to no object.</p>\n</blockquote>\n\n<p>The value of an argument (of some reference type) is a pointer to an object. Note that a variable, an invocation of a method with a reference type return type, and an instance creation expression (<code>new ...</code>) all resolve to a reference type value.</p>\n\n<p>So</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">method</span> <span class=\"hljs-params\">(String param)</span> </span>{}\n...\nString <span class=\"hljs-keyword\">var</span> = <span class=\"hljs-keyword\">new</span> String(<span class=\"hljs-string\">\"ref\"</span>);\nmethod(<span class=\"hljs-keyword\">var</span>);\nmethod(<span class=\"hljs-keyword\">var</span>.toString());\nmethod(<span class=\"hljs-keyword\">new</span> String(<span class=\"hljs-string\">\"ref\"</span>));\n</code></pre>\n\n<p>all bind the value of a reference to a <code>String</code> instance to the method's newly created parameter, <code>param</code>. This is exactly what the definition of pass-by-value describes. As such, <strong>Java is pass-by-value</strong>.</p>\n\n<p><strong>The fact that you can follow the reference to invoke a method or access a field of the referenced object is completely irrelevant to the conversation.</strong> The definition of pass-by-reference was</p>\n\n<blockquote>\n  <p>This typically means that the function can modify (i.e. assign to) the\n  variable used as argument—something that will be seen by its caller.</p>\n</blockquote>\n\n<p>In Java, modifying the variable means reassigning it. In Java, if you reassigned the variable within the method, it would go unnoticed to the caller. <strong>Modifying the object referenced by the variable is a different concept entirely.</strong> </p>\n\n<hr>\n\n<p>Primitive values are also defined in the Java Virtual Machine Specification, <a href=\"http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.3\" rel=\"noreferrer\">here</a>. The value of the type is the corresponding integral or floating point value, encoded appropriately (8, 16, 32, 64, etc. bits).</p>\n    </div>",
          "vote": "50"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>In Java only references are passed and are passed by value:</strong></p>\n\n<p>Java arguments are <strong>all passed by value</strong> (the reference is copied when used by the method) :</p>\n\n<p>In the case of primitive types, Java behaviour is simple: \nThe value is copied in another instance of the primitive type.</p>\n\n<p>In case of Objects, this is the same: \nObject variables are pointers (buckets) holding only Object’s <strong>address</strong> that was created using the \"new\" keyword, and are copied like primitive types.</p>\n\n<p>The behaviour can appear different from primitive types: Because the copied object-variable contains the same address (to the same Object).\nObject's <strong>content/members</strong> might still be modified within a method and later access outside, giving the illusion that the (containing) Object itself was passed by reference. </p>\n\n<p>\"String\" Objects appear to be a good <strong>counter-example</strong> to the urban legend saying that \"Objects are passed by reference\":</p>\n\n<p>In effect, using a method, you will never be able, to update the value of a String passed as argument:</p>\n\n<p>A String Object, holds characters by an array declared <strong>final</strong> that can't be modified.\nOnly the address of the Object might be replaced by another using \"new\". \nUsing \"new\" to update the variable, will not let the Object be accessed from outside, since the variable was initially passed by value and copied.</p>\n    </div>",
          "vote": "48"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The distinction, or perhaps just the way I remember as I used to be under the same impression as the original poster is this: Java is always pass by value. All objects( in Java, anything except for primitives) in Java are references. These references are passed by value.</p>\n    </div>",
          "vote": "44"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As many people mentioned it before, <a href=\"http://academic.regis.edu/dbahr/GeneralPages/IntroToProgramming/JavaPassByValue.htm\" rel=\"noreferrer\">Java is always pass-by-value</a></p>\n\n<p>Here is another example that will help you understand the difference (<a href=\"http://www.javaranch.com/campfire/StoryPassBy.jsp\" rel=\"noreferrer\">the classic swap example</a>):</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n    Integer a = <span class=\"hljs-keyword\">new</span> Integer(<span class=\"hljs-number\">2</span>);\n    Integer b = <span class=\"hljs-keyword\">new</span> Integer(<span class=\"hljs-number\">3</span>);\n    System.out.println(<span class=\"hljs-string\">\"Before: a = \"</span> + a + <span class=\"hljs-string\">\", b = \"</span> + b);\n    swap(a,b);\n    System.out.println(<span class=\"hljs-string\">\"After: a = \"</span> + a + <span class=\"hljs-string\">\", b = \"</span> + b);\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(Integer iA, Integer iB)</span> </span>{\n    Integer tmp = iA;\n    iA = iB;\n    iB = tmp;\n  }\n}\n</code></pre>\n\n<p>Prints:  </p>\n\n<blockquote>\n  <p>Before: a = 2, b = 3<br>\n  After: a = 2, b = 3</p>\n</blockquote>\n\n<p>This happens because iA and iB are new local reference variables that have the same value of the passed references (they point to a and b respectively). So, trying to change the references of iA or iB will only change in the local scope and not outside of this method.</p>\n    </div>",
          "vote": "42"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I always think of it as \"pass by copy\". It is a copy of the value be it primitive or reference. If it is a primitive it is a copy of the bits that are the value and if it is an Object it is a copy of the reference.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PassByCopy</span></span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">changeName</span><span class=\"hljs-params\">(Dog d)</span></span>{\n        d.name = <span class=\"hljs-string\">\"Fido\"</span>;\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>{\n        Dog d = <span class=\"hljs-keyword\">new</span> Dog(<span class=\"hljs-string\">\"Maxx\"</span>);\n        System.out.println(<span class=\"hljs-string\">\"name= \"</span>+ d.name);\n        changeName(d);\n        System.out.println(<span class=\"hljs-string\">\"name= \"</span>+ d.name);\n    }\n}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Dog</span></span>{\n    <span class=\"hljs-keyword\">public</span> String name;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Dog</span><span class=\"hljs-params\">(String s)</span></span>{\n        <span class=\"hljs-keyword\">this</span>.name = s;\n    }\n}\n</code></pre>\n\n<p>output of java PassByCopy:</p>\n\n<blockquote>\n  <p>name= Maxx<br>\n  name= Fido</p>\n</blockquote>\n\n<p>Primitive wrapper classes and Strings are immutable so any example using those types will not work the same as other types/objects.</p>\n    </div>",
          "vote": "35"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Unlike some other languages, Java does not allow you to choose between pass-by-value and pass-by-reference—all arguments are passed by value. A method call can pass two types of values to a method—copies of primitive values (e.g., values of int and double) and copies of references to objects.</p>\n\n<p>When a method modifies a primitive-type parameter, changes to the parameter have no effect on the original argument value in the calling method.</p>\n\n<p>When it comes to objects, objects themselves cannot be passed to methods. So we pass the reference(address) of the object. We can manipulate the original object using this reference.</p>\n\n<p><strong>How Java creates and stores objects:</strong> When we create an object we store the object’s address in a reference variable. Let's analyze the following statement.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Account account1 = <span class=\"hljs-keyword\">new</span> Account();\n</code></pre>\n\n<p>“Account account1” is the type and name of the reference variable, “=” is the assignment operator, “new” asks for the required amount of space from the system. The constructor to the right of keyword new which creates the object is called implicitly by the keyword new. Address of the created object(result of right value, which is an expression called \"class instance creation expression\") is assigned to the left value (which is a reference variable with a name and a type specified) using the assign operator.</p>\n\n<p>Although an object’s reference is passed by value, a method can still interact with the referenced object by calling its public methods using the copy of the object’s reference. Since the reference stored in the parameter is a copy of the reference that was passed as an argument, the parameter in the called method and the argument in the calling method refer to the same object in memory.</p>\n\n<p>Passing references to arrays, instead of the array objects themselves, makes sense for performance reasons. Because everything in Java is passed by value, if array objects were passed,\na copy of each element would be passed. For large arrays, this would waste time and consume\nconsiderable storage for the copies of the elements.</p>\n\n<p>In the image below you can see we have two reference variables(These are called pointers in C/C++, and I think that term makes it easier to understand this feature.) in the main method. Primitive and reference variables are kept in stack memory(left side in images below). array1 and array2 reference variables \"point\" (as C/C++ programmers call it) or reference to a and b arrays respectively, which are objects (values these reference variables hold are addresses of objects) in heap memory (right side in images below).</p>\n\n<p><a href=\"https://i.stack.imgur.com/sF7QZ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/sF7QZ.png\" alt=\"Pass by value example 1\"></a></p>\n\n<p>If we pass the value of array1 reference variable as an argument to the reverseArray method, a reference variable is created in the method and that reference variable starts pointing to the same array (a). </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span>\n</span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">reverseArray</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span>[] array1)</span>\n    </span>{\n        <span class=\"hljs-comment\">// ...</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span>\n    </span>{\n        <span class=\"hljs-keyword\">int</span>[] array1 = { <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">7</span> };\n        <span class=\"hljs-keyword\">int</span>[] array2 = { <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">190</span>, <span class=\"hljs-number\">0</span> };\n\n        reverseArray(array1);\n    }\n}\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/W1wgZ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/W1wgZ.png\" alt=\"Pass by value example 2\"></a></p>\n\n<p>So, if we say </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>array1[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">5</span>;\n</code></pre>\n\n<p>in reverseArray method, it will make a change in array a.</p>\n\n<p>We have another reference variable in reverseArray method (array2) that points to an array c. If we were to say </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>array1 = array2;\n</code></pre>\n\n<p>in reverseArray method, then the reference variable array1 in method reverseArray would stop pointing to array a and start pointing to array c (Dotted line in second image).</p>\n\n<p>If we return value of reference variable array2 as the return value of method reverseArray and assign this value to reference variable array1 in main method, array1 in main will start pointing to array c.</p>\n\n<p>So let's write all the things we have done at once now.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span>\n</span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">int</span>[] reverseArray(<span class=\"hljs-keyword\">int</span>[] array1)\n    {\n        <span class=\"hljs-keyword\">int</span>[] array2 = { -<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">1</span> };\n\n        array1[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">5</span>; <span class=\"hljs-comment\">// array a becomes 5, 10, -7</span>\n\n        array1 = array2; <span class=\"hljs-comment\">/* array1 of reverseArray starts\n          pointing to c instead of a (not shown in image below) */</span>\n        <span class=\"hljs-keyword\">return</span> array2;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span>\n    </span>{\n        <span class=\"hljs-keyword\">int</span>[] array1 = { <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>, -<span class=\"hljs-number\">7</span> };\n        <span class=\"hljs-keyword\">int</span>[] array2 = { <span class=\"hljs-number\">5</span>, -<span class=\"hljs-number\">190</span>, <span class=\"hljs-number\">0</span> };\n\n        array1 = reverseArray(array1); <span class=\"hljs-comment\">/* array1 of \n         main starts pointing to c instead of a */</span>\n    }\n}\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/5hRyX.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/5hRyX.png\" alt=\"enter image description here\"></a></p>\n\n<p>And now that reverseArray method is over, its reference variables(array1 and array2) are gone. Which means we now only have the two reference variables in main method array1 and array2 which point to c and b arrays respectively. No reference variable is pointing to object (array) a. So it is eligible for garbage collection.</p>\n\n<p>You could also assign value of array2 in main to array1. array1 would start pointing to b.</p>\n    </div>",
          "vote": "35"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Java has only pass by value. A very simple example to validate this.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span> </span>{\n    MyClass obj = <span class=\"hljs-keyword\">null</span>;\n    init(obj);\n    <span class=\"hljs-comment\">//After calling init method, obj still points to null</span>\n    <span class=\"hljs-comment\">//this is because obj is passed as value and not as reference.</span>\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">init</span><span class=\"hljs-params\">(MyClass objVar)</span> </span>{\n    objVar = <span class=\"hljs-keyword\">new</span> MyClass();\n}\n</code></pre>\n    </div>",
          "vote": "34"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have created a thread devoted to these kind of questions for <em>any</em> programming languages <a href=\"https://stackoverflow.com/questions/2027/pass-by-reference-or-pass-by-value\">here</a>.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/2027/pass-by-reference-or-pass-by-value#2028\">Java is also mentioned</a>. Here is the short summary:</p>\n\n<ul>\n<li>Java passes it parameters by value</li>\n<li>\"by value\" is the only way in java to pass a parameter to a method</li>\n<li>using methods from the object given as parameter will alter the\nobject as the references point to\nthe original objects. (if that\nmethod itself alters some values)</li>\n</ul>\n    </div>",
          "vote": "30"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To make a long story short, <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\" rel=\"noreferrer\">Java</a> objects have some very peculiar properties.</p>\n\n<p>In general, Java has primitive types (<code>int</code>, <code>bool</code>, <code>char</code>, <code>double</code>, etc) that are passed directly by value. Then Java has objects (everything that derives from <code>java.lang.Object</code>). Objects are actually always handled through a reference (a reference being a pointer that you can't touch). That means that in effect, objects are passed by reference, as the references are normally not interesting. It does however mean that you cannot change which object is pointed to as the reference itself is passed by value.</p>\n\n<p>Does this sound strange and confusing? Let's consider how C implements pass by reference and pass by value. In C, the default convention is pass by value. <code>void foo(int x)</code> passes an int by value. <code>void foo(int *x)</code> is a function that does not want an <code>int a</code>, but a pointer to an int: <code>foo(&amp;a)</code>. One would use this with the <code>&amp;</code> operator to pass a variable address.</p>\n\n<p>Take this to C++, and we have references. References are basically (in this context) syntactic sugar that hide the pointer part of the equation: <code>void foo(int &amp;x)</code> is called by <code>foo(a)</code>, where the compiler itself knows that it is a reference and the address of the non-reference <code>a</code> should be passed. In Java, all variables referring to objects are actually of reference type, in effect forcing call by reference for most intends and purposes without the fine grained control (and complexity) afforded by, for example, C++.</p>\n    </div>",
          "vote": "30"
        }
      ]
    },
    {
      "question": "What is the difference between String and string in C#?",
      "url": "https://stackoverflow.com/questions/7074/what-is-the-difference-between-string-and-string-in-c",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Example (<em>note the case</em>):</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-built_in\">string</span> s = <span class=\"hljs-string\">\"Hello world!\"</span>;\nString s = <span class=\"hljs-string\">\"Hello world!\"</span>;\n</code></pre>\n\n<p>What are the guidelines for the use of each? And what are the differences?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/string\" rel=\"noreferrer\"><code>string</code></a> is an alias in C# for <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string\" rel=\"noreferrer\"><code>System.String</code></a>.<br>\nSo technically, there is no difference.  It's like <a href=\"https://stackoverflow.com/questions/62503/c-int-or-int32-should-i-care\"><code>int</code> <em>vs.</em> <code>System.Int32</code></a>.</p>\n\n<p>As far as guidelines, it's generally recommended to use <code>string</code> any time you're referring to an object.</p>\n\n<p>e.g. </p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-built_in\">string</span> place = <span class=\"hljs-string\">\"world\"</span>;\n</code></pre>\n\n<p>Likewise, I think it's generally recommended to use <code>String</code> if you need to refer specifically to the class.</p>\n\n<p>e.g.</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-built_in\">string</span> greet = String.Format(<span class=\"hljs-string\">\"Hello {0}!\"</span>, place);\n</code></pre>\n\n<h2>This is the style that Microsoft tends to use in <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.string.format#examples\" rel=\"noreferrer\">their examples</a>.</h2>\n\n<p>It appears that the guidance in this area may have changed, as <a href=\"https://github.com/StyleCop\" rel=\"noreferrer\">StyleCop</a> now enforces the use of the C# specific aliases.</p>\n    </div>",
          "vote": "6451"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n\n<p>Just for the sake of completeness, here's a brain dump of related information...</p>\n<p>As others have noted, <code>string</code> is an alias for <code>System.String</code>. Assuming your code using <code>String</code> compiles to <code>System.String</code> (i.e. you haven't got a using directive for some other namespace with a different <code>String</code> type), they compile to the same code, so at execution time there is no difference whatsoever. This is just one of the aliases in C#. The complete list is:</p>\n<pre class=\"lang-c# s-code-block hljs\"><code>object:  System.Object\n<span class=\"hljs-built_in\">string</span>:  System.String\n<span class=\"hljs-keyword\">bool</span>:    System.Boolean\nbyte:    System.Byte\nsbyte:   System.SByte\n<span class=\"hljs-keyword\">short</span>:   System.Int16\nushort:  System.UInt16\n<span class=\"hljs-keyword\">int</span>:     System.Int32\nuint:    System.UInt32\n<span class=\"hljs-keyword\">long</span>:    System.Int64\nulong:   System.UInt64\n<span class=\"hljs-keyword\">float</span>:   System.Single\n<span class=\"hljs-keyword\">double</span>:  System.Double\ndecimal: System.Decimal\n<span class=\"hljs-keyword\">char</span>:    System.Char\n</code></pre>\n<p>Apart from <code>string</code> and <code>object</code>, the aliases are all to value types. <code>decimal</code> is a value type, but not a primitive type in the CLR. The only primitive type which doesn't have an alias is <code>System.IntPtr</code>.</p>\n<p>In the spec, the value type aliases are known as \"simple types\". Literals can be used for constant values of every simple type; no other value types have literal forms available. (Compare this with VB, which allows <code>DateTime</code> literals, and has an alias for it too.)</p>\n<p>There is one circumstance in which you <em>have</em> to use the aliases: when explicitly specifying an enum's underlying type. For instance:</p>\n<pre class=\"lang-c# s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Foo</span> :</span> UInt32 {} <span class=\"hljs-comment\">// Invalid</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title\">Bar</span> :</span> uint   {} <span class=\"hljs-comment\">// Valid</span>\n</code></pre>\n<p>That's just a matter of the way the spec defines enum declarations - the part after the colon has to be the <em>integral-type</em> production, which is one token of <code>sbyte</code>, <code>byte</code>, <code>short</code>, <code>ushort</code>, <code>int</code>, <code>uint</code>, <code>long</code>, <code>ulong</code>, <code>char</code>... as opposed to a <em>type</em> production as used by variable declarations for example. It doesn't indicate any other difference.</p>\n<p>Finally, when it comes to which to use: personally I use the aliases everywhere for the implementation, but the CLR type for any APIs. It really doesn't matter too much which you use in terms of implementation - consistency among your team is nice, but no-one else is going to care. On the other hand, it's genuinely important that if you refer to a type in an API, you do so in a language-neutral way. A method called <code>ReadInt32</code> is unambiguous, whereas a method called <code>ReadInt</code> requires interpretation. The caller could be using a language that defines an <code>int</code> alias for <code>Int16</code>, for example. The .NET framework designers have followed this pattern, good examples being in the <code>BitConverter</code>, <code>BinaryReader</code> and <code>Convert</code> classes.</p>\n    </div>",
          "vote": "3587"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>String</code> stands for <code>System.String</code> and it is a .NET Framework type. <strong><code>string</code> is an alias</strong> in the C# language for  <code>System.String</code>. Both of them are compiled to <strong><code>System.String</code> in IL</strong> (Intermediate Language), so there is no difference. Choose what you like and use that. If you code in C#, I'd prefer <code>string</code> as it's a C# type alias and well-known by C# programmers.</p>\n\n<p>I can say the same about <strong>(<code>int</code>, <code>System.Int32</code>)</strong> etc..</p>\n    </div>",
          "vote": "759"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The best answer I have ever heard about using the provided type aliases in C# comes from Jeffrey Richter in his book <a href=\"https://rads.stackoverflow.com/amzn/click/com/0735621632\" rel=\"noreferrer\">CLR Via C#</a>. Here are his 3 reasons:</p>\n\n<blockquote>\n  <ul>\n  <li>I've seen a number of developers confused, not knowing whether to use <strong>string</strong> or <strong>String</strong> in their code. Because in C# the string (a keyword) maps exactly to System.String (an FCL type), there is no difference and either can be used.</li>\n  <li>In C#, <strong>long</strong> maps to <strong>System.Int64</strong>, but in a different programming language, <strong>long</strong> could map to an <strong>Int16</strong> or <strong>Int32</strong>. In fact, C++/CLI does in fact treat long as an <strong>Int32</strong>. Someone reading source code in one language could easily misinterpret the code's intention if he or she were used to programming in a different programming language. In fact, most languages won't even treat <strong>long</strong> as a keyword and won't compile code that uses it.</li>\n  <li>The FCL has many methods that have type names as part of their method names. For example, the <strong>BinaryReader</strong> type offers methods such as <strong>ReadBoolean</strong>, <strong>ReadInt32</strong>, <strong>ReadSingle</strong>, and so on, and the <strong>System.Convert</strong> type offers methods such as <strong>ToBoolean</strong>, <strong>ToInt32</strong>, <strong>ToSingle</strong>, and so on. Although it's legal to write the following code, the line with float feels very unnatural to me, and it's not obvious that the line is correct:</li>\n  </ul>\n</blockquote>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>BinaryReader br = <span class=\"hljs-keyword\">new</span> BinaryReader(...);\n<span class=\"hljs-built_in\">float</span> val  = br.ReadSingle(); <span class=\"hljs-comment\">// OK, but feels unnatural</span>\nSingle val = br.ReadSingle(); <span class=\"hljs-comment\">// OK and feels good</span>\n</code></pre>\n\n<p>So there you have it. I think these are all really good points. I however, don't find myself using Jeffrey's advice in my own code. Maybe I am too stuck in my C# world but I end up trying to make my code look like the framework code.</p>\n    </div>",
          "vote": "537"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>string</code> is a reserved word, but <code>String</code> is just a class name. \nThis means that <code>string</code> cannot be used as a variable name by itself.</p>\n\n<p>If for some reason you wanted a variable called <em>string</em>, you'd see only the first of these compiles:</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>StringBuilder String = <span class=\"hljs-keyword\">new</span> StringBuilder();  <span class=\"hljs-comment\">// compiles</span>\nStringBuilder <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-keyword\">new</span> StringBuilder();  <span class=\"hljs-comment\">// doesn't compile </span>\n</code></pre>\n\n<p>If you really want a variable name called <em>string</em> you can use <code>@</code> as a prefix:</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>StringBuilder @string = <span class=\"hljs-keyword\">new</span> StringBuilder();\n</code></pre>\n\n<p>Another critical difference: Stack Overflow highlights them differently. </p>\n    </div>",
          "vote": "479"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>There is one difference</strong> - you can't use <code>String</code> without <code>using System;</code> beforehand.</p>\n    </div>",
          "vote": "416"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's been covered above; however, you can't use <code>string</code> in reflection; you must use <code>String</code>.</p>\n    </div>",
          "vote": "329"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>System.String</code> is the .NET string class - in C# <code>string</code> is an alias for <code>System.String</code> - so in use they are the same.</p>\n\n<p>As for guidelines I wouldn't get too bogged down and just use whichever you feel like - there are more important things in life and the code is going to be the same anyway.</p>\n\n<p>If you find yourselves building systems where it is necessary to specify the size of the integers you are using and so tend to use <code>Int16</code>, <code>Int32</code>, <code>UInt16</code>, <code>UInt32</code> etc. then it might look more natural to use <code>String</code> - and when moving around between different .net languages it might make things more understandable - otherwise I would use string and int.</p>\n    </div>",
          "vote": "280"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>\nI prefer the capitalized <code>.NET</code> types (rather than the aliases) for formatting reasons. The <code>.NET</code> types are colored the same as other object types (the value types are proper objects, after all).</p>\n\n<p>Conditional and control keywords (like <code>if</code>, <code>switch</code>, and <code>return</code>) are lowercase and colored dark blue (by default). And I would rather not have the disagreement in use and format.</p>\n\n<p>Consider:</p>\n\n<pre class=\"lang-c# s-code-block hljs\"><code>String someString; \n<span class=\"hljs-built_in\">string</span> anotherString; \n</code></pre>\n    </div>",
          "vote": "226"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>string</code> and <code>String</code> are identical in all ways (except the uppercase \"S\").  There are no performance implications either way.</p>\n\n<p>Lowercase <code>string</code> is preferred in most projects due to the syntax highlighting</p>\n    </div>",
          "vote": "206"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>C# is a language which is used together with the CLR.</p>\n\n<p><strong><code>string</code></strong> is a type in C#.</p>\n\n<p><strong><code>System.String</code></strong> is a type in the CLR.</p>\n\n<p>When you use C# together with the CLR <strong><code>string</code></strong> will be mapped to <strong><code>System.String</code></strong>.</p>\n\n<p>Theoretically, you could implement a C#-compiler that generated Java bytecode. A sensible implementation of this compiler would probably map <strong><code>string</code></strong> to <strong><code>java.lang.String</code></strong> in order to interoperate with the Java runtime library.</p>\n    </div>",
          "vote": "197"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"http://www.youtube.com/watch?v=ikqUUIg8gmk\" rel=\"nofollow noreferrer\">This YouTube</a> video demonstrates practically how they differ.</p>\n<p>But now for a long textual answer.</p>\n<p>When we talk about <code>.NET</code> there are two different things one there is <code>.NET</code> framework and the other there are languages ( <code>C#</code>, <code>VB.NET</code> etc) which use that framework.</p>\n<p><img src=\"https://i.stack.imgur.com/jQUcj.png\" alt=\"enter image description here\"></p>\n<p>\"<code>System.String</code>\" a.k.a \"String\" ( capital \"S\") is a <code>.NET</code> framework data type while \"string\" is a <code>C#</code> data type.</p>\n<p><img src=\"https://i.stack.imgur.com/tKhjh.png\" alt=\"enter image description here\"></p>\n<p>In short \"String\" is an alias ( the same thing called with different names) of \"string\". So technically both the below code statements will give the same output.</p>\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>String s = <span class=\"hljs-string\">\"I am String\"</span>;\n</code></pre>\n<p>or</p>\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-built_in\">string</span> s = <span class=\"hljs-string\">\"I am String\"</span>;\n</code></pre>\n<p>In the same way, there are aliases for other c# data type as shown below:-</p>\n<p>object: <code>System.Object</code>, string: <code>System.String</code>, bool: <code>System.Boolean</code>, byte: <code>System.Byte</code>, sbyte: <code>System.SByte</code>, short: <code>System.Int16</code> and so on</p>\n<p><strong>Now the million-dollar question from programmer's point of view So when to use \"String\" and \"string\"?</strong></p>\n<p>The first thing to avoid confusion use one of them consistently. But from best practices perspective when you do variable declaration it's good to use \"string\" ( small \"s\") and when you are using it as a class name then \"String\" ( capital \"S\") is preferred.</p>\n<p>In the below code the left-hand side is a variable declaration and it declared using \"string\". On the right-hand side, we are calling a method so \"String\" is more sensible.</p>\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-built_in\">string</span> s = String.ToUpper() ;\n</code></pre>\n    </div>",
          "vote": "181"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Lower case <code>string</code> is an alias for <code>System.String</code>.\nThey are the same in <code>C#</code>.</p>\n\n<p>There's a debate over whether you should use the System types (<code>System.Int32</code>, <code>System.String</code>, etc.) types or the <code>C# aliases</code> (<code>int</code>, <code>string</code>, etc). I personally believe you should use the <code>C# aliases</code>, but that's just my personal preference.</p>\n    </div>",
          "vote": "175"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>string</code> is just an alias for <code>System.String</code>. The compiler will treat them identically.</p>\n\n<p>The only practical difference is the syntax highlighting as you mention, and that you have to write <code>using System</code> if you use <code>String</code>.</p>\n    </div>",
          "vote": "163"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Both are same. But from coding guidelines perspective it's better to use <code>string</code> instead of <code>String</code>. This is what generally developers use. e.g. instead of using <code>Int32</code> we use <code>int</code> as <code>int</code> is alias to <code>Int32</code></p>\n\n<p>FYI\n“The keyword string is simply an alias for the predefined class <code>System.String</code>.” - C# Language Specification 4.2.3\n<a href=\"http://msdn2.microsoft.com/En-US/library/aa691153.aspx\" rel=\"noreferrer\">http://msdn2.microsoft.com/En-US/library/aa691153.aspx</a></p>\n    </div>",
          "vote": "150"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As the others are saying, they're the same.  StyleCop rules, by default, will enforce you to use <code>string</code> as a C# code style best practice, except when referencing <code>System.String</code> static functions, such as <code>String.Format</code>, <code>String.Join</code>, <code>String.Concat</code>, etc...</p>\n    </div>",
          "vote": "126"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>New answer after 6 years and 5 months (procrastination).</p>\n\n<p>While <code>string</code> is a reserved C# keyword that always has a fixed meaning, <code>String</code> is just an ordinary <em>identifier</em> which could refer to anything. Depending on members of the current type, the current namespace and the applied <code>using</code> directives and their placement, <code>String</code> could be a value or a type distinct from <code>global::System.String</code>.</p>\n\n<p>I shall provide two examples where <em><code>using</code> directives will not help</em>.</p>\n\n<hr>\n\n<p>First, when <code>String</code> is a <strong><em>value</em></strong> of the current type (or a local variable):</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MySequence</span>&lt;<span class=\"hljs-title\">TElement</span>&gt;\n{\n  <span class=\"hljs-keyword\">public</span> IEnumerable&lt;TElement&gt; String { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Example</span>(<span class=\"hljs-params\"></span>)</span>\n  {\n    <span class=\"hljs-keyword\">var</span> test = String.Format(<span class=\"hljs-string\">\"Hello {0}.\"</span>, DateTime.Today.DayOfWeek);\n  }\n}\n</code></pre>\n\n<p>The above will not compile because <code>IEnumerable&lt;&gt;</code> does not have a non-static member called <code>Format</code>, and no extension methods apply. In the above case, it may still be possible to use <code>String</code> in other contexts where a <em>type</em> is the only possibility syntactically. For example <code>String local = \"Hi mum!\";</code> could be OK (depending on namespace and <code>using</code> directives).</p>\n\n<p>Worse: Saying <code>String.Concat(someSequence)</code> will likely (depending on <code>using</code>s) go to the Linq extension method <code>Enumerable.Concat</code>. It will not go to the static method <code>string.Concat</code>.</p>\n\n<hr>\n\n<p>Secondly, when <code>String</code> is another <strong><em>type</em></strong>, nested inside the current type:</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPiano</span>\n{\n  <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">String</span>\n  {\n  }\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Example</span>(<span class=\"hljs-params\"></span>)</span>\n  {\n    <span class=\"hljs-keyword\">var</span> test1 = String.Format(<span class=\"hljs-string\">\"Hello {0}.\"</span>, DateTime.Today.DayOfWeek);\n    String test2 = <span class=\"hljs-string\">\"Goodbye\"</span>;\n  }\n}\n</code></pre>\n\n<p>Neither statement in the <code>Example</code> method compiles. Here <code>String</code> is always a piano <a href=\"http://en.wikipedia.org/wiki/String_(music)\" rel=\"noreferrer\">string</a>, <code>MyPiano.String</code>. No member (<code>static</code> or not) <code>Format</code> exists on it (or is inherited from its base class). And the value <code>\"Goodbye\"</code> cannot be converted into it.</p>\n    </div>",
          "vote": "112"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using System types makes it easier to port between C# and VB.Net, if you are into that sort of thing.</p>\n    </div>",
          "vote": "104"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Against what seems to be common practice among other programmers, I prefer <code>String</code> over <code>string</code>, just to highlight the fact that <code>String</code> is a reference type, as Jon Skeet mentioned.</p>\n    </div>",
          "vote": "92"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>string</code> is an alias (or shorthand) of <code>System.String</code>. That means, by typing <code>string</code> we meant <code>System.String</code>. You can read more in think link: <a href=\"http://www.jeeshenlee.com/2011/10/difference-between-string-and.html\" rel=\"noreferrer\">'string' is an alias/shorthand of System.String.</a></p>\n    </div>",
          "vote": "85"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I'd just like to add this to lfousts answer, from Ritchers book:</p>\n\n<blockquote>\n  <p>The C# language specification states, “As a matter of style, use of the keyword is favored over\n  use of the complete system type name.” I disagree with the language specification; I prefer\n  to use the FCL type names and completely avoid the primitive type names. In fact, I wish that\n  compilers didn’t even offer the primitive type names and forced developers to use the FCL\n  type names instead. Here are my reasons:</p>\n  \n  <ul>\n  <li><p>I’ve seen a number of developers confused, not knowing whether to use <strong>string</strong>\n  or <strong>String</strong> in their code. Because in C# <strong>string</strong> (a keyword) maps exactly to\n  <strong>System.String</strong> (an FCL type), there is no difference and either can be used. Similarly,\n  I’ve heard some developers say that <strong>int</strong> represents a 32-bit integer when the application\n  is running on a 32-bit OS and that it represents a 64-bit integer when the application\n  is running on a 64-bit OS. This statement is absolutely false: in C#, an <strong>int</strong> always maps\n  to <strong>System.Int32</strong>, and therefore it represents a 32-bit integer regardless of the OS the\n  code is running on. If programmers would use <strong>Int32</strong> in their code, then this potential\n  confusion is also eliminated.</p></li>\n  <li><p>In C#, <strong>long</strong> maps to <strong>System.Int64</strong>, but in a different programming language, <strong>long</strong>\n  could map to an <strong>Int16</strong> or <strong>Int32</strong>. In fact, C++/CLI does treat <strong>long</strong> as an <strong>Int32</strong>.\n  Someone reading source code in one language could easily misinterpret the code’s\n  intention if he or she were used to programming in a different programming language.\n  In fact, most languages won’t even treat <strong>long</strong> as a keyword and won’t compile code\n  that uses it.</p></li>\n  <li><p>The FCL has many methods that have type names as part of their method names. For\n  example, the <strong>BinaryReader</strong> type offers methods such as <strong>ReadBoolean</strong>, <strong>ReadInt32</strong>,\n  <strong>ReadSingle</strong>, and so on, and the <strong>System.Convert</strong> type offers methods such as\n  <strong>ToBoolean</strong>, <strong>ToInt32</strong>, <strong>ToSingle</strong>, and so on. Although it’s legal to write the following\n  code, the line with <strong>float</strong> feels very unnatural to me, and it’s not obvious that the line is\n  correct:</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>BinaryReader br = <span class=\"hljs-keyword\">new</span> BinaryReader(...);\n<span class=\"hljs-built_in\">float</span> val = br.ReadSingle(); <span class=\"hljs-comment\">// OK, but feels unnatural</span>\nSingle val = br.ReadSingle(); <span class=\"hljs-comment\">// OK and feels good</span>\n</code></pre></li>\n  <li><p>Many programmers that use C# exclusively tend to forget that other programming\n  languages can be used against the CLR, and because of this, C#-isms creep into the\n  class library code. For example, Microsoft’s FCL is almost exclusively written in C# and\n  developers on the FCL team have now introduced methods into the library such as\n  <strong>Array</strong>’s <strong>GetLongLength</strong>, which returns an <strong>Int64</strong> value that is a <strong>long</strong> in C# but not\n  in other languages (like C++/CLI). Another example is <strong>System.Linq.Enumerable</strong>’s\n  <strong>LongCount</strong> method.</p></li>\n  </ul>\n</blockquote>\n\n<p>I didn't get his opinion before I read the complete paragraph.  </p>\n    </div>",
          "vote": "81"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>String (<code>System.String</code>) is a class in the base class library. string (lower case) is a reserved work in C# that is an alias for System.String. Int32 vs int is a similar situation as is <code>Boolean vs. bool</code>. These C# language specific keywords enable you to declare primitives in a style similar to C. </p>\n    </div>",
          "vote": "73"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It's a matter of convention, really.  <code>string</code> just looks more like C/C++ style.  The general convention is to use whatever shortcuts your chosen language has provided (int/Int for <code>Int32</code>).  This goes for \"object\" and <code>decimal</code> as well.</p>\n\n<p>Theoretically this could help to port code into some future 64-bit standard in which \"int\" might mean <code>Int64</code>, but that's not the point, and I would expect any upgrade wizard to change any <code>int</code> references to <code>Int32</code> anyway just to be safe.</p>\n    </div>",
          "vote": "70"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>String</code> is not a keyword and it can be used as Identifier whereas <code>string</code> is a keyword and cannot be used as Identifier. And in function point of view both are same.</p>\n    </div>",
          "vote": "68"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Coming late to the party: I use the CLR types 100% of the time (well, except if <em>forced</em> to use the C# type, but I don't remember when the last time that was). </p>\n\n<p>I originally started doing this years ago, as per the CLR books by Ritchie. It made sense to me that all CLR languages ultimately have to be able to support the set of CLR types, so using the CLR types yourself provided clearer, and possibly more \"reusable\" code.</p>\n\n<p>Now that I've been doing it for years, it's a habit and I like the coloration that VS shows for the CLR types.</p>\n\n<p>The only real downer is that auto-complete uses the C# type, so I end up re-typing automatically generated types to specify the CLR type instead.</p>\n\n<p>Also, now, when I see \"int\" or \"string\", it just looks really wrong to me, like I'm looking at 1970's C code.</p>\n    </div>",
          "vote": "67"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is no difference.</p>\n\n<p>The C# keyword <code>string</code> maps to the .NET type <code>System.String</code> - it is an alias that keeps to the naming conventions of the language.</p>\n\n<p>Similarly, <code>int</code> maps to <code>System.Int32</code>.</p>\n    </div>",
          "vote": "50"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><a href=\"https://stackoverflow.com/users/23283/jaredpar\">@JaredPar</a> (a developer on the C# compiler and prolific SO user!) wrote a <a href=\"http://blog.paranoidcoding.com/2019/04/08/string-vs-String-is-not-about-style.html\" rel=\"nofollow noreferrer\">great blog post</a> on this issue. I think it is worth sharing here. It is a nice perspective on our subject.</p>\n<blockquote>\n<h1><code>string</code> vs. <code>String</code> is not a style debate</h1>\n</blockquote>\n<blockquote>\n<p>[...]</p>\n</blockquote>\n<blockquote>\n<p>The keyword <code>string</code> has concrete meaning in C#. It is the type <code>System.String</code> which exists in the core runtime assembly. The runtime intrinsically understands this type and provides the capabilities developers expect for strings in .NET. Its presence is so critical to C# that if that type doesn’t exist the compiler will exit before attempting to even parse a line of code. Hence <code>string</code> has a precise, unambiguous meaning in C# code.</p>\n</blockquote>\n<blockquote>\n<p>The identifier <code>String</code> though has no concrete meaning in C#. It is an identifier that goes through all the name lookup rules as <code>Widget</code>, <code>Student</code>, etc … It could bind to string or it could bind to a type in another assembly entirely whose purposes may be entirely different than <code>string</code>. Worse it could be defined in a way such that code like <code>String s = \"hello\"</code>; continued to compile.</p>\n</blockquote>\n<blockquote>\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TricksterString</span> { \n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Example</span>(<span class=\"hljs-params\"></span>)</span> {\n    String s = <span class=\"hljs-string\">\"Hello World\"</span>; <span class=\"hljs-comment\">// Okay but probably not what you expect.</span>\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">String</span> {\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">implicit</span> <span class=\"hljs-keyword\">operator</span> <span class=\"hljs-title\">String</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span> s</span>)</span> =&gt; <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>\n<p>The actual meaning of <code>String</code> will always depend on name resolution.\nThat means it depends on all the source files in the project and all\nthe types defined in all the referenced assemblies. In short it\nrequires quite a bit of context to <em>know</em> what it means.</p>\n<p>True that in the vast majority of cases <code>String</code> and <code>string</code> will bind to\nthe same type. But using <code>String</code> still means developers are leaving\ntheir program up to interpretation in places where there is only one\ncorrect answer. When <code>String</code> does bind to the wrong type it can leave\ndevelopers debugging for hours, filing bugs on the compiler team, and\ngenerally wasting time that could’ve been saved by using <code>string</code>.</p>\n<p>Another way to visualize the difference is with this sample:</p>\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-built_in\">string</span> s1 = <span class=\"hljs-number\">42</span>; <span class=\"hljs-comment\">// Errors 100% of the time  </span>\nString s2 = <span class=\"hljs-number\">42</span>; <span class=\"hljs-comment\">// Might error, might not, depends on the code</span>\n</code></pre>\n<p>Many will argue that while this is information technically accurate using <code>String</code> is still fine because it’s exceedingly rare that a codebase would define a type of this name. Or that when <code>String</code> is defined it’s a sign of a bad codebase.</p>\n</blockquote>\n<blockquote>\n<p>[...]</p>\n</blockquote>\n<blockquote>\n<p>You’ll see that <code>String</code> is defined for a number of completely valid purposes: reflection helpers, serialization libraries, lexers, protocols, etc … For any of these libraries <code>String</code> vs. <code>string</code> has real consequences depending on where the code is used.</p>\n</blockquote>\n<blockquote>\n<p>So remember when you see the <code>String</code> vs. <code>string</code> debate this is about semantics, not style. Choosing string gives crisp meaning to your codebase. Choosing <code>String</code> isn’t wrong but it’s leaving the door open for surprises in the future.</p>\n</blockquote>\n<p>Note: I copy/pasted most of the blog posts for archive reasons. I ignore some parts, so I recommend skipping and reading the <a href=\"http://blog.paranoidcoding.com/2019/04/08/string-vs-String-is-not-about-style.html\" rel=\"nofollow noreferrer\">blog post</a> if you can.</p>\n    </div>",
          "vote": "50"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There's a quote on this issue from <a href=\"https://www.goodreads.com/book/show/14975275-illustrated-c-2012\" rel=\"noreferrer\">Daniel Solis' book</a>.</p>\n\n<blockquote>\n  <p>All the predefined types  are mapped directly to\n  underlying .NET types. The C# type names (string) are simply aliases for the\n  .NET types (String or System.String), so using the .NET names works fine syntactically, although\n  this is discouraged. Within a C# program, you should use the C# names\n  rather than the .NET names.</p>\n</blockquote>\n    </div>",
          "vote": "47"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yes, that's no difference between them, just like the <code>bool</code> and <code>Boolean</code>.</p>\n    </div>",
          "vote": "42"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>string</strong> is a keyword, and you can't use string as an identifier. </p>\n\n<p><strong>String</strong> is not a keyword, and you can use it as an identifier:</p>\n\n<p><strong>Example</strong></p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-built_in\">string</span> String = <span class=\"hljs-string\">\"I am a string\"</span>;\n</code></pre>\n\n<p>The keyword <code>string</code>  is an alias for\n <code>System.String</code> aside from the keyword issue, the two are exactly\n equivalent.</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code> <span class=\"hljs-keyword\">typeof</span>(<span class=\"hljs-built_in\">string</span>) == <span class=\"hljs-keyword\">typeof</span>(String) == <span class=\"hljs-keyword\">typeof</span>(System.String)\n</code></pre>\n    </div>",
          "vote": "42"
        }
      ]
    },
    {
      "question": "What does if __name__ == “__main__”: do?",
      "url": "https://stackoverflow.com/questions/419163/what-does-if-name-main-do",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Given the following code, what does the <code>if __name__ == \"__main__\":</code> do?</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Threading example</span>\n<span class=\"hljs-keyword\">import</span> time, thread\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">myfunction</span>(<span class=\"hljs-params\">string, sleeptime, lock, *args</span>):</span>\n    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:\n        lock.acquire()\n        time.sleep(sleeptime)\n        lock.release()\n        time.sleep(sleeptime)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    lock = thread.allocate_lock()\n    thread.start_new_thread(myfunction, (<span class=\"hljs-string\">\"Thread #: 1\"</span>, <span class=\"hljs-number\">2</span>, lock))\n    thread.start_new_thread(myfunction, (<span class=\"hljs-string\">\"Thread #: 2\"</span>, <span class=\"hljs-number\">2</span>, lock))\n</code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Short Answer</h1>\n<p>It's boilerplate code that protects users from accidentally invoking the script when they didn't intend to. Here are some common problems when the guard is omitted from a script:</p>\n<ul>\n<li><p>If you import the guardless script in another script (e.g. <code>import my_script_without_a_name_eq_main_guard</code>), then the second script will trigger the first to run <em>at import time</em> and <em>using the second script's command line arguments</em>. This is almost always a mistake.</p>\n</li>\n<li><p>If you have a custom class in the guardless script and save it to a pickle file, then unpickling it in another script will trigger an import of the guardless script, with the same problems outlined in the previous bullet.</p>\n</li>\n</ul>\n<h1>Long Answer</h1>\n<p>To better understand why and how this matters, we need to take a step back to understand how Python initializes scripts and how this interacts with its module import mechanism.</p>\n<p>Whenever the Python interpreter reads a source file, it does two things:</p>\n<ul>\n<li><p>it sets a few special variables like <code>__name__</code>, and then</p>\n</li>\n<li><p>it executes all of the code found in the file.</p>\n</li>\n</ul>\n<p>Let's see how this works and how it relates to your question about the <code>__name__</code> checks we always see in Python scripts.</p>\n<h2>Code Sample</h2>\n<p>Let's use a slightly different code sample to explore how imports and scripts work.  Suppose the following is in a file called <code>foo.py</code>.</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Suppose this is foo.py.</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"before import\"</span>)\n<span class=\"hljs-keyword\">import</span> math\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"before functionA\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">functionA</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Function A\"</span>)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"before functionB\"</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">functionB</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Function B {}\"</span>.<span class=\"hljs-built_in\">format</span>(math.sqrt(<span class=\"hljs-number\">100</span>)))\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"before __name__ guard\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    functionA()\n    functionB()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"after __name__ guard\"</span>)\n</code></pre>\n<h2>Special Variables</h2>\n<p>When the Python interpreter reads a source file, it first defines a few special variables. In this case, we care about the <code>__name__</code> variable.</p>\n<p><strong>When Your Module Is the Main Program</strong></p>\n<p>If you are running your module (the source file) as the main program, e.g.</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>python foo.py\n</code></pre>\n<p>the interpreter will assign the hard-coded string <code>\"__main__\"</code> to the <code>__name__</code> variable, i.e.</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># It's as if the interpreter inserts this at the top</span>\n<span class=\"hljs-comment\"># of your module when run as the main program.</span>\n__name__ = <span class=\"hljs-string\">\"__main__\"</span> \n</code></pre>\n<p><strong>When Your Module Is Imported By Another</strong></p>\n<p>On the other hand, suppose some other module is the main program and it imports your module. This means there's a statement like this in the main program, or in some other module the main program imports:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Suppose this is in some other main program.</span>\n<span class=\"hljs-keyword\">import</span> foo\n</code></pre>\n<p>The interpreter will search for your <code>foo.py</code> file (along with searching for a few other variants), and prior to executing that module, it will assign the name <code>\"foo\"</code> from the import statement to the <code>__name__</code> variable, i.e.</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># It's as if the interpreter inserts this at the top</span>\n<span class=\"hljs-comment\"># of your module when it's imported from another module.</span>\n__name__ = <span class=\"hljs-string\">\"foo\"</span>\n</code></pre>\n<h2>Executing the Module's Code</h2>\n<p>After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.</p>\n<p><strong>Always</strong></p>\n<ol>\n<li><p>It prints the string <code>\"before import\"</code> (without quotes).</p>\n</li>\n<li><p>It loads the <code>math</code> module and assigns it to a variable called <code>math</code>. This is equivalent to replacing <code>import math</code> with the following (note that <code>__import__</code> is a low-level function in Python that takes a string and triggers the actual import):</p>\n</li>\n</ol>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Find and load a module given its string name, \"math\",</span>\n<span class=\"hljs-comment\"># then assign it to a local variable called math.</span>\nmath = <span class=\"hljs-built_in\">__import__</span>(<span class=\"hljs-string\">\"math\"</span>)\n</code></pre>\n<ol start=\"3\">\n<li><p>It prints the string <code>\"before functionA\"</code>.</p>\n</li>\n<li><p>It executes the <code>def</code> block, creating a function object, then assigning that function object to a variable called <code>functionA</code>.</p>\n</li>\n<li><p>It prints the string <code>\"before functionB\"</code>.</p>\n</li>\n<li><p>It executes the second <code>def</code> block, creating another function object, then assigning it to a variable called <code>functionB</code>.</p>\n</li>\n<li><p>It prints the string <code>\"before __name__ guard\"</code>.</p>\n</li>\n</ol>\n<p><strong>Only When Your Module Is the Main Program</strong></p>\n<ol start=\"8\">\n<li>If your module is the main program, then it will see that <code>__name__</code> was indeed set to <code>\"__main__\"</code> and it calls the two functions, printing the strings <code>\"Function A\"</code> and <code>\"Function B 10.0\"</code>.</li>\n</ol>\n<p><strong>Only When Your Module Is Imported by Another</strong></p>\n<ol start=\"8\">\n<li>(<strong>instead</strong>) If your module is not the main program but was imported by another one, then <code>__name__</code> will be <code>\"foo\"</code>, not <code>\"__main__\"</code>, and it'll skip the body of the <code>if</code> statement.</li>\n</ol>\n<p><strong>Always</strong></p>\n<ol start=\"9\">\n<li>It will print the string <code>\"after __name__ guard\"</code> in both situations.</li>\n</ol>\n<p><em><strong>Summary</strong></em></p>\n<p>In summary, here's what'd be printed in the two cases:</p>\n<pre class=\"lang-none s-code-block\"><code># What gets printed if foo is the main program\nbefore import\nbefore functionA\nbefore functionB\nbefore __name__ guard\nFunction A\nFunction B 10.0\nafter __name__ guard\n</code></pre>\n<pre class=\"lang-none s-code-block\"><code># What gets printed if foo is imported as a regular module\nbefore import\nbefore functionA\nbefore functionB\nbefore __name__ guard\nafter __name__ guard\n</code></pre>\n<h2>Why Does It Work This Way?</h2>\n<p>You might naturally wonder why anybody would want this.  Well, sometimes you want to write a <code>.py</code> file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself.  Examples:</p>\n<ul>\n<li><p>Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.</p>\n</li>\n<li><p>Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing <code>.py</code> files like your script and running special test functions. You don't want it to try running the script just because it's importing the module.</p>\n</li>\n<li><p>Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.</p>\n</li>\n</ul>\n<p>Beyond those examples, it's elegant that running a script in Python is just setting up a few magic variables and importing the script. \"Running\" the script is a side effect of importing the script's module.</p>\n<h2>Food for Thought</h2>\n<ul>\n<li><p>Question: Can I have multiple <code>__name__</code> checking blocks?  Answer: it's strange to do so, but the language won't stop you.</p>\n</li>\n<li><p>Suppose the following is in <code>foo2.py</code>.  What happens if you say <code>python foo2.py</code> on the command-line? Why?</p>\n</li>\n</ul>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Suppose this is foo2.py.</span>\n<span class=\"hljs-keyword\">import</span> os, sys; sys.path.insert(<span class=\"hljs-number\">0</span>, os.path.dirname(__file__)) <span class=\"hljs-comment\"># needed for some interpreters</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">functionA</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"a1\"</span>)\n    <span class=\"hljs-keyword\">from</span> foo2 <span class=\"hljs-keyword\">import</span> functionB\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"a2\"</span>)\n    functionB()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"a3\"</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">functionB</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"b\"</span>)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"t1\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"m1\"</span>)\n    functionA()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"m2\"</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"t2\"</span>)\n      \n</code></pre>\n<ul>\n<li>Now, figure out what will happen if you remove the <code>__name__</code> check in <code>foo3.py</code>:</li>\n</ul>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Suppose this is foo3.py.</span>\n<span class=\"hljs-keyword\">import</span> os, sys; sys.path.insert(<span class=\"hljs-number\">0</span>, os.path.dirname(__file__)) <span class=\"hljs-comment\"># needed for some interpreters</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">functionA</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"a1\"</span>)\n    <span class=\"hljs-keyword\">from</span> foo3 <span class=\"hljs-keyword\">import</span> functionB\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"a2\"</span>)\n    functionB()\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"a3\"</span>)\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">functionB</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"b\"</span>)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"t1\"</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"m1\"</span>)\nfunctionA()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"m2\"</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"t2\"</span>)\n</code></pre>\n<ul>\n<li>What will this do when used as a script?  When imported as a module?</li>\n</ul>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Suppose this is in foo4.py</span>\n__name__ = <span class=\"hljs-string\">\"__main__\"</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bar</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"bar\"</span>)\n    \n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"before __name__ guard\"</span>)\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    bar()\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"after __name__ guard\"</span>)\n</code></pre>\n    </div>",
          "vote": "7448"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When your script is run by passing it as a command to the Python interpreter,</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>python myscript.py\n</code></pre>\n\n<p>all of the code that is at indentation level 0 gets executed.  Functions and classes that are defined are, well, defined, but none of their code gets run.  Unlike other languages, there's no <code>main()</code> function that gets run automatically - the <code>main()</code> function is implicitly all the code at the top level.</p>\n\n<p>In this case, the top-level code is an <code>if</code> block.  <code>__name__</code> is a built-in variable which evaluates to the name of the current module.  However, if a module is being run directly (as in <code>myscript.py</code> above), then <code>__name__</code> instead is set to the string <code>\"__main__\"</code>.  Thus, you can test whether your script is being run directly or being imported by something else by testing</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    ...\n</code></pre>\n\n<p>If your script is being imported into another module, its various function and class definitions will be imported and its top-level code will be executed, but the code in the then-body of the <code>if</code> clause above won't get run as the condition is not met. As a basic example, consider the following two scripts:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># file one.py</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">func</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"func() in one.py\"</span>)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"top-level in one.py\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"one.py is being run directly\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"one.py is being imported into another module\"</span>)\n</code></pre>\n\n\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># file two.py</span>\n<span class=\"hljs-keyword\">import</span> one\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"top-level in two.py\"</span>)\none.func()\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"two.py is being run directly\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"two.py is being imported into another module\"</span>)\n</code></pre>\n\n<p>Now, if you invoke the interpreter as</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>python one.py\n</code></pre>\n\n<p>The output will be</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>top-level <span class=\"hljs-keyword\">in</span> one.py\none.py <span class=\"hljs-keyword\">is</span> being run directly\n</code></pre>\n\n<p>If you run <code>two.py</code> instead:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>python two.py\n</code></pre>\n\n<p>You get</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>top-level <span class=\"hljs-keyword\">in</span> one.py\none.py <span class=\"hljs-keyword\">is</span> being imported into another module\ntop-level <span class=\"hljs-keyword\">in</span> two.py\nfunc() <span class=\"hljs-keyword\">in</span> one.py\ntwo.py <span class=\"hljs-keyword\">is</span> being run directly\n</code></pre>\n\n<p>Thus, when module <code>one</code> gets loaded, its <code>__name__</code> equals <code>\"one\"</code> instead of <code>\"__main__\"</code>.</p>\n    </div>",
          "vote": "1935"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The simplest explanation for the <code>__name__</code> variable (imho) is the following:</p>\n\n<p>Create the following files.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># a.py</span>\n<span class=\"hljs-keyword\">import</span> b\n</code></pre>\n\n<p>and</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># b.py</span>\n<span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"Hello World from %s!\"</span> % __name__\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"Hello World again from %s!\"</span> % __name__\n</code></pre>\n\n<p>Running them will get you this output:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>$ python a.py\nHello World <span class=\"hljs-keyword\">from</span> b!\n</code></pre>\n\n<p>As you can see, when a module is imported, Python sets <code>globals()['__name__']</code> in this module to the module's name. Also, upon import all the code in the module is being run. As the <code>if</code> statement evaluates to <code>False</code> this part is not executed.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>$ python b.py\nHello World <span class=\"hljs-keyword\">from</span> __main__!\nHello World again <span class=\"hljs-keyword\">from</span> __main__!\n</code></pre>\n\n<p>As you can see, when a file is executed, Python sets <code>globals()['__name__']</code> in this file to <code>\"__main__\"</code>. This time, the <code>if</code> statement evaluates to <code>True</code> and is being run.</p>\n    </div>",
          "vote": "772"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <h2>What does the <code>if __name__ == \"__main__\":</code> do?</h2>\n</blockquote>\n\n<p>To outline the basics:</p>\n\n<ul>\n<li><p>The global variable, <code>__name__</code>, in the module that is the entry point to your program, is <code>'__main__'</code>. Otherwise, it's the name you import the module by.</p></li>\n<li><p>So, code under the <code>if</code> block will only run if the module is the entry point to your program.</p></li>\n<li><p>It allows the code in the module to be importable by other modules, without executing the code block beneath on import.</p></li>\n</ul>\n\n<hr>\n\n<p>Why do we need this?</p>\n\n<h2>Developing and Testing Your Code</h2>\n\n<p>Say you're writing a Python script designed to be used as a module:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">do_important</span>():</span>\n    <span class=\"hljs-string\">\"\"\"This function does something very important\"\"\"</span>\n</code></pre>\n\n<p>You <em>could</em> test the module by adding this call of the function to the bottom:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>do_important()\n</code></pre>\n\n<p>and running it (on a command prompt) with something like:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>~$ python important.py\n</code></pre>\n\n<h2>The Problem</h2>\n\n<p>However, if you want to import the module to another script:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">import</span> important\n</code></pre>\n\n<p>On import, the <code>do_important</code> function would be called, so you'd probably comment out your function call, <code>do_important()</code>, at the bottom. </p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># do_important() # I must remember to uncomment to execute this!</span>\n</code></pre>\n\n<p>And then you'll have to remember whether or not you've commented out your test function call. And this extra complexity would mean you're likely to forget, making your development process more troublesome.</p>\n\n<h2>A Better Way</h2>\n\n<p>The <code>__name__</code> variable points to the namespace wherever the Python interpreter happens to be at the moment. </p>\n\n<p>Inside an imported module, it's the name of that module. </p>\n\n<p>But inside the primary module (or an interactive Python session, i.e. the interpreter's Read, Eval, Print Loop, or REPL) you are running everything from its <code>\"__main__\"</code>.</p>\n\n<p>So if you check before executing:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    do_important()\n</code></pre>\n\n<p>With the above, your code will only execute when you're running it as the primary module (or intentionally call it from another script). </p>\n\n<h2>An Even Better Way</h2>\n\n<p>There's a Pythonic way to improve on this, though. </p>\n\n<p>What if we want to run this business process from outside the module?</p>\n\n<p>If we put the code we want to exercise as we develop and test in a function like this and then do our check for <code>'__main__'</code> immediately after:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span>\n    <span class=\"hljs-string\">\"\"\"business logic for when running this module as the primary one!\"\"\"</span>\n    setup()\n    foo = do_important()\n    bar = do_even_more_important(foo)\n    <span class=\"hljs-keyword\">for</span> baz <span class=\"hljs-keyword\">in</span> bar:\n        do_super_important(baz)\n    teardown()\n\n<span class=\"hljs-comment\"># Here's our payoff idiom!</span>\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    main()\n</code></pre>\n\n<p>We now have a final function for the end of our module that will run if we run the module as the primary module. </p>\n\n<p>It will allow the module and its functions and classes to be imported into other scripts without running the <code>main</code> function, and will also allow the module (and its functions and classes) to be called when running from a different <code>'__main__'</code> module, i.e.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">import</span> important\nimportant.main()\n</code></pre>\n\n<p><a href=\"https://docs.python.org/2/library/__main__.html\" rel=\"noreferrer\">This idiom can also be found in the Python documentation in an explanation of the <code>__main__</code> module.</a> That text states:</p>\n\n<blockquote>\n  <p>This module represents the (otherwise anonymous) scope in which the\n  interpreter’s main program executes — commands read either from\n  standard input, from a script file, or from an interactive prompt. It\n  is this environment in which the idiomatic “conditional script” stanza\n  causes a script to run:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    main()\n</code></pre>\n</blockquote>\n    </div>",
          "vote": "541"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>if __name__ == \"__main__\"</code> is the part that runs when the script is run from (say) the command line using a command like <code>python myscript.py</code>.</p>\n    </div>",
          "vote": "135"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <h1>What does <code>if __name__ == \"__main__\":</code> do?</h1>\n</blockquote>\n\n<p><code>__name__</code> is a global variable (in Python, global actually means on the <a href=\"https://docs.python.org/tutorial/modules.html#modules\">module level</a>) that exists in all namespaces. It is typically the module's name (as a <code>str</code> type).</p>\n\n<p>As the only special case, however, in whatever Python process you run, as in mycode.py:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>python mycode.py\n</code></pre>\n\n<p>the otherwise anonymous global namespace is assigned the value of <code>'__main__'</code> to its <code>__name__</code>. </p>\n\n<p>Thus, including <a href=\"https://docs.python.org/library/__main__.html\">the final lines</a></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    main()\n</code></pre>\n\n<ul>\n<li>at the end of your mycode.py script,</li>\n<li>when it is the primary, entry-point module that is run by a Python process, </li>\n</ul>\n\n<p>will cause your script's uniquely defined <code>main</code> function to run. </p>\n\n<p>Another benefit of using this construct: you can also import your code as a module in another script and then run the main function if and when your program decides:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">import</span> mycode\n<span class=\"hljs-comment\"># ... any amount of other code</span>\nmycode.main()\n</code></pre>\n    </div>",
          "vote": "89"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are lots of different takes here on the mechanics of the code in question, the \"How\", but for me none of it made sense until I understood the \"Why\". This should be especially helpful for new programmers.</p>\n\n<p>Take file \"ab.py\":</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">a</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'A function in ab file'</span>);\na()\n</code></pre>\n\n<p>And a second file \"xy.py\":</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">import</span> ab\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'main function: this is where the action is'</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">x</span>():</span>\n    <span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">'peripheral task: might be useful in other projects'</span>)\nx()\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    main()\n</code></pre>\n\n<blockquote>\n  <p>What is this code actually doing?</p>\n</blockquote>\n\n<p>When you execute <code>xy.py</code>, you <code>import ab</code>. The import statement runs the module immediately on import, so <code>ab</code>'s operations get executed before the remainder of <code>xy</code>'s. Once finished with <code>ab</code>, it continues with <code>xy</code>.</p>\n\n<p>The interpreter keeps track of which scripts are running with <code>__name__</code>. When you run a script - no matter what you've named it - the interpreter calls it <code>\"__main__\"</code>, making it the master or 'home' script that gets returned to after running an external script.</p>\n\n<p>Any other script that's called from this <code>\"__main__\"</code> script is assigned its filename as its <code>__name__</code> (e.g., <code>__name__ == \"ab.py\"</code>). Hence, the line <code>if __name__ == \"__main__\":</code> is the interpreter's test to determine if it's interpreting/parsing the 'home' script that was initially executed, or if it's temporarily peeking into another (external) script. This gives the programmer flexibility to have the script behave differently if it's executed directly vs. called externally.</p>\n\n<p>Let's step through the above code to understand what's happening, focusing first on the unindented lines and the order they appear in the scripts. Remember that function - or <code>def</code> - blocks don't do anything by themselves until they're called. What the interpreter might say if mumbled to itself:</p>\n\n<ul>\n<li>Open xy.py as the 'home' file; call it <code>\"__main__\"</code> in the <code>__name__</code> variable.</li>\n<li>Import and open file with the <code>__name__ == \"ab.py\"</code>.</li>\n<li>Oh, a function. I'll remember that.</li>\n<li>Ok, function <code>a()</code>; I just learned that. Printing '<em>A function in ab file</em>'.</li>\n<li>End of file; back to <code>\"__main__\"</code>!</li>\n<li>Oh, a function. I'll remember that.</li>\n<li>Another one.</li>\n<li>Function <code>x()</code>; ok, printing '<em>peripheral task: might be useful in other projects</em>'.</li>\n<li>What's this? An <code>if</code> statement. Well, the condition has been met (the variable <code>__name__</code> has been set to <code>\"__main__\"</code>), so I'll enter the <code>main()</code> function and print '<em>main function: this is where the action is</em>'.</li>\n</ul>\n\n<p>The bottom two lines mean: \"If this is the <code>\"__main__\"</code> or 'home' script, execute the function called <code>main()</code>\". That's why you'll see a <code>def main():</code> block up top, which contains the main flow of the script's functionality.</p>\n\n<blockquote>\n  <p>Why implement this?</p>\n</blockquote>\n\n<p>Remember what I said earlier about import statements? When you import a module it doesn't just 'recognize' it and wait for further instructions - it actually runs all the executable operations contained within the script. So, putting the meat of your script into the <code>main()</code> function effectively quarantines it, putting it in isolation so that it won't immediately run when imported by another script.</p>\n\n<p>Again, there will be exceptions, but common practice is that <code>main()</code> doesn't usually get called externally. So you may be wondering one more thing: if we're not calling <code>main()</code>, why are we calling the script at all? It's because many people structure their scripts with standalone functions that are built to be run independent of the rest of the code in the file. They're then later called somewhere else in the body of the script. Which brings me to this:</p>\n\n<blockquote>\n  <p>But the code works without it</p>\n</blockquote>\n\n<p>Yes, that's right. These separate functions <strong>can</strong> be called from an in-line script that's not contained inside a <code>main()</code> function. If you're accustomed (as I am, in my early learning stages of programming) to building in-line scripts that do exactly what you need, and you'll try to figure it out again if you ever need that operation again ... well, you're not used to this kind of internal structure to your code, because it's more complicated to build and it's not as intuitive to read.</p>\n\n<p>But that's a script that probably can't have its functions called externally, because if it did it would immediately start calculating and assigning variables. And chances are if you're trying to re-use a function, your new script is related closely enough to the old one that there will be conflicting variables.</p>\n\n<p>In splitting out independent functions, you gain the ability to re-use your previous work by calling them into another script. For example, \"example.py\" might import \"xy.py\" and call <code>x()</code>, making use of the 'x' function from \"xy.py\". (Maybe it's capitalizing the third word of a given text string; creating a NumPy array from a list of numbers and squaring them; or detrending a 3D surface. The possibilities are limitless.)</p>\n\n<p>(As an aside, <a href=\"https://stackoverflow.com/questions/23000075/purpose-of-if-name-main\">this question</a> contains an answer by @kindall that finally helped me to understand - the why, not the how. Unfortunately it's been marked as a duplicate of <a href=\"https://stackoverflow.com/questions/419163/what-does-if-name-main-do\">this one</a>, which I think is a mistake.)</p>\n    </div>",
          "vote": "81"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When there are certain statements in our module (<code>M.py</code>) we want to be executed when it'll be running as main (not imported), we can place those statements (test-cases, print statements) under this <code>if</code> block.</p>\n\n<p>As by default (when module running as main, not imported) the <code>__name__</code> variable is set to <code>\"__main__\"</code>, and when it'll be imported the <code>__name__</code> variable will get a different value, most probably the name of the module (<code>'M'</code>).\nThis is helpful in running different variants of a modules together, and separating their specific input &amp; output statements and also if there are any test-cases.</p>\n\n<p><strong>In short</strong>, use this '<code>if __name__ == \"main\"</code> ' block to prevent (certain) code from being run when the module is imported.</p>\n    </div>",
          "vote": "58"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Put simply, <code>__name__</code> is a variable defined for each script that defines whether the script is being run as the main module or it is being run as an imported module.</p>\n\n<p>So if we have two scripts;</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\">#script1.py</span>\n<span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"Script 1's name: {}\"</span>.<span class=\"hljs-built_in\">format</span>(__name__)\n</code></pre>\n\n<p>and</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\">#script2.py</span>\n<span class=\"hljs-keyword\">import</span> script1\n<span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"Script 2's name: {}\"</span>.<span class=\"hljs-built_in\">format</span>(__name__)\n</code></pre>\n\n<p>The output from executing script1 is</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>Script <span class=\"hljs-number\">1</span><span class=\"hljs-string\">'s name: __main__\n</span></code></pre>\n\n<p>And the output from executing script2 is:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>Script1<span class=\"hljs-string\">'s name is script1\nScript 2'</span>s name: __main__\n</code></pre>\n\n<p>As you can see, <code>__name__</code> tells us which code is the 'main' module.\nThis is great, because you can just write code and not have to worry about structural issues like in C/C++, where, if a file does not implement a 'main' function then it cannot be compiled as an executable and if it does, it cannot then be used as a library.</p>\n\n<p>Say you write a Python script that does something great and you implement a boatload of functions that are useful for other purposes. If I want to use them I can just import your script and use them without executing your program (given that your code only executes within the  <code>if __name__ == \"__main__\":</code> context). Whereas in C/C++ you would have to portion out those pieces into a separate module that then includes the file. Picture the situation below;</p>\n\n<p><a href=\"https://i.stack.imgur.com/hWLqr.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/hWLqr.png\" alt=\"Complicated importing in C\"></a></p>\n\n<p>The arrows are import links. For three modules each trying to include the previous modules code there are six files (nine, counting the implementation files) and five links. This makes it difficult to include other code into a C project unless it is compiled specifically as a library. Now picture it for Python:</p>\n\n<p><a href=\"https://i.stack.imgur.com/Eql0u.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Eql0u.png\" alt=\"Elegant importing in Python\"></a></p>\n\n<p>You write a module, and if someone wants to use your code they just import it and the <code>__name__</code> variable can help to separate the executable portion of the program from the library part.</p>\n    </div>",
          "vote": "53"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Let's look at the answer in a more abstract way:</p>\n\n<p>Suppose we have this code in <code>x.py</code>:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>...\n&lt;Block A&gt;\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    &lt;Block B&gt;\n...\n</code></pre>\n\n<p>Blocks A and B are run when we are running <code>x.py</code>.</p>\n\n<p>But just block A (and not B) is run when we are running another module, <code>y.py</code> for example, in which <code>x.py</code> is imported and the code is run from there (like when a function in <code>x.py</code> is called from <code>y.py</code>).</p>\n    </div>",
          "vote": "49"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I've been reading so much throughout the answers on this page. I would say, if you know the thing, for sure you will understand those answers, otherwise, you are still confused.</p>\n<p>To be short, you need to know several points:</p>\n<ol>\n<li><p><code>import a</code> action actually runs all that can be ran in <code>a.py</code>, meaning each line in <code>a.py</code></p>\n</li>\n<li><p>Because of point 1, you may not want everything to be run in <code>a.py</code> when importing it</p>\n</li>\n<li><p>To solve the problem in point 2, python allows you to put a condition check</p>\n</li>\n<li><p><code>__name__</code> is an implicit variable in all <code>.py</code> modules:</p>\n</li>\n</ol>\n<ul>\n<li>when <code>a.py</code> is <code>import</code>ed, the value of <code>__name__</code> of <code>a.py</code> module is set to its file name \"<code>a</code>\"</li>\n<li>when <code>a.py</code> is run directly using \"<code>python a.py</code>\", the value of <code>__name__</code> is set to a string <code>__main__</code></li>\n</ul>\n<ol start=\"5\">\n<li>Based on the mechanism how python sets the variable <code>__name__</code> for each module, do you know how to achieve point 3? The answer is fairly easy, right? Put a if condition: <code>if __name__ == \"__main__\": // do A</code></li>\n</ol>\n<ul>\n<li>then <code>python a.py</code> will run the part <code>// do A</code></li>\n<li>and <code>import a</code> will skip the part <code>// do A</code></li>\n</ul>\n<ol start=\"6\">\n<li>You can even put if <code>__name__ == \"a\"</code> depending on your functional need, but rarely do</li>\n</ol>\n<p>The important thing that python is special at is point 4! The rest is just basic logic.</p>\n    </div>",
          "vote": "39"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When you run Python interactively the local <code>__name__</code> variable is assigned a value of <code>__main__</code>. Likewise, when you execute a Python module from the command line, rather than importing it into another module, its <code>__name__</code> attribute is assigned a value of <code>__main__</code>, rather than the actual name of the module. In this way, modules can look at their own <code>__name__</code> value to determine for themselves how they are being used, whether as support for another program or as the main application executed from the command line. Thus, the following idiom is quite common in Python modules:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># Do something appropriate here, like calling a</span>\n    <span class=\"hljs-comment\"># main() function defined elsewhere in this module.</span>\n    main()\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-comment\"># Do nothing. This module has been imported by another</span>\n    <span class=\"hljs-comment\"># module that wants to make use of the functions,</span>\n    <span class=\"hljs-comment\"># classes and other useful bits it has defined.</span>\n</code></pre>\n    </div>",
          "vote": "38"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Consider:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    main()\n</code></pre>\n\n<p>It checks if the <code>__name__</code> attribute of the Python script is <code>\"__main__\"</code>. In other words, if the program itself is executed, the attribute will be <code>__main__</code>, so the program will be executed (in this case the <code>main()</code> function).</p>\n\n<p>However, if your Python script is used by a module, any code outside of the <code>if</code> statement will be executed, so <code>if \\__name__ == \"\\__main__\"</code> is used just to check if the program is used as a module or not, and therefore decides whether to run the code.</p>\n    </div>",
          "vote": "36"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>Before explaining anything about <code>if __name__ == '__main__'</code> it is important to understand what <code>__name__</code> is and what it does.</em></p>\n\n<blockquote>\n  <p><strong>What is <code>__name__</code>?</strong></p>\n</blockquote>\n\n<p><code>__name__</code> is a <a href=\"https://wiki.python.org/moin/DunderAlias\" rel=\"noreferrer\">DunderAlias</a> - can be thought of as a global variable (accessible from modules) and works in a similar way to <a href=\"https://stackoverflow.com/questions/13881395/in-python-what-is-a-global-statement\"><code>global</code></a>.</p>\n\n<p>It is a string (global as mentioned above) as indicated by <code>type(__name__)</code> (yielding <code>&lt;class 'str'&gt;</code>), and is an inbuilt standard for both <a href=\"https://docs.python.org/3/library/__main__.html\" rel=\"noreferrer\">Python 3</a> and <a href=\"https://docs.python.org/2/library/__main__.html\" rel=\"noreferrer\">Python 2</a> versions.</p>\n\n<blockquote>\n  <p><strong>Where:</strong></p>\n</blockquote>\n\n<p>It can not only be used in scripts but can also be found in both the interpreter and modules/packages.  </p>\n\n<p><strong>Interpreter:</strong></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span>(__name__)\n__main__\n&gt;&gt;&gt;\n</code></pre>\n\n<p><strong>Script:</strong></p>\n\n<p><em>test_file.py</em>:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-built_in\">print</span>(__name__)\n</code></pre>\n\n<p>Resulting in <code>__main__</code></p>\n\n<p><strong>Module or package:</strong></p>\n\n<p><em>somefile.py:</em></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">somefunction</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(__name__)\n</code></pre>\n\n<p><em>test_file.py:</em></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">import</span> somefile\nsomefile.somefunction()\n</code></pre>\n\n<p>Resulting in <code>somefile</code></p>\n\n<p>Notice that when used in a package or module, <code>__name__</code> takes the name of the file.  The path of the actual module or package path is not given, but has its own DunderAlias <code>__file__</code>, that allows for this.</p>\n\n<p>You should see that, where <code>__name__</code>, where it is the main file (or program) will <em>always</em> return <code>__main__</code>, and if it is a module/package, or anything that is running off some other Python script, will return the name of the file where it has originated from.</p>\n\n<blockquote>\n  <p><strong>Practice:</strong></p>\n</blockquote>\n\n<p>Being a variable means that it's value <em>can</em> be overwritten (\"can\" does not mean \"should\"), overwriting the value of <code>__name__</code> will result in a lack of readability.  So do not do it, for any reason.  If you need a variable define a new variable.</p>\n\n<p>It is always assumed that the value of <code>__name__</code> to be <code>__main__</code> or the name of the file.  Once again changing this default value will cause more confusion that it will do good, causing problems further down the line.</p>\n\n<p><em>example:</em></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>__name__ = <span class=\"hljs-string\">'Horrify'</span> <span class=\"hljs-comment\"># Change default from __main__</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'Horrify'</span>: <span class=\"hljs-built_in\">print</span>(__name__)\n...\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">else</span>: <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Not Horrify'</span>)\n...\nHorrify\n&gt;&gt;&gt;\n</code></pre>\n\n<p>It is considered good practice in general to include the <code>if __name__ == '__main__'</code> in scripts.</p>\n\n<blockquote>\n  <p><strong>Now to answer <code>if __name__ == '__main__'</code>:</strong></p>\n</blockquote>\n\n<p><em>Now we know the behaviour of <code>__name__</code> things become clearer:</em></p>\n\n<p>An <a href=\"https://docs.python.org/3/tutorial/controlflow.html#if-statements\" rel=\"noreferrer\"><code>if</code></a> is a flow control statement that contains the block of code will execute if the value given is true. We have seen that <code>__name__</code> can take either \n<code>__main__</code> or the file name it has been imported from.  </p>\n\n<p>This means that if <code>__name__</code> is equal to <code>__main__</code> then the file must be the main file and must actually be running (or it is the interpreter), not a module or package imported into the script.</p>\n\n<p>If indeed <code>__name__</code> does take the value of <code>__main__</code> then whatever is in that block of code will execute.</p>\n\n<p>This tells us that if the file running is the main file (or you are running from the interpreter directly) then that condition must execute.  If it is a package then it should not, and the value will not be <code>__main__</code>.</p>\n\n<blockquote>\n  <p><strong>Modules:</strong></p>\n</blockquote>\n\n<p><code>__name__</code> can also be used in modules to define the name of a module</p>\n\n<blockquote>\n  <p><strong>Variants:</strong>  </p>\n</blockquote>\n\n<p>It is also possible to do other, less common but useful things with <code>__name__</code>, some I will show here:</p>\n\n<p><strong>Executing only if the file is a module or package:</strong></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ != <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># Do some useful things </span>\n</code></pre>\n\n<p><strong>Running one condition if the file is the main one and another if it is not:</strong></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># Execute something</span>\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-comment\"># Do some useful things</span>\n</code></pre>\n\n<p>You can also use it to provide runnable help functions/utilities on packages and modules without the elaborate use of libraries.</p>\n\n<p>It also allows modules to be run from the command line as main scripts, which can be also very useful.</p>\n    </div>",
          "vote": "33"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I think it's best to break the answer in depth and in simple words:</p>\n\n<p><code>__name__</code>: Every module in Python has a special attribute called <code>__name__</code>.\nIt is a built-in variable that returns the name of the module.</p>\n\n<p><code>__main__</code>: Like other programming languages, Python too has an execution entry point, i.e., main. <code>'__main__'</code> <em>is the name of the scope in which top-level code executes</em>. Basically you have two ways of using a Python module: Run it directly as a script, or import it. When a module is run as a script, its <code>__name__</code> is set to <code>__main__</code>.</p>\n\n<p>Thus, the value of the <code>__name__</code> attribute is set to <code>__main__</code> when the module is run as the main program. Otherwise the value of <code>__name__</code>  is set to contain the name of the module.</p>\n    </div>",
          "vote": "30"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It is a special for when a Python file is called from the command line. This is typically used to call a \"main()\" function or execute other appropriate startup code, like commandline arguments handling for instance.</p>\n\n<p>It could be written in several ways. Another is:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">some_function_for_instance_main</span>():</span>\n    dosomething()\n\n\n__name__ == <span class=\"hljs-string\">'__main__'</span> <span class=\"hljs-keyword\">and</span> some_function_for_instance_main()\n</code></pre>\n\n<p>I am not saying you should use this in production code, but it serves to illustrate that there is nothing \"magical\" about <code>if __name__ == '__main__'</code>. It is a good convention for invoking a main function in Python files.</p>\n    </div>",
          "vote": "28"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The code under <code>if __name__ == '__main__':</code> <strong>will be executed only if the module is invoked as a script</strong>.</p>\n<p>As an example consider the following module <code>my_test_module.py</code>:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># my_test_module.py</span>\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'This is going to be printed out, no matter what'</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'This is going to be printed out, only if user invokes the module as a script'</span>)\n</code></pre>\n<hr>\n<p><strong>1st possibility: Import <code>my_test_module.py</code> in another module</strong></p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># main.py</span>\n\n<span class=\"hljs-keyword\">import</span> my_test_module\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Hello from main.py'</span>)\n</code></pre>\n<p>Now if you invoke <code>main.py</code>:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>python main.py \n\n&gt;&gt; <span class=\"hljs-string\">'This is going to be printed out, no matter what'</span>\n&gt;&gt; <span class=\"hljs-string\">'Hello from main.py'</span>\n</code></pre>\n<p>Note that only the top-level <code>print()</code> statement in <code>my_test_module</code> is executed.</p>\n<hr>\n<p><strong>2nd possibility: Invoke <code>my_test_module.py</code> as a script</strong></p>\n<p>Now if you run <code>my_test_module.py</code> as a Python script, both <code>print()</code> statements will be exectued:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>python my_test_module.py\n\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">'This is going to be printed out, no matter what'</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">'This is going to be printed out, only if user invokes the module as a script'</span>\n</code></pre>\n<hr>\n<p><strong>For a more comprehensive explanation you can <a href=\"https://towardsdatascience.com/what-does-if-name-main-do-e357dd61be1a\" rel=\"nofollow noreferrer\">read this blog post</a></strong>.</p>\n    </div>",
          "vote": "26"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are a number of variables that the system (Python interpreter) provides for source files (modules).  You can get their values anytime you want, so, let us focus on the <strong>__name__</strong> variable/attribute:</p>\n\n<p>When Python loads a source code file, it executes all of the code found in it. (Note that it doesn't call all of the methods and functions defined in the file, but it does define them.)</p>\n\n<p>Before the interpreter executes the source code file though, it defines a few special variables for that file; <strong>__name__</strong> is one of those special variables that Python automatically defines for each source code file.</p>\n\n<p>If Python is loading this source code file as the main program (i.e. the file you run), then it sets the special <strong>__name__</strong> variable for this file to have a value <strong>\"__main__\"</strong>.</p>\n\n<p>If this is being imported from another module, <strong>__name__</strong> will be set to that module's name.</p>\n\n<p>So, in your example in part:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n   lock = thread.allocate_lock()\n   thread.start_new_thread(myfunction, (<span class=\"hljs-string\">\"Thread #: 1\"</span>, <span class=\"hljs-number\">2</span>, lock))\n   thread.start_new_thread(myfunction, (<span class=\"hljs-string\">\"Thread #: 2\"</span>, <span class=\"hljs-number\">2</span>, lock))\n</code></pre>\n\n<p>means that the code block:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>lock = thread.allocate_lock()\nthread.start_new_thread(myfunction, (<span class=\"hljs-string\">\"Thread #: 1\"</span>, <span class=\"hljs-number\">2</span>, lock))\nthread.start_new_thread(myfunction, (<span class=\"hljs-string\">\"Thread #: 2\"</span>, <span class=\"hljs-number\">2</span>, lock))\n</code></pre>\n\n<p>will be executed only when you run the module directly; the code block will not execute if another module is calling/importing it because the value of <strong>__name__</strong> will not equal to \"<strong>main</strong>\" in that particular instance.</p>\n\n<p>Hope this helps out.</p>\n    </div>",
          "vote": "21"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>if __name__ == \"__main__\":</code> is basically the top-level script environment, and it specifies the interpreter that ('I have the highest priority to be executed first').</p>\n\n<p><code>'__main__'</code> is the name of the scope in which top-level code executes. A module’s <code>__name__</code> is set equal to <code>'__main__'</code> when read from standard input, a script, or from an interactive prompt.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-comment\"># Execute only if run as a script</span>\n    main()\n</code></pre>\n    </div>",
          "vote": "19"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Consider:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-built_in\">print</span> __name__\n</code></pre>\n\n<p>The output for the above is <code>__main__</code>.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n  <span class=\"hljs-built_in\">print</span> <span class=\"hljs-string\">\"direct method\"</span>\n</code></pre>\n\n<p>The above statement is true and prints <em>\"direct method\"</em>. Suppose if they imported this class in another class it doesn't print <em>\"direct method\"</em> because, while importing, it will set <code>__name__ equal to \"first model name\"</code>.</p>\n    </div>",
          "vote": "18"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>You can make the file usable as a <strong>script</strong> as well as an <strong>importable module</strong>.</p>\n</blockquote>\n\n<p><strong>fibo.py (a module named <code>fibo</code>)</strong></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Other modules can IMPORT this MODULE to use the function fib</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fib</span>(<span class=\"hljs-params\">n</span>):</span>    <span class=\"hljs-comment\"># write Fibonacci series up to n</span>\n    a, b = <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">while</span> b &lt; n:\n        <span class=\"hljs-built_in\">print</span>(b, end=<span class=\"hljs-string\">' '</span>)\n        a, b = b, a+b\n    <span class=\"hljs-built_in\">print</span>()\n\n<span class=\"hljs-comment\"># This allows the file to be used as a SCRIPT</span>\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-keyword\">import</span> sys\n    fib(<span class=\"hljs-built_in\">int</span>(sys.argv[<span class=\"hljs-number\">1</span>]))\n</code></pre>\n\n<p>Reference: <a href=\"https://docs.python.org/3.5/tutorial/modules.html\" rel=\"noreferrer\">https://docs.python.org/3.5/tutorial/modules.html</a></p>\n    </div>",
          "vote": "16"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The reason for</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    main()\n</code></pre>\n\n<p>is primarily to avoid the <a href=\"https://docs.python.org/2/library/threading.html#importing-in-threaded-code\" rel=\"noreferrer\">import lock</a> problems that would arise from <a href=\"https://stackoverflow.com/questions/46326059/\">having code directly imported</a>. You want <code>main()</code> to run if your file was directly invoked (that's the <code>__name__ == \"__main__\"</code> case), but if your code was imported then the importer has to enter your code from the true main module to avoid import lock problems.</p>\n\n<p>A side-effect is that you automatically sign on to a methodology that supports multiple entry points. You can run your program using <code>main()</code> as the entry point, <em>but you don't have to</em>. While <code>setup.py</code> expects <code>main()</code>, other tools use alternate entry points. For example, to run your file as a <code>gunicorn</code> process, you define an <code>app()</code> function instead of a <code>main()</code>. Just as with <code>setup.py</code>, <code>gunicorn</code> imports your code so you don't want it do do anything while it's being imported (because of the import lock issue).</p>\n    </div>",
          "vote": "15"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Every module in python has a attribute called <code>__name__</code>. The value of <code>__name__</code>  attribute is  <code>__main__</code>  when the module is run directly, like <code>python my_module.py</code>. Otherwise (like when you say <code>import my_module</code>) the value of <code>__name__</code>  is the name of the module.</p>\n\n<p>Small example to explain in short.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\">#Script test.py</span>\n\napple = <span class=\"hljs-number\">42</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hello_world</span>():</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"I am inside hello_world\"</span>)\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Value of __name__ is: \"</span>, __name__)\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Going to call hello_world\"</span>)\n    hello_world()\n</code></pre>\n\n<p>We can execute this directly as</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>python test.py  \n</code></pre>\n\n<p>Output</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>Value of __name__ <span class=\"hljs-keyword\">is</span>: __main__\nGoing to call hello_world\nI am inside hello_world\n</code></pre>\n\n<p>Now suppose we call above script from other script</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\">#script external_calling.py</span>\n\n<span class=\"hljs-keyword\">import</span> test\n<span class=\"hljs-built_in\">print</span>(test.apple)\ntest.hello_world()\n\n<span class=\"hljs-built_in\">print</span>(test.__name__)\n</code></pre>\n\n<p>When you execute this</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>python external_calling.py\n</code></pre>\n\n<p>Output</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-number\">42</span>\nI am inside hello_world\ntest\n</code></pre>\n\n<p>So, above is self explanatory that when you call test from other script, if loop <code>__name__</code> in <code>test.py</code> will not execute.</p>\n    </div>",
          "vote": "13"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This answer is for Java programmers learning Python.\nEvery Java file typically contains one public class. You can use that class in two ways: </p>\n\n<ol>\n<li><p>Call the class from other files. You just have to import it in the calling program.</p></li>\n<li><p>Run the class stand alone, for testing purposes. </p></li>\n</ol>\n\n<p>For the latter case, the class should contain a public static void main() method. In Python this purpose is served by the globally defined label <code>'__main__'</code>.</p>\n    </div>",
          "vote": "11"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If this .py file are imported by other .py files, the code under \"the if statement\" will not be executed.</p>\n\n<p>If this .py are run by <code>python this_py.py</code> under shell, or double clicked in Windows. the code under \"the if statement\" will be executed.</p>\n\n<p>It is usually written for testing.</p>\n    </div>",
          "vote": "7"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>if <strong>name</strong> == '<strong>main</strong>':</h1>\n\n<p>We see if <code>__name__ == '__main__':</code> quite often.</p>\n\n<p>It checks if a module is being imported or not.</p>\n\n<p>In other words, the code within the <code>if</code> block will be executed only when the code runs directly. Here <code>directly</code> means <code>not imported</code>.</p>\n\n<p>Let's see what it does using a simple code that prints the name of the module:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># test.py</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test</span>():</span>\n   <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'test module name=%s'</span> %(__name__))\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n   <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'call test()'</span>)\n   test()\n</code></pre>\n\n<p>If we run the code directly via <code>python test.py</code>, the module name is <code>__main__</code>:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>call test()\ntest module name=__main__\n</code></pre>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If the python interpreter is running&nbsp;a particular module then <code>__name__</code> global  variable will have value <code>\"__main__\"</code></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">a</span>():</span>\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"a\"</span>)\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">b</span>():</span>\n      <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"b\"</span>)\n\n  <span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>: \n\n&nbsp;&nbsp;      &nbsp;&nbsp;<span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">\"you can see me\"</span> )\n          a()\n  <span class=\"hljs-keyword\">else</span>: \n\n&nbsp;&nbsp;&nbsp;      &nbsp;<span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">\"You can't see me\"</span>)\n          b()\n</code></pre>\n\n<p>When you run this script prints <strong>you can see me</strong> </p>\n\n<p><strong>a</strong></p>\n\n<p>If you import this file say A to file B  and execute the file B then <code>if __name__ == \"__main__\"</code> in file A becomes false, so it prints  <strong>You can't see me</strong></p>\n\n<p><strong>b</strong></p>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In  simple words:</p>\n<p>The code you see under  <code>if __name__ == \"__main__\":</code> will only get called upon when your python file is executed as \"python example1.py\".</p>\n<p>However, if you wish to import your python file 'example1.py' as a module to work with another python file say 'example2.py', the code under <code>if __name__ == \"__main__\":</code> will not run or take any effect.</p>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>All the answers have pretty much explained the functionality. But I will provide one example of its usage which might help clearing out the concept further.</p>\n\n<p>Assume that you have two Python files, a.py and b.py. Now, a.py imports b.py. We run the a.py file, where the \"import b.py\" code is executed first. Before the rest of the a.py code runs, the code in the file b.py must run completely.</p>\n\n<p>In the b.py code there is some code that is exclusive to that file b.py and we don't want any other file (other than b.py file), that has imported the b.py file, to run it.</p>\n\n<p>So that is what this line of code checks. If it is the main file (i.e., b.py) running the code, which in this case it is not (a.py is the main file running), then only the code gets executed.</p>\n    </div>",
          "vote": "5"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Create a file, <strong>a.py</strong>:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-built_in\">print</span>(__name__) <span class=\"hljs-comment\"># It will print out __main__</span>\n</code></pre>\n\n<p><code>__name__</code> is always equal to <code>__main__</code> whenever that file is <strong>run directly</strong> showing that this is the main file.</p>\n\n<p>Create another file, <strong>b.py</strong>, in the same directory:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">import</span> a  <span class=\"hljs-comment\"># Prints a</span>\n</code></pre>\n\n<p>Run it. It will print <strong>a</strong>, i.e., the name of the file which <strong>is imported</strong>.</p>\n\n<p>So, to show <strong>two different behavior of the same file</strong>, this is a commonly used trick:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Code to be run when imported into another python file</span>\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">'__main__'</span>:\n    <span class=\"hljs-comment\"># Code to be run only when run directly</span>\n</code></pre>\n    </div>",
          "vote": "4"
        }
      ]
    },
    {
      "question": "Does Python have a ternary conditional operator?",
      "url": "https://stackoverflow.com/questions/394809/does-python-have-a-ternary-conditional-operator",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>If Python does not have a ternary conditional operator, is it possible to simulate one using other language constructs?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Yes, it was <a href=\"https://mail.python.org/pipermail/python-dev/2005-September/056846.html\" rel=\"noreferrer\" title=\"[Python-Dev] Conditional Expression Resolution\">added</a> in version 2.5. The expression syntax is:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>a <span class=\"hljs-keyword\">if</span> condition <span class=\"hljs-keyword\">else</span> b\n</code></pre>\n<p>First <code>condition</code> is evaluated, then exactly one of either <code>a</code> or <code>b</code> is evaluated and returned based on the <a href=\"https://en.wikipedia.org/wiki/Boolean_data_type\" rel=\"noreferrer\" title=\"Boolean data type\">Boolean</a> value of <code>condition</code>. If <code>condition</code> evaluates to <code>True</code>, then <code>a</code> is evaluated and returned but <code>b</code> is ignored, or else when <code>b</code> is evaluated and returned but <code>a</code> is ignored.</p>\n<p>This allows short-circuiting because when <code>condition</code> is true only <code>a</code> is evaluated and <code>b</code> is not evaluated at all, but when <code>condition</code> is false only <code>b</code> is evaluated and <code>a</code> is not evaluated at all.</p>\n<p>For example:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">'true'</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">'false'</span>\n<span class=\"hljs-string\">'true'</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-string\">'true'</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">'false'</span>\n<span class=\"hljs-string\">'false'</span>\n</code></pre>\n<p>Note that conditionals are an <em>expression</em>, not a <em>statement</em>. This means you can't use assignment statements or <code>pass</code> or other <strong>statements</strong> within a conditional <strong>expression</strong>:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">pass</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">else</span> x = <span class=\"hljs-number\">3</span>\n  File <span class=\"hljs-string\">\"&lt;stdin&gt;\"</span>, line <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">pass</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">else</span> x = <span class=\"hljs-number\">3</span>\n          ^\nSyntaxError: invalid syntax\n</code></pre>\n<p>You can, however, use conditional expressions to assign a variable like so:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>x = a <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">else</span> b\n</code></pre>\n<p>Think of the conditional expression as switching between two values. It is very useful when you're in a 'one value or another' situation, it but doesn't do much else.</p>\n<p>If you need to use statements, you have to use a normal <code>if</code> <strong>statement</strong> instead of a conditional <strong>expression</strong>.</p>\n<hr>\n<p>Keep in mind that it's frowned upon by some Pythonistas for several reasons:</p>\n<ul>\n<li>The order of the arguments is different from those of the classic <code>condition ? a : b</code> ternary operator from many other languages (such as C, C++, Go, Perl, Ruby, Java, Javascript, etc.), which may lead to bugs when people unfamiliar with Python's \"surprising\" behaviour use it (they may reverse the argument order).</li>\n<li>Some find it \"unwieldy\", since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).</li>\n<li>Stylistic reasons. (Although the 'inline <code>if</code>' can be <em>really</em> useful, and make your script more concise, it really does complicate your code)</li>\n</ul>\n<p>If you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, <code>x = 4 if b &gt; 8 else 9</code> is read aloud as <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>\n<p>Official documentation:</p>\n<ul>\n<li><a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\" rel=\"noreferrer\" title=\"Conditional expressions\">Conditional expressions</a></li>\n<li><a href=\"https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\" rel=\"noreferrer\" title=\"Is there an equivalent of C’s ”?:” ternary operator?\">Is there an equivalent of C’s ”?:” ternary operator?</a></li>\n</ul>\n    </div>",
          "vote": "7639"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can index into a tuple:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>(falseValue, trueValue)[test]\n</code></pre>\n\n<p><code>test</code> needs to return <em>True</em> or <em>False</em>.<br>\nIt might be safer to always implement it as:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>(falseValue, trueValue)[test == <span class=\"hljs-literal\">True</span>]\n</code></pre>\n\n<p>or you can use the built-in <a href=\"https://docs.python.org/3.3/library/functions.html#bool\" rel=\"noreferrer\" title=\"bool\"><code>bool()</code></a> to assure a <a href=\"https://en.wikipedia.org/wiki/Boolean_data_type\" rel=\"noreferrer\" title=\"Boolean data type\">Boolean</a> value:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>(falseValue, trueValue)[<span class=\"hljs-built_in\">bool</span>(&lt;expression&gt;)]\n</code></pre>\n    </div>",
          "vote": "859"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For versions prior to 2.5, there's the trick:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>[expression] <span class=\"hljs-keyword\">and</span> [on_true] <span class=\"hljs-keyword\">or</span> [on_false]\n</code></pre>\n\n<p>It can give wrong results when <code>on_true</code> \n has a false boolean value.<sup>1</sup><br>\nAlthough it does have the benefit of evaluating expressions left to right, which is clearer in my opinion.</p>\n\n<p><sub>1. <a href=\"http://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator\" rel=\"noreferrer\">Is there an equivalent of C’s ”?:” ternary operator?</a></sub></p>\n    </div>",
          "vote": "366"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code> <i>&lt;expression 1&gt;</i> <b>if</b> <i>&lt;condition&gt;</i> <b>else</b> <i>&lt;expression 2&gt;</i> </code></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>a = <span class=\"hljs-number\">1</span>\nb = <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> a &gt; b <span class=\"hljs-keyword\">else</span> -<span class=\"hljs-number\">1</span> \n<span class=\"hljs-comment\"># Output is -1</span>\n\n<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> a &gt; b <span class=\"hljs-keyword\">else</span> -<span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> a &lt; b <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># Output is -1</span>\n</code></pre>\n    </div>",
          "vote": "293"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>From <a href=\"https://docs.python.org/3/reference/expressions.html#conditional-expressions\" rel=\"noreferrer\" title=\"Conditional expressions\">the documentation</a>:</p>\n\n<blockquote>\n  <p>Conditional expressions (sometimes called a “ternary operator”) have the lowest priority of all Python operations.</p>\n  \n  <p>The expression <code>x if C else y</code> first evaluates the condition, <em>C</em> (<em>not x</em>); if <em>C</em> is true, <em>x</em> is evaluated and its value is returned; otherwise, <em>y</em> is evaluated and its value is returned.</p>\n  \n  <p>See <a href=\"https://www.python.org/dev/peps/pep-0308/\" rel=\"noreferrer\" title=\"PEP 308 -- Conditional Expressions\">PEP 308</a> for more details about conditional expressions.</p>\n</blockquote>\n\n<p>New since version 2.5.</p>\n    </div>",
          "vote": "171"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An operator for a conditional expression in Python was added in 2006 as part of <a href=\"https://www.python.org/dev/peps/pep-0308/\" rel=\"noreferrer\">Python Enhancement Proposal 308</a>. Its form differ from common <code>?:</code> operator and it's:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>&lt;expression1&gt; <span class=\"hljs-keyword\">if</span> &lt;condition&gt; <span class=\"hljs-keyword\">else</span> &lt;expression2&gt;\n</code></pre>\n\n<p>which is equivalent to:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> &lt;condition&gt;: &lt;expression1&gt; <span class=\"hljs-keyword\">else</span>: &lt;expression2&gt;\n</code></pre>\n\n<p>Here is an example:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>result = x <span class=\"hljs-keyword\">if</span> a &gt; b <span class=\"hljs-keyword\">else</span> y\n</code></pre>\n\n<p>Another syntax which can be used (compatible with versions before 2.5):</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>result = (<span class=\"hljs-keyword\">lambda</span>:y, <span class=\"hljs-keyword\">lambda</span>:x)[a &gt; b]()\n</code></pre>\n\n<p>where operands are <a href=\"https://en.wikipedia.org/wiki/Lazy_evaluation\" rel=\"noreferrer\">lazily evaluated</a>.</p>\n\n<p>Another way is by indexing a tuple (which isn't consistent with the conditional operator of most other languages):</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>result = (y, x)[a &gt; b]\n</code></pre>\n\n<p>or explicitly constructed dictionary:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>result = {<span class=\"hljs-literal\">True</span>: x, <span class=\"hljs-literal\">False</span>: y}[a &gt; b]\n</code></pre>\n\n<p>Another (less reliable), but simpler method is to use <code>and</code> and <code>or</code> operators:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>result = (a &gt; b) <span class=\"hljs-keyword\">and</span> x <span class=\"hljs-keyword\">or</span> y\n</code></pre>\n\n<p>however this won't work if <code>x</code> would be <code>False</code>.</p>\n\n<p>A possible workaround is to make <code>x</code> and <code>y</code> lists or tuples as in the following:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>result = ((a &gt; b) <span class=\"hljs-keyword\">and</span> [x] <span class=\"hljs-keyword\">or</span> [y])[<span class=\"hljs-number\">0</span>]\n</code></pre>\n\n<p>or:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>result = ((a &gt; b) <span class=\"hljs-keyword\">and</span> (x,) <span class=\"hljs-keyword\">or</span> (y,))[<span class=\"hljs-number\">0</span>]\n</code></pre>\n\n<p>If you're working with dictionaries, instead of using a ternary conditional, you can take advantage of <a href=\"https://docs.python.org/3/library/stdtypes.html#dict.get\" rel=\"noreferrer\"><code>get(key, default)</code></a>, for example:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>shell = os.environ.get(<span class=\"hljs-string\">'SHELL'</span>, <span class=\"hljs-string\">\"/bin/sh\"</span>)\n</code></pre>\n\n<p><sup>Source: <a href=\"https://en.wikipedia.org/wiki/%3F:#Python\" rel=\"noreferrer\">?: in Python at Wikipedia</a></sup></p>\n    </div>",
          "vote": "131"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Unfortunately, the</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>(falseValue, trueValue)[test]\n</code></pre>\n\n<p>solution doesn't have short-circuit behaviour; thus both <code>falseValue</code> and <code>trueValue</code> are evaluated regardless of the condition. This could be suboptimal or even buggy (i.e. both <code>trueValue</code> and <code>falseValue</code> could be methods and have side-effects).</p>\n\n<p>One solution to this would be</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>(<span class=\"hljs-keyword\">lambda</span>: falseValue, <span class=\"hljs-keyword\">lambda</span>: trueValue)[test]()\n</code></pre>\n\n<p>(execution delayed until the winner is known ;)), but it introduces inconsistency between callable and non-callable objects. In addition, it doesn't solve the case when using properties.</p>\n\n<p>And so the story goes - choosing between 3 mentioned solutions is a trade-off between having the short-circuit feature, using at least Зython 2.5 (IMHO not a problem anymore) and not being prone to \"<code>trueValue</code>-evaluates-to-false\" errors.</p>\n    </div>",
          "vote": "102"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h2><strong>Ternary Operator in different programming Languages</strong></h2>\n\n<p>Here I just try to show some important difference in <code>ternary operator</code> between a couple of programming languages.</p>\n\n<blockquote>\n  <p><em>Ternary Operator in Javascript</em></p>\n</blockquote>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>var a = true ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-comment\"># 1</span>\nvar b = false ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-comment\"># 0</span>\n</code></pre>\n\n<blockquote>\n  <p><em>Ternary Operator in Ruby</em></p>\n</blockquote>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>a = true ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># 1</span>\nb = false ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># 0</span>\n</code></pre>\n\n<blockquote>\n  <p><em>Ternary operator in Scala</em></p>\n</blockquote>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>val a = true ? <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># 1</span>\nval b = false ? <span class=\"hljs-number\">1</span> | <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># 0</span>\n</code></pre>\n\n<blockquote>\n  <p><em>Ternary operator in R programming</em></p>\n</blockquote>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>a &lt;- <span class=\"hljs-keyword\">if</span> (TRUE) <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># 1</span>\nb &lt;- <span class=\"hljs-keyword\">if</span> (FALSE) <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># 0</span>\n</code></pre>\n\n<blockquote>\n  <p><em>Ternary operator in Python</em></p>\n</blockquote>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>a = <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># 1</span>\nb = <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">0</span>\n<span class=\"hljs-comment\"># 0</span>\n</code></pre>\n    </div>",
          "vote": "79"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>For Python 2.5 and newer there is a specific syntax:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>[on_true] <span class=\"hljs-keyword\">if</span> [cond] <span class=\"hljs-keyword\">else</span> [on_false]\n</code></pre>\n\n<p>In older Pythons a ternary operator is not implemented but it's possible to simulate it.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>cond <span class=\"hljs-keyword\">and</span> on_true <span class=\"hljs-keyword\">or</span> on_false\n</code></pre>\n\n<p>Though, there is a potential problem, which if <code>cond</code> evaluates to <code>True</code> and <code>on_true</code> evaluates to <code>False</code> then <code>on_false</code> is returned instead of <code>on_true</code>. If you want this behavior the method is OK, otherwise use this:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>{<span class=\"hljs-literal\">True</span>: on_true, <span class=\"hljs-literal\">False</span>: on_false}[cond <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>] <span class=\"hljs-comment\"># is True, not == True</span>\n</code></pre>\n\n<p>which can be wrapped by:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">q</span>(<span class=\"hljs-params\">cond, on_true, on_false</span>)\n    <span class=\"hljs-title\">return</span> {<span class=\"hljs-title\">True</span>:</span> on_true, <span class=\"hljs-literal\">False</span>: on_false}[cond <span class=\"hljs-keyword\">is</span> <span class=\"hljs-literal\">True</span>]\n</code></pre>\n\n<p>and used this way:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>q(cond, on_true, on_false)\n</code></pre>\n\n<p>It is compatible with all Python versions.</p>\n    </div>",
          "vote": "64"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You might often find</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>cond <span class=\"hljs-keyword\">and</span> on_true <span class=\"hljs-keyword\">or</span> on_false\n</code></pre>\n\n<p>but this lead to problem when on_true == 0</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>x = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span> x == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">1</span> \n<span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span> x == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">1</span> \n<span class=\"hljs-number\">1</span>\n</code></pre>\n\n<p>where you would expect for a  normal ternary operator this result</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>x = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">1</span> \n<span class=\"hljs-number\">0</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>x = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">if</span> x == <span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">1</span> \n<span class=\"hljs-number\">1</span>\n</code></pre>\n    </div>",
          "vote": "46"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <h1>Does Python have a ternary conditional operator?</h1>\n</blockquote>\n\n<p>Yes. From the <a href=\"https://docs.python.org/reference/grammar.html\" rel=\"noreferrer\">grammar file</a>:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>test: or_test [<span class=\"hljs-string\">'if'</span> or_test <span class=\"hljs-string\">'else'</span> test] | lambdef\n</code></pre>\n\n<p>The part of interest is:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>or_test [<span class=\"hljs-string\">'if'</span> or_test <span class=\"hljs-string\">'else'</span> test]\n</code></pre>\n\n<p>So, a ternary conditional operation is of the form:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>expression1 <span class=\"hljs-keyword\">if</span> expression2 <span class=\"hljs-keyword\">else</span> expression3\n</code></pre>\n\n<p><code>expression3</code> will be lazily evaluated (that is, evaluated only if <code>expression2</code> is false in a boolean context). And because of the recursive definition, you can chain them indefinitely (though it may considered bad style.)</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>expression1 <span class=\"hljs-keyword\">if</span> expression2 <span class=\"hljs-keyword\">else</span> expression3 <span class=\"hljs-keyword\">if</span> expression4 <span class=\"hljs-keyword\">else</span> expression5 <span class=\"hljs-comment\"># and so on</span>\n</code></pre>\n\n<h3>A note on usage:</h3>\n\n<p>Note that every <code>if</code> must be followed with an <code>else</code>. People learning list comprehensions and generator expressions may find this to be a difficult lesson to learn - the following will not work, as Python expects a third expression for an else:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>[expression1 <span class=\"hljs-keyword\">if</span> expression2 <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> iterable]\n<span class=\"hljs-comment\">#                          ^-- need an else here</span>\n</code></pre>\n\n<p>which raises a <code>SyntaxError: invalid syntax</code>.\nSo the above is either an incomplete piece of logic (perhaps the user expects a no-op in the false condition) or what may be intended is to use expression2 as a filter - notes that the following is legal Python:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>[expression1 <span class=\"hljs-keyword\">for</span> element <span class=\"hljs-keyword\">in</span> iterable <span class=\"hljs-keyword\">if</span> expression2]\n</code></pre>\n\n<p><code>expression2</code> works as a filter for the list comprehension, and is <em>not</em> a ternary conditional operator.</p>\n\n<h3>Alternative syntax for a more narrow case:</h3>\n\n<p>You may find it somewhat painful to write the following:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>expression1 <span class=\"hljs-keyword\">if</span> expression1 <span class=\"hljs-keyword\">else</span> expression2\n</code></pre>\n\n<p><code>expression1</code> will have to be evaluated twice with the above usage. It can limit redundancy if it is simply a local variable. However, a common and performant Pythonic idiom for this use-case is to use <code>or</code>'s shortcutting behavior:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>expression1 <span class=\"hljs-keyword\">or</span> expression2\n</code></pre>\n\n<p>which is equivalent in semantics. Note that some style-guides may limit this usage on the grounds of clarity - it does pack a lot of meaning into very little syntax.</p>\n    </div>",
          "vote": "41"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Simulating the python ternary operator.</p>\n\n<p>For example</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>a, b, x, y = <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'a greather than b'</span>, <span class=\"hljs-string\">'b greater than a'</span>\nresult = (<span class=\"hljs-keyword\">lambda</span>:y, <span class=\"hljs-keyword\">lambda</span>:x)[a &gt; b]()\n</code></pre>\n\n<p>output:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-string\">'b greater than a'</span>\n</code></pre>\n    </div>",
          "vote": "23"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Ternary conditional operator simply allows testing a condition in a single line replacing the multiline if-else making the code compact.</p>\n\n<h3>Syntax :</h3>\n\n<blockquote>\n  <p>[on_true] if [expression] else [on_false] </p>\n</blockquote>\n\n<h3>1- Simple Method to use ternary operator:</h3>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Program to demonstrate conditional operator</span>\na, b = <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>\n<span class=\"hljs-comment\"># Copy value of a in min if a &lt; b else copy b</span>\n<span class=\"hljs-built_in\">min</span> = a <span class=\"hljs-keyword\">if</span> a &lt; b <span class=\"hljs-keyword\">else</span> b\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">min</span>)  <span class=\"hljs-comment\"># Output: 10</span>\n</code></pre>\n\n<h3>2- Direct Method of using tuples, Dictionary, and lambda:</h3>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Python program to demonstrate ternary operator</span>\na, b = <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>\n<span class=\"hljs-comment\"># Use tuple for selecting an item</span>\n<span class=\"hljs-built_in\">print</span>( (b, a) [a &lt; b] )\n<span class=\"hljs-comment\"># Use Dictionary for selecting an item</span>\n<span class=\"hljs-built_in\">print</span>({<span class=\"hljs-literal\">True</span>: a, <span class=\"hljs-literal\">False</span>: b} [a &lt; b])\n<span class=\"hljs-comment\"># lamda is more efficient than above two methods</span>\n<span class=\"hljs-comment\"># because in lambda  we are assure that</span>\n<span class=\"hljs-comment\"># only one expression will be evaluated unlike in</span>\n<span class=\"hljs-comment\"># tuple and Dictionary</span>\n<span class=\"hljs-built_in\">print</span>((<span class=\"hljs-keyword\">lambda</span>: b, <span class=\"hljs-keyword\">lambda</span>: a)[a &lt; b]()) <span class=\"hljs-comment\"># in output you should see three 10</span>\n</code></pre>\n\n<h3>3- Ternary operator can be written as nested if-else:</h3>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Python program to demonstrate nested ternary operator</span>\na, b = <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>\n<span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">\"Both a and b are equal\"</span> <span class=\"hljs-keyword\">if</span> a == b <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"a is greater than b\"</span>\n        <span class=\"hljs-keyword\">if</span> a &gt; b <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"b is greater than a\"</span>)\n</code></pre>\n\n<p>Above approach can be written as:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\"># Python program to demonstrate nested ternary operator</span>\na, b = <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>\n<span class=\"hljs-keyword\">if</span> a != b:\n    <span class=\"hljs-keyword\">if</span> a &gt; b:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"a is greater than b\"</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"b is greater than a\"</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Both a and b are equal\"</span>) \n<span class=\"hljs-comment\"># Output: b is greater than a</span>\n</code></pre>\n    </div>",
          "vote": "21"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-py s-code-block hljs python\"><code>a <span class=\"hljs-keyword\">if</span> condition <span class=\"hljs-keyword\">else</span> b\n</code></pre>\n\n<p>Just memorize this pyramid if you have trouble remembering:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>     condition\n  <span class=\"hljs-keyword\">if</span>           <span class=\"hljs-keyword\">else</span>\na                   b \n</code></pre>\n    </div>",
          "vote": "21"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>you can do this :-</p>\n<h3><strong><code>[condition] and [expression_1] or [expression_2] ;</code></strong></h3>\n<p>Example:-</p>\n<h3><code>print(number%2 and \"odd\" or \"even\")</code></h3>\n<p>This would print \"odd\" if the number is odd or \"even\" if the number is even.</p>\n<hr>\n<h3><strong>The result :-</strong>  If condition is true exp_1 is executed else exp_2 is executed.</h3>\n<p><strong>Note :-</strong> 0 , None , False , emptylist , emptyString evaluates as False.\nAnd any data other than 0 evaluates to True.</p>\n<h2>Here's how it works:</h2>\n<p>if the condition [condition] becomes \"True\" then , expression_1 will be evaluated but not expression_2 .\nIf we \"and\" something with 0 (zero) , the result will always to be fasle .So in the below statement ,</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">and</span> exp\n</code></pre>\n<p>The expression exp won't be evaluated at all since \"and\" with 0 will always evaluate to zero and there is no need to evaluate the expression . This is how the compiler itself works , in all languages.</p>\n<p>In</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">or</span> exp\n</code></pre>\n<p>the expression exp won't be evaluated at all since \"or\" with 1 will always be 1. So it won't bother to evaluate the expression exp since the result will be 1 anyway . (compiler optimization methods).</p>\n<p>But in case of</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">and</span> exp1 <span class=\"hljs-keyword\">or</span> exp2\n</code></pre>\n<p>The second expression exp2 won't be evaluated since <code>True and exp1</code> would be True when exp1 isn't false .</p>\n<p>Similarly in</p>\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">and</span> exp1 <span class=\"hljs-keyword\">or</span> exp2\n</code></pre>\n<p>The expression exp1 won't be evaluated since False is equivalent to writing 0 and doing \"and\" with 0 would be 0 itself but after exp1 since \"or\" is used, it will evaluate the expression exp2 after \"or\" .</p>\n<hr>\n<p><strong>Note:-</strong> This kind of branching using \"or\" and \"and\" can only be used when the expression_1 doesn't have a Truth value of False (or 0 or None or emptylist [ ] or emptystring ' '.) since if expression_1 becomes False , then the expression_2 will be evaluated because of the presence \"or\" between exp_1 and exp_2.</p>\n<p><strong>In case you still want to make it work for all the cases regardless of what exp_1 and exp_2 truth values are, do this :-</strong></p>\n<h3><code>[condition] and ([expression_1] or 1) or [expression_2] ;</code></h3>\n    </div>",
          "vote": "20"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>One of the alternatives to Python's <a href=\"https://mail.python.org/pipermail/python-dev/2005-September/056846.html\" rel=\"noreferrer\">conditional expression</a></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-string\">\"yes\"</span> <span class=\"hljs-keyword\">if</span> boolean <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">\"no\"</span>\n</code></pre>\n\n<p>is the following:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>{<span class=\"hljs-literal\">True</span>:<span class=\"hljs-string\">\"yes\"</span>, <span class=\"hljs-literal\">False</span>:<span class=\"hljs-string\">\"no\"</span>}[boolean]\n</code></pre>\n\n<p>which has the following nice extension:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>{<span class=\"hljs-literal\">True</span>:<span class=\"hljs-string\">\"yes\"</span>, <span class=\"hljs-literal\">False</span>:<span class=\"hljs-string\">\"no\"</span>, <span class=\"hljs-literal\">None</span>:<span class=\"hljs-string\">\"maybe\"</span>}[boolean_or_none]\n</code></pre>\n\n<p>The shortest alternative remains:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>(<span class=\"hljs-string\">\"no\"</span>, <span class=\"hljs-string\">\"yes\"</span>)[boolean]\n</code></pre>\n\n<p>but there is no alternative to</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>yes() <span class=\"hljs-keyword\">if</span> boolean <span class=\"hljs-keyword\">else</span> no()\n</code></pre>\n\n<p>if you want to avoid the evaluation of <code>yes()</code> <em>and</em> <code>no()</code>, because in</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>(no(), yes())[boolean]  <span class=\"hljs-comment\"># bad</span>\n</code></pre>\n\n<p>both <code>no()</code> and <code>yes()</code> are evaluated.</p>\n    </div>",
          "vote": "20"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>More a tip than an answer (don't need to repeat the obvious for the hundreth time), but I sometimes use it as a oneliner shortcut in such constructs:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">if</span> conditionX:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'yes'</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'nah'</span>)\n</code></pre>\n\n<p>, becomes:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'yes'</span>) <span class=\"hljs-keyword\">if</span> conditionX <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'nah'</span>)\n</code></pre>\n\n<p>Some (many :) may frown upon it as unpythonic (even, ruby-ish :), but I personally find it more natural - i.e. how you'd express it normally, plus a bit more visually appealing in large blocks of code.</p>\n    </div>",
          "vote": "18"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>As already answered, yes there is a ternary operator in python:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>&lt;expression <span class=\"hljs-number\">1</span>&gt; <span class=\"hljs-keyword\">if</span> &lt;condition&gt; <span class=\"hljs-keyword\">else</span> &lt;expression <span class=\"hljs-number\">2</span>&gt;\n</code></pre>\n\n<p>Additional information:</p>\n\n<p>If <code>&lt;expression 1&gt;</code> is the condition you can use <a href=\"https://en.wikipedia.org/wiki/Short-circuit_evaluation\" rel=\"noreferrer\">Short-cirquit evaluation</a>:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>a = <span class=\"hljs-literal\">True</span>\nb = <span class=\"hljs-literal\">False</span>\n\n<span class=\"hljs-comment\"># Instead of this:</span>\nx = a <span class=\"hljs-keyword\">if</span> a <span class=\"hljs-keyword\">else</span> b\n\n<span class=\"hljs-comment\"># You could use Short-cirquit evaluation:</span>\nx = a <span class=\"hljs-keyword\">or</span> b\n</code></pre>\n\n<p>PS: Of course, a Short-cirquit evaluation is not a ternary operator but often the ternary is used in cases where the short circuit would be enough.</p>\n    </div>",
          "vote": "11"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Many programming languages derived from <code>C</code> usually have the following syntax of ternary conditional operator:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>&lt;condition&gt; ? &lt;expression1&gt; : &lt;expression2&gt;\n</code></pre>\n\n<blockquote>\n  <p>At first, the <code>Python</code> <strong>B</strong>enevolent <strong>D</strong>ictator <strong>F</strong>or <strong>L</strong>ife (I mean Guido van Rossum, of course) rejected it (as non-Pythonic style), since it's quite hard to understand for people not used to <code>C</code> language. Also, the colon sign <strong><code>:</code></strong> already has many uses in <code>Python</code>. After <strong>PEP 308</strong> was approved, <code>Python</code> finally received its own shortcut conditional expression (what we use now):</p>\n</blockquote>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>&lt;expression1&gt; <span class=\"hljs-keyword\">if</span> &lt;condition&gt; <span class=\"hljs-keyword\">else</span> &lt;expression2&gt;\n</code></pre>\n\n<p>So, firstly it evaluates the condition. If it returns <code>True</code>, <strong>expression1</strong> will be evaluated to give the result, otherwise <strong>expression2</strong> will be evaluated. Due to <strong><em>Lazy Evaluation</em></strong> mechanics – only one expression will be executed.</p>\n\n<p>Here are some examples (conditions will be evaluated from left to right):</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>pressure = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'High'</span> <span class=\"hljs-keyword\">if</span> pressure &lt; <span class=\"hljs-number\">20</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">'Critical'</span>)\n\n<span class=\"hljs-comment\"># Result is 'High'</span>\n</code></pre>\n\n<p>Ternary operators can be chained in series:     </p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>pressure = <span class=\"hljs-number\">5</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Normal'</span> <span class=\"hljs-keyword\">if</span> pressure &lt; <span class=\"hljs-number\">10</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">'High'</span> <span class=\"hljs-keyword\">if</span> pressure &lt; <span class=\"hljs-number\">20</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">'Critical'</span>)\n\n<span class=\"hljs-comment\"># Result is 'Normal'</span>\n</code></pre>\n\n<p>The following one is the same as previous one:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>pressure = <span class=\"hljs-number\">5</span>\n\n<span class=\"hljs-keyword\">if</span> pressure &lt; <span class=\"hljs-number\">20</span>:\n    <span class=\"hljs-keyword\">if</span> pressure &lt; <span class=\"hljs-number\">10</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Normal'</span>)\n    <span class=\"hljs-keyword\">else</span>:\n        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'High'</span>)\n<span class=\"hljs-keyword\">else</span>:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">'Critical'</span>)\n\n<span class=\"hljs-comment\"># Result is 'Normal'</span>\n</code></pre>\n\n<p>Hope this helps.</p>\n    </div>",
          "vote": "10"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>YES, python have a ternary operator, here is the syntax and an example code to demonstrate the same :)</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-comment\">#[On true] if [expression] else[On false]</span>\n<span class=\"hljs-comment\"># if the expression evaluates to true then it will pass On true otherwise On false</span>\n\n\na= <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Enter the First Number \"</span>)\nb= <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Enter the Second Number \"</span>)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"A is Bigger\"</span>) <span class=\"hljs-keyword\">if</span> a&gt;b <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"B is Bigger\"</span>)\n</code></pre>\n    </div>",
          "vote": "7"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Vinko Vrsalovic's answer is good enough. There is only one more thing:</p>\n<blockquote>\n<p>Note that conditionals are an <em>expression</em>, not a <em>statement</em>. This means you can't use assignment statements or <code>pass</code> or other <strong>statements</strong> within a conditional <strong>expression</strong></p>\n</blockquote>\n<h1>Walrus operator in Python 3.8</h1>\n<p>After that walrus operator was introduced in Python 3.8, there is something changed.</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>(a := <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">else</span> (b := <span class=\"hljs-number\">5</span>)\n</code></pre>\n<p>gives <code>a = 3</code> and <code>b is not defined</code>,</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>(a := <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">else</span> (b := <span class=\"hljs-number\">5</span>)\n</code></pre>\n<p>gives <code>a is not defined</code> and <code>b = 5</code>, and</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>c = (a := <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">False</span> <span class=\"hljs-keyword\">else</span> (b := <span class=\"hljs-number\">5</span>)\n</code></pre>\n<p>gives <code>c = 5</code>, <code>a is not defined</code> and <code>b = 5</code>.</p>\n<p>Even if this may be ugly, <strong>assignments</strong> can be done <strong>inside</strong> conditional expressions after Python 3.8. Anyway, it is still better to use normal <code>if</code> <strong>statement</strong> instead in this case.</p>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Other answers correctly talk about the Python ternary operator. I would like to complement by mentioning a scenario for which the ternary operator is often used but for which there is a better idiom. This is the scenario of using a default value.</p>\n<p>Suppose we want to use <code>option_value</code> with a default value if it is not set:</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>run_algorithm(option_value <span class=\"hljs-keyword\">if</span> option_value <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">10</span>)\n</code></pre>\n<p>or, if <code>option_value</code> is never set to a falsy value (<code>0</code>, <code>\"\"</code>, etc), simply</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>run_algorithm(option_value <span class=\"hljs-keyword\">if</span> option_value <span class=\"hljs-keyword\">else</span> <span class=\"hljs-number\">10</span>)\n</code></pre>\n<p>However, in this case an ever better solution is simply to write</p>\n<pre class=\"lang-py s-code-block hljs python\"><code>run_algorithm(option_value <span class=\"hljs-keyword\">or</span> <span class=\"hljs-number\">10</span>)\n</code></pre>\n    </div>",
          "vote": "3"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Python has a ternary form for assignments; however there may be even a shorter form that people should be aware of.</p>\n\n<p>It's very common to need to assign to a variable one value or another depending on a condition.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>li1 = <span class=\"hljs-literal\">None</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>li2 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">if</span> li1:\n<span class=\"hljs-meta\">... </span>    a = li1\n<span class=\"hljs-meta\">... </span><span class=\"hljs-keyword\">else</span>:\n<span class=\"hljs-meta\">... </span>    a = li2\n<span class=\"hljs-meta\">... </span>    \n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n</code></pre>\n\n<p>^ This is the long form for doing such assignments.</p>\n\n<p>Below is the ternary form. But this isn't most succinct way - see last example.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = li1 <span class=\"hljs-keyword\">if</span> li1 <span class=\"hljs-keyword\">else</span> li2\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>\n</code></pre>\n\n<p>With Python, you can simply use <code>or</code> for alternative assignments.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = li1 <span class=\"hljs-keyword\">or</span> li2\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>\n</code></pre>\n\n<p>The above works since <code>li1</code> is <code>None</code> and the interp treats that as False in logic expressions. The interp then moves on and evaluates the second expression, which is not <code>None</code> and it's not an empty list - so it gets assigned to a.</p>\n\n<p>This also works with empty lists. For instance, if you want to assign <code>a</code> whichever list has items.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>li1 = []\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>li2 = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = li1 <span class=\"hljs-keyword\">or</span> li2\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a\n[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>\n</code></pre>\n\n<p>Knowing this, you can simply such assignments whenever you encounter them. This also works with strings and other iterables. You could assign <code>a</code> whichever string isn't empty.</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>s1 = <span class=\"hljs-string\">''</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>s2 = <span class=\"hljs-string\">'hello world'</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = s1 <span class=\"hljs-keyword\">or</span> s2\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a\n<span class=\"hljs-string\">'hello world'</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>\n</code></pre>\n\n<p>I always liked the C ternary syntax, but Python takes it a step further!</p>\n\n<p>I understand that some may say this isn't a good stylistic choice because it relies on mechanics that aren't immediately apparent to all developers. I personally disagree with that viewpoint. Python is a syntax rich language with lots of idiomatic tricks that aren't immediately apparent to the dabler. But the more you learn and understand the mechanics of the underlying system, the more you appreciate it.</p>\n    </div>",
          "vote": "2"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><em>A neat way to chain multiple operators:</em></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>f = <span class=\"hljs-keyword\">lambda</span> x,y: <span class=\"hljs-string\">'greater'</span> <span class=\"hljs-keyword\">if</span> x &gt; y <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">'less'</span> <span class=\"hljs-keyword\">if</span> y &gt; x <span class=\"hljs-keyword\">else</span> <span class=\"hljs-string\">'equal'</span>\n\narray = [(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>),(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>),(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">0</span>),(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)]\n\n<span class=\"hljs-keyword\">for</span> a <span class=\"hljs-keyword\">in</span> array:\n  x, y = a[<span class=\"hljs-number\">0</span>], a[<span class=\"hljs-number\">1</span>]\n  <span class=\"hljs-built_in\">print</span>(f(x,y))\n\n<span class=\"hljs-comment\"># Output is:</span>\n<span class=\"hljs-comment\">#   equal,</span>\n<span class=\"hljs-comment\">#   less,</span>\n<span class=\"hljs-comment\">#   greater,</span>\n<span class=\"hljs-comment\">#   equal</span>\n\n</code></pre>\n    </div>",
          "vote": "-1"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I find cumbersome the default python syntax <code>val = a if cond else b</code>, so sometimes I do this:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>iif = <span class=\"hljs-keyword\">lambda</span> (cond, a, b): a <span class=\"hljs-keyword\">if</span> cond <span class=\"hljs-keyword\">else</span> b\n<span class=\"hljs-comment\"># so I can then use it like:</span>\nval = iif(cond, a, b)\n</code></pre>\n\n<p>Of course, it has the downside of always evaluating both sides (a and b), but the syntax it's way clearer to me</p>\n    </div>",
          "vote": "-1"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>if variable is defined and you want to check if it has value you can just <code>a or b</code></p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\">myvar=<span class=\"hljs-literal\">None</span></span>):</span>\n    <span class=\"hljs-comment\"># shorter than: print myvar if myvar else \"no Input\"</span>\n    <span class=\"hljs-built_in\">print</span> myvar <span class=\"hljs-keyword\">or</span> <span class=\"hljs-string\">\"no Input\"</span>\n\ntest()\ntest([])\ntest(<span class=\"hljs-literal\">False</span>)\ntest(<span class=\"hljs-string\">'hello'</span>)\ntest([<span class=\"hljs-string\">'Hello'</span>])\ntest(<span class=\"hljs-literal\">True</span>)\n</code></pre>\n\n<p>will output</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>no Input\nno Input\nno Input\nhello\n[<span class=\"hljs-string\">'Hello'</span>]\n<span class=\"hljs-literal\">True</span>\n</code></pre>\n    </div>",
          "vote": "-3"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-py s-code-block hljs python\"><code>is_spacial=<span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">if</span> gender = <span class=\"hljs-string\">\"Female\"</span> <span class=\"hljs-keyword\">else</span> (<span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">if</span> age &gt;= <span class=\"hljs-number\">65</span> <span class=\"hljs-keyword\">else</span> <span class=\"hljs-literal\">False</span>)\n</code></pre>\n\n<p>**</p>\n\n<blockquote>\n  <p>it can be nested as your need. best of luck</p>\n</blockquote>\n\n<p>**</p>\n    </div>",
          "vote": "-3"
        }
      ]
    },
    {
      "question": "How do I remove a property from a JavaScript object?",
      "url": "https://stackoverflow.com/questions/208105/how-do-i-remove-a-property-from-a-javascript-object",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Say I create an object as follows:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> myObject = {\n  <span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>,\n  <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>,\n  <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>\n};\n</code></pre>\n<p>What is the best way to remove the property <code>regex</code> to end up with new <code>myObject</code> as follows?</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> myObject = {\n  <span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>,\n  <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>\n};\n</code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To remove a property from an object (mutating the object), you can do it like this:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">delete</span> myObject.regex;\n<span class=\"hljs-comment\">// or,</span>\n<span class=\"hljs-keyword\">delete</span> myObject[<span class=\"hljs-string\">'regex'</span>];\n<span class=\"hljs-comment\">// or,</span>\n<span class=\"hljs-keyword\">var</span> prop = <span class=\"hljs-string\">\"regex\"</span>;\n<span class=\"hljs-keyword\">delete</span> myObject[prop];\n</code></pre>\n<p>Demo\n</p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> myObject = {\n    <span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>,\n    <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>,\n    <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>\n};\n<span class=\"hljs-keyword\">delete</span> myObject.regex;\n\n<span class=\"hljs-built_in\">console</span>.log(myObject);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif1\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>For anyone interested in reading more about it, Stack Overflow user <a href=\"https://stackoverflow.com/users/130652/kangax\">kangax</a> has written an incredibly in-depth blog post about the <code>delete</code> statement on their blog, <em><a href=\"http://perfectionkills.com/understanding-delete/\" rel=\"noreferrer\">Understanding delete</a></em>. It is highly recommended.</p>\n<p>If you'd like a <em>new</em> object with all the keys of the original except some, you could use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#object_destructuring\" rel=\"noreferrer\">destructuring</a>.</p>\n<p>Demo\n</p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> myObject = {\n  <span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>,\n  <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>,\n  <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>\n};\n\n<span class=\"hljs-keyword\">const</span> {regex, ...newObj} = myObject;\n\n<span class=\"hljs-built_in\">console</span>.log(newObj);   <span class=\"hljs-comment\">// has no 'regex' key</span>\n<span class=\"hljs-built_in\">console</span>.log(myObject); <span class=\"hljs-comment\">// remains unchanged</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif2\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "8804"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Objects in JavaScript can be thought of as maps between keys and values. The <code>delete</code> operator is used to remove these keys, more commonly known as object properties, one at a time.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">myProperty</span>: <span class=\"hljs-number\">1</span>    \n}\n<span class=\"hljs-built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"hljs-string\">'myProperty'</span>)) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-keyword\">delete</span> obj.myProperty\n<span class=\"hljs-built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"hljs-string\">'myProperty'</span>)) <span class=\"hljs-comment\">// false</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif3\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>The <code>delete</code> operator does not directly free memory, and it differs from simply assigning the value of <code>null</code> or <code>undefined</code> to a property, in that the property <em>itself</em> is removed from the object. Note that if the <em>value</em> of a deleted property was a reference type (an object), and another part of your program still holds a reference to that object, then that object will, of course, not be garbage collected until all references to it have disappeared.</p>\n\n<p><code>delete</code> will only work on properties whose descriptor marks them as configurable.</p>\n    </div>",
          "vote": "1005"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> myObject = {<span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>, <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>, <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>};\n    \n<span class=\"hljs-keyword\">delete</span> myObject.regex;\n\n<span class=\"hljs-built_in\">console</span>.log ( myObject.regex); <span class=\"hljs-comment\">// logs: undefined</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif4\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>This works in Firefox and Internet&nbsp;Explorer, and I think it works in all others.</p>\n    </div>",
          "vote": "274"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>delete</code> operator is used to remove properties from objects.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> obj = { <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">\"bar\"</span> }\n<span class=\"hljs-keyword\">delete</span> obj.foo\nobj.hasOwnProperty(<span class=\"hljs-string\">\"foo\"</span>) <span class=\"hljs-comment\">// false</span>\n</code></pre>\n\n<p>Note that, for arrays, <strong>this is not the same as removing an element</strong>. To remove an element from an array, use <code>Array#splice</code> or <code>Array#pop</code>. For example:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>arr <span class=\"hljs-comment\">// [0, 1, 2, 3, 4]</span>\narr.splice(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// 3</span>\narr <span class=\"hljs-comment\">// [0, 1, 2, 4]</span>\n</code></pre>\n\n<h1>Details</h1>\n\n<p><code>delete</code> in JavaScript has a different function to that of the keyword in C and C++: it does not directly free memory. Instead, its sole purpose is to remove properties from objects.</p>\n\n<p>For arrays, deleting a property corresponding to an index, creates a sparse array (ie. an array with a \"hole\" in it). Most browsers represent these missing array indices as \"empty\".</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> array = [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"hljs-keyword\">delete</span> array[<span class=\"hljs-number\">2</span>] <span class=\"hljs-comment\">// [0, 1, empty, 3]</span>\n</code></pre>\n\n<p>Note that <code>delete</code> does not relocate <code>array[3]</code> into <code>array[2]</code>.</p>\n\n<p>Different built-in functions in JavaScript handle sparse arrays differently.</p>\n\n<ul>\n<li><p><code>for...in</code> will skip the empty index completely. </p></li>\n<li><p>A traditional <code>for</code> loop will return <code>undefined</code> for the value at the index.</p></li>\n<li><p>Any method using <code>Symbol.iterator</code> will return <code>undefined</code> for the value at the index.</p></li>\n<li><p><code>forEach</code>, <code>map</code> and <code>reduce</code> will simply skip the missing index.</p></li>\n</ul>\n\n<p>So, the <code>delete</code> operator should not be used for the common use-case of removing elements from an array. Arrays have a dedicated methods for removing elements and reallocating memory: <code>Array#splice()</code> and <code>Array#pop</code>.</p>\n\n<h2>Array#splice(start[, deleteCount[, item1[, item2[, ...]]]])</h2>\n\n<p><code>Array#splice</code> mutates the array, and returns any removed indices. <code>deleteCount</code> elements are removed from index <code>start</code>, and <code>item1, item2... itemN</code> are inserted into the array from index <code>start</code>. If <code>deleteCount</code> is omitted then elements from startIndex are removed to the end of the array.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]\na.splice(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// returns the removed elements [2,3]</span>\n<span class=\"hljs-comment\">// ...and `a` is now [0,1,4]</span>\n</code></pre>\n\n<p>There is also a similarly named, but different, function on <code>Array.prototype</code>: <code>Array#slice</code>.</p>\n\n<h2>Array#slice([begin[, end]])</h2>\n\n<p><code>Array#slice</code> is non-destructive, and returns a new array containing the indicated indices from <code>start</code> to <code>end</code>. If <code>end</code> is left unspecified, it defaults to the end of the array. If <code>end</code> is positive, it specifies the zero-based <strong>non-inclusive</strong> index to stop at. If <code>end</code> is negative it, it specifies the index to stop at by counting back from the end of the array (eg. -1 will omit the final index). If <code>end &lt;= start</code>, the result is an empty array.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> a = [<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>]\n<span class=\"hljs-keyword\">let</span> slices = [\n    a.slice(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">2</span>),\n    a.slice(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>),\n    a.slice(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>),\n    a.slice(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">5</span>) ]\n\n<span class=\"hljs-comment\">//   a           [0,1,2,3,4]</span>\n<span class=\"hljs-comment\">//   slices[0]   [0 1]- - -   </span>\n<span class=\"hljs-comment\">//   slices[1]    - - - - -</span>\n<span class=\"hljs-comment\">//   slices[2]    - -[3]- -</span>\n<span class=\"hljs-comment\">//   slices[3]    - -[2 4 5]</span>\n</code></pre>\n\n<h1>Array#pop</h1>\n\n<p><code>Array#pop</code> removes the last element from an array, and returns that element. This operation changes the length of the array.</p>\n    </div>",
          "vote": "248"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Old question, modern answer. Using object destructuring, an <a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\">ECMAScript&nbsp;6</a> feature, it's as simple as:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> { a, ...rest } = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> };\n</code></pre>\n\n<p>Or with the questions sample:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> myObject = {<span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>, <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>, <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>};\n<span class=\"hljs-keyword\">const</span> { regex, ...newObject } = myObject;\n<span class=\"hljs-built_in\">console</span>.log(newObject);\n</code></pre>\n\n<p><a href=\"https://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=true&amp;presets=es2015%2Cstage-0&amp;experimental=true&amp;loose=true&amp;spec=false&amp;code=const%20myObject%20%3D%20%7B%22ircEvent%22%3A%20%22PRIVMSG%22%2C%20%22method%22%3A%20%22newURI%22%2C%20%22regex%22%3A%20%22%5Ehttp%3A%2F%2F.*%22%7D%3B%0Aconst%20%7B%20regex%2C%20...newObject%20%7D%20%3D%20myObject%3B%0Aconsole.log(newObject)%3B\">You can see it in action in the Babel try-out editor.</a></p>\n\n<hr>\n\n<p><strong>Edit:</strong></p>\n\n<p>To reassign to the same variable, use a <code>let</code>:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> myObject = {<span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>, <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>, <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>};\n({ regex, ...myObject } = myObject);\n<span class=\"hljs-built_in\">console</span>.log(myObject);\n</code></pre>\n    </div>",
          "vote": "245"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"noreferrer\">Spread Syntax</a> (ES6)</h1>\n\n<p>To whoever needs it...</p>\n\n<p>To complete @Koen answer in this thread, in case you want to remove dynamic variable using the spread syntax, you can do it like so:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> key = <span class=\"hljs-string\">'a'</span>;\n        \n<span class=\"hljs-keyword\">const</span> { [key]: foo, ...rest } = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> };\n\n<span class=\"hljs-built_in\">console</span>.log(foo);  <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-built_in\">console</span>.log(rest); <span class=\"hljs-comment\">// { b: 2, c: 3 }</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif5\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>* <em><code>foo</code> will be a new variable with the value of <code>a</code> (which is 1).</em></p>\n\n<p><br>\n<strong><em>EXTENDED ANSWER</em></strong> 😇<br>\nThere are few common ways to remove a property from an object.<br>Each one has it's own pros and cons (<a href=\"https://jsperf.com/delete-vs-undefined-vs-null/16\" rel=\"noreferrer\">check this performance comparison</a>):</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\" rel=\"noreferrer\"><strong><em>Delete Operator</em></strong></a><br>\nReadable and short, however, it might not be the best choice if you are operating on a large number of objects as its performance is not optimized.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">delete</span> obj[key];\n</code></pre>\n\n<p><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators\" rel=\"noreferrer\"><strong><em>Reassignment</em></strong></a><br>\nMore than 2X faster than <code>delete</code>, however the property is <strong>not</strong> deleted and can be iterated.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>obj[key] = <span class=\"hljs-literal\">null</span>;\nobj[key] = <span class=\"hljs-literal\">false</span>;\nobj[key] = <span class=\"hljs-literal\">undefined</span>;\n</code></pre>\n\n<p><br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"noreferrer\"><strong><em>Spread Operator</em></strong></a><br>\nThis <code>ES6</code> operator allows us to return a brand new object, excluding any properties, without mutating the existing object. The downside is that it has the worse performance out of the above and not suggested to be used when you need to remove many properties at a time.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>{ [key]: val, ...rest } = obj;\n</code></pre>\n    </div>",
          "vote": "170"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another alternative is to use the <a href=\"https://underscorejs.org\" rel=\"noreferrer\">Underscore.js</a> library. </p>\n\n<p>Note that <code>_.pick()</code> and <code>_.omit()</code> both return a copy of the object and don't directly modify the original object. Assigning the result to the original object should do the trick (not shown).</p>\n\n<p>Reference: <a href=\"http://underscorejs.org/#pick\" rel=\"noreferrer\">link</a> <strong>_.pick(object, *keys)</strong></p>\n\n<p>Return a copy of the object, filtered to only have values for the \nwhitelisted keys (or array of valid keys).</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> myJSONObject = \n{<span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>, <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>, <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>};\n\n_.pick(myJSONObject, <span class=\"hljs-string\">\"ircEvent\"</span>, <span class=\"hljs-string\">\"method\"</span>);\n=&gt; {<span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>, <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>};\n</code></pre>\n\n<p>Reference: <a href=\"http://underscorejs.org/#omit\" rel=\"noreferrer\">link</a> <strong>_.omit(object, *keys)</strong></p>\n\n<p>Return a copy of the object, filtered to omit the \nblacklisted keys (or array of keys).</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> myJSONObject = \n{<span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>, <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>, <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>};\n\n_.omit(myJSONObject, <span class=\"hljs-string\">\"regex\"</span>);\n=&gt; {<span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>, <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>};\n</code></pre>\n\n<p>For arrays, <code>_.filter()</code> and <code>_.reject()</code> can be used in a similar manner. </p>\n    </div>",
          "vote": "106"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>To clone object without property:</strong></p>\n<p>For example:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> object = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> };   \n</code></pre>\n<p>And we need to delete <code>a</code>.</p>\n<ol>\n<li>With <strong>explicit prop key</strong>:</li>\n</ol>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>    <span class=\"hljs-keyword\">const</span> { a, ...rest } = object;\n    object = rest;\n</code></pre>\n<ol start=\"2\">\n<li>With <strong>variable prop key</strong>:</li>\n</ol>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>    <span class=\"hljs-keyword\">const</span> propKey = <span class=\"hljs-string\">'a'</span>;\n    <span class=\"hljs-keyword\">const</span> { [propKey]: propValue, ...rest } = object;\n    object = rest;\n</code></pre>\n<ol start=\"3\">\n<li>Cool <strong>arrow function</strong> 😎:</li>\n</ol>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>    <span class=\"hljs-keyword\">const</span> removeProperty = <span class=\"hljs-function\">(<span class=\"hljs-params\">propKey, { [propKey]: propValue, ...rest }</span>) =&gt;</span> rest;\n\n    object = removeProperty(<span class=\"hljs-string\">'a'</span>, object);\n</code></pre>\n<ol start=\"4\">\n<li>For <strong>multiple properties</strong></li>\n</ol>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>    <span class=\"hljs-keyword\">const</span> removeProperties = <span class=\"hljs-function\">(<span class=\"hljs-params\">object, ...keys</span>) =&gt;</span> <span class=\"hljs-built_in\">Object</span>.entries(object).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, [key, value]</span>) =&gt;</span> ({...prev, ...(!keys.includes(key) &amp;&amp; { [key]: value }) }), {})\n</code></pre>\n<p><em><strong>Usage</strong></em></p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>object = removeProperties(object, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>) <span class=\"hljs-comment\">// result =&gt; { c: 3 }</span>\n</code></pre>\n<p><em><strong>Or</strong></em></p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code>    <span class=\"hljs-keyword\">const</span> propsToRemove = [<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>]\n    object = removeProperties(object, ...propsToRemove) <span class=\"hljs-comment\">// result =&gt; { c: 3 }</span>\n</code></pre>\n    </div>",
          "vote": "62"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The term you have used in your question title <code>Remove a property from a JavaScript object</code>, can be interpreted in some different ways. The one is to remove it for whole the memory and the list of object keys or the other is just to remove it from your object. As it has been mentioned in some other answers, the <code>delete</code> keyword is the main part. Let's say you have your object like:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>myJSONObject = {<span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>, <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>, <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>};\n</code></pre>\n\n<p>If you do:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.keys(myJSONObject));\n</code></pre>\n\n<p>the result would be:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>[<span class=\"hljs-string\">\"ircEvent\"</span>, <span class=\"hljs-string\">\"method\"</span>, <span class=\"hljs-string\">\"regex\"</span>]\n</code></pre>\n\n<p>You can delete that specific key from your object keys like:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">delete</span> myJSONObject[<span class=\"hljs-string\">\"regex\"</span>];\n</code></pre>\n\n<p>Then your objects key using <code>Object.keys(myJSONObject)</code> would be:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>[<span class=\"hljs-string\">\"ircEvent\"</span>, <span class=\"hljs-string\">\"method\"</span>]\n</code></pre>\n\n<p>But the point is if you care about memory and you want to whole the object gets removed from the memory, it is recommended to set it to null before you delete the key:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>myJSONObject[<span class=\"hljs-string\">\"regex\"</span>] = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\">delete</span> myJSONObject[<span class=\"hljs-string\">\"regex\"</span>];\n</code></pre>\n\n<p>The other important point here is to be careful about your other references to the same object. For instance, if you create a variable like:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> regex = myJSONObject[<span class=\"hljs-string\">\"regex\"</span>];\n</code></pre>\n\n<p>Or add it as a new pointer to another object like:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> myOtherObject = {};\nmyOtherObject[<span class=\"hljs-string\">\"regex\"</span>] = myJSONObject[<span class=\"hljs-string\">\"regex\"</span>];\n</code></pre>\n\n<p>Then even if you remove it from your object <code>myJSONObject</code>, that specific object won't get deleted from the memory, since the <code>regex</code> variable and <code>myOtherObject[\"regex\"]</code> still have their values. Then how could we remove the object from the memory for sure?</p>\n\n<p>The answer would be to <strong>delete all the references you have in your code, pointed to that very object</strong> and also <strong>not use <code>var</code> statements to create new references to that object</strong>. This last point regarding <code>var</code> statements, is one of the most crucial issues that we are usually faced with, because using <code>var</code> statements would prevent the created object from getting removed.</p>\n\n<p>Which means in this case you won't be able to remove that object because you have created the <code>regex</code> variable via a <code>var</code> statement, and if you do:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">delete</span> regex; <span class=\"hljs-comment\">//False</span>\n</code></pre>\n\n<p>The result would be <code>false</code>, which means that your delete statement haven't been executed as you expected. But if you had not created that variable before, and you only had <code>myOtherObject[\"regex\"]</code> as your last existing reference, you could have done this just by removing it like:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>myOtherObject[<span class=\"hljs-string\">\"regex\"</span>] = <span class=\"hljs-literal\">null</span>;\n<span class=\"hljs-keyword\">delete</span> myOtherObject[<span class=\"hljs-string\">\"regex\"</span>];\n</code></pre>\n\n<p><strong>In other words, a JavaScript object gets killed as soon as there is no reference left in your code pointed to that object.</strong></p>\n\n<hr>\n\n<p><strong>Update:</strong>\nThanks to @AgentME:</p>\n\n<blockquote>\n  <p>Setting a property to null before deleting it doesn't accomplish\n  anything (unless the object has been sealed by Object.seal and the\n  delete fails. That's not usually the case unless you specifically\n  try).</p>\n</blockquote>\n\n<p>To get more info on <code>Object.seal</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" rel=\"noreferrer\">Object.seal()</a></p>\n    </div>",
          "vote": "61"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>ECMAScript 2015 (or ES6) came with built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a> object. It is possible to delete object property by calling <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty\">Reflect.deleteProperty()</a> function with target object and property key as parameters:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">Reflect</span>.deleteProperty(myJSONObject, <span class=\"hljs-string\">'regex'</span>);\n</code></pre>\n\n<p>which is equivalent to:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">delete</span> myJSONObject[<span class=\"hljs-string\">'regex'</span>];\n</code></pre>\n\n<p>But if the property of the object is not configurable it cannot be deleted neither with deleteProperty function nor delete operator:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-built_in\">Object</span>.freeze({ <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-string\">\"value\"</span> });\n<span class=\"hljs-keyword\">let</span> success = <span class=\"hljs-built_in\">Reflect</span>.deleteProperty(obj, <span class=\"hljs-string\">\"prop\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(success); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(obj.prop); <span class=\"hljs-comment\">// value</span>\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">Object.freeze()</a> makes all properties of object not configurable (besides other things). <code>deleteProperty</code> function (as well as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a>) returns <code>false</code> when tries to delete any of it's properties. If property is configurable it returns <code>true</code>, even if property does not exist.</p>\n\n<p>The difference between <code>delete</code> and <code>deleteProperty</code> is when using strict mode:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">\"use strict\"</span>;\n\n<span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-built_in\">Object</span>.freeze({ <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-string\">\"value\"</span> });\n<span class=\"hljs-built_in\">Reflect</span>.deleteProperty(obj, <span class=\"hljs-string\">\"prop\"</span>); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-keyword\">delete</span> obj[<span class=\"hljs-string\">\"prop\"</span>];\n<span class=\"hljs-comment\">// TypeError: property \"prop\" is non-configurable and can't be deleted</span>\n</code></pre>\n    </div>",
          "vote": "48"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Suppose you have an object that looks like this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> Hogwarts = {\n    <span class=\"hljs-attr\">staff</span> : [\n        <span class=\"hljs-string\">'Argus Filch'</span>,\n        <span class=\"hljs-string\">'Filius Flitwick'</span>,\n        <span class=\"hljs-string\">'Gilderoy Lockhart'</span>,\n        <span class=\"hljs-string\">'Minerva McGonagall'</span>,\n        <span class=\"hljs-string\">'Poppy Pomfrey'</span>,\n        ...\n    ],\n    <span class=\"hljs-attr\">students</span> : [\n        <span class=\"hljs-string\">'Hannah Abbott'</span>,\n        <span class=\"hljs-string\">'Katie Bell'</span>,\n        <span class=\"hljs-string\">'Susan Bones'</span>,\n        <span class=\"hljs-string\">'Terry Boot'</span>,\n        <span class=\"hljs-string\">'Lavender Brown'</span>,\n        ...\n    ]\n};\n</code></pre>\n\n<h3>Deleting an object property</h3>\n\n<p>If you want to use the entire <code>staff</code> array, the proper way to do this, would be to do this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">delete</span> Hogwarts.staff;\n</code></pre>\n\n<p>Alternatively, you could also do this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">delete</span> Hogwarts[<span class=\"hljs-string\">'staff'</span>];\n</code></pre>\n\n<p>Similarly, removing the entire students array would be done by calling <code>delete Hogwarts.students;</code> or <code>delete Hogwarts['students'];</code>.</p>\n\n<h3>Deleting an array index</h3>\n\n<p>Now, if you want to remove a single staff member or student, the procedure is a bit different, because both properties are arrays themselves.</p>\n\n<p>If you know the index of your staff member, you could simply do this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>Hogwarts.staff.splice(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">1</span>);\n</code></pre>\n\n<p>If you do not know the index, you'll also have to do an index search:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>Hogwarts.staff.splice(Hogwarts.staff.indexOf(<span class=\"hljs-string\">'Minerva McGonnagall'</span>) - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n</code></pre>\n\n<hr>\n\n<h3>Note</h3>\n\n<p>While you technically can use <code>delete</code> for an array, using it would result in getting incorrect results when calling for example <code>Hogwarts.staff.length</code> later on. In other words, <code>delete</code> would remove the element, but it wouldn't update the value of <code>length</code> property. Using <code>delete</code> would also mess up your indexing.</p>\n\n<p>So, when deleting values from an object, always first consider whether you're dealing with object properties or whether you're dealing with array values, and choose the appropriate strategy based on that.</p>\n\n<p>If you want to experiment with this, you can use <a href=\"http://jsfiddle.net/cb57dusv/46/\"><strong>this Fiddle</strong></a> as a starting point.</p>\n    </div>",
          "vote": "45"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I personally use <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"noreferrer\">Underscore.js</a> or <a href=\"https://lodash.com\" rel=\"noreferrer\">Lodash</a> for object and array manipulation:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>myObject = _.omit(myObject, <span class=\"hljs-string\">'regex'</span>);\n</code></pre>\n    </div>",
          "vote": "36"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using <strong>delete</strong> method is the best way to do that, as per MDN description, the delete operator removes a property from an object. So you can simply write:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">delete</span> myObject.regex;\n<span class=\"hljs-comment\">// OR</span>\n<span class=\"hljs-keyword\">delete</span> myObject[<span class=\"hljs-string\">'regex'</span>];\n</code></pre>\n\n<blockquote>\n  <p>The delete operator removes a given property from an object. On\n  successful deletion, it will return true, else false will be returned.\n  However, it is important to consider the following scenarios:</p>\n  \n  <ul>\n  <li><p>If the property which you are trying to delete does not exist, delete\n  will not have any effect and will return true</p></li>\n  <li><p>If a property with the same name exists on the object's prototype\n  chain, then, after deletion, the object will use the property from the\n  prototype chain (in other words, delete only has an effect on own\n  properties).</p></li>\n  <li><p>Any property declared with var cannot be deleted from the global scope\n  or from a function's scope.</p></li>\n  <li><p>As such, delete cannot delete any functions in the global scope (whether this is part from a function definition or a function  (expression). </p></li>\n  <li><p>Functions which are part of an object (apart from the<br>\n  global scope) can be deleted with delete.</p></li>\n  <li><p>Any property declared with let or const cannot be deleted from the scope  within which they were defined. Non-configurable properties cannot be removed. This includes properties of built-in objects like Math, Array, Object and properties that are created as non-configurable with methods like Object.defineProperty().</p></li>\n  </ul>\n</blockquote>\n\n<p>The following snippet gives another simple example:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> Employee = {\n      <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">28</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Alireza'</span>,\n      <span class=\"hljs-attr\">designation</span>: <span class=\"hljs-string\">'developer'</span>\n    }\n    \n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">delete</span> Employee.name);   <span class=\"hljs-comment\">// returns true</span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">delete</span> Employee.age);    <span class=\"hljs-comment\">// returns true</span>\n    \n    <span class=\"hljs-comment\">// When trying to delete a property that does </span>\n    <span class=\"hljs-comment\">// not exist, true is returned </span>\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">delete</span> Employee.salary); <span class=\"hljs-comment\">// returns true</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif6\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>For more info about and seeing more example, visit the link below:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete</a></p>\n    </div>",
          "vote": "30"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Another solution, using <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" rel=\"noreferrer\"><code>Array#reduce</code></a></strong>.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> myObject = {\n  <span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>,\n  <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>,\n  <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>\n};\n\nmyObject = <span class=\"hljs-built_in\">Object</span>.keys(myObject).reduce(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obj, key</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (key != <span class=\"hljs-string\">\"regex\"</span>) {           <span class=\"hljs-comment\">//key you want to remove</span>\n    obj[key] = myObject[key];\n  }\n  <span class=\"hljs-keyword\">return</span> obj;\n}, {});\n\n<span class=\"hljs-built_in\">console</span>.log(myObject);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif7\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<p>However, it will <strong>mutate</strong> the original object. If you want to create a new object <strong>without</strong> the specified key, just assign the reduce function to a new variable, e.g.: </p>\n\n<p>(ES6)</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> myObject = {\n  <span class=\"hljs-attr\">ircEvent</span>: <span class=\"hljs-string\">'PRIVMSG'</span>,\n  <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'newURI'</span>,\n  <span class=\"hljs-attr\">regex</span>: <span class=\"hljs-string\">'^http://.*'</span>,\n};\n\n<span class=\"hljs-keyword\">const</span> myNewObject = <span class=\"hljs-built_in\">Object</span>.keys(myObject).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">obj, key</span>) =&gt;</span> {\n  key !== <span class=\"hljs-string\">'regex'</span> ? obj[key] = myObject[key] : <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">return</span> obj;\n}, {});\n\n<span class=\"hljs-built_in\">console</span>.log(myNewObject);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif8\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "27"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are a lot of good answers here but I just want to chime in that when using delete to remove a property in JavaScript, it is often wise to first check if that property exists to prevent errors.</p>\n\n<p>E.g</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> obj = {<span class=\"hljs-string\">\"property\"</span>:<span class=\"hljs-string\">\"value\"</span>, <span class=\"hljs-string\">\"property2\"</span>:<span class=\"hljs-string\">\"value\"</span>};\n\n<span class=\"hljs-keyword\">if</span> (obj &amp;&amp; obj.hasOwnProperty(<span class=\"hljs-string\">\"property2\"</span>)) {\n  <span class=\"hljs-keyword\">delete</span> obj.property2;\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">//error handling</span>\n}\n</code></pre>\n\n<p>Due to the dynamic nature of JavaScript there are often cases where you simply don't know if the property exists or not. Checking if obj exists before the &amp;&amp; also makes sure you don't throw an error due to calling the hasOwnProperty() function on an undefined object.</p>\n\n<p>Sorry if this didn't add to your specific use case but I believe this to be a good design to adapt when managing objects and their properties.</p>\n    </div>",
          "vote": "23"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This post is very old and I find it very helpful so I decided to share the unset function I wrote in case someone else see this post and think why it's not so simple as it in PHP unset function.</p>\n<p>The reason for writing this new <code>unset</code> function, is to keep the index of all other variables in this hash_map. Look at the following example, and see how the index of \"test2\" did not change after removing a value from the hash_map.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">unset</span>(<span class=\"hljs-params\">unsetKey, unsetArr, resort</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> tempArr = unsetArr;\n  <span class=\"hljs-keyword\">var</span> unsetArr = {};\n  <span class=\"hljs-keyword\">delete</span> tempArr[unsetKey];\n  <span class=\"hljs-keyword\">if</span> (resort) {\n    j = -<span class=\"hljs-number\">1</span>;\n  }\n  <span class=\"hljs-keyword\">for</span> (i <span class=\"hljs-keyword\">in</span> tempArr) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span>(tempArr[i]) !== <span class=\"hljs-string\">'undefined'</span>) {\n      <span class=\"hljs-keyword\">if</span> (resort) {\n        j++;\n      } <span class=\"hljs-keyword\">else</span> {\n        j = i;\n      }\n      unsetArr[j] = tempArr[i];\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> unsetArr;\n}\n\n<span class=\"hljs-keyword\">var</span> unsetArr = [<span class=\"hljs-string\">'test'</span>, <span class=\"hljs-string\">'deletedString'</span>, <span class=\"hljs-string\">'test2'</span>];\n\n<span class=\"hljs-built_in\">console</span>.log(unset(<span class=\"hljs-string\">'1'</span>, unsetArr, <span class=\"hljs-literal\">true</span>)); <span class=\"hljs-comment\">// output Object {0: \"test\", 1: \"test2\"}</span>\n<span class=\"hljs-built_in\">console</span>.log(unset(<span class=\"hljs-string\">'1'</span>, unsetArr, <span class=\"hljs-literal\">false</span>)); <span class=\"hljs-comment\">// output Object {0: \"test\", 2: \"test2\"}</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif9\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "23"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using <a href=\"http://ramdajs.com/docs/#dissoc\" rel=\"noreferrer\">ramda#dissoc</a> you will get a new object without the attribute <code>regex</code>:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> newObject = R.dissoc(<span class=\"hljs-string\">'regex'</span>, myObject);\n<span class=\"hljs-comment\">// newObject !== myObject</span>\n</code></pre>\n\n<p>You can also use other functions to achieve the same effect - omit, pick, ...</p>\n    </div>",
          "vote": "17"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try the following method. Assign the <code>Object</code> property value to <code>undefined</code>. Then <code>stringify</code> the object and <code>parse</code>.</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code> <span class=\"hljs-keyword\">var</span> myObject = {<span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>, <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>, <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>};\n\nmyObject.regex = <span class=\"hljs-literal\">undefined</span>;\nmyObject = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-built_in\">JSON</span>.stringify(myObject));\n\n<span class=\"hljs-built_in\">console</span>.log(myObject);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif10\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "16"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you want to delete a property deeply nested in the object then you can use the following recursive function with path to the property as the second argument:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> deepObjectRemove = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obj, path_to_key</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(path_to_key.length === <span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">delete</span> obj[path_to_key[<span class=\"hljs-number\">0</span>]];\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-keyword\">if</span>(obj[path_to_key[<span class=\"hljs-number\">0</span>]])\n            <span class=\"hljs-keyword\">return</span> deepObjectRemove(obj[path_to_key[<span class=\"hljs-number\">0</span>]], path_to_key.slice(<span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-keyword\">else</span>\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n};\n</code></pre>\n\n<p>Example: </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = {\n    <span class=\"hljs-attr\">level1</span>:{\n        <span class=\"hljs-attr\">level2</span>:{\n            <span class=\"hljs-attr\">level3</span>: {\n                <span class=\"hljs-attr\">level4</span>: <span class=\"hljs-string\">\"yolo\"</span>\n            }\n        }\n    }\n};\n\ndeepObjectRemove(a, [<span class=\"hljs-string\">\"level1\"</span>, <span class=\"hljs-string\">\"level2\"</span>, <span class=\"hljs-string\">\"level3\"</span>]);\n<span class=\"hljs-built_in\">console</span>.log(a);\n\n<span class=\"hljs-comment\">//Prints {level1: {level2: {}}}</span>\n</code></pre>\n    </div>",
          "vote": "13"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Dan's assertion that 'delete' is very slow and the benchmark he posted were doubted. So I carried out the test myself in Chrome 59. It does seem that 'delete' is about 30 times slower:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> iterationsTotal = <span class=\"hljs-number\">10000000</span>;  <span class=\"hljs-comment\">// 10 million</span>\n<span class=\"hljs-keyword\">var</span> o;\n<span class=\"hljs-keyword\">var</span> t1 = <span class=\"hljs-built_in\">Date</span>.now(),t2;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>; i&lt;iterationsTotal; i++) {\n   o = {<span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-attr\">c</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">d</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">e</span>:<span class=\"hljs-number\">5</span>};\n   <span class=\"hljs-keyword\">delete</span> o.a; <span class=\"hljs-keyword\">delete</span> o.b; <span class=\"hljs-keyword\">delete</span> o.c; <span class=\"hljs-keyword\">delete</span> o.d; <span class=\"hljs-keyword\">delete</span> o.e;\n}\n<span class=\"hljs-built_in\">console</span>.log ((t2=<span class=\"hljs-built_in\">Date</span>.now())-t1);  <span class=\"hljs-comment\">// 6135</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>; i&lt;iterationsTotal; i++) {\n   o = {<span class=\"hljs-attr\">a</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">2</span>,<span class=\"hljs-attr\">c</span>:<span class=\"hljs-number\">3</span>,<span class=\"hljs-attr\">d</span>:<span class=\"hljs-number\">4</span>,<span class=\"hljs-attr\">e</span>:<span class=\"hljs-number\">5</span>};\n   o.a = o.b = o.c = o.d = o.e = <span class=\"hljs-literal\">undefined</span>;\n}\n<span class=\"hljs-built_in\">console</span>.log (<span class=\"hljs-built_in\">Date</span>.now()-t2);  <span class=\"hljs-comment\">// 205</span>\n</code></pre>\n\n<p>Note that I purposedly carried out more than one 'delete' operations in one loop cycle to minimize the effect caused by the other operations.</p>\n    </div>",
          "vote": "9"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Object.assign() &amp; Object.keys() &amp; Array.map()</h1>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"true\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> obj = {\n    <span class=\"hljs-string\">\"Filters\"</span>:[\n        {\n            <span class=\"hljs-string\">\"FilterType\"</span>:<span class=\"hljs-string\">\"between\"</span>,\n            <span class=\"hljs-string\">\"Field\"</span>:<span class=\"hljs-string\">\"BasicInformationRow.A0\"</span>,\n            <span class=\"hljs-string\">\"MaxValue\"</span>:<span class=\"hljs-string\">\"2017-10-01\"</span>,\n            <span class=\"hljs-string\">\"MinValue\"</span>:<span class=\"hljs-string\">\"2017-09-01\"</span>,\n            <span class=\"hljs-string\">\"Value\"</span>:<span class=\"hljs-string\">\"Filters value\"</span>\n        }\n    ]\n};\n\n<span class=\"hljs-keyword\">let</span> new_obj1 = <span class=\"hljs-built_in\">Object</span>.assign({}, obj.Filters[<span class=\"hljs-number\">0</span>]);\n<span class=\"hljs-keyword\">let</span> new_obj2 = <span class=\"hljs-built_in\">Object</span>.assign({}, obj.Filters[<span class=\"hljs-number\">0</span>]);\n\n<span class=\"hljs-comment\">/*\n\n// old version\n\nlet shaped_obj1 = Object.keys(new_obj1).map(\n    (key, index) =&gt; {\n        switch (key) {\n            case \"MaxValue\":\n                delete new_obj1[\"MaxValue\"];\n                break;\n            case \"MinValue\":\n                delete new_obj1[\"MinValue\"];\n                break;\n        }\n        return new_obj1;\n    }\n)[0];\n\n\nlet shaped_obj2 = Object.keys(new_obj2).map(\n    (key, index) =&gt; {\n        if(key === \"Value\"){\n            delete new_obj2[\"Value\"];\n        }\n        return new_obj2;\n    }\n)[0];\n\n\n*/</span>\n\n\n<span class=\"hljs-comment\">// new version!</span>\n\n<span class=\"hljs-keyword\">let</span> shaped_obj1 = <span class=\"hljs-built_in\">Object</span>.keys(new_obj1).forEach(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">key, index</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">switch</span> (key) {\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"MaxValue\"</span>:\n                <span class=\"hljs-keyword\">delete</span> new_obj1[<span class=\"hljs-string\">\"MaxValue\"</span>];\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"MinValue\"</span>:\n                <span class=\"hljs-keyword\">delete</span> new_obj1[<span class=\"hljs-string\">\"MinValue\"</span>];\n                <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">default</span>:\n                <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n);\n\n<span class=\"hljs-keyword\">let</span> shaped_obj2 = <span class=\"hljs-built_in\">Object</span>.keys(new_obj2).forEach(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">key, index</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span>(key === <span class=\"hljs-string\">\"Value\"</span>){\n            <span class=\"hljs-keyword\">delete</span> new_obj2[<span class=\"hljs-string\">\"Value\"</span>];\n        }\n    }\n);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif11\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "9"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>Property Removal in JavaScript</h1>\n\n<p>There are many different options presented on this page, not because most of the options are wrong—or because the answers are duplicates—but because the appropriate technique depends on the situation you're in and the goals of the tasks you and/or you team are trying to fulfill. To answer you question unequivocally, one needs to know:</p>\n\n<ol>\n<li>The version of ECMAScript you're targeting</li>\n<li>The range of object types you want to remove properties on and the type of property names you need to be able to omit (Strings only? Symbols? Weak references mapped from arbitrary objects? These have all been types of property pointers in JavaScript for years now)</li>\n<li>The programming ethos/patterns you and your team use. Do you favor functional approaches and mutation is verboten on your team, or do you employ wild west mutative object-oriented techniques?</li>\n<li>Are you looking to achieve this in pure JavaScript or are you willing &amp; able to use a 3rd-party library?</li>\n</ol>\n\n<p>Once those four queries have been answered, there are essentially four categories of \"property removal\" in JavaScript to chose from in order to meet your goals. They are:</p>\n\n<h2>Mutative object property deletion, unsafe</h2>\n\n<p>This category is for operating on object literals or object instances when you want to retain/continue to use the original reference and aren't using stateless functional principles in your code. An example piece of syntax in this category:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">'use strict'</span>\n<span class=\"hljs-keyword\">const</span> iLikeMutatingStuffDontI = { <span class=\"hljs-attr\">myNameIs</span>: <span class=\"hljs-string\">'KIDDDDD!'</span>, [<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">'amICool'</span>)]: <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-keyword\">delete</span> iLikeMutatingStuffDontI[<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">'amICool'</span>)] <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">Object</span>.defineProperty({ <span class=\"hljs-attr\">myNameIs</span>: <span class=\"hljs-string\">'KIDDDDD!'</span>, <span class=\"hljs-string\">'amICool'</span>, { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">false</span> })\n<span class=\"hljs-keyword\">delete</span> iLikeMutatingStuffDontI[<span class=\"hljs-string\">'amICool'</span>] <span class=\"hljs-comment\">// throws</span>\n</code></pre>\n\n<p>This category is the oldest, most straightforward &amp; most widely supported category of property removal. It supports <code>Symbol</code> &amp; array indexes in addition to strings and works in every version of JavaScript except for the very first release. However, it's mutative which violates some programming principles and has performance implications. It also can result in uncaught exceptions when used on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\" rel=\"noreferrer\">non-configurable properties in strict mode</a>.</p>\n\n<h2>Rest-based string property omission</h2>\n\n<p>This category is for operating on plain object or array instances in newer ECMAScript flavors when a non-mutative approach is desired and you don't need to account for Symbol keys:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> foo = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'KIDDDDD!'</span>, [<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">'isCool'</span>)]: <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-keyword\">const</span> { name, ...coolio } = foo <span class=\"hljs-comment\">// coolio doesn't have \"name\"</span>\n<span class=\"hljs-keyword\">const</span> { isCool, ...coolio2 } = foo <span class=\"hljs-comment\">// coolio2 has everything from `foo` because `isCool` doesn't account for Symbols :(</span>\n</code></pre>\n\n<h2>Mutative object property deletion, safe</h2>\n\n<p>This category is for operating on object literals or object instances when you want to retain/continue to use the original reference while guarding against exceptions being thrown on unconfigurable properties:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-meta\">'use strict'</span>\n<span class=\"hljs-keyword\">const</span> iLikeMutatingStuffDontI = { <span class=\"hljs-attr\">myNameIs</span>: <span class=\"hljs-string\">'KIDDDDD!'</span>, [<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">'amICool'</span>)]: <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-built_in\">Reflect</span>.deleteProperty(iLikeMutatingStuffDontI, <span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">'amICool'</span>)) <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">Object</span>.defineProperty({ <span class=\"hljs-attr\">myNameIs</span>: <span class=\"hljs-string\">'KIDDDDD!'</span>, <span class=\"hljs-string\">'amICool'</span>, { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">configurable</span>: <span class=\"hljs-literal\">false</span> })\n<span class=\"hljs-built_in\">Reflect</span>.deleteProperty(iLikeMutatingStuffDontI, <span class=\"hljs-string\">'amICool'</span>) <span class=\"hljs-comment\">// false</span>\n</code></pre>\n\n<p>In addition, while mutating objects in-place isn't stateless, you can use the functional nature of <code>Reflect.deleteProperty</code> to do partial application and other functional techniques that aren't possible with <code>delete</code> statements.</p>\n\n<h2>Syntax-based string property omission</h2>\n\n<p>This category is for operating on plain object or array instances in newer ECMAScript flavors when a non-mutative approach is desired and you don't need to account for Symbol keys:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> foo = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'KIDDDDD!'</span>, [<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">'isCool'</span>)]: <span class=\"hljs-literal\">true</span> }\n<span class=\"hljs-keyword\">const</span> { name, ...coolio } = foo <span class=\"hljs-comment\">// coolio doesn't have \"name\"</span>\n<span class=\"hljs-keyword\">const</span> { isCool, ...coolio2 } = foo <span class=\"hljs-comment\">// coolio2 has everything from `foo` because `isCool` doesn't account for Symbols :(</span>\n</code></pre>\n\n<h2>Library-based property omission</h2>\n\n<p>This category is generally allows for greater functional flexibility, including accounting for Symbols &amp; omitting more than one property in one statement:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">const</span> o = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"lodash.omit\"</span>)\n<span class=\"hljs-keyword\">const</span> foo = { [<span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">'a'</span>)]: <span class=\"hljs-string\">'abc'</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-string\">'c'</span> }\n<span class=\"hljs-keyword\">const</span> bar = o(foo, <span class=\"hljs-string\">'a'</span>) <span class=\"hljs-comment\">// \"'a' undefined\"</span>\n<span class=\"hljs-keyword\">const</span> baz = o(foo, [ <span class=\"hljs-built_in\">Symbol</span>.for(<span class=\"hljs-string\">'a'</span>), <span class=\"hljs-string\">'b'</span> ]) <span class=\"hljs-comment\">// Symbol supported, more than one prop at a time, \"Symbol.for('a') undefined\"</span>\n</code></pre>\n    </div>",
          "vote": "9"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Using lodash</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">import</span> omit <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'lodash/omit'</span>;\n\n<span class=\"hljs-keyword\">const</span> prevObject = {<span class=\"hljs-attr\">test</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">test2</span>: <span class=\"hljs-literal\">true</span>};\n<span class=\"hljs-comment\">// Removes test2 key from previous object</span>\n<span class=\"hljs-keyword\">const</span> nextObject = omit(prevObject, <span class=\"hljs-string\">'test2'</span>);\n</code></pre>\n\n<p>Using Ramda</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>R.omit([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'d'</span>], {<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">d</span>: <span class=\"hljs-number\">4</span>}); <span class=\"hljs-comment\">//=&gt; {b: 2, c: 3}</span>\n</code></pre>\n    </div>",
          "vote": "8"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>@johnstock</strong>, we can also use JavaScript's prototyping concept to add method to objects to delete any passed key available in calling object.</p>\n<p>Above answers are appreciated.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> myObject = {\n  <span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>,\n  <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>,\n  <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>\n};\n\n<span class=\"hljs-comment\">// 1st and direct way </span>\n<span class=\"hljs-keyword\">delete</span> myObject.regex; <span class=\"hljs-comment\">// delete myObject[\"regex\"]</span>\n<span class=\"hljs-built_in\">console</span>.log(myObject); <span class=\"hljs-comment\">// { ircEvent: 'PRIVMSG', method: 'newURI' }</span>\n\n<span class=\"hljs-comment\">// 2 way -  by using the concept of JavaScript's prototyping concept</span>\n<span class=\"hljs-built_in\">Object</span>.prototype.removeFromObjectByKey = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">key</span>) </span>{\n  <span class=\"hljs-comment\">// If key exists, remove it and return true</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>[key] !== <span class=\"hljs-literal\">undefined</span>) {\n    <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>[key]\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n  <span class=\"hljs-comment\">// Else return false</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n\n<span class=\"hljs-keyword\">var</span> isRemoved = myObject.removeFromObjectByKey(<span class=\"hljs-string\">'method'</span>)\n<span class=\"hljs-built_in\">console</span>.log(myObject) <span class=\"hljs-comment\">// { ircEvent: 'PRIVMSG' }</span>\n\n<span class=\"hljs-comment\">// More examples</span>\n<span class=\"hljs-keyword\">var</span> obj = {\n  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">45</span>,\n  <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">56</span>,\n  <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">67</span>\n}\n<span class=\"hljs-built_in\">console</span>.log(obj) <span class=\"hljs-comment\">// { a: 45, b: 56, c: 67 }</span>\n\n<span class=\"hljs-comment\">// Remove key 'a' from obj</span>\nisRemoved = obj.removeFromObjectByKey(<span class=\"hljs-string\">'a'</span>)\n<span class=\"hljs-built_in\">console</span>.log(isRemoved); <span class=\"hljs-comment\">//true</span>\n<span class=\"hljs-built_in\">console</span>.log(obj); <span class=\"hljs-comment\">// { b: 56, c: 67 }</span>\n\n<span class=\"hljs-comment\">// Remove key 'd' from obj which doesn't exist</span>\n<span class=\"hljs-keyword\">var</span> isRemoved = obj.removeFromObjectByKey(<span class=\"hljs-string\">'d'</span>)\n<span class=\"hljs-built_in\">console</span>.log(isRemoved); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(obj); <span class=\"hljs-comment\">// { b: 56, c: 67 }</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif12\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "8"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I have used <a href=\"https://lodash.com/docs/4.17.4#unset\" rel=\"noreferrer\">lodash \"unset\"</a> to make it happen for nested object also.. only this need to write small logic to get path of property key which expected by omit method.  </p>\n\n<ol>\n<li>Method which returns property path as array </li>\n</ol>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> a = {<span class=\"hljs-string\">\"bool\"</span>:{<span class=\"hljs-string\">\"must\"</span>:[{<span class=\"hljs-string\">\"range\"</span>:{<span class=\"hljs-string\">\"price_index.final_price\"</span>:{<span class=\"hljs-string\">\"gt\"</span>:<span class=\"hljs-string\">\"450\"</span>,<span class=\"hljs-string\">\"lt\"</span>:<span class=\"hljs-string\">\"500\"</span>}}},{<span class=\"hljs-string\">\"bool\"</span>:{<span class=\"hljs-string\">\"should\"</span>:[{<span class=\"hljs-string\">\"term\"</span>:{<span class=\"hljs-string\">\"color_value.keyword\"</span>:<span class=\"hljs-string\">\"Black\"</span>}}]}}]}};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPathOfKey</span>(<span class=\"hljs-params\">object,key,currentPath, t</span>)</span>{\n     <span class=\"hljs-keyword\">var</span> currentPath = currentPath || [];\n\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">in</span> object){\n\t\t<span class=\"hljs-keyword\">if</span>(i == key){\n        t = currentPath;\n      }\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> object[i] == <span class=\"hljs-string\">\"object\"</span>){\n        currentPath.push(i)\n       <span class=\"hljs-keyword\">return</span> getPathOfKey(object[i], key,currentPath)\n      }\n    }\n\tt.push(key);\n    <span class=\"hljs-keyword\">return</span> t;\n}\n<span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"output\"</span>).innerHTML =<span class=\"hljs-built_in\">JSON</span>.stringify(getPathOfKey(a,<span class=\"hljs-string\">\"price_index.final_price\"</span>))</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"output\"</span>&gt;</span> \n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif13\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n\n<ol>\n<li>Then just using <a href=\"https://lodash.com/docs/4.17.4#unset\" rel=\"noreferrer\">lodash unset</a> method remove property from object. </li>\n</ol>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> unset = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'lodash.unset'</span>);\nunset(a,getPathOfKey(a,<span class=\"hljs-string\">\"price_index.final_price\"</span>));</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif14\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can use filter like below</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> myObject = {\n    <span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>,\n    <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>,\n    <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>\n};\n\n<span class=\"hljs-comment\">// way 1</span>\n\n<span class=\"hljs-keyword\">let</span> filter1 = {}\n  <span class=\"hljs-built_in\">Object</span>.keys({...myObject}).filter(<span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span>(d !== <span class=\"hljs-string\">'regex'</span>){\n    filter1[d] = myObject[d];\n  }\n})\n\n<span class=\"hljs-built_in\">console</span>.log(filter1)\n\n<span class=\"hljs-comment\">// way 2</span>\n\n<span class=\"hljs-keyword\">let</span> filter2 = <span class=\"hljs-built_in\">Object</span>.fromEntries(<span class=\"hljs-built_in\">Object</span>.entries({...myObject}).filter(<span class=\"hljs-function\"><span class=\"hljs-params\">d</span> =&gt;</span> \nd[<span class=\"hljs-number\">0</span>] !== <span class=\"hljs-string\">'regex'</span>\n))\n\n<span class=\"hljs-built_in\">console</span>.log(filter2)</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif15\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here's an ES6 way to remove the entry easily :</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> myObject = {\n  <span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>,\n  <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>,\n  <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>\n};\n\n<span class=\"hljs-keyword\">const</span> removeItem = <span class=\"hljs-string\">'regex'</span>;\n\n<span class=\"hljs-keyword\">const</span> { [removeItem]: remove, ...rest } = myObject;\n\n<span class=\"hljs-built_in\">console</span>.log(remove); <span class=\"hljs-comment\">// \"^http://.*\"</span>\n<span class=\"hljs-built_in\">console</span>.log(rest); <span class=\"hljs-comment\">// Object { ircEvent: \"PRIVMSG\", method: \"newURI\" }</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif16\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> myObject = {\n    <span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>,\n    <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>,\n    <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>\n};\n\n\nobj = <span class=\"hljs-built_in\">Object</span>.fromEntries(\n    <span class=\"hljs-built_in\">Object</span>.entries(myObject).filter(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">m</span>)</span>{\n        <span class=\"hljs-keyword\">return</span> m[<span class=\"hljs-number\">0</span>] != <span class=\"hljs-string\">\"regex\"</span><span class=\"hljs-comment\">/*or whatever key to delete*/</span>\n    }\n))\n\n<span class=\"hljs-built_in\">console</span>.log(obj)</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif17\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>You can also just treat the object like <code>a2d</code> array using <code>Object.entries</code>, and use splice to remove an element as you would in a normal array, or simply filter through the object, as one would an array, and assign the reconstructed object back to the original variable</p>\n    </div>",
          "vote": "3"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>If you don't want to modify the original object.</p>\n<p><strong>Remove a property without mutating the object</strong></p>\n<p>If mutability is a concern, you can create a completely new object by copying all the properties from the old, except the one you want to remove.</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> myObject = {\n  <span class=\"hljs-string\">\"ircEvent\"</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>,\n  <span class=\"hljs-string\">\"method\"</span>: <span class=\"hljs-string\">\"newURI\"</span>,\n  <span class=\"hljs-string\">\"regex\"</span>: <span class=\"hljs-string\">\"^http://.*\"</span>\n};\n\n<span class=\"hljs-keyword\">let</span> prop = <span class=\"hljs-string\">'regex'</span>;\n<span class=\"hljs-keyword\">const</span> updatedObject = <span class=\"hljs-built_in\">Object</span>.keys(myObject).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">object, key</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (key !== prop) {\n    object[key] = myObject[key]\n  }\n  <span class=\"hljs-keyword\">return</span> object\n}, {})\n\n<span class=\"hljs-built_in\">console</span>.log(updatedObject);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif18\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "2"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The obvious way to remove a property from an object is to use the delete keyword.\nthis can be done like this:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">delete</span> myObject[<span class=\"hljs-string\">'regex'</span>]\n</code></pre>\n<p>or this:</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">delete</span> myObject.regex\n</code></pre>\n<p>If you are cocerned with mutability, you can create a new object by copying all the properties from the old, except the one you would like to remove</p>\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">let</span> myObject = {\n   <span class=\"hljs-attr\">ircEvent</span>: <span class=\"hljs-string\">\"PRIVMSG\"</span>,\n   <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">\"newURI\"</span>,\n   <span class=\"hljs-attr\">regex</span>: <span class=\"hljs-string\">\"^http://.*\"</span>\n};\n\n<span class=\"hljs-keyword\">const</span> propertyToRemove = <span class=\"hljs-string\">'regex'</span>\n<span class=\"hljs-keyword\">const</span> newObject = <span class=\"hljs-built_in\">Object</span>.keys(myObject).reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">object, key</span>) =&gt;</span> {\n   <span class=\"hljs-keyword\">if</span> (key !== propertyToRemove ) {\n      object[key] = car[key]\n   }\n<span class=\"hljs-keyword\">return</span> object }, {})\n</code></pre>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "Mysql replication with UPDATE JOIN on an ignored table",
      "url": "https://stackoverflow.com/questions/18859354/mysql-replication-with-update-join-on-an-ignored-table",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I'm doing mysql replication and as a dumbed down example, I have two tables, <code>tableA</code> and <code>tableB</code>.</p>\n\n<p>on the slave for replication, <code>tableA</code> is allowed and <code>tableB</code> is ignored.</p>\n\n<pre class=\"lang-sql s-code-block hljs\"><code>replicate<span class=\"hljs-operator\">-</span>do<span class=\"hljs-operator\">-</span><span class=\"hljs-keyword\">table</span><span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'dbname.tableA'</span>\n</code></pre>\n\n<p>On the master, this query is being made (i can't make any changes to the master):</p>\n\n<pre class=\"lang-sql s-code-block hljs\"><code>UPDATE tableA <span class=\"hljs-keyword\">as</span> a <span class=\"hljs-keyword\">LEFT</span> <span class=\"hljs-keyword\">JOIN</span> tableB <span class=\"hljs-keyword\">as</span> b <span class=\"hljs-keyword\">ON</span> b.type <span class=\"hljs-operator\">=</span> a.type\n<span class=\"hljs-keyword\">SET</span> b.col1 <span class=\"hljs-operator\">=</span> CONCAT(IFNULL(a.col1,<span class=\"hljs-string\">''</span>),<span class=\"hljs-string\">'|'</span>,IFNULL(a.col2,<span class=\"hljs-string\">''</span>))\n</code></pre>\n\n<p>Obviously I could just create <code>tableB</code> on the slave and let it update a bogus table, however this table in particular is an in-memory table that is used for searching and is updated almost constantly resulting in a lot of wasted resources.</p>\n\n<p>Is there a way for me to filter out these updates from the replication while still keeping <code>tableA</code>? I have no access to the master, however i can ask them to make changes if it's a change that wouldn't affect how their system operates.</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Options AFAIK are mainly based around getting the replication to be be <code>ROW</code> based rather then <code>STATEMENT</code> based.</p>\n\n<ol>\n<li>Set the default to <code>ROW</code> (which is a brute force method, and has its drawbacks).</li>\n<li><a href=\"http://dev.mysql.com/doc/refman/5.1/en/binary-log-setting.html\" rel=\"noreferrer\">You can set the <code>SESSION</code> binlog_format to <code>ROW</code></a>, but it requires the <code>SUPER</code> privilege which the user probably hasn't and will not be granted either for good reasons.</li>\n<li>If the logging happens in <code>MIXED</code> format <a href=\"http://dev.mysql.com/doc/refman/5.1/en/binary-log-mixed.html\" rel=\"noreferrer\">you can look around here to force a <code>ROW</code> based entry in the binlog</a>, trying to force a useless <code>FOUND_ROWS()</code> or  <code>UUID()</code> call in the update could very well trigger it.</li>\n</ol>\n\n<p>An example for the <code>MIXED</code> solution:\nThe queries:</p>\n\n<pre class=\"lang-sql s-code-block hljs\"><code><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> sometable <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'aa'</span>);\nUPDATE sometable <span class=\"hljs-keyword\">SET</span> aa<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'bb'</span>;\nUPDATE sometable <span class=\"hljs-keyword\">SET</span> aa<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'cc'</span> <span class=\"hljs-keyword\">WHERE</span> UUID(); <span class=\"hljs-comment\">-- slight overhead, but always true</span>\n</code></pre>\n\n<p>The log (use mysqlbinlog to inspect it), clearly <code>STATEMENT</code> based for the first 2, but <code>ROW</code> based for the 3rd:</p>\n\n<pre class=\"lang-sql s-code-block hljs\"><code># <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">175</span>\n#<span class=\"hljs-number\">130918</span> <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">25</span> server id <span class=\"hljs-number\">1</span>  end_log_pos <span class=\"hljs-number\">277</span>   Query   thread_id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">142</span>   exec_time<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>     error_code<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>\nuse `test`<span class=\"hljs-comment\">/*!*/</span>;\n<span class=\"hljs-keyword\">SET</span> <span class=\"hljs-type\">TIMESTAMP</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1379531905</span><span class=\"hljs-comment\">/*!*/</span>;\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> sometable <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">'a'</span>,<span class=\"hljs-string\">'aa'</span>)\n<span class=\"hljs-comment\">/*!*/</span>;\n# <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">277</span>\n#<span class=\"hljs-number\">130918</span> <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">25</span> server id <span class=\"hljs-number\">1</span>  end_log_pos <span class=\"hljs-number\">304</span>   Xid <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">488</span>\n<span class=\"hljs-keyword\">COMMIT</span><span class=\"hljs-comment\">/*!*/</span>;\n# <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">304</span>\n#<span class=\"hljs-number\">130918</span> <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">52</span> server id <span class=\"hljs-number\">1</span>  end_log_pos <span class=\"hljs-number\">372</span>   Query   thread_id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">142</span>   exec_time<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>     eror_code<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">SET</span> <span class=\"hljs-type\">TIMESTAMP</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1379531932</span><span class=\"hljs-comment\">/*!*/</span>;\n<span class=\"hljs-keyword\">BEGIN</span>\n<span class=\"hljs-comment\">/*!*/</span>;\n# <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">372</span>\n#<span class=\"hljs-number\">130918</span> <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">52</span> server id <span class=\"hljs-number\">1</span>  end_log_pos <span class=\"hljs-number\">463</span>   Query   thread_id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">142</span>   exec_time<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>     error_code<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">SET</span> <span class=\"hljs-type\">TIMESTAMP</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1379531932</span><span class=\"hljs-comment\">/*!*/</span>;\nUPDATE sometable <span class=\"hljs-keyword\">SET</span> aa<span class=\"hljs-operator\">=</span><span class=\"hljs-string\">'bb'</span>\n<span class=\"hljs-comment\">/*!*/</span>;\n# <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">463</span>\n#<span class=\"hljs-number\">130918</span> <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">18</span>:<span class=\"hljs-number\">52</span> server id <span class=\"hljs-number\">1</span>  end_log_pos <span class=\"hljs-number\">490</span>   Xid <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">497</span>\n<span class=\"hljs-keyword\">COMMIT</span><span class=\"hljs-comment\">/*!*/</span>;\n# <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">490</span>\n#<span class=\"hljs-number\">130918</span> <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">06</span> server id <span class=\"hljs-number\">1</span>  end_log_pos <span class=\"hljs-number\">558</span>   Query   thread_id<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">144</span>   exec_time<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>     error_code<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">SET</span> <span class=\"hljs-type\">TIMESTAMP</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1379532066</span><span class=\"hljs-comment\">/*!*/</span>;\n<span class=\"hljs-keyword\">BEGIN</span>\n<span class=\"hljs-comment\">/*!*/</span>;\n# <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">558</span>\n# <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">610</span>\n#<span class=\"hljs-number\">130918</span> <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">06</span> server id <span class=\"hljs-number\">1</span>  end_log_pos <span class=\"hljs-number\">610</span>   Table_map: `test`.`sometable` mapped <span class=\"hljs-keyword\">to</span> number <span class=\"hljs-number\">180</span>\n#<span class=\"hljs-number\">130918</span> <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">06</span> server id <span class=\"hljs-number\">1</span>  end_log_pos <span class=\"hljs-number\">664</span>   Update_rows: <span class=\"hljs-keyword\">table</span> id <span class=\"hljs-number\">180</span> flags: STMT_END_F\nBINLOG <span class=\"hljs-string\">'\nIv05UhMBAAAANAAAAGICAAAAALQAAAAAAAEABHRlc3QACXNvbWV0YWJsZQAC/A8DAwYAAQ==\nIv05UhgBAAAANgAAAJgCAAAAALQAAAAAAAEAAv///QJiYv0CY2P8AQAAYQJiYvwBAABhAmNj\n'</span><span class=\"hljs-comment\">/*!*/</span>;\n# <span class=\"hljs-keyword\">at</span> <span class=\"hljs-number\">664</span>\n#<span class=\"hljs-number\">130918</span> <span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">21</span>:<span class=\"hljs-number\">06</span> server id <span class=\"hljs-number\">1</span>  end_log_pos <span class=\"hljs-number\">691</span>   Xid <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">578</span>\n<span class=\"hljs-keyword\">COMMIT</span><span class=\"hljs-comment\">/*!*/</span>;\nDELIMITER ;\n# <span class=\"hljs-keyword\">End</span> <span class=\"hljs-keyword\">of</span> log file\n</code></pre>\n    </div>",
          "vote": "11"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In my situation it made more sense to instead ignore the table doesn't exist errors. It is because my database system has little to no chance of ever changing and the updates in question never target the tables I am replicating.</p>\n\n<p>It is a legacy system that we're slowly moving away from.</p>\n\n<pre class=\"lang-sql s-code-block hljs\"><code>slave<span class=\"hljs-operator\">-</span><span class=\"hljs-keyword\">skip</span><span class=\"hljs-operator\">-</span>errors<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">1146</span>\n</code></pre>\n\n<p>The only other reliable way to solve this would be to switch to row-level bin logging on the master, however I couldn't get them to make that change for me.</p>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "Why doesn't printf allow you to specifiy multiple format strings? [closed]",
      "url": "https://stackoverflow.com/questions/25970532/why-doesnt-printf-allow-you-to-specifiy-multiple-format-strings",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n            <hr class=\"my12 outline-none baw0 bb bc-powder-400\">\n        <div class=\"grid fw-nowrap fc-black-600\">\n                <div class=\"grid--cell mr8\">\n                    <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                </div>\n            <div class=\"grid--cell lh-md\">\n                <p class=\"mb0\">\n                    <b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/25970532/edit\">editing this post</a>.\n                </p>\n                    <p class=\"mb0 mt6\">Closed <span title=\"2014-09-29 09:06:12Z\" class=\"relativetime\">6 years ago</span>.</p>\n            </div>\n        </div>\n            <div class=\"mt24 grid gsx gs8\">\n                    <a class=\"s-btn s-btn__outlined grid--cell js-post-notice-edit-post\" href=\"/posts/25970532/edit\">\n                        Improve this question\n                    </a>\n            </div>\n</aside>\n\n    </div>\n\n<p>Why isn't the following possible?</p>\n\n<pre class=\"lang-c s-code-block hljs\"><code><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, <span class=\"hljs-string\">\"%d\"</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);\n</code></pre>\n\n<p>This would be a useful feature. Is it due to technical imitation or design reasons?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>How would <code>printf()</code> know where the formatting strings ended and the actual values began? You're not including any such information, which is the entire point of the formatting string: describing the variable number of arguments so the code inside <code>printf()</code> knows how many arguments to process.</p>\n\n<p>And in what way is that better than</p>\n\n<pre class=\"lang-c s-code-block hljs\"><code><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d%d\"</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);\n</code></pre>\n\n<p>?</p>\n\n<p>Also, the printed result (<code>\"24\"</code>, without newline) would be pretty hard to interpret in any way, so you'd might as well add spacing, which will help make the formatting string more readable:</p>\n\n<pre class=\"lang-c s-code-block hljs\"><code><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d %d\"</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>);\n</code></pre>\n\n<p>That will print <code>\"2 4\"</code> (again, without newline).</p>\n\n<p>Note that in C, there's no way for a variable-arguments function (<code>printf()</code> in this case) to somehow determine the amount (or types!) of its argument(s). It has to know, or be able to compute on its own based on some of the arguments (or some other state).</p>\n\n<p>Also, if wanted to print <code>\"%s\"</code>, I wonder how you imagine</p>\n\n<pre class=\"lang-c s-code-block hljs\"><code><span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s\"</span>, <span class=\"hljs-string\">\"%s\"</span>);\n</code></pre>\n\n<p>should work?</p>\n    </div>",
          "vote": "12"
        }
      ]
    },
    {
      "question": "“.” or “->” C struct accessor [duplicate]",
      "url": "https://stackoverflow.com/questions/44674997/or-c-struct-accessor",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>This question already has answers here</b>:\n                        \n                    </div>\n                </div>\n            </div>\n                    <div class=\"grid--cell mb0 mt4\">\n                        <a href=\"/questions/2575048/arrow-operator-usage-in-c\" dir=\"ltr\">Arrow operator (-&gt;) usage in C</a>\n                            <span class=\"question-originals-answer-count\">\n                                (12 answers)\n                            </span>\n                    </div>\n                <div class=\"grid--cell mb0 mt8\">Closed <span title=\"2017-08-14 12:51:49Z\" class=\"relativetime\">3 years ago</span>.</div>\n        </div>\n</aside>\n\n    </div>\n\n<p>What is the difference between <code>.</code> and <code>-&gt;</code> when accessing a data in a C structure? I couldn't find any difference on my several attempt. Both provide me access to the desire data</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The <code>-&gt;</code> operator is only syntactical sugar:</p>\n\n<pre class=\"lang-c s-code-block hljs\"><code>x-&gt;y\n</code></pre>\n\n<p>is the same as</p>\n\n<pre class=\"lang-c s-code-block hljs\"><code>(*x).y\n</code></pre>\n\n<p>The parentheses are necessary due to the <code>.</code> operator having higher precedence than the <code>*</code> operator.</p>\n    </div>",
          "vote": "5"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>.</code> is used with structs. <code>-&gt;</code> is used with pointers (to structs).</p>\n    </div>",
          "vote": "3"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>6.5.2.3 Structure and union members</p>\n  \n  <p>Constraints</p>\n  \n  <p>1 The first operand of the . operator shall have an atomic, qualified,\n  or unqualified structure or union type, and the second operand shall\n  name a member of that type.</p>\n  \n  <p>2 The first operand of the -&gt; operator shall have type ‘‘pointer to\n  atomic, qualified, or unqualified structure’’ or ‘‘pointer to atomic,\n  qualified, or unqualified union’’, and the second operand shall name a\n  member of the type pointed to.</p>\n  \n  <p>Semantics</p>\n  \n  <p>3 A postfix expression followed by the . operator and an identifier\n  designates a member of a structure or union object. The value is that\n  of the named member,95) and is an lvalue if the first expression is an\n  lvalue. If the first expression has qualified type, the result has the\n  so-qualified version of the type of the designated member.</p>\n  \n  <p>4 A postfix expression followed by the -&gt; operator and an identifier\n  designates a member of a structure or union object. The value is that\n  of the named member of the object to which the first expression\n  points, and is an lvalue.96) If the first expression is a pointer to a\n  qualified type, the result has the so-qualified version of the type of\n  the designated member.</p>\n</blockquote>\n    </div>",
          "vote": "1"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-c s-code-block hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyStruct</span>\n{</span>\n  <span class=\"hljs-keyword\">int</span> a;\n}\n\nMyStruct *st;\nst-&gt;a = <span class=\"hljs-number\">10</span>;\n\nMyStruct st2;\nst.a = <span class=\"hljs-number\">10</span>;\n</code></pre>\n    </div>",
          "vote": "1"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There is no connection between <code>-&gt;</code> operator and plain <code>structs / unions</code> or any other type, other than pointers to <code>structs / unions</code>. The <code>-&gt;</code> is accessing a member in <code>struct / union</code> pointed by your pointer. Meaning, after creating a <code>struct / union</code> with members, the <code>struct / union</code> members can be accessed either by <code>.</code> if holding the <code>struct / union</code> itself or by <code>-&gt;</code> if holding the <code>pointer</code> to the <code>struct / union</code></p>\n\n<p>An Example:</p>\n\n<pre class=\"lang-c s-code-block hljs\"><code><span class=\"hljs-comment\">// creating one instance of struct s, and a pointer to an instance of struct s. struct s is a struct holding one int called 'data'.</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">s</span>{</span><span class=\"hljs-keyword\">int</span> data;}struct_s_instance, *struct_s_instance_pointer = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(struct s));\nstruct_s_instance.data = <span class=\"hljs-number\">3</span>;           <span class=\"hljs-comment\">// access using the '.' operator </span>\nstruct_s_instance_pointer-&gt;data = <span class=\"hljs-number\">4</span>;  <span class=\"hljs-comment\">// pointer access using the '-&gt;' operator </span>\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d-%d\"</span>, struct_s_instance.data, struct_s_instance_pointer-&gt;data);\n</code></pre>\n\n<p>You can't access <code>data</code> in <code>struct_s_instance_pointer</code> using the <code>.</code> (i.e. <code>struct_s_instance_pointer.data</code>) or access <code>data</code> in <code>struct_s_instance</code> using <code>-&gt;</code> (i.e. <code>struct_s_instance-&gt;data</code>). These are totaly different things.</p>\n\n<p>Note that when given a pointer, such as <code>struct_s_instance_pointer</code> you can derefernce it: <code>*struct_s_instance_pointer</code>  and then the operator <code>.</code> can and should be used: <code>(*struct_s_instance_pointer).data</code></p>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "Java Code Compile Issue",
      "url": "https://stackoverflow.com/questions/39601887/java-code-compile-issue",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<ol>\n<li>Please check the error</li>\n<li>I have shown the runtime error occurring</li>\n<li>Please tell what is going wrong in this.</li>\n<li><p>This was the problem [Hacker Rank Challenges - Washing Plates ]:<a href=\"https://www.hackerrank.com/contests/101hack41/challenges/washing-plates\" rel=\"nofollow noreferrer\">https://www.hackerrank.com/contests/101hack41/challenges/washing-plates</a></p></li>\n<li><p>Error:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code> Exception in thread <span class=\"hljs-string\">\"main\"</span> java.util.NoSuchElementException\n    at java.util.Scanner.throwFor(Scanner.java:<span class=\"hljs-number\">862</span>)\n    at java.util.Scanner.next(Scanner.java:<span class=\"hljs-number\">1485</span>)\n    at java.util.Scanner.nextInt(Scanner.java:<span class=\"hljs-number\">2117</span>)\n    at java.util.Scanner.nextInt(Scanner.java:<span class=\"hljs-number\">2076</span>)\n    at Plates.main(Plates.java:<span class=\"hljs-number\">17</span>)\n</code></pre></li>\n<li><p>Code.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">import</span> java.util.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Plates</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        Scanner in = <span class=\"hljs-keyword\">new</span> Scanner(System.in);\n        <span class=\"hljs-comment\">//System.out.println(\"Enter Details\");</span>\n        String s = in.next();\n        <span class=\"hljs-keyword\">int</span> l = s.length();\n        <span class=\"hljs-keyword\">int</span> n = s.charAt(<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">int</span> k = s.charAt(l - <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">int</span> arr[][] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n][<span class=\"hljs-number\">2</span>];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">2</span>; j++) {\n                arr[i][j] = in.nextInt();\n            }\n        }\n        <span class=\"hljs-keyword\">int</span> max = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">int</span> inc[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n];\n        <span class=\"hljs-keyword\">int</span> ded[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> t = <span class=\"hljs-number\">0</span>; t &lt; n; t++) {\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> p = <span class=\"hljs-number\">0</span>; p &lt; <span class=\"hljs-number\">2</span>; p++) {\n                <span class=\"hljs-keyword\">if</span>(p == <span class=\"hljs-number\">0</span>) {\n                    inc[t] = arr[t][p];\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(p == <span class=\"hljs-number\">1</span>) {\n                    ded[t] = arr[t][p];\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">int</span> a, b;\n        <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>, loss = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span>(a = <span class=\"hljs-number\">0</span>; a &lt; n; a++) {\n            <span class=\"hljs-keyword\">for</span>(b = <span class=\"hljs-number\">1</span>; b &lt;= k; b++) {\n                sum = sum + inc[a + <span class=\"hljs-number\">1</span>];\n                loss = loss - ded[a + <span class=\"hljs-number\">1</span>];\n            }\n            <span class=\"hljs-keyword\">if</span>((sum - loss) &gt; max) {\n                max = sum - loss;\n            }\n        }\n        System.out.println(max);\n    }\n}\n</code></pre></li>\n</ol>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>HackerRank says:</p>\n<blockquote>\n<p>The first line contains <strong>two space-separated integers</strong> describing the respective values of <code>n</code> (the number of dirty plates) and <code>k</code> (the number of plates Harold has time to wash).</p>\n<ul>\n<li>1 &lt;= <code>n</code> &lt;= 20000, 1 &lt;= <code>k</code> &lt;= 20000</li>\n</ul>\n</blockquote>\n<p>However, your code is doing something totally different:</p>\n<pre class=\"lang-java s-code-block hljs\"><code>String s = in.next();\n<span class=\"hljs-keyword\">int</span> l = s.length();\n<span class=\"hljs-keyword\">int</span> n = s.charAt(<span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">int</span> k = s.charAt(l - <span class=\"hljs-number\">1</span>);\n</code></pre>\n<p>Since <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Scanner.html#next--\" rel=\"nofollow noreferrer\"><code>next()</code></a> only reads <strong>one</strong> token, <code>s</code> would be the String value of the HackerRank value <code>n</code>.</p>\n<p>Let's say the first line is:</p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-number\">7000</span> <span class=\"hljs-number\">20000</span>\n</code></pre>\n<p>Your code will read <code>7000</code> into <code>s</code>, then assign <code>n = '7'</code> and <code>k = '0'</code>.</p>\n<p>The character <code>'7'</code> has the ASCII/Unicode numeric value <code>55</code>, and the character <code>'0'</code> has value <code>48</code>. So what you really got was <code>n = 55</code> and <code>k = 48</code>.</p>\n<p>What you should have done, is simply this:</p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">int</span> n = in.nextInt();\n<span class=\"hljs-keyword\">int</span> k = in.nextInt();\n</code></pre>\n<hr>\n<p><strong>UPDATE</strong></p>\n<p>Since the contest is over, you can read the <a href=\"https://www.hackerrank.com/contests/101hack41/challenges/washing-plates/editorial\" rel=\"nofollow noreferrer\">editorial page</a> to see a solution. Java doesn't have a <a href=\"http://www.cplusplus.com/reference/set/multiset/\" rel=\"nofollow noreferrer\"><code>multiset</code></a> (ordered list), but you could use a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/PriorityQueue.html\" rel=\"nofollow noreferrer\"><code>PriorityQueue</code></a>.</p>\n<p>Below is an alternate solution with a lower memory footprint for high values of <code>k</code>.</p>\n<p>First, assume you can wash all the plates, so sum all the <code>p</code> values. If <code>k &gt;= n</code>, you're done. Now, for every plate you can't wash, subtract <code>p</code> again and also subtract <code>d</code>, e.g. subtract <code>p + d</code> from the total.</p>\n<p>The goal then is to wash the plates with the highest <code>p + d</code> value first, so we'll be subtracting smaller values from the total. To do that, build an array of <code>p + d</code> values, sort it, and wash/remove/skip the <code>k</code> plates with the highest values.</p>\n<p>Finally, remember to not return a negative value.</p>\n<p>Here it is in compact form:</p>\n<pre class=\"lang-java s-code-block hljs\"><code>java.util.Scanner in = <span class=\"hljs-keyword\">new</span> java.util.Scanner(System.in);\n<span class=\"hljs-keyword\">int</span> n = in.nextInt(), k = in.nextInt(), pd[] = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">int</span>[n];\n<span class=\"hljs-keyword\">long</span> total = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; n; i++) {\n    <span class=\"hljs-keyword\">int</span> p = in.nextInt(), d = in.nextInt();\n    total += p;\n    pd[i] = p + d;\n}\njava.util.Arrays.sort(pd);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = n - k - <span class=\"hljs-number\">1</span>; i &gt;= <span class=\"hljs-number\">0</span>; i--)\n    total -= pd[i];\nSystem.out.println(Math.max(<span class=\"hljs-number\">0</span>, total));\n</code></pre>\n    </div>",
          "vote": "5"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Better use <code>nextLine</code> function to read complete line as an input:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>String s = in.nextLine();\n</code></pre>\n\n<p>Then split the string on the basis of space.</p>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "Find the Biggest Number in C, BUT with characters",
      "url": "https://stackoverflow.com/questions/33150587/find-the-biggest-number-in-c-but-with-characters",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I want to write a function which helps the user to insert N number of people, with their names and age.</p>\n\n<p>For example:</p>\n\n<pre class=\"lang-none s-code-block\"><code>4\nJohn Williams 37\nMichael Douglas 65\nWill Smith 51\nClark Kent 33\n</code></pre>\n\n<p>Then, I've to find the oldest one based on the <code>age</code> and print the name and age:</p>\n\n<pre class=\"lang-none s-code-block\"><code>Michael Douglas 65\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>I have a NEW code which is this one: </p>\n\n<pre class=\"lang-c s-code-block hljs\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n  <span class=\"hljs-keyword\">char</span> peopleName[<span class=\"hljs-number\">5</span>][<span class=\"hljs-number\">20</span>],peopleAge[<span class=\"hljs-number\">5</span>];\n  <span class=\"hljs-keyword\">int</span> i;\n  <span class=\"hljs-keyword\">int</span> maxAge=<span class=\"hljs-number\">0</span>, maxName=<span class=\"hljs-number\">-1</span>;\n  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">5</span>;i++)\n  {\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Name &amp; Age %d :\"</span>,i+<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%s\"</span>,&amp;peopleName[i]);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>,&amp;peopleAge[i]);\n    <span class=\"hljs-keyword\">if</span>(peopleAge[i]&gt;maxAge)\n    {\n      maxAge=peopleAge[i];\n      maxName=i;\n    }\n  }\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s %d\"</span>, peopleName[maxName],peopleAge[maxAge]);\n}\n</code></pre>\n\n<p>My question is: How can I change from having 5 people to N number of people (what I mean is, How can I choose the number of people I can input)?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You need to ask the user for the number that they want to insert.\nOnce given this you need to set the size of your arrays because you do not know their size until afterward</p>\n<pre class=\"lang-c s-code-block hljs\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">int</span> i;\n  <span class=\"hljs-keyword\">int</span> maxAge = <span class=\"hljs-number\">0</span>, maxName = <span class=\"hljs-number\">-1</span>;\n  <span class=\"hljs-keyword\">int</span> numberOfPeople = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp; numberOfPeople);\n  <span class=\"hljs-comment\">//now we have to set the arrays to the size that we are inserting</span>\n  <span class=\"hljs-keyword\">char</span> peopleName[numberOfPeople][<span class=\"hljs-number\">20</span>], peopleAge[numberOfPeople];\n\n  <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; numberOfPeople; i++) {\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Name &amp; Age %d :\"</span>, i + <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%s\"</span>, &amp; peopleName[i]);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp; peopleAge[i]);\n    <span class=\"hljs-keyword\">if</span> (peopleAge[i] &gt; maxAge) {\n      maxAge = i; <span class=\"hljs-comment\">//you had the actual age here, </span>\n      <span class=\"hljs-comment\">//but you need the index of the highest age instead</span>\n      maxName = i;\n    }\n  }\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s %d\"</span>, peopleName[maxName], peopleAge[maxAge]);\n}\n</code></pre>\n    </div>",
          "vote": "2"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This should be what you want:</p>\n\n<pre class=\"lang-c s-code-block hljs\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAX_PEOPLE 100</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAX_NAME 100 </span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span>\n</span>{\n    <span class=\"hljs-keyword\">char</span> peopleName[MAX_PEOPLE][MAX_NAME];\n    <span class=\"hljs-keyword\">int</span> peopleAge[MAX_PEOPLE]; <span class=\"hljs-comment\">// a person's age is an integer</span>\n    <span class=\"hljs-keyword\">int</span> n, i;\n    <span class=\"hljs-keyword\">int</span> maxAge = <span class=\"hljs-number\">0</span>, maxName = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">\"How many people do you want to input?\"</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d%*c\"</span>, &amp;n); <span class=\"hljs-comment\">// discarding '\\n'</span>\n    <span class=\"hljs-keyword\">if</span>(n &gt; MAX_PEOPLE)\n        <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">\"Too many people!\"</span>);\n    <span class=\"hljs-keyword\">for</span>(i = <span class=\"hljs-number\">0</span>; i &lt; n; i++)\n    {\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Name &amp; Age %d :\"</span>, i + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\" %s\"</span>, peopleName[i]);\n        <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\" %d\"</span>, &amp;peopleAge[i]); <span class=\"hljs-comment\">// discarding whitespace characters</span>\n        <span class=\"hljs-keyword\">if</span>(peopleAge[i] &gt; maxAge)\n        {\n            maxAge = peopleAge[i];\n            maxName = i;\n        }\n    }\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s %d\"</span>, peopleName[maxName], maxAge); <span class=\"hljs-comment\">// maxAge is a value, rather than an index</span>\n}\n</code></pre>\n\n<p>See my comments for illustration. In fact, there are some issues in your code, so I fixed them.</p>\n    </div>",
          "vote": "0"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I changed a little bit, but I think it will help to see in a simpler way.</p>\n<pre class=\"lang-c s-code-block hljs\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n  <span class=\"hljs-keyword\">int</span> indexOfMaxAge = <span class=\"hljs-number\">0</span>, numberOfPeople = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;numberOfPeople);\n\n  <span class=\"hljs-keyword\">char</span> peopleName[numberOfPeople][<span class=\"hljs-number\">20</span>], peopleAge[numberOfPeople];\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; numberOfPeople; i++) {\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"Name &amp; Age %d :\"</span>, i + <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%s\"</span>, &amp;peopleName[i]);\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;peopleAge[i]);\n    <span class=\"hljs-keyword\">if</span> (peopleAge[i] &gt; peopleAge[indexOfMaxAge]) indexOfMaxAge = i;\n    <span class=\"hljs-comment\">// only the index of the older person</span>\n    <span class=\"hljs-comment\">// is being stored and used to compare</span>\n  }\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s %d\\n\"</span>, peopleName[indexOfMaxAge], peopleAge[indexOfMaxAge]);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "find all possible combinations of letters in a string in python [duplicate]",
      "url": "https://stackoverflow.com/questions/27885020/find-all-possible-combinations-of-letters-in-a-string-in-python",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>This question already has answers here</b>:\n                        \n                    </div>\n                </div>\n            </div>\n                    <div class=\"grid--cell mb0 mt4\">\n                        <a href=\"/questions/1482308/how-to-get-all-subsets-of-a-set-powerset\" dir=\"ltr\">How to get all subsets of a set? (powerset)</a>\n                            <span class=\"question-originals-answer-count\">\n                                (29 answers)\n                            </span>\n                    </div>\n                <div class=\"grid--cell mb0 mt8\">Closed <span title=\"2015-01-13 15:09:18Z\" class=\"relativetime\">6 years ago</span>.</div>\n        </div>\n</aside>\n\n    </div>\n\n<p>I have a string in python,\nI need to find all the possible ways any substring of that string (including itself)\ncould be selected. A substring (for my purposes) does not have to be contiguous, in the original string -- it could have gaps. <br>\nEg: <code>\"frogman\"</code> is one of the many substrings of <code>\"froghuman'</code> under this definition.</p>\n\n<p>For example of the would function:\nIf my string is <code>\"abcd\"</code>, the output should be:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>[<span class=\"hljs-string\">\"a\"</span>,<span class=\"hljs-string\">\"b\"</span>,<span class=\"hljs-string\">\"c\"</span>,<span class=\"hljs-string\">\"d\"</span>,<span class=\"hljs-string\">\"ab\"</span>,<span class=\"hljs-string\">\"ac\"</span>,<span class=\"hljs-string\">\"ad\"</span>,<span class=\"hljs-string\">\"bc\"</span>,<span class=\"hljs-string\">\"bd\"</span>,<span class=\"hljs-string\">\"cd\"</span>,<span class=\"hljs-string\">\"abc\"</span>,<span class=\"hljs-string\">\"abd\"</span>,<span class=\"hljs-string\">\"acd\"</span>,<span class=\"hljs-string\">\"bcd\"</span>,<span class=\"hljs-string\">\"abcd\"</span>]\n</code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your example input/output suggests that you are looking for a <a href=\"http://en.wikipedia.org/wiki/Power_set\" rel=\"noreferrer\">power set</a>. You could <a href=\"https://docs.python.org/dev/library/itertools.html#itertools-recipes\" rel=\"noreferrer\">generate a power set for a string using <code>itertools</code> module in Python</a>:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">from</span> itertools <span class=\"hljs-keyword\">import</span> chain, combinations\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">powerset</span>(<span class=\"hljs-params\">iterable</span>):</span>\n    <span class=\"hljs-string\">\"powerset([1,2,3]) --&gt; () (1,) (2,) (3,) (1,2) (1,3) (2,3) (1,2,3)\"</span>\n    s = <span class=\"hljs-built_in\">list</span>(iterable)\n    <span class=\"hljs-keyword\">return</span> chain.from_iterable(combinations(s, r) <span class=\"hljs-keyword\">for</span> r <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(s)+<span class=\"hljs-number\">1</span>))\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">list</span>(<span class=\"hljs-built_in\">map</span>(<span class=\"hljs-string\">''</span>.join, powerset(<span class=\"hljs-string\">'abcd'</span>))))\n</code></pre>\n\n<h3>Output</h3>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>[<span class=\"hljs-string\">''</span>,\n <span class=\"hljs-string\">'a'</span>,\n <span class=\"hljs-string\">'b'</span>,\n <span class=\"hljs-string\">'c'</span>,\n <span class=\"hljs-string\">'d'</span>,\n <span class=\"hljs-string\">'ab'</span>,\n <span class=\"hljs-string\">'ac'</span>,\n <span class=\"hljs-string\">'ad'</span>,\n <span class=\"hljs-string\">'bc'</span>,\n <span class=\"hljs-string\">'bd'</span>,\n <span class=\"hljs-string\">'cd'</span>,\n <span class=\"hljs-string\">'abc'</span>,\n <span class=\"hljs-string\">'abd'</span>,\n <span class=\"hljs-string\">'acd'</span>,\n <span class=\"hljs-string\">'bcd'</span>,\n <span class=\"hljs-string\">'abcd'</span>]\n</code></pre>\n\n<p>Note: the output includes the empty string.</p>\n    </div>",
          "vote": "24"
        }
      ]
    },
    {
      "question": "What is the equivalent of `string` in C++",
      "url": "https://stackoverflow.com/questions/35779178/what-is-the-equivalent-of-string-in-c",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>In Python, there is a type named <code>string</code>, what is the exact equivalent of python's <code>string</code> in C++?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The equivalent is <a href=\"http://en.cppreference.com/w/cpp/string/basic_string\" rel=\"noreferrer\"><code>std::string</code></a> or <code>std::wstring</code> declared in the <code>&lt;string&gt;</code> header file.</p>\n\n<p>Though you should note that python has probably different intrinsic behavior about handling automatic conversions to UNICODE strings, as mentioned in <a href=\"https://stackoverflow.com/questions/35779178/what-is-the-equivalent-of-string-in-c?noredirect=1#comment59230022_35779178\">@Vincent Savard's comment</a>.</p>\n\n<p>To overcome these problems we use additional libraries in c++ like <a href=\"http://www.gnu.org/software/libc/manual/html_node/Generic-Charset-Conversion.html#Generic-Charset-Conversion\" rel=\"noreferrer\">libiconv</a>. It's available for use on a broad number of platforms.</p>\n\n<hr>\n\n<p><sub>You should seriously note to do some better research before asking at Stack Overflow, or ask your question more clearly. <code>std::string</code> <a href=\"https://www.google.de/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=c%2B%2B+string\" rel=\"noreferrer\">is ubiquitous</a>.</sub></p>\n    </div>",
          "vote": "12"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You could either use std::string (see available interface here: <a href=\"http://www.cplusplus.com/reference/string/string/\" rel=\"nofollow\"><code>std::string</code></a>)\nor use <code>char</code> array to represent a basic combination of characters that might function as a primitive string.</p>\n    </div>",
          "vote": "4"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Do you mean the <a href=\"http://en.cppreference.com/w/cpp/string/basic_string\" rel=\"nofollow\"><code>std::string</code></a> family?</p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">const</span> std::string example = <span class=\"hljs-string\">\"test\"</span>;\n  std::string exclaim = example + <span class=\"hljs-string\">\"!\"</span>;\n\n  std::cout &lt;&lt; exclaim &lt;&lt; std::endl;\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n    </div>",
          "vote": "3"
        }
      ]
    },
    {
      "question": "Why can't we declare variables in if statement?",
      "url": "https://stackoverflow.com/questions/31117132/why-cant-we-declare-variables-in-if-statement",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I know that there is a question like this on Stack Overflow but I want to know why we can't declare variables inside <code>if</code> statements so that we can save space by just utilizing the <code>if</code> scope.</p>\n\n<p>For example if I write:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">int</span> i) {\n    ...\n} \n</code></pre>\n\n<p>then I could use <code>i</code> only within the <code>if</code> scope, but if I write it outside of the <code>if</code> statement, then <code>i</code> variable should be in memory for the whole block.</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>if ( int i ) =&gt; int i</code> is not a boolean expression, so this won't work.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">if</span> ( booleanExpr ){\n  <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">5</span>;\n...\n}\n</code></pre>\n\n<p>here a is a local variable within the if block. At the end of the if-block, it is removed from the stack and becomes unusable.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">if</span> ( booleanExpr){\n  ...\n}\n</code></pre>\n\n<p>Here a is not local to the if block, but to the containing method. So, it will be on the stack during the entire execution of the method (starting from its declaration).</p>\n\n<p>a could also be an instance or static variable to the class, then it's accessible in every method of the class (instance variables are not accessible in a static context, though)</p>\n    </div>",
          "vote": "4"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n<p>why can't we declare variables in the <code>if</code> statement?</p>\n</blockquote>\n<p>Because the <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.9\" rel=\"nofollow noreferrer\">Java Language Specification</a> does not allow it.</p>\n<blockquote>\n<p>if I write <code>if(int i){}</code> then I could use <code>i</code> only for if the scope</p>\n</blockquote>\n<p>You can use blocks</p>\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">someMethod</span><span class=\"hljs-params\">()</span> </span>{\n  {\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// visible only to the current block</span>\n  } {\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// visible only to the current block</span>\n    <span class=\"hljs-keyword\">if</span> (i == <span class=\"hljs-number\">0</span>) {\n      System.out.println(<span class=\"hljs-string\">\"i = \"</span> + i);\n    }\n  }\n\n  <span class=\"hljs-comment\">// compiler error, because i is not visible outside the block</span>\n  System.out.println(i);\n}\n</code></pre>\n<p>But this decreases the readability of your code. So I would recommend to NOT use it.</p>\n    </div>",
          "vote": "4"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>An if statement is a test, so declaring a variable in an if does not make any sense.</p>\n\n<p>Think about it, an if is for something like this:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">if</span>(a == <span class=\"hljs-number\">1</span>){\n  <span class=\"hljs-comment\">// blan</span>\n}\n</code></pre>\n\n<p>If you declare a in the if condition, you are essentially comparing 2 static values.</p>\n\n<p>Lots of languages let you declare an \"iterator\" vairable in a for loop:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">0</span> ; a &lt; somelist.length ; a++){\n  <span class=\"hljs-comment\">// Do something</span>\n}\n\n<span class=\"hljs-comment\">// a is out of scope here</span>\n</code></pre>\n    </div>",
          "vote": "3"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can restrict the scope of your variable to make it visible only in the if statement like this:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>System.out.println(<span class=\"hljs-string\">\"Hello World!\"</span>);\n<span class=\"hljs-comment\">//use a codeblock to restrict access</span>\n{\n  <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">4</span>;\n  <span class=\"hljs-keyword\">if</span>(i!=<span class=\"hljs-number\">0</span>)\n  {\n    System.out.println(<span class=\"hljs-string\">\"i = \"</span>+i);<span class=\"hljs-comment\">// this is OK</span>\n  }\n}\nSystem.out.println(<span class=\"hljs-string\">\"i = \"</span>+i);<span class=\"hljs-comment\">//this is not OK</span>\n</code></pre>\n    </div>",
          "vote": "2"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>why can't language support it</p>\n</blockquote>\n\n<p>That's the wrong question to ask.  The real question is:</p>\n\n<blockquote>\n  <p>Is there a compelling reason for the language to support it?</p>\n</blockquote>\n\n<p>That is, is there a compelling reason to implement it, exhaustively test it for all possible edge cases, and maintain it in all future versions of the language?</p>\n\n<p>In this case, no.  There isn't.  It might be handy in a small number of cases, but it's not a core feature of the language and isn't really necessary.  So there's no compelling reason to make the implementation of the language more complex and incur significant cost now and well into the future to support it.</p>\n    </div>",
          "vote": "1"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>if is a conditional and there is no valid use-case when you declare a variable inside the conditional.</p>\n\n<p>If your conditional is more complex, you can implement a few methods for it and inside those methods you can use those variables, however, if you need that variable outside the if, then define it outside the if in the correct scope.</p>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "When does object pointed by 'Example.class' come into existence?",
      "url": "https://stackoverflow.com/questions/31205402/when-does-object-pointed-by-example-class-come-into-existence",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Below is the program:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">package</span> annotationtype;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Example</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span></span>{\n\n    }\n}\n</code></pre>\n\n<p>got compiled with below byte code.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Classfile /D:/git/Java_programming/JavaCode/bin/annotationtype/Example.class\n  ......\n  Compiled from <span class=\"hljs-string\">\"Example.java\"</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">annotationtype</span>.<span class=\"hljs-title\">Example</span>\n  .......\n  <span class=\"hljs-title\">flags</span>: <span class=\"hljs-title\">ACC_PUBLIC</span>, <span class=\"hljs-title\">ACC_SUPER</span>\n<span class=\"hljs-title\">Constant</span> <span class=\"hljs-title\">pool</span>:\n   #1 </span>= Class              #<span class=\"hljs-number\">2</span>             <span class=\"hljs-comment\">// annotationtype/Example</span>\n   #<span class=\"hljs-number\">2</span> = Utf8               annotationtype/Example\n   #<span class=\"hljs-number\">3</span> = Class              #<span class=\"hljs-number\">4</span>             <span class=\"hljs-comment\">// java/lang/Object</span>\n   ......\n  #<span class=\"hljs-number\">18</span> = Utf8               SourceFile\n  #<span class=\"hljs-number\">19</span> = Utf8               Example.java\n{\n  <span class=\"hljs-keyword\">public</span> annotationtype.Example();\n  ........\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(java.lang.String[])</span></span>;\n  ......\n}\nSourceFile: <span class=\"hljs-string\">\"Example.java\"</span>\n</code></pre>\n\n<p>Using eclipse editor, In <code>main()</code> method, if I type,</p>\n\n<p><code>Example.</code>, eclipse editor immediately provides <code>class</code> member of type <code>Class&lt;annotationtype.Example&gt;</code></p>\n\n<p>My understanding is, </p>\n\n<p>below byte code,</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>#<span class=\"hljs-number\">1</span> = Class              #<span class=\"hljs-number\">2</span>             <span class=\"hljs-comment\">// annotationtype/Example</span>\n ..\n#<span class=\"hljs-number\">3</span> = Class              #<span class=\"hljs-number\">4</span>             <span class=\"hljs-comment\">// java/lang/Object</span>\n</code></pre>\n\n<p>indicates creation of object of type <code>Class&lt;annotationtype.Example&gt;</code> pointed by member <code>Class&lt;annotationtype.Example&gt; class</code> during initialisation phase of <code>class Example</code>, something <strong>functionally equivalent</strong> to:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">annotationtype</span>.<span class=\"hljs-title\">Example</span></span>{\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Class&lt;annotationtype.Example&gt; <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>;\n    {\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> </span>= Class.forName(<span class=\"hljs-string\">\"annotationtype.Example\"</span>)\n    }\n    ......\n}\n</code></pre>\n\n<p>Is my understanding correct about, </p>\n\n<p>the phase at which object(creation) of type <code>Class&lt;annotationtype.Example&gt;</code> comes into existence, that is pointed by <code>Example.class</code>? </p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You are confusing artifacts of the Java programming language with items of the constant pool of a class file holding Java byte code.</p>\n\n<p>Class literals of the form <code>type.class</code>, as well as an access to the length of an array of the form <code>array.length</code> may look like a member access in the source code but have nothing to do with real class members.</p>\n\n<p>E.g. when you write <code>array.length</code>, it will get compiled to a bytecode instruction <code>arraylength</code> dedicated to retrieve the length of an array at runtime without actually specifying how a JVM remembers lengths of arrays. That’s implementation dependent.</p>\n\n<p>A class literal is more complicated. E.g. when you write <code>int.class</code>, there is nothing to query. Instead, the compiler knows that it has to read the <code>static</code> field <code>Integer.TYPE</code> to get the runtime value and that’s how this class literal gets compiled, as a field access to <code>Integer.TYPE</code>. In contrast, class literals of reference types are compiled using an <code>ldc</code> instruction pointing to a constant pool entry which has nothing to to with fields.</p>\n\n<p>The constant pool of a class does not contain Java objects in the first place. It contains linkage information. Some entries might get associated with a Java runtime instance on their first use but the way it works is intentionally unspecified. That’s up to the JVM. These entries serve different purposes, i.e. a Class entry can be used to specify a super class, an implemented interface or a class, whose member is accessed by a method invocation or field access.</p>\n\n<p>That’s why your <code>Example</code> class file contains such a Class entry. It’s there because the class uses it to describe itself. Even if there is no class literal <code>Example.class</code> at all. Consequently, a <code>Class</code> instance describing the class <code>Example</code> is create <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/ClassLoader.html#loadClass-java.lang.String-\">when the class is loaded</a>. A <code>ClassLoader</code> remembers all loaded classes and they will be used when the same name is resolved using the same loader.</p>\n\n<p>Note that when another class contains a class literal of the form <code>Example.class</code>, it will have it’s own Class entry for that class within its own constant pool. The runtime evaluation of the class literal <em>may</em> trigger the loading and hence creating of the <code>Class</code> instance when it has not been loaded before. Otherwise, it gets resolved to the already loaded class via the class loader.</p>\n    </div>",
          "vote": "10"
        }
      ]
    },
    {
      "question": "Swift - static let and “<<” meaning",
      "url": "https://stackoverflow.com/questions/37913482/swift-static-let-and-meaning",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I have the following code </p>\n\n<pre class=\"lang-swift s-code-block hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Physics</span> </span>{\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">let</span> smallCoin : <span class=\"hljs-type\">UInt32</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0x1</span> <span class=\"hljs-operator\">&lt;&lt;</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">let</span> smallCoin2 : <span class=\"hljs-type\">UInt32</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0x1</span> <span class=\"hljs-operator\">&lt;&lt;</span> <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">let</span> ground : <span class=\"hljs-type\">UInt32</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0x1</span> <span class=\"hljs-operator\">&lt;&lt;</span> <span class=\"hljs-number\">3</span>\n}\n</code></pre>\n\n<p>I would like to know the meaning of </p>\n\n<ul>\n<li><code>static let</code></li>\n<li><code>UInt32 = 0x1 &lt;&lt; 3</code></li>\n</ul>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>&lt;&lt;</code> is the left shift operator. You can better visualize it in binary:</p>\n\n<pre class=\"lang-swift s-code-block hljs\"><code>   <span class=\"hljs-number\">1</span>        <span class=\"hljs-number\">0000</span> <span class=\"hljs-number\">0001</span>\n<span class=\"hljs-operator\">&lt;&lt;</span> <span class=\"hljs-number\">1</span>                <span class=\"hljs-operator\">^</span> shift this one bit to the left\n<span class=\"hljs-operator\">----</span>  <span class=\"hljs-operator\">=</span>     <span class=\"hljs-operator\">---------</span>\n   <span class=\"hljs-number\">2</span>        <span class=\"hljs-number\">0000</span> <span class=\"hljs-number\">0010</span>\n\n\n   <span class=\"hljs-number\">1</span>        <span class=\"hljs-number\">0000</span> <span class=\"hljs-number\">0001</span>\n<span class=\"hljs-operator\">&lt;&lt;</span> <span class=\"hljs-number\">2</span>                <span class=\"hljs-operator\">^</span> shift this two bits to the left\n<span class=\"hljs-operator\">----</span>  <span class=\"hljs-operator\">=</span>     <span class=\"hljs-operator\">---------</span>\n   <span class=\"hljs-number\">4</span>        <span class=\"hljs-number\">0000</span> <span class=\"hljs-number\">0100</span>\n\n\n   <span class=\"hljs-number\">3</span>        <span class=\"hljs-number\">0000</span> <span class=\"hljs-number\">0011</span>\n<span class=\"hljs-operator\">&lt;&lt;</span> <span class=\"hljs-number\">2</span>                <span class=\"hljs-operator\">^</span> shift this two bits to the left\n<span class=\"hljs-operator\">----</span>  <span class=\"hljs-operator\">=</span>     <span class=\"hljs-operator\">---------</span>\n  <span class=\"hljs-number\">12</span>        <span class=\"hljs-number\">0000</span> <span class=\"hljs-number\">1100</span>\n</code></pre>\n\n<p>Another property to remember is <code>x &lt;&lt; n = x * (2^n)</code>. The opposite of <code>&lt;&lt;</code> is <code>&gt;&gt;</code> - the right shift operator.</p>\n    </div>",
          "vote": "6"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>It looks like the question might come from a need to have some constants for a physics simulation. The Integer might represent the attraction force (or similar) or a set of items in a world. Which would be nice.</p>\n<p>Which brings us onto the first part of the question:</p>\n<p><strong>Static let</strong>\nThere a a few reasons why you might use <code>static let</code> for properties:</p>\n<ul>\n<li>Use static properties for Constants, and similar configuration</li>\n<li>Use static properties for expensive objects, so you only have to create an instance once for the type rather than creating an instance once for the type rather than for each instance</li>\n<li>A <a href=\"https://stevenpcurtis.medium.com/the-factory-pattern-using-swift-b534ae9f983f\" rel=\"nofollow noreferrer\">factory</a> can use static methods to create complex objects</li>\n</ul>\n<p>We are going to focus on the first of these.</p>\n<p>The question is about a <code>stuct</code> and this <code>struct</code> could well represent something like Constants. I have this in many of my projects, although I generally use an enum rather than the suggested <code>struct</code>, in the following kind of format</p>\n<pre class=\"lang-swift s-code-block hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Constants</span> </span>{\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">let</span> offset <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">enum</span> </span>{\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">let</span> offset <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>\n}\n</code></pre>\n<p>for the difference between struct and enum take a look at <a href=\"https://stevenpcurtis.medium.com/classes-enums-or-structures-how-to-choose-your-swift-type-f33b4b76230e\" rel=\"nofollow noreferrer\">this article</a></p>\n<p>which leads us to the question where we have a value for smallCoin, smallCoin2 and ground represented as a <code>static let</code> within the <code>struct</code>.</p>\n<p><strong>UInt32 = 0x1 &lt;&lt; 3</strong>\nThe type given (of my presumption that this is a Constant). The type given here is <a href=\"https://medium.com/@stevenpcurtis.sc/int-uint8-or-uint16-swift-im-confused-bbb19f28e4ad\" rel=\"nofollow noreferrer\">UInt32</a> which means that the value is an unsigned <a href=\"https://stevenpcurtis.medium.com/what-is-an-integer-1a26cdd18d68\" rel=\"nofollow noreferrer\">Integer</a>, and then this value is given as <code>0x1 &lt;&lt; 1</code>, <code>0x1 &lt;&lt; 2</code> or <code>0x1 &lt;&lt; 3</code> depending on the property we are referring to.</p>\n<p>To understand this, we need to recognize that <code>0x1</code> is <a href=\"https://medium.com/@stevenpcurtis.sc/hexadecimal-in-programming-691ffe32f707\" rel=\"nofollow noreferrer\">hexadecimal</a>, and represents the denery value of 1. From there, we are using the <a href=\"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html\" rel=\"nofollow noreferrer\">https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html</a>:</p>\n<p><a href=\"https://i.stack.imgur.com/SkB6Y.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/SkB6Y.png\" alt=\"enter image description here\"></a></p>\n<p>The initial value of 1, bitshift by 1 creates the value 2.\nThe initial value of 1, bitshift by 2 creates the value 4.\nThe initial value of 1, bitshift by 3 creates the value 8.</p>\n<p>Now why we would need to bitshift a single value like this it is not entirely clear.</p>\n<p>As a result, Physics.smallCoin = 2, Physics.smallCoin2 = 4 and Physics.ground = 8</p>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "How to block “adblock”",
      "url": "https://stackoverflow.com/questions/27894144/how-to-block-adblock",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I recently noticed my ad networks popunder code is getting blocked by adblock. Is there any software or technique you guys know that can counter this?  I am running an adult site by the way. </p>\n\n<p>Here is the popunder code if you need it:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>    &lt;!-- PopAds.net Popunder Code <span class=\"hljs-keyword\">for</span> www.example.com --&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">var</span> _pop = _pop || [];\n  _pop.push([<span class=\"hljs-string\">'siteId'</span>, <span class=\"hljs-number\">518347</span>]);\n  _pop.push([<span class=\"hljs-string\">'minBid'</span>, <span class=\"hljs-number\">0</span>]);\n  _pop.push([<span class=\"hljs-string\">'popundersPerIP'</span>, <span class=\"hljs-number\">0</span>]);\n  _pop.push([<span class=\"hljs-string\">'delayBetween'</span>, <span class=\"hljs-number\">0</span>]);\n  _pop.push([<span class=\"hljs-string\">'default'</span>, <span class=\"hljs-literal\">false</span>]);\n  _pop.push([<span class=\"hljs-string\">'defaultPerDay'</span>, <span class=\"hljs-number\">0</span>]);\n  _pop.push([<span class=\"hljs-string\">'topmostLayer'</span>, <span class=\"hljs-literal\">false</span>]);\n  (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> pa = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>); pa.type = <span class=\"hljs-string\">'text/javascript'</span>; pa.async = <span class=\"hljs-literal\">true</span>;\n    <span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>]; \n    pa.src = <span class=\"hljs-string\">'//c1.popads.net/pop.js'</span>;\n    pa.onerror = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">var</span> sa = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>); sa.type = <span class=\"hljs-string\">'text/javascript'</span>; sa.async = <span class=\"hljs-literal\">true</span>;\n      sa.src = <span class=\"hljs-string\">'//c2.popads.net/pop.js'</span>;\n      s.parentNode.insertBefore(sa, s);\n    };\n    s.parentNode.insertBefore(pa, s);\n  })();\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n&lt;!-- PopAds.net Popunder Code End --&gt;\n</code></pre>\n\n<p>Any help would be appreciated. </p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>encode your javascript to Base64 or bytes , then use the decode to the text ,insert the javascript text to the html, no by the urls, windows or, iframe. May be this would be work , try this.</p>\n    </div>",
          "vote": "2"
        }
      ]
    },
    {
      "question": "how to add my button in reference in java?",
      "url": "https://stackoverflow.com/questions/38048144/how-to-add-my-button-in-reference-in-java",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I want to add and sub counter but I can only added \"add\" in R.Java\n<a href=\"https://i.stack.imgur.com/R6Gyd.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/R6Gyd.jpg\" alt=\"enter image description here\"></a></p>\n\n<p>and can't added \"sub\" in <code>R.Java</code>.And I have this error in my program </p>\n\n<blockquote>\n  <p>btnsub cannot be resolved or is not a field</p>\n</blockquote>\n\n<p>Thank you.</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>findViewById</code> MUST be called after you call <code>setContentView</code>.</p>\n\n<p>what's more, <code>R.java</code> is not user editable, it's automatically generated by android compiler based on your resource files. you should define <code>android:id=\"@+id/btnsub\"</code> in your layout xml.</p>\n    </div>",
          "vote": "2"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li>A layout reference needs to be provided to the activity/fragmemt or any UI component to inflate the same and take action on it. </li>\n</ol>\n\n<p>So In an activity, to define an layout, follow these steps :</p>\n\n<p>a) Define an layout in your <strong>/res/layout</strong> directory (activity_main.xml)\nb) use \n<code>setContentView(R.layout.activity_main);</code> \nafter \n<code>super.onCreate();</code>\nc) Then call findViewByID() method as you are already doing it.</p>\n\n<p>*Don't think that error would come in only <strong>btnsub</strong>, problem would also be in next button <strong>btnadd</strong> , It is showing in btnsub only, as it is the first wrong statement in the code, that's why it is shown in this.</p>\n\n<p>**If you already doing the above mentioned steps, then may be your directory structure is wrong then.</p>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "I would like to split this into a list but I don't know how (in Python) [duplicate]",
      "url": "https://stackoverflow.com/questions/32191198/i-would-like-to-split-this-into-a-list-but-i-dont-know-how-in-python",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>This question already has answers here</b>:\n                        \n                    </div>\n                </div>\n            </div>\n                    <div class=\"grid--cell mb0 mt4\">\n                        <a href=\"/questions/743806/how-to-split-a-string-into-a-list\" dir=\"ltr\">How to split a string into a list?</a>\n                            <span class=\"question-originals-answer-count\">\n                                (10 answers)\n                            </span>\n                    </div>\n                <div class=\"grid--cell mb0 mt8\">Closed <span title=\"2019-08-20 06:16:20Z\" class=\"relativetime\">1 year ago</span>.</div>\n        </div>\n</aside>\n\n    </div>\n\n<p>I have this string:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>var(HELLO,)|var(Hello again)| var(HOW ARE YOU?)|outV(<span class=\"hljs-number\">0</span>)|outV(<span class=\"hljs-number\">1</span>)|outV(<span class=\"hljs-number\">2</span>)|END\n</code></pre>\n\n<p>I want to split it on the <code>|</code>, but I don't know how. I don't want it to split at the white-space, only at the <code>|</code>.</p>\n\n<p>Is this possible? </p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The way to do this is clearly documented <a href=\"https://docs.python.org/2/library/string.html?highlight=split#string.split\" rel=\"nofollow noreferrer\" title=\"here\">here</a>.</p>\n\n<p>Example:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-meta\">&gt;&gt;&gt; </span>myString = <span class=\"hljs-string\">\"subString1|substring2|subString3\"</span>\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>myString = myString.split(<span class=\"hljs-string\">\"|\"</span>)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-built_in\">print</span> myString\n[<span class=\"hljs-string\">\"subString1\"</span>, <span class=\"hljs-string\">\"subString2\"</span>, <span class=\"hljs-string\">\"subString3\"</span>]\n</code></pre>\n    </div>",
          "vote": "12"
        }
      ]
    },
    {
      "question": "No response from jsonArray request [closed]",
      "url": "https://stackoverflow.com/questions/44899821/no-response-from-jsonarray-request",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n            <hr class=\"my12 outline-none baw0 bb bc-powder-400\">\n        <div class=\"grid fw-nowrap fc-black-600\">\n                <div class=\"grid--cell mr8\">\n                    <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                </div>\n            <div class=\"grid--cell lh-md\">\n                <p class=\"mb0\">\n                    <b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/44899821/edit\">editing this post</a>.\n                </p>\n                    <p class=\"mb0 mt6\">Closed <span title=\"2021-04-17 10:16:40Z\" class=\"relativetime\">4 days ago</span>.</p>\n            </div>\n        </div>\n            <div class=\"mt24 grid gsx gs8\">\n                    <a class=\"s-btn s-btn__outlined grid--cell js-post-notice-edit-post\" href=\"/posts/44899821/edit\">\n                        Improve this question\n                    </a>\n            </div>\n</aside>\n\n    </div>\n\n<p>I am trying to fetch data from Android to Custom ListView but  I am not able to Fetch! Please help</p>\n\n<p>MY JSON:_</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>{  \n   <span class=\"hljs-string\">\"College\"</span>:[  \n      {  \n         <span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"NITK\"</span>,\n         <span class=\"hljs-string\">\"Logo\"</span>:<span class=\"hljs-string\">\"http:\\/\\/192.168.43.164\\\\Webapp\\\\Collegelogos\\\\nitk.jpg\"</span>\n      },\n      {  \n         <span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"IITR\"</span>,\n         <span class=\"hljs-string\">\"Logo\"</span>:<span class=\"hljs-string\">\"http:\\/\\/192.168.43.164\\\\Webapp\\\\Collegelogos\\\\iitr.jpg\"</span>\n      },\n      {  \n         <span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"NITT\"</span>,\n         <span class=\"hljs-string\">\"Logo\"</span>:<span class=\"hljs-string\">\"http:\\/\\/192.168.43.164\\\\Webapp\\\\Collegelogos\\\\nitt.jpg\"</span>\n      },\n      {  \n         <span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"IITB\"</span>,\n         <span class=\"hljs-string\">\"Logo\"</span>:<span class=\"hljs-string\">\"http:\\/\\/192.168.43.164\\\\Webapp\\\\Collegelogos\\\\iitb.png\"</span>\n      },\n      {  \n         <span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"IITG\"</span>,\n         <span class=\"hljs-string\">\"Logo\"</span>:<span class=\"hljs-string\">\"http:\\/\\/192.168.43.164\\\\Webapp\\\\Collegelogos\\\\iitg.png\"</span>\n      },\n      {  \n         <span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"IITD\"</span>,\n         <span class=\"hljs-string\">\"Logo\"</span>:<span class=\"hljs-string\">\"http:\\/\\/192.168.43.164\\\\Webapp\\\\Collegelogos\\\\iitd.png\"</span>\n      },\n      {  \n         <span class=\"hljs-string\">\"Name\"</span>:<span class=\"hljs-string\">\"BITS\"</span>,\n         <span class=\"hljs-string\">\"Logo\"</span>:<span class=\"hljs-string\">\"http:\\/\\/192.168.43.164\\\\Webapp\\\\Collegelogos\\\\bits.png\"</span>\n      }\n   ]\n}\n</code></pre>\n\n<p>CODE:-</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MainActivity</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AppCompatActivity</span> </span>{\n    <span class=\"hljs-keyword\">private</span> List&lt;College&gt; listcollege;\n\n    <span class=\"hljs-comment\">//Creating Views</span>\n    <span class=\"hljs-keyword\">private</span> RecyclerView recyclerView;\n    <span class=\"hljs-keyword\">private</span> RecyclerView.LayoutManager layoutManager;\n    <span class=\"hljs-keyword\">private</span> RecyclerView.Adapter adapter;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(Bundle savedInstanceState)</span> </span>{\n        <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        <span class=\"hljs-comment\">//Initializing Views</span>\n        recyclerView = (RecyclerView) findViewById(R.id.recyclerView);\n        recyclerView.setHasFixedSize(<span class=\"hljs-keyword\">true</span>);\n        layoutManager = <span class=\"hljs-keyword\">new</span> LinearLayoutManager(<span class=\"hljs-keyword\">this</span>);\n        recyclerView.setLayoutManager(layoutManager);\n\n        listcollege = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n        getData();\n\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">getData</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">//Showing a progress dialog</span>\n        <span class=\"hljs-keyword\">final</span> ProgressDialog loading = ProgressDialog.show(<span class=\"hljs-keyword\">this</span>,<span class=\"hljs-string\">\"Loading Data\"</span>, <span class=\"hljs-string\">\"Please wait...\"</span>,<span class=\"hljs-keyword\">false</span>,<span class=\"hljs-keyword\">false</span>);\n\n        <span class=\"hljs-comment\">//Creating a json array request</span>\n        JsonArrayRequest jsonArrayRequest = <span class=\"hljs-keyword\">new</span> JsonArrayRequest(Config.DATA_URL,\n                <span class=\"hljs-keyword\">new</span> Response.Listener&lt;JSONArray&gt;() {\n                    <span class=\"hljs-meta\">@Override</span>\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onResponse</span><span class=\"hljs-params\">(JSONArray response)</span> </span>{\n                        <span class=\"hljs-comment\">//Dismissing progress dialog</span>\n                        Toast.makeText(MainActivity.<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">\"sachin\"</span>, Toast.LENGTH_SHORT).show();\n                        loading.dismiss();\n\n                        <span class=\"hljs-comment\">//calling method to parse json array</span>\n                        parseData(response);\n                    }\n                },\n                <span class=\"hljs-keyword\">new</span> Response.ErrorListener() {\n                    <span class=\"hljs-meta\">@Override</span>\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onErrorResponse</span><span class=\"hljs-params\">(VolleyError error)</span> </span>{\n\n                    }\n                });\n\n        <span class=\"hljs-comment\">//Creating request queue</span>\n        RequestQueue requestQueue = Volley.newRequestQueue(<span class=\"hljs-keyword\">this</span>);\n\n        <span class=\"hljs-comment\">//Adding request to the queue</span>\n        requestQueue.add(jsonArrayRequest);\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span>  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">parseData</span><span class=\"hljs-params\">(JSONArray array)</span> </span>{\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length(); i++) {\n            College college = <span class=\"hljs-keyword\">new</span> College();\n            JSONObject json = <span class=\"hljs-keyword\">null</span>;\n            <span class=\"hljs-keyword\">try</span> {\n                json = array.getJSONObject(i);\n                college.setImageUrl(json.getString(Config.TAG_IMAGE_URL));\n               String s = (json.getString(Config.TAG_NAME));\n                Toast.makeText(<span class=\"hljs-keyword\">this</span>, s, Toast.LENGTH_SHORT).show();\n                college.setName(s);\n\n            } <span class=\"hljs-keyword\">catch</span> (JSONException e) {\n                e.printStackTrace();\n            }\n            listcollege.add(college);\n\n        }\n            adapter = <span class=\"hljs-keyword\">new</span> CardAdapter(<span class=\"hljs-keyword\">this</span>, listcollege);\n            recyclerView.setAdapter(adapter);\n      <span class=\"hljs-comment\">//  adapter.notifyDataSetChanged();</span>\n\n    }\n\n\n}\n</code></pre>\n\n<p>LOG :- ANDROID MONITOR</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">04</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">42.289</span> <span class=\"hljs-number\">16225</span>-<span class=\"hljs-number\">16256</span>/com.example.sachin.volleyrecycle I/OpenGLRenderer: Initialized EGL, version <span class=\"hljs-number\">1.4</span>\n<span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">04</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">42.289</span> <span class=\"hljs-number\">16225</span>-<span class=\"hljs-number\">16256</span>/com.example.sachin.volleyrecycle D/OpenGLRenderer: Swap behavior <span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">04</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">42.289</span> <span class=\"hljs-number\">16225</span>-<span class=\"hljs-number\">16256</span>/com.example.sachin.volleyrecycle W/OpenGLRenderer: Failed to choose config with EGL_SWAP_BEHAVIOR_PRESERVED, retrying without...\n<span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">04</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">42.289</span> <span class=\"hljs-number\">16225</span>-<span class=\"hljs-number\">16256</span>/com.example.sachin.volleyrecycle D/OpenGLRenderer: Swap behavior <span class=\"hljs-number\">0</span>\n<span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">04</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">42.702</span> <span class=\"hljs-number\">16225</span>-<span class=\"hljs-number\">16225</span>/com.example.sachin.volleyrecycle E/RecyclerView: No adapter attached; skipping layout\n<span class=\"hljs-number\">07</span>-<span class=\"hljs-number\">04</span> <span class=\"hljs-number\">13</span>:<span class=\"hljs-number\">02</span>:<span class=\"hljs-number\">42.946</span> <span class=\"hljs-number\">16225</span>-<span class=\"hljs-number\">16225</span>/com.example.sachin.volleyrecycle W/art: Before Android <span class=\"hljs-number\">4.1</span>, method <span class=\"hljs-keyword\">int</span> android.support.v7.widget.ListViewCompat.lookForSelectablePosition(<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">boolean</span>) would have incorrectly overridden the <span class=\"hljs-keyword\">package</span>-<span class=\"hljs-keyword\">private</span> method in android.widget.ListView\n</code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>1.</strong> Initialize your <code>adapter</code> and set it to <code>RecyclerView</code> from <code>onCreate()</code> method.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-meta\">@Override</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(Bundle savedInstanceState)</span> </span>{\n    <span class=\"hljs-keyword\">super</span>.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    <span class=\"hljs-comment\">//Initializing Views</span>\n    recyclerView = (RecyclerView) findViewById(R.id.recyclerView);\n    recyclerView.setHasFixedSize(<span class=\"hljs-keyword\">true</span>);\n    layoutManager = <span class=\"hljs-keyword\">new</span> LinearLayoutManager(<span class=\"hljs-keyword\">this</span>);\n    recyclerView.setLayoutManager(layoutManager);\n\n    listcollege = <span class=\"hljs-keyword\">new</span> ArrayList&lt;&gt;();\n    adapter = <span class=\"hljs-keyword\">new</span> CardAdapter(<span class=\"hljs-keyword\">this</span>, listcollege);\n    recyclerView.setAdapter(adapter);\n\n    getData();\n}\n</code></pre>\n\n<p><strong>2.</strong> Instead of <code>JsonArrayRequest</code>, try using <code>JsonObjectRequest</code>: </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-comment\">//Creating a json object request</span>\nJsonObjectRequest jsonObjectRequest = <span class=\"hljs-keyword\">new</span> JsonObjectRequest (Config.DATA_URL,\n        <span class=\"hljs-keyword\">new</span> Response.Listener&lt;JSONObject&gt;() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onResponse</span><span class=\"hljs-params\">(JSONObject response)</span> </span>{\n                <span class=\"hljs-comment\">//Dismissing progress dialog</span>\n                Toast.makeText(MainActivity.<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-string\">\"sachin\"</span>, Toast.LENGTH_SHORT).show();\n                loading.dismiss();\n\n                <span class=\"hljs-comment\">// College </span>\n                JSONArray jsonArrayCollege = response.getJSONArray(<span class=\"hljs-string\">\"College\"</span>);\n\n                <span class=\"hljs-comment\">// calling method to parse json array</span>\n                parseData(jsonArrayCollege);\n            }\n        },\n        <span class=\"hljs-keyword\">new</span> Response.ErrorListener() {\n            <span class=\"hljs-meta\">@Override</span>\n            <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onErrorResponse</span><span class=\"hljs-params\">(VolleyError error)</span> </span>{\n\n            }\n        });\n\n<span class=\"hljs-comment\">//Creating request queue</span>\nRequestQueue requestQueue = Volley.newRequestQueue(<span class=\"hljs-keyword\">this</span>);\n\n<span class=\"hljs-comment\">//Adding request to the queue</span>\nrequestQueue.add(jsonObjectRequest);\n</code></pre>\n\n<p><strong>3.</strong> Update <code>parseData()</code> method as below:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span>  <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">parseData</span><span class=\"hljs-params\">(JSONArray array)</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; array.length(); i++) {\n        College college = <span class=\"hljs-keyword\">new</span> College();\n        JSONObject json = <span class=\"hljs-keyword\">null</span>;\n        <span class=\"hljs-keyword\">try</span> {\n            json = array.getJSONObject(i);\n            college.setImageUrl(json.getString(Config.TAG_IMAGE_URL));\n           String s = (json.getString(Config.TAG_NAME));\n            Toast.makeText(<span class=\"hljs-keyword\">this</span>, s, Toast.LENGTH_SHORT).show();\n            college.setName(s);\n\n        } <span class=\"hljs-keyword\">catch</span> (JSONException e) {\n            e.printStackTrace();\n        }\n        listcollege.add(college);\n    }  \n    adapter.notifyDataSetChanged();\n}\n</code></pre>\n\n<p>Hope this will help~</p>\n    </div>",
          "vote": "4"
        }
      ]
    },
    {
      "question": "Why won't clang compile this source code that works in VS2012?",
      "url": "https://stackoverflow.com/questions/20875614/why-wont-clang-compile-this-source-code-that-works-in-vs2012",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I don't know if I'm doing something wrong here, but I can't for the life of me get clang to compile existing code that compiles fine in <code>VS2012</code>.</p>\n\n<p>Includes like <code>strsafe.h</code> and <code>xstring</code> cause weird compilation errors, the strangest of which is a \"missing close bracket\" in the middle of a standard include file. Needless to say, there is no missing bracket. Further, <code>move.h</code> causes clang to throw up with </p>\n\n<blockquote>\n  <p>fatal error: expected function body after function declarator.</p>\n</blockquote>\n\n<p>Guard clauses like</p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">ifndef</span> _FUNCTIONAL_</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">error</span> Must <span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;functional&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endif</span></span>\n</code></pre>\n\n<p>throw errors even though functional has been included.</p>\n\n<p>What am I doing wrong?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Headers included with one compiler are typically tailored to that compiler implementation and will not necessarily work correctly with a different compiler.</p>\n\n<p>So generally speaking you won't be able use the headers that come with Visual Studio with another compiler.</p>\n    </div>",
          "vote": "17"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Re</p>\n\n<blockquote>\n  <p>“Includes like strsafe.h and xstring cause weird compilation errors,”</p>\n</blockquote>\n\n<p>those are Visual C++ headers.</p>\n\n<p>clang probably doesn't have anything like them.</p>\n\n<p>A main problem is that you're using low level C string functions, which Microsoft (rightly!) regards as problematic and (wrongly) convince you are deprecated.</p>\n\n<p>Use <code>std::string</code> instead.</p>\n    </div>",
          "vote": "7"
        }
      ]
    },
    {
      "question": "What does “Binary operator '*' cannot be applied to 'Double' and 'Int'” Mean - What is Double?",
      "url": "https://stackoverflow.com/questions/38776070/what-does-binary-operator-cannot-be-applied-to-double-and-int-mean-w",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I don't really understand what 'Double' means. I am trying to write basic code for suvat - mechanics equations.</p>\n\n<pre class=\"lang-swift s-code-block hljs\"><code><span class=\"hljs-keyword\">let</span> displacement <span class=\"hljs-operator\">=</span> (initialVelocity<span class=\"hljs-operator\">*</span>time) <span class=\"hljs-operator\">+</span> (<span class=\"hljs-number\">0.5</span><span class=\"hljs-operator\">*</span>(acceleration<span class=\"hljs-operator\">*</span>(time<span class=\"hljs-operator\">*</span>time)))\n</code></pre>\n\n<p>The equation is <code>s = ut + 1/2at^2</code></p>\n\n<pre class=\"lang-swift s-code-block hljs\"><code><span class=\"hljs-keyword\">let</span> initialVelocity <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span> \n<span class=\"hljs-keyword\">let</span> acceleration <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">2</span> \n<span class=\"hljs-keyword\">let</span> time <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span> \n<span class=\"hljs-keyword\">let</span> finalVelocity <span class=\"hljs-operator\">=</span> initialVelocity <span class=\"hljs-operator\">+</span> (acceleration <span class=\"hljs-operator\">*</span> time) \nprint (<span class=\"hljs-string\">\"The final Velocity is (finalVelocity)\"</span>) \n<span class=\"hljs-keyword\">let</span> half <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0.5</span> \n<span class=\"hljs-keyword\">let</span> accelerationTimeSquared <span class=\"hljs-operator\">=</span> acceleration <span class=\"hljs-operator\">*</span> (time <span class=\"hljs-operator\">*</span> time) \n<span class=\"hljs-keyword\">let</span> displacement <span class=\"hljs-operator\">=</span> (initialVelocitytime) <span class=\"hljs-operator\">+</span> (<span class=\"hljs-number\">0.5</span> <span class=\"hljs-operator\">*</span> (acceleration <span class=\"hljs-operator\">*</span> (time <span class=\"hljs-operator\">*</span> time))) \n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The displacement is (displacement)\"</span>)\n</code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>\"Double\" stands for double-precision floating point number. This relates to how the number is stored in memory, its precision in decimal digits, and the range it can span. From <a href=\"https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html\" rel=\"nofollow\">the Swift 2.2 language documentation</a></p>\n\n<blockquote>\n  <p>\"Double represents a 64-bit floating-point number.\" and \"Double has a\n  precision of at least 15 decimal digits\"</p>\n</blockquote>\n\n<p>For your specific issue, consider this code:</p>\n\n<pre class=\"lang-swift s-code-block hljs\"><code><span class=\"hljs-keyword\">let</span> initialVelocitytime <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span>\n<span class=\"hljs-keyword\">let</span> acceleration <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">4.5</span>\n<span class=\"hljs-keyword\">let</span> time <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3.5</span>\n<span class=\"hljs-keyword\">let</span> displacement <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Double</span>(initialVelocitytime) <span class=\"hljs-operator\">+</span> (<span class=\"hljs-number\">0.5</span><span class=\"hljs-operator\">*</span>(acceleration<span class=\"hljs-operator\">*</span>(time<span class=\"hljs-operator\">*</span>time)))\n\n<span class=\"hljs-built_in\">print</span>(displacement)\n</code></pre>\n\n<p>In this example, I have mixed types <code>initialVelocitytime</code> (which is an Int) and the result of <code>(0.5*(acceleration*(time*time)))</code> (which evaluates to a Double). In order to use + to add them, I am casting the initialVelocityType to a Double value like so: <code>Double(initialVelocitytime)</code>. Whenever you want to mix an Int type (which does not have a decimal place, such as 14 or -212) with a Double type, you can cast the Int variable in this way. If one of your variables such as acceleration or time is an Int, you'll want to cast it that way too, i.e. <code>Double(acceleration)</code>, or in total: </p>\n\n<pre class=\"lang-swift s-code-block hljs\"><code><span class=\"hljs-keyword\">let</span> displacement <span class=\"hljs-operator\">=</span> <span class=\"hljs-type\">Double</span>(initialVelocitytime) <span class=\"hljs-operator\">+</span> (<span class=\"hljs-number\">0.5</span><span class=\"hljs-operator\">*</span>(<span class=\"hljs-type\">Double</span>(acceleration)<span class=\"hljs-operator\">*</span>(time<span class=\"hljs-operator\">*</span>time)))\n</code></pre>\n    </div>",
          "vote": "4"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Doubles are floating point numbers and have more precision, such as decimal places. You generally have to convert an Int to be able to do operations with a Double. See <a href=\"https://stackoverflow.com/questions/30528748/binary-operator-cannot-be-applied-to-operands-of-type-int-and-double\">this question</a></p>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "What is (int*)?",
      "url": "https://stackoverflow.com/questions/25180631/what-is-int",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I was trying to access the private data members of class. Everything was going fine until I came upon the <code>int*</code>. I don’t get what it is. I think it’s something which we can use to create a new memory address.\nMy code :</p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code>    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n    <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;\n\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">x</span>{</span>\n\n     <span class=\"hljs-keyword\">int</span> a,b,c,d;\n    <span class=\"hljs-keyword\">public</span>:\n      <span class=\"hljs-built_in\">x</span>() {\n         a = <span class=\"hljs-number\">100</span>;\n         b = <span class=\"hljs-number\">200</span>;\n         c = <span class=\"hljs-number\">300</span>;\n         d = <span class=\"hljs-number\">400</span>;\n       }\n\n     };\n\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n      x ob;\n      <span class=\"hljs-keyword\">int</span> *y = (<span class=\"hljs-keyword\">int</span>*)&amp;ob;\n      cout &lt;&lt; *y &lt;&lt;<span class=\"hljs-string\">\" \"</span>&lt;&lt; y[<span class=\"hljs-number\">1</span>]&lt;&lt;<span class=\"hljs-string\">\" \"</span>&lt;&lt; y[<span class=\"hljs-number\">2</span>] &lt;&lt;<span class=\"hljs-string\">\" \"</span>&lt;&lt; y[<span class=\"hljs-number\">3</span>] &lt;&lt;endl;\n }\n</code></pre>\n\n<p>Can anyone help me in understanding it?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Its a c-style cast to access the memory occupied by the struct x as a set of ints.</p>\n\n<p>It takes the address of <code>ob</code>, casts it from 'address of' (ie a pointer to) x into a pointer to int. The compiler happily assigns this cast to y, so you can manipulate it, or in this case, print out the memory blocks as ints. As the struct happens to be a group of ints anyway, it all works even though its a bit of a hack. I guess the original coder wanted to print out all 4 ints without having to specify each one in turn by variable name. Lazy.</p>\n\n<p>Try using a cast to a char* (ie 1 byte at a time) and print those out. You'll be basically printing out the raw memory occupied by the struct.</p>\n\n<p>A good C++ way would be to <a href=\"http://www.learncpp.com/cpp-tutorial/93-overloading-the-io-operators/\" rel=\"nofollow\">create an operator&lt;&lt; function</a> that returns each variable formatted for output like this, then write <code>cout &lt;&lt; ob &lt;&lt; endl;</code> instead.</p>\n    </div>",
          "vote": "4"
        }
      ]
    },
    {
      "question": "Inheritence - Mock Exam",
      "url": "https://stackoverflow.com/questions/34335272/inheritence-mock-exam",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I have this code: </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> </span>{\n    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">int</span> x;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getX</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> x;\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">A</span> </span>{\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> answer;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">someMethod</span><span class=\"hljs-params\">()</span> </span>{\n      answer = x;\n      answer = <span class=\"hljs-keyword\">this</span>.x;\n      answer = <span class=\"hljs-keyword\">this</span>.getX();\n      answer = <span class=\"hljs-keyword\">super</span>.x;\n      answer = <span class=\"hljs-keyword\">super</span>.getX();\n    } \n}\n</code></pre>\n\n<p>Which of the assignment statements in <code>someMethod</code> are valid ?</p>\n\n<p>I'm thinking that the two 'super' lines are correct?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>Which of the assignment statements in <code>someMethod</code> are valid?</p>\n</blockquote>\n\n<p>All of them.</p>\n\n<p><code>x</code>, <code>this.x</code> and <code>super.x</code> all point to <code>protected int x</code> in <code>class A</code> which is visible to the subclass <code>B</code>. <code>this.getX()</code> and <code>super.getX()</code> both call <code>public int getX()</code> in <code>class A</code> which is visible to the subclass <code>B</code>.</p>\n\n<p><code>answer</code>, <code>x</code> and the return value of <code>getX()</code> are all of type <code>int</code>, so the assignment is valid.</p>\n    </div>",
          "vote": "3"
        }
      ]
    },
    {
      "question": "When using with SAVEPOINT and ROLLBACK , what will be the output of this?",
      "url": "https://stackoverflow.com/questions/39463273/when-using-with-savepoint-and-rollback-what-will-be-the-output-of-this",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I want to answer for this SQL statement.</p>\n\n<pre class=\"lang-sql s-code-block hljs\"><code><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> CUSTOMER (customerid,customername) <span class=\"hljs-keyword\">VALUES</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">'alpha'</span>);\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> CUSTOMER (customerid,customername) <span class=\"hljs-keyword\">VALUES</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-string\">'beta'</span>); <span class=\"hljs-keyword\">SAVEPOINT</span> s1;\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> CUSTOMER (customerid,customername) <span class=\"hljs-keyword\">VALUES</span>(<span class=\"hljs-number\">3</span>,<span class=\"hljs-string\">'gamma'</span>); <span class=\"hljs-keyword\">SAVEPOINT</span> s2;\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> CUSTOMER (customerid,customername) <span class=\"hljs-keyword\">VALUES</span>(<span class=\"hljs-number\">4</span>,<span class=\"hljs-string\">'tera'</span>); <span class=\"hljs-keyword\">SAVEPOINT</span> s3;\n<span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> CUSTOMER (customerid,customername) <span class=\"hljs-keyword\">VALUES</span>(<span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">'omega'</span>);\n<span class=\"hljs-keyword\">ROLLBACK</span> <span class=\"hljs-keyword\">TO</span> s3;\n\n<span class=\"hljs-keyword\">SELECT</span> customername <span class=\"hljs-keyword\">FROM</span> CUSTOMER;\n</code></pre>\n\n<p><strong>Answers:</strong></p>\n\n<ol>\n<li><p>it will give error as invalid rollback option</p></li>\n<li><p>omega</p></li>\n<li><p>alpha,beta,gamma,tera</p></li>\n<li><p>it will give error as:there can not be multiple savepoints</p></li>\n</ol>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In mysql we get the following error:\n SAVEPOINT s3 does not exist\nbut the select statement will work and gives the following result:</p>\n\n<h2>customername</h2>\n\n<pre class=\"lang-sql s-code-block hljs\"><code>alpha\nbeta\ngamma\ntera\n</code></pre>\n    </div>",
          "vote": "0"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>SAVEPOINT name</strong>-  Marks a savepoint within the current transaction, there can be multiple savepoints in a transaction.</p>\n<p><strong>ROLLBACK TO SAVEPOINT name</strong> <code>-ROLLBACK TO SAVEPOINT</code> rolls back the current transaction to the specified savepoint, so it discards any changes and or savepoints created after the savepoint to which you are rolling back.</p>\n<p>So in your problem, it will rollback to the point created after the insertion of 4,tera. So the value 5, omega will be discarded. So the select query will give</p>\n<pre class=\"lang-sql s-code-block hljs\"><code>customername\n<span class=\"hljs-comment\">-------------</span>\n    alpha\n    beta\n    gamma\n    tera\n</code></pre>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "How to find the largest prime factor of 600851475143 in C? [duplicate]",
      "url": "https://stackoverflow.com/questions/30515940/how-to-find-the-largest-prime-factor-of-600851475143-in-c",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>This question already has answers here</b>:\n                        \n                    </div>\n                </div>\n            </div>\n                    <div class=\"grid--cell mb0 mt4\">\n                        <a href=\"/questions/19360281/how-to-find-the-largest-prime-factor-of-600851475143\" dir=\"ltr\">How to find the largest prime factor of 600851475143?</a>\n                            <span class=\"question-originals-answer-count\">\n                                (5 answers)\n                            </span>\n                    </div>\n                <div class=\"grid--cell mb0 mt8\">Closed <span title=\"2016-01-08 13:17:35Z\" class=\"relativetime\">5 years ago</span>.</div>\n        </div>\n</aside>\n\n    </div>\n\n<p>I try to find the largest prime factor of 600851475143 with the code as given below.<br>\nHowever, this code does not return any output, not even errors or warnings. </p>\n\n<p>Where do I go wrong?</p>\n\n<p>Code:</p>\n\n<pre class=\"lang-c s-code-block hljs\"><code>    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span><span class=\"hljs-meta-string\">&lt;stdio.h&gt;</span></span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n  <span class=\"hljs-keyword\">int</span> i,j,k,mpf;\n  <span class=\"hljs-keyword\">for</span> (i=<span class=\"hljs-number\">1</span>;i&lt;<span class=\"hljs-number\">600851475143</span>;i++)\n  {\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">600851475143</span>%i==<span class=\"hljs-number\">0</span>)\n    {\n      k=<span class=\"hljs-number\">0</span>;\n      <span class=\"hljs-keyword\">for</span>(j=<span class=\"hljs-number\">1</span>;j&lt;=i;j++)\n      {\n        <span class=\"hljs-keyword\">if</span>(i%j==<span class=\"hljs-number\">0</span>)\n        {\n          k++;\n        }\n      }\n      <span class=\"hljs-keyword\">if</span>(k==<span class=\"hljs-number\">2</span>)\n      {\n        mpf=i;\n      }\n    }\n  }\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"\\nThe largest prime factor of 600851475143 is: %ld\\n\"</span>,mpf);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Looping up to 600 billion will take forever — not just a long time, but <em>impossible</em> because it exceeds what can be stored in an <code>int</code> (usually up to 2^31-1 these days, but could be as small as 2^15-1 according to the C standard).</p>\n\n<p>What you need is a smarter algorithm.  Rather than giving you the solution verbatim, I suggest that you look at <a href=\"//codereview.stackexchange.com/search?q=project+euler+3\" rel=\"nofollow\">existing answers</a> and work out a solution in C by yourself.</p>\n    </div>",
          "vote": "0"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Instead of looping from 1 to 600851475143, you should loop from 2 to the square root of 600851475143:</p>\n\n<pre class=\"lang-c s-code-block hljs\"><code><span class=\"hljs-keyword\">long</span> <span class=\"hljs-keyword\">long</span> num=<span class=\"hljs-number\">600851475143</span>;\n<span class=\"hljs-keyword\">long</span> i=<span class=\"hljs-number\">2</span>;   \n<span class=\"hljs-keyword\">while</span>(i&lt;=<span class=\"hljs-built_in\">sqrt</span>(num))\n{   \n    <span class=\"hljs-comment\">//printf(\"%lu\\n\",num);</span>\n    <span class=\"hljs-keyword\">if</span>(num%i==<span class=\"hljs-number\">0</span>)\n    {\n        <span class=\"hljs-keyword\">while</span>(num%i==<span class=\"hljs-number\">0</span>)\n        {\n            num/=i;\n        }           \n        <span class=\"hljs-keyword\">if</span>(num==<span class=\"hljs-number\">1</span>)\n        {\n            num=i;\n            <span class=\"hljs-keyword\">break</span>;\n        }\n    }\n        <span class=\"hljs-keyword\">else</span>\n        {\n            i++;\n        }\n}\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%lu\"</span>,num);\n</code></pre>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "How to replicate Excel's TEXTJOIN function in VBA UDF that allows array inputs [duplicate]",
      "url": "https://stackoverflow.com/questions/50763999/how-to-replicate-excels-textjoin-function-in-vba-udf-that-allows-array-inputs",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>This question already has answers here</b>:\n                        \n                    </div>\n                </div>\n            </div>\n                    <div class=\"grid--cell mb0 mt4\">\n                        <a href=\"/questions/50716550/textjoin-for-xl2010-xl2013-with-criteria\" dir=\"ltr\">TEXTJOIN for xl2010/xl2013 with criteria</a>\n                            <span class=\"question-originals-answer-count\">\n                                (1 answer)\n                            </span>\n                    </div>\n                    <div class=\"grid--cell mb0 mt4\">\n                        <a href=\"/questions/49189068/excel-how-to-compare-2-column-ranges\" dir=\"ltr\">Excel How to compare 2 Column Ranges</a>\n                            <span class=\"question-originals-answer-count\">\n                                (3 answers)\n                            </span>\n                    </div>\n                    <div class=\"grid--cell mb0 mt4\">\n                        <a href=\"/questions/43104790/concatenate-column-headers-if-value-in-rows-below-is-non-blank\" dir=\"ltr\">Concatenate column headers if value in rows below is non-blank</a>\n                            <span class=\"question-originals-answer-count\">\n                                (1 answer)\n                            </span>\n                    </div>\n                <div class=\"grid--cell mb0 mt8\">Closed <span title=\"2018-06-09 02:24:02Z\" class=\"relativetime\">2 years ago</span>.</div>\n        </div>\n</aside>\n\n    </div>\n\n<p>If I have different values in different cells, how can I join them together with a function with a delimiter of my own choosing (like \",\" or \"| \", etc.).</p>\n\n<p>For example:</p>\n\n<p>So if you have:</p>\n\n<pre class=\"lang-vb s-code-block hljs vbnet\"><code><span class=\"hljs-symbol\">A1:</span> foo\n<span class=\"hljs-symbol\">A2:</span> bar\n<span class=\"hljs-symbol\">A3:</span> baz\n</code></pre>\n\n<p>You can type in A4:</p>\n\n<pre class=\"lang-vb s-code-block hljs vbnet\"><code>=somefunction(<span class=\"hljs-string\">\"\"</span>,A1:A3)\n</code></pre>\n\n<p>And you will get in A4: </p>\n\n<pre class=\"lang-vb s-code-block hljs vbnet\"><code>foo bar baz\n</code></pre>\n\n<p>Moreover, what if the inputs are results of an array function, like:\n{foo, bar, bar}</p>\n\n<p>Maybe a UDF would work?</p>\n\n<p>I know in Microsoft Office 2016 there is the textjoin function, but it is only available for Office 365 subscribers. And this function cannot handle array inputs.</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try this user defined function. It is quite versatile. It will take for input hard-coded strings, single cell, cell ranges, arrays, or any mixture of them. Blanks will be ignored. See the photo for outputs.</p>\n\n<pre class=\"lang-vb s-code-block hljs vbnet\"><code><span class=\"hljs-keyword\">Public</span> <span class=\"hljs-keyword\">Function</span> TJoin(Sep <span class=\"hljs-keyword\">As</span> <span class=\"hljs-type\">String</span>, <span class=\"hljs-keyword\">ParamArray</span> TxtRng() <span class=\"hljs-keyword\">As</span> Variant) <span class=\"hljs-keyword\">As</span> <span class=\"hljs-type\">String</span>\n<span class=\"hljs-keyword\">On</span> <span class=\"hljs-keyword\">Error</span> <span class=\"hljs-keyword\">Resume</span> <span class=\"hljs-keyword\">Next</span>\n<span class=\"hljs-comment\">'Sep is the separator, set to \"\" if you don't want any separator. Separator must be string or single cell, not cell range</span>\n<span class=\"hljs-comment\">'TxtRng is the content you want to join. TxtRng can be string, single cell, cell range or array returned from an array function. Empty content will be ignored</span>\n<span class=\"hljs-keyword\">Dim</span> OutStr <span class=\"hljs-keyword\">As</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-comment\">'the output string</span>\n<span class=\"hljs-keyword\">Dim</span> i, j, k, l <span class=\"hljs-keyword\">As</span> <span class=\"hljs-type\">Integer</span> <span class=\"hljs-comment\">'counters</span>\n<span class=\"hljs-keyword\">Dim</span> FinArr(), element <span class=\"hljs-keyword\">As</span> Variant <span class=\"hljs-comment\">'the final array and a temporary element when transfering between the two arrays</span>\n\n<span class=\"hljs-comment\">'Go through each item of TxtRng(),  depending on the item type, transform and put it into FinArray()</span>\ni = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">'the counter for TxtRng</span>\nj = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">'the counter for FinArr</span>\nk = <span class=\"hljs-number\">0</span>: l = <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">'the counters for the case of array from Excel array formula</span>\n<span class=\"hljs-keyword\">Do</span> <span class=\"hljs-keyword\">While</span> i &lt; UBound(TxtRng) + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">If</span> TypeName(TxtRng(i)) = <span class=\"hljs-string\">\"String\"</span> <span class=\"hljs-keyword\">Then</span> <span class=\"hljs-comment\">'specified string like \"t\"</span>\n        <span class=\"hljs-keyword\">ReDim</span> <span class=\"hljs-keyword\">Preserve</span> FinArr(<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">To</span> j)\n        FinArr(j) = <span class=\"hljs-string\">\"blah\"</span>\n        FinArr(j) = TxtRng(i)\n        j = j + <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">ElseIf</span> TypeName(TxtRng(i)) = <span class=\"hljs-string\">\"Range\"</span> <span class=\"hljs-keyword\">Then</span> <span class=\"hljs-comment\">'single cell or range of cell like A1, A1:A2</span>\n        <span class=\"hljs-keyword\">For</span> <span class=\"hljs-keyword\">Each</span> element <span class=\"hljs-keyword\">In</span> TxtRng(i)\n            <span class=\"hljs-keyword\">ReDim</span> <span class=\"hljs-keyword\">Preserve</span> FinArr(<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">To</span> j)\n            FinArr(j) = element\n            j = j + <span class=\"hljs-number\">1</span>\n        <span class=\"hljs-keyword\">Next</span>\n    <span class=\"hljs-keyword\">ElseIf</span> TypeName(TxtRng(i)) = <span class=\"hljs-string\">\"Variant()\"</span> <span class=\"hljs-keyword\">Then</span> <span class=\"hljs-comment\">'array returned from an Excel array formula</span>\n         <span class=\"hljs-keyword\">For</span> k = LBound(TxtRng(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">To</span> UBound(TxtRng(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">1</span>)\n            <span class=\"hljs-keyword\">For</span> l = LBound(TxtRng(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">To</span> UBound(TxtRng(<span class=\"hljs-number\">0</span>), <span class=\"hljs-number\">2</span>)\n                <span class=\"hljs-keyword\">ReDim</span> <span class=\"hljs-keyword\">Preserve</span> FinArr(<span class=\"hljs-number\">0</span> <span class=\"hljs-keyword\">To</span> j)\n                FinArr(j) = TxtRng(<span class=\"hljs-number\">0</span>)(k, l)\n                j = j + <span class=\"hljs-number\">1</span>\n            <span class=\"hljs-keyword\">Next</span>\n         <span class=\"hljs-keyword\">Next</span>\n    <span class=\"hljs-keyword\">Else</span>\n        TJoin = CVErr(xlErrValue)\n        <span class=\"hljs-keyword\">Exit</span> <span class=\"hljs-keyword\">Function</span>\n    <span class=\"hljs-keyword\">End</span> <span class=\"hljs-keyword\">If</span>\ni = i + <span class=\"hljs-number\">1</span>\n<span class=\"hljs-keyword\">Loop</span>\n\n<span class=\"hljs-comment\">'Put each element of the new array into the join string</span>\n<span class=\"hljs-keyword\">For</span> i = LBound(FinArr) <span class=\"hljs-keyword\">To</span> UBound(FinArr)\n    <span class=\"hljs-keyword\">If</span> FinArr(i) &lt;&gt; <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-keyword\">Then</span> <span class=\"hljs-comment\">'Remove this line if you want to include empty strings</span>\n    OutStr = OutStr &amp; FinArr(i) &amp; Sep\n    <span class=\"hljs-keyword\">End</span> <span class=\"hljs-keyword\">If</span>\n<span class=\"hljs-keyword\">Next</span>\n TJoin = Left(OutStr, Len(OutStr) - Len(Sep)) <span class=\"hljs-comment\">'remove the ending separator</span>\n\n<span class=\"hljs-keyword\">End</span> <span class=\"hljs-keyword\">Function</span>\n</code></pre>\n\n<p>Screenshot:<br>\n<img src=\"https://i.stack.imgur.com/0YdFi.png\" alt=\"Screenshot\"></p>\n\n<p>Let's say your cells look like this:</p>\n\n<pre class=\"lang-vb s-code-block hljs vbnet\"><code>  A                          B\n<span class=\"hljs-number\">1</span> find                       good\n<span class=\"hljs-number\">2</span> apples                     <span class=\"hljs-keyword\">for</span> free\n<span class=\"hljs-number\">3</span> online                     now\n<span class=\"hljs-number\">4</span> at                         <span class=\"hljs-keyword\">from</span> this site:\n<span class=\"hljs-number\">5</span> https://www.example.com\n</code></pre>\n\n<p>You can put in some formulas like:</p>\n\n<pre class=\"lang-vb s-code-block hljs vbnet\"><code>=tjoin(<span class=\"hljs-string\">\" \"</span>,<span class=\"hljs-string\">\"please\"</span>,$A$<span class=\"hljs-number\">1</span>,$A$<span class=\"hljs-number\">3</span>:$A$<span class=\"hljs-number\">5</span>)\n=tjoin($A$<span class=\"hljs-number\">6</span>,$A$<span class=\"hljs-number\">1</span>:$A$<span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">\"C1\"</span>)\n=tjoin(<span class=\"hljs-string\">\" \"</span>,<span class=\"hljs-keyword\">IF</span>(LEN($A$<span class=\"hljs-number\">1</span>:$A$<span class=\"hljs-number\">5</span>)&gt;<span class=\"hljs-number\">3</span>,$A$<span class=\"hljs-number\">1</span>:$A$<span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">\"\"</span>))\n=tjoin(<span class=\"hljs-string\">\" \"</span>,<span class=\"hljs-keyword\">IF</span>(LEN($A$<span class=\"hljs-number\">1</span>:$B$<span class=\"hljs-number\">5</span>)&gt;<span class=\"hljs-number\">3</span>,$A$<span class=\"hljs-number\">1</span>:$B$<span class=\"hljs-number\">5</span>,<span class=\"hljs-string\">\"\"</span>))\n</code></pre>\n\n<p>Your results will be:</p>\n\n<pre class=\"lang-vb s-code-block hljs vbnet\"><code>please find online at https://www.example.com\nfind -- apples -- online -- at -- https://www.example.com -- C1\nfind apples online at https://www.example.com\nfind good apples <span class=\"hljs-keyword\">for</span> free online <span class=\"hljs-keyword\">from</span> this site: https://www.example.com\n</code></pre>\n    </div>",
          "vote": "9"
        }
      ]
    },
    {
      "question": "Get the percentage of a number with javascript [closed]",
      "url": "https://stackoverflow.com/questions/35723062/get-the-percentage-of-a-number-with-javascript",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Closed.</b> This question needs <a href=\"/help/closed-questions\">debugging details</a>. It is not currently accepting answers.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n            <hr class=\"my12 outline-none baw0 bb bc-powder-400\">\n        <div class=\"grid fw-nowrap fc-black-600\">\n                <div class=\"grid--cell mr8\">\n                    <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                </div>\n            <div class=\"grid--cell lh-md\">\n                <p class=\"mb0\">\n                    <b>Want to improve this question?</b> Update the question so it's <a href=\"/help/on-topic\">on-topic</a> for Stack Overflow.\n                </p>\n                    <p class=\"mb0 mt6\">Closed <span title=\"2016-03-13 19:05:10Z\" class=\"relativetime\">5 years ago</span>.</p>\n            </div>\n        </div>\n            <div class=\"mt24 grid gsx gs8\">\n                    <a class=\"s-btn s-btn__outlined grid--cell js-post-notice-edit-post\" href=\"/posts/35723062/edit\">\n                        Improve this question\n                    </a>\n            </div>\n</aside>\n\n    </div>\n\n<p>So I am creating a web app and I get some data.</p>\n\n<p>There are points you have now (now=284), and total points (total=1000). So, The difference between them is dif=716.</p>\n\n<p>How do I use javascript to turn the difference in to a percentage value , for example 32% or whatever?</p>\n\n<p>Thanks</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This is a math question, not programming, but you ask for javascript here you are an example:</p>\n\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> value = <span class=\"hljs-number\">249</span>;\n<span class=\"hljs-keyword\">var</span> total = <span class=\"hljs-number\">1000</span>;\n\n<span class=\"hljs-keyword\">var</span> calcPercent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">v, t</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">100</span>*v/t;\n};\n\nalert(calcPercent(value, total)+<span class=\"hljs-string\">\"%\"</span>);</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif1\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "5"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> total = <span class=\"hljs-number\">1000</span>,\n    subtract = <span class=\"hljs-number\">284</span>;\n<span class=\"hljs-keyword\">var</span> differencePercentage = ((total - subtract) / total) * <span class=\"hljs-number\">100</span>; <span class=\"hljs-comment\">// 71.6</span>\n</code></pre>\n    </div>",
          "vote": "2"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Simple math would be</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> now = <span class=\"hljs-number\">284</span>;\n<span class=\"hljs-keyword\">var</span> total = <span class=\"hljs-number\">1000</span>;\n<span class=\"hljs-built_in\">console</span>.log( <span class=\"hljs-string\">\"percentage is \"</span> + (now* <span class=\"hljs-number\">100</span>/total) );\n<span class=\"hljs-built_in\">console</span>.log( <span class=\"hljs-string\">\"Negative percentage is \"</span> + (<span class=\"hljs-number\">100</span>-(now* <span class=\"hljs-number\">100</span>/total)) );\n</code></pre>\n    </div>",
          "vote": "1"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js s-code-block hljs javascript\"><code>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">var</span> now = <span class=\"hljs-number\">284</span>;\n  <span class=\"hljs-keyword\">var</span> total = <span class=\"hljs-number\">1000</span>;\n\n  <span class=\"hljs-keyword\">var</span> difference = ((total - now) / total) * <span class=\"hljs-number\">100</span>;\n  \n  alert(difference);\n})()</code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif2\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n    </div>",
          "vote": "1"
        }
      ]
    },
    {
      "question": "How to bringback an object to its original position after rotation in unity?",
      "url": "https://stackoverflow.com/questions/44132854/how-to-bringback-an-object-to-its-original-position-after-rotation-in-unity",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I have created a project where a cube is rotated when we touch on it. I want the cube to return back to its original position when the user stops touching the cube. Below I have added the source code of rotating a cube:</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-keyword\">using</span> UnityEngine;\n\n<span class=\"hljs-keyword\">using</span> System.Collections;\n\n[<span class=\"hljs-meta\">RequireComponent(typeof(MeshRenderer))</span>]\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">dr</span> : <span class=\"hljs-title\">MonoBehaviour</span> \n{\n\n    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">region</span> ROTATE</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">float</span> _sensitivity = <span class=\"hljs-number\">1f</span>;\n    <span class=\"hljs-keyword\">private</span> Vector3 _mouseReference;\n    <span class=\"hljs-keyword\">private</span> Vector3 _mouseOffset;\n    <span class=\"hljs-keyword\">private</span> Vector3 _rotation = Vector3.zero;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> _isRotating;\n\n\n    <span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endregion</span></span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Update</span>(<span class=\"hljs-params\"></span>)</span>\n    {\n        <span class=\"hljs-keyword\">if</span>(_isRotating)\n        {\n            <span class=\"hljs-comment\">// offset</span>\n            _mouseOffset = (Input.mousePosition - _mouseReference); <span class=\"hljs-comment\">// apply rotation</span>\n            _rotation.y = -(_mouseOffset.x + _mouseOffset.y) * _sensitivity; <span class=\"hljs-comment\">// rotate</span>\n            gameObject.transform.Rotate(_rotation); <span class=\"hljs-comment\">// store new mouse position</span>\n            _mouseReference = Input.mousePosition;\n        }\n\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">OnMouseDown</span>(<span class=\"hljs-params\"></span>)</span>\n    {\n        <span class=\"hljs-comment\">// rotating flag</span>\n        _isRotating = <span class=\"hljs-literal\">true</span>;\n\n        <span class=\"hljs-comment\">// store mouse position</span>\n        _mouseReference = Input.mousePosition;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">OnMouseUp</span>(<span class=\"hljs-params\"></span>)</span>\n    {\n        <span class=\"hljs-comment\">// rotating flag</span>\n        _isRotating = <span class=\"hljs-literal\">false</span>;\n    }\n\n}\n</code></pre>\n\n<p>edited code:-\nusing UnityEngine;\nusing System.Collections;</p>\n\n<p>[RequireComponent(typeof(MeshRenderer))]</p>\n\n<p>public class pt : MonoBehaviour \n{</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">region</span> ROTATE</span>\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">float</span> _sensitivity = <span class=\"hljs-number\">1f</span>;\n<span class=\"hljs-keyword\">private</span> Vector3 _mouseReference;\n<span class=\"hljs-keyword\">private</span> Vector3 _mouseOffset;\n<span class=\"hljs-keyword\">private</span> Vector3 _rotation = Vector3.zero;\n<span class=\"hljs-keyword\">private</span> <span class=\"hljs-built_in\">bool</span> _isRotating;\n<span class=\"hljs-keyword\">private</span> Quaternion original;\n\n\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">endregion</span></span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">start</span>(<span class=\"hljs-params\"></span>)</span>{\n    original = transform.rotation;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Update</span>(<span class=\"hljs-params\"></span>)</span>\n{\n    <span class=\"hljs-keyword\">if</span>(_isRotating)\n    {\n        <span class=\"hljs-comment\">// offset</span>\n        _mouseOffset = (Input.mousePosition - _mouseReference); <span class=\"hljs-comment\">// apply rotation</span>\n        _rotation.y = -(_mouseOffset.x + _mouseOffset.y) * _sensitivity; <span class=\"hljs-comment\">// rotate</span>\n        gameObject.transform.Rotate(_rotation); <span class=\"hljs-comment\">// store new mouse position</span>\n        _mouseReference = Input.mousePosition;\n    }\n\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">OnMouseDown</span>(<span class=\"hljs-params\"></span>)</span>\n{\n    <span class=\"hljs-comment\">// rotating flag</span>\n    _isRotating = <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-comment\">// store mouse position</span>\n    _mouseReference = Input.mousePosition;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">OnMouseUp</span>(<span class=\"hljs-params\"></span>)</span>\n{\n    <span class=\"hljs-comment\">// rotating flag</span>\n    _isRotating = <span class=\"hljs-literal\">false</span>;\n    transform.rotation = original;\n}\n</code></pre>\n\n<p>}</p>\n\n<p>\"im trying to rotate a 3d model of a sofa and return to its starting rotation.but if i used this code \" <strong>whenever if i stopped touching the sofa , it turns to **backside</strong> of sofa\"**\n i want it to return to initial rotation.<a href=\"https://i.stack.imgur.com/M9pE2.png\" rel=\"nofollow noreferrer\">u can see initally this is how the sofa looks like and if i stopped touching it returns to its backside of sofa. i want it to return to its front side again if i stopped rotation</a></p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>I want the cube to return back to its original position when the user\n  stopped touching the cube</p>\n</blockquote>\n\n<p>I can't exactly tell which part of this you are struggling with but you can simply get the position of the GameObject in  the <code>Start</code> or <code>Awake</code> function then set the <code>transform.position</code> to that value when <code>OnMouseUp</code> is called.</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-keyword\">private</span> Vector3 originalPos;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Start</span>(<span class=\"hljs-params\"></span>)</span>\n{\n  <span class=\"hljs-comment\">//Get the original position</span>\n  originalPos = transform.position;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">OnMouseUp</span>(<span class=\"hljs-params\"></span>)</span>\n{\n    _isRotating = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-comment\">//Reset GameObject to the original position</span>\n    transform.position = originalPos;\n}\n</code></pre>\n\n<p><strong>EDIT:</strong></p>\n\n<p>For rotation, it is also the-same thing. Just use <code>Quaternion</code> and <code>transform.rotation</code> instead of <code>Vector3</code> and <code>transform.position</code>.</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code><span class=\"hljs-keyword\">private</span> Quaternion originalPos;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Start</span>(<span class=\"hljs-params\"></span>)</span>\n{\n  <span class=\"hljs-comment\">//Get the original rotation</span>\n  originalPos = transform.rotation;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">OnMouseUp</span>(<span class=\"hljs-params\"></span>)</span>\n{\n    _isRotating = <span class=\"hljs-literal\">false</span>;\n    <span class=\"hljs-comment\">//Reset GameObject to the original rotation</span>\n    transform.rotation = originalPos;\n}\n</code></pre>\n\n<p>You still have to incorporate that into the original code from your answer. If this is something you can't do then consider watching Unity's scripting tutorial <a href=\"https://unity3d.com/learn/tutorials/s/scripting\" rel=\"noreferrer\">here</a>.</p>\n    </div>",
          "vote": "7"
        }
      ]
    },
    {
      "question": "Converting Yearly Salary to Weekly in Swift",
      "url": "https://stackoverflow.com/questions/42441382/converting-yearly-salary-to-weekly-in-swift",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I am trying to convert yearly salary to weekly. So, 312,000 yearly salary should come out as $6000 weekly. </p>\n\n<p>Here is my formula which is not giving the desired result: </p>\n\n<pre class=\"lang-swift s-code-block hljs\"><code>weeklySalary <span class=\"hljs-operator\">=</span> (yearlySalary <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">12</span>) <span class=\"hljs-operator\">/</span> <span class=\"hljs-number\">4</span>\n</code></pre>\n\n<p>Also, how can I convert yearly to hourly! </p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>There are 52 weeks in a year, so <code>weeklySalary = yearlySalary / 52</code>. If you want hourly, there are 40 working hours in a week, so <code>hourlySalary = weeklySalary / 40</code>.</p>\n    </div>",
          "vote": "7"
        }
      ]
    },
    {
      "question": "How to format java.util.Date with DateTimeFormatter portable?",
      "url": "https://stackoverflow.com/questions/43527477/how-to-format-java-util-date-with-datetimeformatter-portable",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>How to format <code>java.util.Date</code> with <code>DateTimeFormatter</code> portable?</p>\n\n<p>I can't use </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Date in = readMyDateFrom3rdPartySource();\nLocalDateTime ldt = LocalDateTime.ofInstant(in.toInstant(), ZoneId.systemDefault());\nldt.format(dateTimeFormatter);\n</code></pre>\n\n<p>because I afraid that usage of <code>ZoneId.systemDefault()</code> can introduce some changes.</p>\n\n<p>I need to format exactly that object I have.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Note: time is time. Not space. Timezone is very rough measure of longitude, i.e. space. I don't need it. Only time (and date).</p>\n\n<p><strong>UPDATE 2</strong></p>\n\n<p>I wrote the following program, proving, that <code>Date</code> DOES NOT only contain correct \"instant\":</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">import</span> java.text.ParseException;\n<span class=\"hljs-keyword\">import</span> java.text.SimpleDateFormat;\n<span class=\"hljs-keyword\">import</span> java.util.Date;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DataNature2</span> </span>{\n\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> ParseException </span>{\n\n      SimpleDateFormat simpleDateFormat = <span class=\"hljs-keyword\">new</span> SimpleDateFormat(<span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>);\n\n      String dateTimeString = <span class=\"hljs-string\">\"1970-01-01 00:00:01\"</span>;\n\n      Date date = simpleDateFormat.parse(dateTimeString);\n\n      System.out.println(<span class=\"hljs-string\">\"1 second = \"</span> + date.getTime());\n\n   }\n}\n</code></pre>\n\n<p>The output is follows:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-number\">1</span> second = -<span class=\"hljs-number\">10799000</span>\n</code></pre>\n\n<p>While it should be</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-number\">1</span> second = <span class=\"hljs-number\">1000</span>\n</code></pre>\n\n<p>if <code>Date</code> was \"Instant\".</p>\n\n<p>The number <code>10799000</code> is <code>3*60*60*1000-1000</code> - the timezone offset of my local time.</p>\n\n<p>This means, that <code>Date</code> class is dual. It's millisecond part may be shifted relatively to <code>hh mm ss</code> part by timezone offset.</p>\n\n<p>This means, that if any utility returns <code>Date</code> object in terms of it's parts (<code>hh mm ss</code>) then it implicitly converted to local time. And <code>getTime()</code> means DIFFERENT time simultaneously. I mean on different machines if this program run at the same time, <code>getTime()</code> will be the same, while time parts will be different.</p>\n\n<p>So, the code example in the beginning is correct: it takes \"instant\" part of <code>Date</code>, and supplies system timezone part, which was implicitly used inside <code>Date</code>. I.e. it converts dual <code>Date</code> object into explicit <code>LocalDateTime</code> object with the same parts. And hence, formatting after that, is correct.</p>\n\n<p><strong>UPDATE 3</strong></p>\n\n<p>Event funnier:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Date date = <span class=\"hljs-keyword\">new</span> Date(<span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\nassertEquals(<span class=\"hljs-number\">1000</span>, date.getTime());\n</code></pre>\n\n<p>this test fails.</p>\n\n<p><strong>UDPATE 4</strong></p>\n\n<p>New code. Dedicated to all believers.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DataNature3</span> </span>{\n\n   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TZ</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">java</span>.<span class=\"hljs-title\">util</span>.<span class=\"hljs-title\">TimeZone</span> </span>{\n\n\n      <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> offsetMillis;\n\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">TZ</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> offsetHours)</span> </span>{\n         <span class=\"hljs-keyword\">this</span>.offsetMillis = offsetHours * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">1000</span>;\n      }\n\n      <span class=\"hljs-meta\">@Override</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getOffset</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> era, <span class=\"hljs-keyword\">int</span> year, <span class=\"hljs-keyword\">int</span> month, <span class=\"hljs-keyword\">int</span> day, <span class=\"hljs-keyword\">int</span> dayOfWeek, <span class=\"hljs-keyword\">int</span> milliseconds)</span> </span>{\n         <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> UnsupportedOperationException();\n      }\n\n      <span class=\"hljs-meta\">@Override</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setRawOffset</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> offsetMillis)</span> </span>{\n         <span class=\"hljs-keyword\">this</span>.offsetMillis = offsetMillis;\n      }\n\n      <span class=\"hljs-meta\">@Override</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getRawOffset</span><span class=\"hljs-params\">()</span> </span>{\n         <span class=\"hljs-keyword\">return</span> offsetMillis;\n      }\n\n      <span class=\"hljs-meta\">@Override</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">useDaylightTime</span><span class=\"hljs-params\">()</span> </span>{\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n      }\n\n      <span class=\"hljs-meta\">@Override</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">inDaylightTime</span><span class=\"hljs-params\">(Date date)</span> </span>{\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">false</span>;\n      }\n   }\n\n   <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n\n      Date date = <span class=\"hljs-keyword\">new</span> Date(<span class=\"hljs-number\">0</span>);\n\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">10</span>; ++i) {\n\n         TimeZone.setDefault(<span class=\"hljs-keyword\">new</span> TZ(i));\n\n         <span class=\"hljs-keyword\">if</span>( i&lt;<span class=\"hljs-number\">5</span> ) {\n            System.out.println(<span class=\"hljs-string\">\"I am date, I am an instant, I am immutable, my hours property is \"</span> + date.getHours() + <span class=\"hljs-string\">\", Amen!\"</span>);\n         }\n         <span class=\"hljs-keyword\">else</span> {\n            System.out.println(<span class=\"hljs-string\">\"WTF!? My hours property is now \"</span> + date.getHours() + <span class=\"hljs-string\">\" and changing! But I AM AN INSTANT! I AM IMMUTABLE!\"</span>);\n         }\n\n      }\n\n      System.out.println(<span class=\"hljs-string\">\"Oh, please, don't do that, this is deprecated!\"</span>);\n\n   }\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>I am date, I am an instant, I am immutable, my hours property is <span class=\"hljs-number\">0</span>, Amen!\nI am date, I am an instant, I am immutable, my hours property is <span class=\"hljs-number\">1</span>, Amen!\nI am date, I am an instant, I am immutable, my hours property is <span class=\"hljs-number\">2</span>, Amen!\nI am date, I am an instant, I am immutable, my hours property is <span class=\"hljs-number\">3</span>, Amen!\nI am date, I am an instant, I am immutable, my hours property is <span class=\"hljs-number\">4</span>, Amen!\nWTF!? My hours property is now <span class=\"hljs-number\">5</span> and changing! But I AM AN INSTANT! I AM IMMUTABLE!\nWTF!? My hours property is now <span class=\"hljs-number\">6</span> and changing! But I AM AN INSTANT! I AM IMMUTABLE!\nWTF!? My hours property is now <span class=\"hljs-number\">7</span> and changing! But I AM AN INSTANT! I AM IMMUTABLE!\nWTF!? My hours property is now <span class=\"hljs-number\">8</span> and changing! But I AM AN INSTANT! I AM IMMUTABLE!\nWTF!? My hours property is now <span class=\"hljs-number\">9</span> and changing! But I AM AN INSTANT! I AM IMMUTABLE!\nOh, please, don<span class=\"hljs-string\">'t do that, this is deprecated!\n</span></code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>TL;DR: You're right to be concerned about the use of the system local time zone, but you should have been concerned earlier in the process, when you used the system local time zone to construct a <code>Date</code> in the first place.</p>\n\n<p><em>If</em> you just want the formatted string to have the same components that <code>Date.getDate()</code>, <code>Date.getMonth()</code>, <code>Date.getYear()</code> etc return then your original code is appropriate:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>LocalDateTime ldt = LocalDateTime.ofInstant(in.toInstant(), ZoneId.systemDefault());\n</code></pre>\n\n<p>You say you're \"afraid that usage of <code>ZoneId.systemDefault()</code> can introduce some changes\" - but that's precisely what <code>Date.getDate()</code> etc use.</p>\n\n<p><code>Date</code> doesn't have any kind of \"dual contract\" that lets you view it as a time-zone-less representation. It <em>is</em> just an instant in time. Almost every single method that lets you construct or deconstruct it into components is clearly documented to use the system default time zone, just like your use of <code>ZoneId.systemDefault()</code>. (One notable exception is the <code>UTC</code> method.)</p>\n\n<p>Implicitly using the system default time zone is <em>not</em> the same as <code>Date</code> being a valid time-zone-less representation, and it's easy to demonstrate why: it can lose data, very easily. Consider the time-zone-free date and time of \"March 26th 2017, 1:30am\". You may well want to be able to take a text representation of that, parse it, and then later reformat it. If you do that in the Europe/London time zone, you'll have problems, as demonstrated below:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">import</span> java.util.*;\n<span class=\"hljs-keyword\">import</span> java.time.*;\n<span class=\"hljs-keyword\">import</span> java.time.format.*;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>{\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        TimeZone.setDefault(TimeZone.getTimeZone(<span class=\"hljs-string\">\"Europe/London\"</span>));\n        Date date = <span class=\"hljs-keyword\">new</span> Date(<span class=\"hljs-number\">2017</span> - <span class=\"hljs-number\">1900</span>, <span class=\"hljs-number\">3</span> - <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">26</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">30</span>);\n\n        Instant instant = date.toInstant();\n        ZoneId zone = ZoneId.systemDefault();\n        LocalDateTime ldt = LocalDateTime.ofInstant(instant, zone);\n        System.out.println(ldt); <span class=\"hljs-comment\">// Use ISO-8601 by default</span>\n    }\n}\n</code></pre>\n\n<p>The output is 2017-03-26T02:30. It's not that there's an off-by-one error in the code - if you change it to display 9:30am, that will work just fine.</p>\n\n<p>The problem is that 2017-03-26T01:30 <em>didn't exist in the Europe/London time zone</em> due to DST - at 1am, the clock skipped forward to 2am.</p>\n\n<p>So if you're happy with that sort of brokenness, then sure, use <code>Date</code> and the system local time zone. Otherwise, don't try to use <code>Date</code> for this purpose.</p>\n\n<p>If you absolutely <em>have</em> to use <code>Date</code> in this broken way, using methods that have been deprecated for about 20 years because they're misleading, but you're able to change the system time zone, then change it to something that doesn't have - and never has had - DST. UTC is the obvious choice here. At that point, you can convert between a local date/time and <code>Date</code> without losing data. It's still a bad use of <code>Date</code>, which <em>is</em> just an instant in time like <code>Instant</code>, but at least you won't lose data.</p>\n\n<p>Or you could make sure that whenever you construct a <code>Date</code> from a local date/time, you use UTC to do the conversion, of course, instead of the system local time zone... whether that's via the <code>Date.UTC</code> method, or by parsing text using a <code>SimpleDateFormat</code> that's in UTC, or whatever it is. Unfortunately you haven't told us anything about where your <code>Date</code> value is coming from to start with...</p>\n    </div>",
          "vote": "36"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<h1>tl;dr</h1>\n\n<blockquote>\n  <p>How to format java.util.Date with DateTimeFormatter portable?</p>\n</blockquote>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Instant instant = myJavaUtilDate.toInstant() ;  <span class=\"hljs-comment\">// When encountering a `Date`, immediately convert from troublesome legacy class to modern *java.time* class. Then forget all about that `Date` object!</span>\nZoneId z = ZoneId.systemDefault() ;             <span class=\"hljs-comment\">// Or ZoneId.of( \"America/Montreal\" ) or ZoneId.of( \"Africa/Tunis\" ) etc.</span>\nZonedDateTime zdt = instant.atZone( z ) ;\nDateTimeFormatter f = DateTimeFormatter.ofLocalizedDateTime( FormatStyle.FULL ).withLocale( Locale.CANADA_FRENCH ) ;\nString output = zdt.format( f ) ;\n</code></pre>\n\n<p>Or, a one-liner…  (not that I recommend such a complicated one-liner)</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>myJavaUtilDate.toInstant().atZone( ZoneId.systemDefault() ).format( DateTimeFormatter.ofLocalizedDateTime( FormatStyle.FULL ).withLocale( Locale.CANADA_FRENCH )  ) \n</code></pre>\n\n<h1>Details</h1>\n\n<p>The <a href=\"https://stackoverflow.com/a/43556088/642706\">Answer by Jon Skeet</a> is correct. Here is my own take, with some specific points.</p>\n\n<h2>Avoid legacy date-time classes.</h2>\n\n<p>Do not use <code>java.util.Date</code>, <code>java.util.Calendar</code>, <code>SimpleDateFormat</code>, <code>java.sql.Date/Time/Timestamp</code> and other related classes dating back to the earliest versions of Java. While a well-intentioned early attempt at sophisticated handling of date-time values, they fell short of the mark. Now supplanted by the <em>java.time</em> classes. </p>\n\n<p>If you must inter-operate with the legacy classes in old code not yet updated for <em>java.time</em>, convert. Call new methods on the old classes.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Instant instant = myJavaUtilDate.toInstant() ; \n</code></pre>\n\n<p>You did this in your Question, but then went on to ponder more about <code>Date</code>. <strong>Forget about <code>java.util.Date</code></strong>. Pretend it never existed. Both <code>Date</code> and <code>Instant</code> represent the same thing: A moment in UTC, a point on the timeline. The only difference is concept is that the modern <code>Instant</code> has a finer resolution of nanoseconds rather than milliseconds in <code>Date</code>. </p>\n\n<h2><code>LocalDateTime</code> != moment</h2>\n\n<p>You then converted from an <code>Instant</code> to a <code>LocalDateTime</code>. You moved from a specific point on the timeline, to a vague range of possible moments. <strong>This makes no sense</strong> in nearly any practical scenario. </p>\n\n<p>A <code>LocalDateTime</code> lacks any concept of time zone or offset-from-UTC. Having no such concept is its very purpose. Ditto for <code>LocalDate</code> &amp; <code>LocalTime</code>: no concept of zone/offset. Think of the “Local” part as meaning “<em>any</em> locality” or “<em>no</em> locality”, not any one particular locality. </p>\n\n<p>Lacking zone/offset means <strong>a <code>LocalDateTime</code> does <em>not</em> represent a moment</strong>. It is <em>not</em> a point on the timeline. It is a vague idea about <em>potential</em> moments, along a range of about 26-27 hours. Until you place a <code>LocalDateTime</code> in a context of a particular zone or offset, it has no real meaning.</p>\n\n<p>Use <code>LocalDateTime</code> for use such as “Christmas this year starts at first moment of December 25th, 2018”. Such a statement implies <em>anywhere</em>, or <em>nowhere specifically</em>. </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>LocalDate ld = LocalDate.of(<span class=\"hljs-number\">2018</span>, Month.DECEMBER , <span class=\"hljs-number\">25</span>);\nLocalTime lt = LocalTime.MIN ;  <span class=\"hljs-comment\">// 00:00</span>\nLocalDateTime xmasStartsAnywhere = LocalDateTime.of( ld , lt ) ;\n</code></pre>\n\n<blockquote>\n  <p>xmasStartsAnywhere.toString(): 2018-12-25T00:00</p>\n</blockquote>\n\n<h2><code>ZonedDateTime</code> = moment</h2>\n\n<p>Now add in the context of a time zone. The first kids getting their delivery from Santa will be asleep in their beds on <a href=\"https://en.wikipedia.org/wiki/Kiritimati\" rel=\"noreferrer\">Kiritimati</a> (“Christmas Island”) in the first hour of the 25th as seen on the wall-clocks of their homes. </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>ZoneId z = ZoneId.of(<span class=\"hljs-string\">\"Pacific/Kiritimati\"</span>);\nLocalDate ld = LocalDate.of(<span class=\"hljs-number\">2018</span>, Month.DECEMBER , <span class=\"hljs-number\">25</span>);\nZonedDateTime zdtKiritimati = ZonedDateTime.of( ld , LocalTime.MIN , z );\n</code></pre>\n\n<blockquote>\n  <p>zdtKiritimati.toString(): 2018-12-25T00:00+14:00[Pacific/Kiritimati]</p>\n</blockquote>\n\n<p>By the way, we could have assigned that time zone (<code>ZoneId</code>) directly to to our <code>LocalDateTime</code> to get a <code>ZonedDateTime</code> rather than start from scratch.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>ZonedDateTime zdtKiritimati = xmasStartsAnywhere.atZone( z ) ;  <span class=\"hljs-comment\">// Move from the vague idea of the beginning of Christmas to the specific moment Christmas starts for actual people in an actual location.</span>\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/5w0eG.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/5w0eG.png\" alt=\"map of Kiribati, a nation of islands roughly in middle of Pacific ocean\"></a></p>\n\n<p>Meanwhile, at the very same moment Santa is laying out presents in <a href=\"https://en.wikipedia.org/wiki/Kiribati\" rel=\"noreferrer\">Kiribati</a>, the kids on the farms in Québec are just rising at 5 AM the day before (Christmas Eve) to milk the cows and <a href=\"https://en.wikipedia.org/wiki/Epoch_(reference_date)\" rel=\"noreferrer\">tap the maple sap</a>.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>ZonedDateTime zdtMontreal = zdtKiribati.withZoneSameInstant( ZoneId.of( <span class=\"hljs-string\">\"America/Montreal\"</span>) );\n</code></pre>\n\n<blockquote>\n  <p>zdtMontreal.toString(): 2018-12-24T05:00-05:00[America/Montreal]</p>\n</blockquote>\n\n<p>So, after finishing in Kiribati, the elves route Santa westward, moving through a succession of new midnight hours, starting in the far east Asia &amp; New Zealand, then India, then the Middle East, then Africa &amp; Europe, and eventually the Americas. The offsets currently range from 14 hours ahead of UTC to 12 hours behind. So Santa has just over 26 hours to get the job done.</p>\n\n<h2>Epoch</h2>\n\n<p>Regarding your experiments with the <a href=\"https://en.wikipedia.org/wiki/Epoch_(reference_date)\" rel=\"noreferrer\">epoch reference</a> of first moment of 1970 in UTC, you were inadvertently injecting your own JVM’s current default time zone. Your input string <code>1970-01-01 00:00:01</code> is faulty in that it lacks any indicator of a time zone or offset-from-UTC. In other words, that input string is the equivalent of a <code>LocalDateTime</code> object. When parsing that string as a <code>Date</code> (having UTC), the <code>Date</code> class silently implicitly applied your JVM’s current default time zone while interpreting that input string, in a desperate attempt to create meaning, to determine a specific moment. Once again you are inappropriately mixing a date-time lacking any concept of zone/offset with a date-time having a zone/offset.</p>\n\n<p>Per the documentation for <a href=\"https://docs.oracle.com/javase/9/docs/api/java/util/Date.html#parse-java.lang.String-\" rel=\"noreferrer\"><code>Date.parse</code></a>:</p>\n\n<blockquote>\n  <p>If a time zone or time-zone offset has been recognized, then the year, month, day of month, hour, minute, and second are interpreted in UTC and then the time-zone offset is applied. Otherwise, the year, month, day of month, hour, minute, and second are interpreted in the local time zone.</p>\n</blockquote>\n\n<p>That “local” in the last sentence was a poor choice of words. Should have been written “interpreted by applying your JVM’s current default time zone”. </p>\n\n<p>The key here is that you failed to specify a zone/offset, and the <code>Date</code> class filled in the missing information. A well-intentioned feature, but confusing and counter-productive. </p>\n\n<p>Moral of the story: If you intend a specific moment (a point on the timeline), <strong>always specify your desired/intended time zone explicitly</strong>.</p>\n\n<p>If you mean UTC, say UTC. In this next line, we include a <code>Z</code> on the end, short for <code>Zulu</code> and means UTC. This part about specifying UTC is where you went wrong by omission.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Instant instant = Instant.parse( <span class=\"hljs-string\">\"1970-01-01T00:00:01Z\"</span> ) ;  <span class=\"hljs-comment\">// One second after the first moment of 1970 **in UTC**. </span>\n</code></pre>\n\n<blockquote>\n  <p>instant.toString(): 1970-01-01T00:00:01Z</p>\n</blockquote>\n\n<p>By the way, another way of writing that code is to use a constant defined for the epoch reference 1970-01-01T00:00:00Z, and the <code>Duration</code> class for representing a span of time unattached to the timeline.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Instant instant = Instant.EPOCH.plus( Duration.ofSeconds( <span class=\"hljs-number\">1</span> ) ) ;\n</code></pre>\n\n<blockquote>\n  <p>instant.toString(): 1970-01-01T00:00:01Z</p>\n</blockquote>\n\n<p>Your next experiment has the same story. You failed to specify a zone/offset, so <code>Date</code> applied one while interpreting your zone-less input. A bad idea in my opinion, but that is the documented behavior.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Date date = <span class=\"hljs-keyword\">new</span> Date(<span class=\"hljs-number\">70</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>);\nassertEquals(<span class=\"hljs-number\">1000</span>, date.getTime());  <span class=\"hljs-comment\">// fails</span>\n</code></pre>\n\n<p>You can see from the <code>Date</code> object’s generated string that it represents a date-time of one second after 1970 starts in another time zone rather than in UTC. Here is output from my JVM with default time zone of <code>America/Los_Angeles</code>. </p>\n\n<blockquote>\n  <p>date.toString(): Thu Jan 01 00:00:01 PST 1970</p>\n</blockquote>\n\n<p>Let's convert to <code>Instant</code> for clarity. Notice how the hour-of-day is 8 AM in UTC. On that first day of 1970, people in zone <code>America/Los_Angeles</code> used a wall-clock time eight hours <em>behind UTC</em>. So one second after midnight, <code>00:00:01</code>, on much of the west coast of North America is simultaneously 8 AM in UTC. Nothing “funny” going on here at all. </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>Instant instant = date.toInstant() ; <span class=\"hljs-comment\">// 00:00:01 in `America/Los_Angeles` = 8 AM UTC (specifically, 08:00:01 UTC). </span>\n</code></pre>\n\n<blockquote>\n  <p>instant.toString(): 1970-01-01T08:00:01Z</p>\n</blockquote>\n\n<p>Two important pieces are in play here:</p>\n\n<ul>\n<li>You must learn and understand that a moment, a point on the timeline, has different wall-clock time used by different different people in different places around the globe. In other words, the wall-clock time for any given moment varies around the globe by time zone. </li>\n<li>The poor design choices of the legacy date-time classes such as <code>java.util.Date</code> unfortunately complicate the situation. The ill-advised behavior brings confusion rather than clarity to the already confusing topic of date-time handling. <strong>Avoid the legacy classes.</strong> Use only <em>java.time</em> classes instead. Stop banging your head against a brick wall, and then your headache will go away. </li>\n</ul>\n\n<p>Tips: </p>\n\n<ul>\n<li>Learn to think, work, debug, log, and exchange data in UTC. Think of UTC as <em>The One True Time™</em>. Avoid translating back-and-forth between your own parochial time zone and UTC. Instead forget about your own zone and focus on UTC while at work programming/administrating. Keep a UTC clock on your desktop.</li>\n<li>Apply a time zone only when required by business logic or by expectation of user in presentation.</li>\n<li>Always specify your desired/expected time zone explicitly as optional argument. Even if you intend to use the current default value, explicitly call for the default, to make your code self-documenting about your intention. By the way… Ditto for <code>Locale</code>: always specify explicitly, never rely implicitly on default.</li>\n</ul>\n\n<hr>\n\n<h1>About <em>java.time</em></h1>\n\n<p>The <a href=\"http://docs.oracle.com/javase/9/docs/api/java/time/package-summary.html\" rel=\"noreferrer\"><em>java.time</em></a> framework is built into Java 8 and later. These classes supplant the troublesome old <a href=\"https://en.wikipedia.org/wiki/Legacy_system\" rel=\"noreferrer\">legacy</a> date-time classes such as <a href=\"https://docs.oracle.com/javase/9/docs/api/java/util/Date.html\" rel=\"noreferrer\"><code>java.util.Date</code></a>, <a href=\"https://docs.oracle.com/javase/9/docs/api/java/util/Calendar.html\" rel=\"noreferrer\"><code>Calendar</code></a>, &amp; <a href=\"http://docs.oracle.com/javase/9/docs/api/java/text/SimpleDateFormat.html\" rel=\"noreferrer\"><code>SimpleDateFormat</code></a>.</p>\n\n<p>The <a href=\"http://www.joda.org/joda-time/\" rel=\"noreferrer\"><em>Joda-Time</em></a> project, now in <a href=\"https://en.wikipedia.org/wiki/Maintenance_mode\" rel=\"noreferrer\">maintenance mode</a>, advises migration to the <a href=\"http://docs.oracle.com/javase/9/docs/api/java/time/package-summary.html\" rel=\"noreferrer\">java.time</a> classes.</p>\n\n<p>To learn more, see the <a href=\"http://docs.oracle.com/javase/tutorial/datetime/TOC.html\" rel=\"noreferrer\"><em>Oracle Tutorial</em></a>. And search Stack Overflow for many examples and explanations. Specification is <a href=\"https://jcp.org/en/jsr/detail?id=310\" rel=\"noreferrer\">JSR 310</a>.</p>\n\n<p>Using a <a href=\"https://en.wikipedia.org/wiki/JDBC_driver\" rel=\"noreferrer\">JDBC driver</a> compliant with <a href=\"http://openjdk.java.net/jeps/170\" rel=\"noreferrer\">JDBC 4.2</a> or later, you may exchange <em>java.time</em> objects directly with your database. No need for strings nor java.sql.* classes.</p>\n\n<p>Where to obtain the java.time classes? </p>\n\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_8\" rel=\"noreferrer\"><strong>Java SE 8</strong></a>, <a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_9\" rel=\"noreferrer\"><strong>Java SE 9</strong></a>, and later\n\n<ul>\n<li>Built-in. </li>\n<li>Part of the standard Java API with a bundled implementation.</li>\n<li>Java 9 adds some minor features and fixes.</li>\n</ul></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_6\" rel=\"noreferrer\"><strong>Java SE 6</strong></a> and <a href=\"https://en.wikipedia.org/wiki/Java_version_history#Java_SE_7\" rel=\"noreferrer\"><strong>Java SE 7</strong></a>\n\n<ul>\n<li>Much of the java.time functionality is back-ported to Java 6 &amp; 7 in <a href=\"http://www.threeten.org/threetenbp/\" rel=\"noreferrer\"><strong><em>ThreeTen-Backport</em></strong></a>.</li>\n</ul></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Android_(operating_system)\" rel=\"noreferrer\"><strong>Android</strong></a>\n\n<ul>\n<li>Later versions of Android bundle implementations of the java.time classes.</li>\n<li>For earlier Android, the <a href=\"https://github.com/JakeWharton/ThreeTenABP\" rel=\"noreferrer\"><strong><em>ThreeTenABP</em></strong></a> project adapts <em>ThreeTen-Backport</em> (mentioned above). See <a href=\"http://stackoverflow.com/q/38922754/642706\"><em>How to use ThreeTenABP…</em></a>.</li>\n</ul></li>\n</ul>\n\n<p>The <a href=\"http://www.threeten.org/threeten-extra/\" rel=\"noreferrer\"><strong>ThreeTen-Extra</strong></a> project extends java.time with additional classes. This project is a proving ground for possible future additions to java.time. You may find some useful classes here such as <a href=\"http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/Interval.html\" rel=\"noreferrer\"><code>Interval</code></a>, <a href=\"http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/YearWeek.html\" rel=\"noreferrer\"><code>YearWeek</code></a>, <a href=\"http://www.threeten.org/threeten-extra/apidocs/org/threeten/extra/YearQuarter.html\" rel=\"noreferrer\"><code>YearQuarter</code></a>, and <a href=\"http://www.threeten.org/threeten-extra/apidocs/index.html\" rel=\"noreferrer\">more</a>.</p>\n    </div>",
          "vote": "7"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>you can use as per your requirment.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>   java.util.Date\n   DateFormat dateFormat = <span class=\"hljs-keyword\">new</span> SimpleDateFormat(<span class=\"hljs-string\">\"yyyy/MM/dd HH:mm:ss\"</span>);\n   Date date = <span class=\"hljs-keyword\">new</span> Date();\n   System.out.println(dateFormat.format(date));\n\n   java.util.Calendar\n   DateFormat dateFormat = <span class=\"hljs-keyword\">new</span> SimpleDateFormat(<span class=\"hljs-string\">\"yyyy/MM/dd HH:mm:ss\"</span>);\n   Calendar cal = Calendar.getInstance();\n   System.out.println(dateFormat.format(cal.getTime()));\n\n   java.time.LocalDateTime\n   DateTimeFormatter dateTimeFormat = DateTimeFormatter.ofPattern(<span class=\"hljs-string\">\"yyyy/MM/dd HH:mm:ss\"</span>);\n   LocalDateTime localDateTime = LocalDateTime.now();\n   System.out.println(dateTimeFormat.format(localDateTime));\n</code></pre>\n    </div>",
          "vote": "2"
        }
      ]
    },
    {
      "question": "Create token on textbox focusout",
      "url": "https://stackoverflow.com/questions/31967020/create-token-on-textbox-focusout",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I'm populating email-id in the text box value using <code>ng-repeat</code>. Using edit icon I'm adding email-id in text box and on text box focus out I have to create token for the email-id in text box.\nI have to find out the token input and create the token </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-string\">'.tagemail'</span>).parent().focusout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    $(<span class=\"hljs-string\">'.token-input'</span>).each(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">valindex</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> ($(<span class=\"hljs-built_in\">this</span>).val() != <span class=\"hljs-string\">\"\"</span>) {\n            <span class=\"hljs-keyword\">var</span> value = $(<span class=\"hljs-built_in\">this</span>).val();\n            <span class=\"hljs-keyword\">var</span> id = $(<span class=\"hljs-built_in\">this</span>).attr(<span class=\"hljs-string\">\"id\"</span>);\n            $(<span class=\"hljs-string\">'#'</span> + id).val(<span class=\"hljs-string\">''</span>);\n            thisChild.tokenfield(<span class=\"hljs-string\">'createToken'</span>, value);\n        }\n    });\n});\n</code></pre>\n\n<p>But the div of <strong>thisChild</strong> getting differed.</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your question is not formulated correctly but i think this is what you are looking for this:</p>\n\n<p><a href=\"https://code.google.com/p/crypto-js/\" rel=\"nofollow noreferrer\">https://code.google.com/p/crypto-js/</a></p>\n\n<p>You can create all kinds of tokens</p>\n\n<p>Or generate a random number:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>    <span class=\"hljs-keyword\">var</span> rand = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.random().toString(<span class=\"hljs-number\">36</span>).substr(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// remove `0.`</span>\n};\n\n<span class=\"hljs-keyword\">var</span> token = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> rand() + rand(); <span class=\"hljs-comment\">// to make it longer</span>\n};\n\ntoken(); <span class=\"hljs-comment\">// \"bnh5yzdirjinqaorq0ox1tf383nb3xr\"</span>\n</code></pre>\n\n<p>Source: <a href=\"https://stackoverflow.com/questions/8532406/create-a-random-token-in-javascript-based-on-user-details\">Already Answered</a></p>\n    </div>",
          "vote": "4"
        }
      ]
    },
    {
      "question": "Why C/C++ is slower than Assembly and other low level languages?",
      "url": "https://stackoverflow.com/questions/37932277/why-c-c-is-slower-than-assembly-and-other-low-level-languages",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I write a code, doing nothing in C++ </p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span></span>{\n\n}\n</code></pre>\n\n<p>and Assembly.</p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code>.global _start\n.text\n\n_start:\n    mov $<span class=\"hljs-number\">60</span>, %rax\n    <span class=\"hljs-keyword\">xor</span> %rdi, %rdi \n    syscall\n</code></pre>\n\n<p>I compile the C code and compile and link Assembly code. I make a comparison between two executable file with time command.</p>\n\n<p>Assembly </p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code>time ./Assembly\n\nreal    <span class=\"hljs-number\">0</span>m0<span class=\"hljs-number\">.001</span>s\nuser    <span class=\"hljs-number\">0</span>m0<span class=\"hljs-number\">.000</span>s\nsys     <span class=\"hljs-number\">0</span>m0<span class=\"hljs-number\">.000</span>s\n</code></pre>\n\n<p>C</p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code>time ./C\n\nreal    <span class=\"hljs-number\">0</span>m0<span class=\"hljs-number\">.002</span>s\nuser    <span class=\"hljs-number\">0</span>m0<span class=\"hljs-number\">.000</span>s\nsys     <span class=\"hljs-number\">0</span>m0<span class=\"hljs-number\">.000</span>s\n</code></pre>\n\n<p>Assembly is two times faster than C. I disassemble the codes, in Assembly code, there was only four lines code (Same). In the C code, there was tons of unnecessary code writed for linking main to _start. In main there was four lines code, three of that is writed for making <strong>impossible</strong> (you can't access to a function's variable from outside of the function blog) to access '<strong>local</strong>' (like function veriables) variables from outside of '<strong>block</strong>' (like function blocks).</p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code>push %rbp ; push base pointer.\nmov  %rsp, %rbp ; copy value of stack pointer to base pointer, stack pointer is <span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">for</span> saving variables.\npop  %rbp ; <span class=\"hljs-string\">'local'</span> variables are removed, because we pop the base pointer \nretq ; ?\n</code></pre>\n\n<p>What is why of that?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The amount of time required to execute the core of your program you've written is incredibly small. Figure that it consists of three or four assembly instructions, and at several gigahertz that will only require a couple of nanoseconds to run. That's such a small amount of time that it's vastly below the detection threshold for the <code>time</code> program, whose resolution is measured in milliseconds (remember that a millisecond is a million times slower than a nanosecond!) So in that sense, I would be very careful about making judgments about the runtime of one program as being \"twice as fast\" as the other; the resolution of your timer isn't high enough to say that for certain. You might just be seeing noise terms.</p>\n\n<p>Your question, though, was why there is all this automatically generated code if nothing is going to happen. The answer is \"it depends.\" With no optimization turned on, most compilers generate assembly code that faithfully simulates the program you wrote, possibly doing more work than is necessary. Since most C and C++ functions, you actually will have code that does something, will need local variables, etc., a compiler wouldn't be too wrong in emitting code at the start and end of a function to set up the stack and frame pointer properly to support those variables. With optimization turned up to the max, an optimizing compiler might be smart enough to notice that this isn't necessary and to remove that code, but it's not required.</p>\n\n<p>In principle, a perfect compiler would always emit the fastest code possible, but it turns out that it's impossible to build a compiler that will always do this (this has to do with things like the undecidability of the halting problem). Therefore, it's somewhat assumed that the code generated will be good - even great - but not optimal. However, it's a tradeoff. Yes, the code might not be as fast as it could possibly be, but by working in languages like C and C++ it's possible to write large and complex programs in a way that's (compared to assembly) easy to read, easy to write, and easy to maintain. We're okay with the slight performance hit because in practice it's not too bad and most optimizing compilers are good enough to make the price negligible (or even negative, if the optimizing compiler finds a better approach to solving a problem than the human!)</p>\n\n<p>To summarize:</p>\n\n<ul>\n<li><p>Your timing mechanism is probably not sufficient to make the conclusions that you're making. You'll need a higher-precision timer than that.</p></li>\n<li><p>Compilers often generate unnecessary code in the interest of simplicity. Optimizing compilers often remove that code, but can't always.</p></li>\n<li><p>We're okay paying the cost of using higher-level languages in terms of raw runtime because of the ease of development. In fact, it might actually be a net win to use a high-level language with a good optimizing compiler, since it offloads the optimization complexity.</p></li>\n</ul>\n    </div>",
          "vote": "15"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>All the extra time from C is dynamic linker and CRT overhead.  The asm program is statically linked, and just calls <code>exit(2)</code> (the sycall directly, not the glibc wrapper).  Of course it's faster, but it's just startup overhead and doesn't tell you anything about how fast compiler-emitted code that actually does anything will run.</p>\n\n<p>i.e. if you wrote some code to actually do something in C, and compiled it with <code>gcc -O3 -march=native</code>, you'd expect it to be ~0.001 seconds slower than a statically linked binary with no CRT overhead.  (If the your hand-written asm and the compiler output were both near-optimal.  e.g. if you used the compiler output as a starting point for a hand-optimized version, but didn't find anything major.  It's usually possible to make some improvements to compiler output, but often just to code-size and probably not much effect on speed.)</p>\n\n<p>If you want to call <code>malloc</code> or <code>printf</code>, then <strong>the startup overhead is <em>not</em> useless; it's actually necessary to initialize glibc internal data structures</strong> so that library functions don't have any overhead of checking that stuff is initialized every time they're called.</p>\n\n<p>From a statically linked hand-written asm program that links glibc, you need to call <code>__libc_init_first</code>, <code>__dl_tls_setup</code>, and <code>__libc_csu_init</code>, <a href=\"https://stackoverflow.com/questions/36861903/assembling-32-bit-binaries-on-a-64-bit-system-gnu-toolchain/36901649#comment61368106_36901649\">in that order</a>, before you can safely use all libc functions.</p>\n\n<p>Anyway, <strong>ideally you can expect a constant time difference from the startup overhead, not a factor of 2 difference.</strong></p>\n\n<hr>\n\n<p>If you're good at writing optimal asm, you can usually do a better job than the compiler on a local scale, but compilers are really good at global optimizations.  Moreover, they do it in seconds of CPU time (very cheap) instead of weeks of human effort (very precious).</p>\n\n<p>It can make sense to hand-craft a critical loop, e.g. as part of a video encoder, but even video encoders (like x264, x264, and vpx) have most of the logic written in C or C++, and just call asm functions.</p>\n\n<hr>\n\n<p><strong>The extra push/mov/pop instructions are because you compiled with optimization disabled</strong>, where <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html\" rel=\"nofollow noreferrer\"><code>-fno-omit-frame-pointer</code> is the default</a>, and makes a stack frame even for leaf functions.  gcc defaults to <code>-fomit-frame-pointer</code> at <code>-O1</code> and higher on x86 and x86-64 (since modern debug metadata formats mean it's not needed for debugging or exception-handling stack unwinding).</p>\n\n<p>If you'd told your C compiler to make fast code (<code>-O3</code>), instead of to compile quickly and make dumb code that works well in a debugger (<code>-O0</code>), you would have gotten code like this for <code>main</code> (from the <a href=\"http://gcc.godbolt.org/#compilers:!((compiler:g6,options:'-xc+-std%3Dgnu11+-Wall+-Wextra+-fverbose-asm+-O3+-march%3Dhaswell',source:'int+main(void)+%7B%7D')),filterAsm:(commentOnly:!t,directives:!t,intel:!t,labels:!t),version:3\" rel=\"nofollow noreferrer\">Godbolt compiler explorer</a>):</p>\n\n<pre class=\"lang-cpp s-code-block hljs\"><code><span class=\"hljs-comment\">// this is valid C++ and C99, but C89 doesn't have an implicit return 0 in main.  </span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{}\n\n    <span class=\"hljs-keyword\">xor</span>     eax, eax\n    ret\n</code></pre>\n\n<p>To learn more about assembly and how everything works, have a look at some of the links in the <a href=\"/questions/tagged/x86\" class=\"post-tag\" title=\"show questions tagged 'x86'\" rel=\"tag\">x86</a> tag wiki.  Perhaps <a href=\"http://savannah.nongnu.org/projects/pgubook/\" rel=\"nofollow noreferrer\">Programming From the Ground Up</a> would be a good start; it probably explains compilers and dynamic linking.</p>\n\n<p>A much shorter article is <a href=\"http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html\" rel=\"nofollow noreferrer\">A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux</a>, which starts with what you did, and then gets down to having <code>_start</code> overlap with some other ELF headers so the file can be even smaller.</p>\n    </div>",
          "vote": "4"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<ol>\n<li><p>Did you compile with optimizations enabled? If not, then this is invalid.</p></li>\n<li><p>Did you consider that this is a completely trivial example that will have no real-life performance implications worth writing even a postcard about?</p></li>\n</ol>\n\n<p>Please write clear maintainable code and (in 99% of cases) leave the optimization to the compiler. Please.</p>\n    </div>",
          "vote": "0"
        }
      ]
    },

    {
      "question": "What is Perl's equivalent of Python's time.time()? [closed]",
      "url": "https://stackoverflow.com/questions/26724585/what-is-perls-equivalent-of-pythons-time-time",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n            <hr class=\"my12 outline-none baw0 bb bc-powder-400\">\n        <div class=\"grid fw-nowrap fc-black-600\">\n                <div class=\"grid--cell mr8\">\n                    <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                </div>\n            <div class=\"grid--cell lh-md\">\n                <p class=\"mb0\">\n                    <b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/26724585/edit\">editing this post</a>.\n                </p>\n                    <p class=\"mb0 mt6\">Closed <span title=\"2019-12-24 18:07:38Z\" class=\"relativetime\">1 year ago</span>.</p>\n            </div>\n        </div>\n            <div class=\"mt24 grid gsx gs8\">\n                    <a class=\"s-btn s-btn__outlined grid--cell js-post-notice-edit-post\" href=\"/posts/26724585/edit\">\n                        Improve this question\n                    </a>\n            </div>\n</aside>\n\n    </div>\n\n<p>What is the Perl equivalent of Python's <code>time.time()</code>?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><code>Time::HiRes::time()</code> is the equivalent.  If you don't need partial seconds, you can simply use <code>time()</code>, though.</p>\n    </div>",
          "vote": "9"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This will help you to resolve your problem </p>\n\n<pre class=\"default s-code-block hljs perl\"><code>$a = <span class=\"hljs-keyword\">time</span>();  \n<span class=\"hljs-keyword\">print</span> (<span class=\"hljs-string\">\"$a\\n\"</span>); \n</code></pre>\n    </div>",
          "vote": "0"
        }
      ]
    },
    {
      "question": "What is catcomplete in jQuery's autocomplete plugin? [closed]",
      "url": "https://stackoverflow.com/questions/26655534/what-is-catcomplete-in-jquerys-autocomplete-plugin",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Closed</b>. This question needs to be more <a href=\"/help/closed-questions\">focused</a>. It is not currently accepting answers.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n            <hr class=\"my12 outline-none baw0 bb bc-powder-400\">\n        <div class=\"grid fw-nowrap fc-black-600\">\n                <div class=\"grid--cell mr8\">\n                    <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                </div>\n            <div class=\"grid--cell lh-md\">\n                <p class=\"mb0\">\n                    <b>Want to improve this question?</b> Update the question so it focuses on one problem only by <a href=\"/posts/26655534/edit\">editing this post</a>.\n                </p>\n                    <p class=\"mb0 mt6\">Closed <span title=\"2018-10-30 22:35:48Z\" class=\"relativetime\">2 years ago</span>.</p>\n            </div>\n        </div>\n            <div class=\"mt24 grid gsx gs8\">\n                    <a class=\"s-btn s-btn__outlined grid--cell js-post-notice-edit-post\" href=\"/posts/26655534/edit\">\n                        Improve this question\n                    </a>\n            </div>\n</aside>\n\n    </div>\n\n<p>The JQuery UI autocomplete plugin uses the <code>catcomplete</code> function. I'm new to the JQuery syntax, can you help me to understand how to read it?</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-string\">\"#searchTextBox\"</span>).catcomplete({\n    <span class=\"hljs-attr\">minLength</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">source</span>: $(<span class=\"hljs-string\">\"#searchTextBox\"</span>).data(<span class=\"hljs-string\">\"url\"</span>),\n    <span class=\"hljs-attr\">open</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        $(<span class=\"hljs-string\">\".ui-autocomplete\"</span>).css({\n            <span class=\"hljs-attr\">left</span>: $(<span class=\"hljs-string\">\".ui-autocomplete\"</span>).position().left - <span class=\"hljs-number\">50</span> + <span class=\"hljs-string\">\"px\"</span>,\n            <span class=\"hljs-attr\">top</span>: $(<span class=\"hljs-string\">\".ui-autocomplete\"</span>).position().top - <span class=\"hljs-number\">12</span> + <span class=\"hljs-string\">\"px\"</span>\n        });\n    },\n    <span class=\"hljs-attr\">select</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">event, ui</span>) </span>{\n        <span class=\"hljs-comment\">/*code*/</span>\n    }\n});\n</code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>What is catcomplete?</p>\n</blockquote>\n\n<p><code>catcomplete</code> is a property that appears on jQuery objects. It is not part of core jQuery so there is presumably some other script on the page that is adding it.</p>\n\n<blockquote>\n  <p>How does jQuery's autocomplete call it? </p>\n</blockquote>\n\n<p>I can't find <code>catcomplete</code> mentioned anywhere in the documentation for autocomplete, so it probably doesn't. It just modifies the CSS of elements in the page with class names that suggest they are normally influenced by autocomplete.</p>\n\n<blockquote>\n  <p>What are minLength, source, open and select? </p>\n</blockquote>\n\n<p>Properties of the object that gets passed as an argument to the <code>catcomplete</code> complete function. You should read the catcomplete documentation to find out what they mean.</p>\n\n<blockquote>\n  <p>Who decided their name? </p>\n</blockquote>\n\n<p>The author(s) of catcomplete</p>\n\n<blockquote>\n  <p>Which part of the code knows how to use them? </p>\n</blockquote>\n\n<p>The catcomplete script</p>\n\n<blockquote>\n  <p>Are they a part of standard jQuery?</p>\n</blockquote>\n\n<p>No.</p>\n\n<blockquote>\n  <p>Is catcomplete a function?</p>\n</blockquote>\n\n<p>Yes, it has <code>(…)</code> after it to call it and does not (presumably) throw an exception.</p>\n\n<blockquote>\n  <p>What is <code>$(\"#searchTextBox\").Example({})?</code> doing? Am I defining an array and passing it to a function called Example?</p>\n</blockquote>\n\n<p>No. You are creating an object. An array would be <code>[]</code>. </p>\n\n<blockquote>\n  <p>Or am I defining a function called Example which initializes an anonymous Array?</p>\n</blockquote>\n\n<p>No. That would be:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Example</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> foo = [];\n}\n</code></pre>\n    </div>",
          "vote": "25"
        }
      ]
    },
    {
      "question": "How to place a div over a image? [closed]",
      "url": "https://stackoverflow.com/questions/17492888/how-to-place-a-div-over-a-image",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Closed</b>. This question needs <a href=\"/help/closed-questions\">details or clarity</a>. It is not currently accepting answers.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n            <hr class=\"my12 outline-none baw0 bb bc-powder-400\">\n        <div class=\"grid fw-nowrap fc-black-600\">\n                <div class=\"grid--cell mr8\">\n                    <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                </div>\n            <div class=\"grid--cell lh-md\">\n                <p class=\"mb0\">\n                    <b>Want to improve this question?</b> Add details and clarify the problem by <a href=\"/posts/17492888/edit\">editing this post</a>.\n                </p>\n                    <p class=\"mb0 mt6\">Closed <span title=\"2013-12-27 02:31:17Z\" class=\"relativetime\">7 years ago</span>.</p>\n            </div>\n        </div>\n            <div class=\"mt24 grid gsx gs8\">\n                    <a class=\"s-btn s-btn__outlined grid--cell js-post-notice-edit-post\" href=\"/posts/17492888/edit\">\n                        Improve this question\n                    </a>\n            </div>\n</aside>\n\n    </div>\n\n<p>I want to place a <code>&lt;div&gt;</code> over an <code>&lt;img&gt;</code>.</p>\n<p>Here's the HTML:</p>\n<p></p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-css lang-css s-code-block hljs\"><code><span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#cCa</span>;\n}\n\n<span class=\"hljs-selector-class\">.image</span> {\n  <span class=\"hljs-attribute\">position</span>: relative;\n  <span class=\"hljs-attribute\">background-repeat</span>: no-repeat;\n}\n\n<span class=\"hljs-selector-class\">.content</span> {\n  <span class=\"hljs-attribute\">background-color</span>: lightGrey;\n  <span class=\"hljs-attribute\">position</span>: absolute;\n  <span class=\"hljs-attribute\">overflow</span>: none;\n  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">40px</span>;\n  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">40px</span>;\n}</code></pre>\n<pre class=\"snippet-code-html lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.2/css/bootstrap.min.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span>/&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/2.3.2/css/bootstrap-responsive.min.css\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span>/&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container-fluid\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"row-fluid\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"span12\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"image\"</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"css_js/img/image.jpg\"</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content img-circle\"</span>&gt;</span>[content]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre>\n<div class=\"snippet-result\"><div class=\"snippet-ctas\"><button type=\"button\" class=\"s-btn s-btn__primary\"><span class=\"icon-play-white _hover\"></span><span> Run code snippet</span></button><input class=\"copySnippet s-btn s-btn__filled\" value=\"Copy snippet to answer\" style=\"display: none;\" type=\"button\"><button type=\"button\" class=\"s-btn hideResults\" style=\"display: none;\">Hide results</button><div class=\"popout-code\"><a class=\"snippet-expand-link\">Expand snippet</a></div></div><div class=\"snippet-result-code\" style=\"display: none;\"><iframe name=\"sif1\" sandbox=\"allow-forms allow-modals allow-scripts\" class=\"snippet-box-edit snippet-box-result\" frameborder=\"0\"></iframe></div></div></div>\n</div>\n<p></p>\n<p>More info with pics:</p>\n<p>This is how it looks like when the window viewport is large.<br>\n<img src=\"https://i.stack.imgur.com/c40Xi.png\" alt=\"enter image description here\"></p>\n<p>This is how it looks like when the window viewport is small.<br>\n<img src=\"https://i.stack.imgur.com/ODAoi.png\" alt=\"enter image description here\"></p>\n<p>Ideas on how to fix it? Any help would be great!</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Try setting the <code>z-index</code> property of the content <code>div</code> higher than the image, like this:</p>\n\n<pre class=\"lang-css s-code-block hljs\"><code><span class=\"hljs-selector-class\">.content</span>{\n    <span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">3</span>;\n}\n</code></pre>\n\n<p>This will make it so that the content <code>div</code> will be above the image.  To make it get bigger as the browser gets smaller, you are going to need to use media queries. These are tags that you include in your head that will allow you to load different CSS files based on the size of the screen.  Basically, you should just have larger font settings for the CSS files loaded when the screen is smaller.  If you're unfamiliar with media queries, this is a good place to read up on them: <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries</a>.  Good luck!</p>\n\n<p>UPDATE:</p>\n\n<p>Based on your comment, you should change your code to this: </p>\n\n<pre class=\"lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"span12\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"image\"</span>&gt;</span> \n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"css_js/img/image.jpg\"</span>&gt;</span> \n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"content img-circle\"</span>&gt;</span>[content]<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n\n<p>This makes it so that the <code>img</code> and <code>.content</code> are wrapped by the <code>.image</code>. Then, in your CSS file, add this rule:</p>\n\n<pre class=\"lang-css s-code-block hljs\"><code><span class=\"hljs-selector-class\">.content</span>{\n    <span class=\"hljs-attribute\">position</span>: relative;\n}\n</code></pre>\n\n<p>This will change the position of content relative to where the image <code>div</code> is located. Read up on the <code>position</code> property to learn how to move the <code>.content</code> around. You will still need media queries to update the size/position of the <code>div</code> in response to the browser size changing though.</p>\n    </div>",
          "vote": "42"
        }
      ]
    },
    {
      "question": "How to remove or hide powered by text from Google Translate",
      "url": "https://stackoverflow.com/questions/24281192/how-to-remove-or-hide-powered-by-text-from-google-translate",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Is it possible to hide or remove the <code>Powered by Google Translate</code> on the dropdown in Google Translate?</p>\n<p>I have removed the logo part, but couldn't remove the <code>Powered by</code> text.</p>\n<p>Here's the code:</p>\n<pre class=\"lang-html s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"google_translate_element\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">googleTranslateElementInit</span>(<span class=\"hljs-params\"></span>) </span>{\n      <span class=\"hljs-keyword\">new</span> google.translate.TranslateElement({<span class=\"hljs-attr\">pageLanguage</span>: <span class=\"hljs-string\">'en'</span>, <span class=\"hljs-attr\">layout</span>: google.translate.TranslateElement.InlineLayout.HORIZONTAL}, <span class=\"hljs-string\">'google_translate_element'</span>);\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"//translate.google.com/translate_a/element.js?cb=googleTranslateElementInit\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You can add these lines of code in your CSS file:</p>\n<pre class=\"lang-css s-code-block hljs\"><code><span class=\"hljs-selector-class\">.goog-logo-link</span> {\n    <span class=\"hljs-attribute\">display</span>:none <span class=\"hljs-meta\">!important</span>;\n} \n    \n<span class=\"hljs-selector-class\">.goog-te-gadget</span>{\n    <span class=\"hljs-attribute\">color</span>: transparent <span class=\"hljs-meta\">!important</span>;\n}\n</code></pre>\n    </div>",
          "vote": "38"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>This CSS worked for me:</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>.goog-logo-link {\n   <span class=\"hljs-attr\">display</span>:none !important;\n}\n\n.goog-te-gadget {\n   <span class=\"hljs-attr\">color</span>: transparent !important;\n}\n\n.goog-te-gadget .goog-te-combo {\n   <span class=\"hljs-attr\">color</span>: blue !important;\n}\n</code></pre>\n    </div>",
          "vote": "5"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Although, previous answers regarding <code>display: none</code> and <code>color: transparent</code> may work. I use this solution to <strong>completely erase text from html</strong>, if you want lets say style the box itself.</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-built_in\">window</span>).load(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    $(<span class=\"hljs-string\">\".goog-logo-link\"</span>).empty();\n    $(<span class=\"hljs-string\">'.goog-te-gadget'</span>).html($(<span class=\"hljs-string\">'.goog-te-gadget'</span>).children());\n})\n</code></pre>\n\n<p>I use jQuery in this example, however you can switch to JavaScript if you want.</p>\n    </div>",
          "vote": "3"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Add the css to your stylesheet</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>#google_translate_element {\n  <span class=\"hljs-attr\">color</span>: transparent;\n}\n#google_translate_element a {\n  <span class=\"hljs-attr\">display</span>: none;\n}\n</code></pre>\n\n<p>The first line will hide the text and the second line will hide the google translate logo.</p>\n\n<p>Test it in all browsers to make sure you do not hide make the dropdown text transparent. If so, add this:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>select.google_translate_element {\n  <span class=\"hljs-attr\">color</span>: black;\n}\n</code></pre>\n\n<p><strong>to remove the \"Powered by\" text</strong></p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>div.goog-te-gadget {\n  <span class=\"hljs-attr\">color</span>: transparent !important;\n}\n</code></pre>\n\n<p>Note: I am not sure whether it is within the terms and conditions of use that you are allowed to hide the Google logo, but this should work.</p>\n    </div>",
          "vote": "1"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I am using following to remove google poweredby link or image </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>#google_translate_element img\n        {\n            <span class=\"hljs-attr\">display</span>: none !important;\n        }\n</code></pre>\n\n<p>Try this to remove logo from language translator i am sure</p>\n    </div>",
          "vote": "0"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-js s-code-block hljs javascript\"><code>$(<span class=\"hljs-built_in\">window</span>).load(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  $(<span class=\"hljs-string\">\".goog-logo-link\"</span>).parent().remove();\n  $(<span class=\"hljs-string\">\".goog-te-gadget\"</span>).html(\n    $(<span class=\"hljs-string\">\".goog-te-gadget\"</span>).html().replace(<span class=\"hljs-string\">'&amp;nbsp;&amp;nbsp;Powered by '</span>, <span class=\"hljs-string\">''</span>)\n  );\n});\n</code></pre>\n    </div>",
          "vote": "0"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-js s-code-block hljs javascript\"><code>.goog-te-gadget {line-height: 2px !important;color: transparent;}\n</code></pre>\n    </div>",
          "vote": "0"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<pre class=\"lang-js s-code-block hljs javascript\"><code>#google_translate_element { <span class=\"hljs-attr\">height</span>: 26px !important; overflow: hidden !important; }\n</code></pre>\n    </div>",
          "vote": "0"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Tried the code above and it did work to hide the \"Powered by\", but it did remove the not the Google Translate section.\nWhat I did and it worked was add below code to the google-language-translators <code>style.css</code> in the css folder within the plugin.        </p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>.goog-logo-link, .goog-logo-link:link, .goog-logo-link:visited, .goog-logo-link:hover, .goog-logo-link:active {\n    <span class=\"hljs-attr\">color</span>: #<span class=\"hljs-number\">444</span>;\n    **display: none;**\n    font-size: 12px;\n    font-weight: bold;\n    text-decoration: none;\n}\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/b1ZlD.png\" rel=\"nofollow noreferrer\">See Plugin active on http://sethucurryhouse.com/</a></p>\n    </div>",
          "vote": "-1"
        }
      ]
    },
    {
      "question": "How to find all the indexes of all the occurrences of a word in a string [duplicate]",
      "url": "https://stackoverflow.com/questions/35185374/how-to-find-all-the-indexes-of-all-the-occurrences-of-a-word-in-a-string",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>This question already has answers here</b>:\n                        \n                    </div>\n                </div>\n            </div>\n                    <div class=\"grid--cell mb0 mt4\">\n                        <a href=\"/questions/4664850/how-to-find-all-occurrences-of-a-substring\" dir=\"ltr\">How to find all occurrences of a substring?</a>\n                            <span class=\"question-originals-answer-count\">\n                                (21 answers)\n                            </span>\n                    </div>\n                <div class=\"grid--cell mb0 mt8\">Closed <span title=\"2016-02-05 15:38:34Z\" class=\"relativetime\">5 years ago</span>.</div>\n        </div>\n</aside>\n\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M16 9a2 2 0 00-2-2V6A5 5 0 004 6v1a2 2 0 00-2 2v6c0 1.1.9 2 2 2h10a2 2 0 002-2V9zm-7 5a2 2 0 110-4 2 2 0 010 4zm3.1-7H5.9V6a3.1 3.1 0 016.2 0v1z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Locked</b>. There are <a href=\"/help/locked-posts\">disputes about this question’s content</a> being resolved at this time. It is not currently accepting new answers or interactions.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n</aside>\n\n    </div>\n\n<p>This is my code:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>sentence = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Give me a sentence \"</span>)\n\nword = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"What word would you like to find \"</span>)\n\n\nsentence_split = sentence.split()\n\n\n<span class=\"hljs-keyword\">if</span> word <span class=\"hljs-keyword\">in</span> sentence_split:\n   <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"have found\"</span>,word,)\n   <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"The word comes in the position\"</span> )\n<span class=\"hljs-keyword\">else</span>:\n   <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"error have not found\"</span>,word)\n\nwordfound = (sentence_split.index(word)+<span class=\"hljs-number\">1</span>)\n\n<span class=\"hljs-built_in\">print</span>(wordfound)\n</code></pre>\n\n<p>I am able to get the index of the <em>first</em> occurrence of a word in string. How can I get <strong>all</strong> of the occurrences?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Use <a href=\"https://docs.python.org/3/library/re.html#re.finditer\"><code>re.finditer</code></a>:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code><span class=\"hljs-keyword\">import</span> re\nsentence = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Give me a sentence \"</span>)\nword = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"What word would you like to find \"</span>)\n<span class=\"hljs-keyword\">for</span> match <span class=\"hljs-keyword\">in</span> re.finditer(word, sentence):\n    <span class=\"hljs-built_in\">print</span> (match.start(), match.end())\n</code></pre>\n\n<p>For <code>word = \"this\"</code> and <code>sentence = \"this is a sentence this this\"</code> this will yield the output:</p>\n\n<pre class=\"lang-py s-code-block hljs python\"><code>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">4</span>)\n(<span class=\"hljs-number\">19</span>, <span class=\"hljs-number\">23</span>)\n(<span class=\"hljs-number\">24</span>, <span class=\"hljs-number\">28</span>)\n</code></pre>\n    </div>",
          "vote": "68"
        }
      ]
    },
    {
      "question": "Single layer neural network [closed]",
      "url": "https://stackoverflow.com/questions/3455660/single-layer-neural-network",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        This question is unlikely to help any future visitors; it is only relevant to a small geographic area, a specific moment in time,   or an extraordinarily narrow situation that is not generally applicable to the worldwide audience of the internet. For help making   this question more broadly applicable, <a href=\"/help/reopen-questions\">visit the help center</a>.\n                        \n                    </div>\n                </div>\n            </div>\n                <div class=\"grid--cell mb0 mt8\">Closed <span title=\"2013-01-08 23:06:51Z\" class=\"relativetime\">8 years ago</span>.</div>\n        </div>\n</aside>\n\n    </div>\n\n<p>For the implementation of single layer neural network, I have two data files.</p>\n\n<pre class=\"lang-matlab s-code-block hljs\"><code>In:\n    <span class=\"hljs-number\">0.832</span> <span class=\"hljs-number\">64.643</span>\n    <span class=\"hljs-number\">0.818</span> <span class=\"hljs-number\">78.843</span>\n\nOut:\n    <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>\n</code></pre>\n\n<p>The above is the format of 2 data files.</p>\n\n<p>The target output is \"1\" for a particular class that the corresponding input belongs to and \"0\" for the remaining 2 outputs.</p>\n\n<p>The problem is as follows:</p>\n\n<blockquote>\n  <p>Your single layer neural network will\n  find A (3 by 2 matrix) and b (3 by 1\n  vector) in Y = A*X + b where Y is [C1,\n  C2, C3]' and X is [x1, x2]'.</p>\n  \n  <p>To solve the problem above with a\n  neural network, we can re-write the\n  equation as follow: Y = A' * X' where\n  A' = [A b] (3 by 3 matrix) and X' is\n  [x1, x2, 1]'</p>\n  \n  <p>Now you can use a neural network with\n  three input nodes (one for x1, x2, and\n  1 respectively) and three outputs (C1,\n  C2, C3).</p>\n  \n  <p>The resulting 9 (since we have 9\n  connections between 3 inputs and 3\n  outputs) weights will be equivalent to\n  elements of A' matrix.</p>\n</blockquote>\n\n<p>Basicaly, I am trying to do something like this, but it is not working:</p>\n\n<pre class=\"lang-matlab s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">neuralNetwork</span>   </span>\n    load X_Q2.data\n    load T_Q2.data\n    x = X_Q2(:,<span class=\"hljs-number\">1</span>);\n    y = X_Q2(:,<span class=\"hljs-number\">2</span>);\n\n    learningrate = <span class=\"hljs-number\">0.2</span>;\n    max_iteration = <span class=\"hljs-number\">50</span>;\n\n    <span class=\"hljs-comment\">% initialize parameters</span>\n    count = <span class=\"hljs-built_in\">length</span>(x);\n    weights = <span class=\"hljs-built_in\">rand</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">% creates a 1-by-3 array with random weights</span>\n    globalerror = <span class=\"hljs-number\">0</span>;\n    iter = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> globalerror ~= <span class=\"hljs-number\">0</span> &amp;&amp; iter &lt;= max_iteration\n        iter = iter + <span class=\"hljs-number\">1</span>;\n        globalerror = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">for</span> p = <span class=\"hljs-number\">1</span>:count\n            output = calculateOutput(weights,x(p),y(p));\n            localerror = T_Q2(p) - output\n            weights(<span class=\"hljs-number\">1</span>)= weights(<span class=\"hljs-number\">1</span>) + learningrate *localerror*x(p);\n            weights(<span class=\"hljs-number\">2</span>)= weights(<span class=\"hljs-number\">1</span>) + learningrate *localerror*y(p);\n            weights(<span class=\"hljs-number\">3</span>)= weights(<span class=\"hljs-number\">1</span>) + learningrate *localerror;\n            globalerror = globalerror + (localerror*localerror);\n        <span class=\"hljs-keyword\">end</span> \n    <span class=\"hljs-keyword\">end</span> \n</code></pre>\n\n<p>I write this function in some other file and calling it in my previous code.</p>\n\n<pre class=\"lang-matlab s-code-block hljs\"><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">result</span> = <span class=\"hljs-title\">calculateOutput</span> <span class=\"hljs-params\">(weights, x, y)</span></span>\n    s = x * weights(<span class=\"hljs-number\">1</span>) + y * weights(<span class=\"hljs-number\">2</span>) + weights(<span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-keyword\">if</span> s &gt;= <span class=\"hljs-number\">0</span>\n        result = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">else</span>\n        result = <span class=\"hljs-number\">-1</span>;\n    <span class=\"hljs-keyword\">end</span>\n</code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>I can spot a few problems with the code. The main issue is that the target is <a href=\"http://en.wikipedia.org/wiki/Multiclass_classification\" rel=\"nofollow noreferrer\">multi-class</a> (not <a href=\"http://en.wikipedia.org/wiki/Binary_classification\" rel=\"nofollow noreferrer\">binary</a>), so you need to either use 3 output nodes one for each class (called <a href=\"http://en.wikipedia.org/wiki/Indicator_function\" rel=\"nofollow noreferrer\">1-of-N encoding</a>), or use a single output node with a different <a href=\"http://en.wikipedia.org/wiki/Activation_function\" rel=\"nofollow noreferrer\">activation function</a> (something capable of more than just binary output -1/1 or 0/1)</p>\n\n<p>In the solution below, the <a href=\"http://en.wikipedia.org/wiki/Linear_perceptron\" rel=\"nofollow noreferrer\">perceptron</a> has the following structure:</p>\n\n<p><img src=\"https://i.stack.imgur.com/3kqKn.png\" alt=\"perceptron_strucutre\"></p>\n\n<pre class=\"lang-matlab s-code-block hljs\"><code><span class=\"hljs-comment\">%# load your data</span>\ninput = [\n    <span class=\"hljs-number\">0.832</span> <span class=\"hljs-number\">64.643</span>\n    <span class=\"hljs-number\">0.818</span> <span class=\"hljs-number\">78.843</span>\n    <span class=\"hljs-number\">1.776</span> <span class=\"hljs-number\">45.049</span>\n    <span class=\"hljs-number\">0.597</span> <span class=\"hljs-number\">88.302</span>\n    <span class=\"hljs-number\">1.412</span> <span class=\"hljs-number\">63.458</span>\n];\ntarget = [\n    <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-number\">0</span>\n    <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span>\n];\n\n<span class=\"hljs-comment\">%# parameters of the learning algorithm</span>\nLEARNING_RATE = <span class=\"hljs-number\">0.1</span>;\nMAX_ITERATIONS = <span class=\"hljs-number\">100</span>;\nMIN_ERROR = <span class=\"hljs-number\">1e-4</span>;\n\n[numInst numDims] = <span class=\"hljs-built_in\">size</span>(input);\nnumClasses = <span class=\"hljs-built_in\">size</span>(target,<span class=\"hljs-number\">2</span>);\n\n<span class=\"hljs-comment\">%# three output nodes connected to two-dimensional input nodes + biases</span>\nweights = <span class=\"hljs-built_in\">randn</span>(numClasses, numDims+<span class=\"hljs-number\">1</span>);\n\nisDone = <span class=\"hljs-built_in\">false</span>;               <span class=\"hljs-comment\">%# termination flag</span>\niter = <span class=\"hljs-number\">0</span>;                     <span class=\"hljs-comment\">%# iterations counter</span>\n<span class=\"hljs-keyword\">while</span> ~isDone\n    iter = iter + <span class=\"hljs-number\">1</span>;\n\n    <span class=\"hljs-comment\">%# for each instance</span>\n    err = <span class=\"hljs-built_in\">zeros</span>(numInst,numClasses);\n    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-number\">1</span>:numInst\n        <span class=\"hljs-comment\">%# compute output: Y = W*X + b, then apply threshold activation</span>\n        output = ( weights * [input(<span class=\"hljs-built_in\">i</span>,:)';<span class=\"hljs-number\">1</span>] &gt;= <span class=\"hljs-number\">0</span> );                       <span class=\"hljs-comment\">%#'</span>\n\n        <span class=\"hljs-comment\">%# error: err = T - Y</span>\n        err(<span class=\"hljs-built_in\">i</span>,:) = target(<span class=\"hljs-built_in\">i</span>,:)' - output;                                  <span class=\"hljs-comment\">%#'</span>\n\n        <span class=\"hljs-comment\">%# update weights (delta rule): delta(W) = alpha*(T-Y)*X</span>\n        weights = weights + LEARNING_RATE * err(<span class=\"hljs-built_in\">i</span>,:)' * [input(<span class=\"hljs-built_in\">i</span>,:) <span class=\"hljs-number\">1</span>];    <span class=\"hljs-comment\">%#'</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-comment\">%# Root mean squared error</span>\n    rmse = <span class=\"hljs-built_in\">sqrt</span>(sum(err.^<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">1</span>)/numInst);\n    fprintf([<span class=\"hljs-string\">'Iteration %d: '</span> <span class=\"hljs-built_in\">repmat</span>(<span class=\"hljs-string\">'%f '</span>,<span class=\"hljs-number\">1</span>,numClasses) <span class=\"hljs-string\">'\\n'</span>], iter, rmse);\n\n    <span class=\"hljs-comment\">%# termination criteria</span>\n    <span class=\"hljs-keyword\">if</span> ( iter &gt;= MAX_ITERATIONS || all(rmse &lt; MIN_ERROR) )\n        isDone = <span class=\"hljs-built_in\">true</span>;\n    <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-comment\">%# plot points and one-against-all decision boundaries</span>\n[~,group] = <span class=\"hljs-built_in\">max</span>(target,[],<span class=\"hljs-number\">2</span>);                     <span class=\"hljs-comment\">%# actual class of instances</span>\ngscatter(input(:,<span class=\"hljs-number\">1</span>), input(:,<span class=\"hljs-number\">2</span>), group), <span class=\"hljs-built_in\">hold</span> on\nxLimits = get(gca,<span class=\"hljs-string\">'xlim'</span>); yLimits = get(gca,<span class=\"hljs-string\">'ylim'</span>);\n<span class=\"hljs-keyword\">for</span> <span class=\"hljs-built_in\">i</span>=<span class=\"hljs-number\">1</span>:numClasses\n    ezplot(sprintf(<span class=\"hljs-string\">'%f*x + %f*y + %f'</span>, weights(<span class=\"hljs-built_in\">i</span>,:)), xLimits, yLimits)\n<span class=\"hljs-keyword\">end</span>\ntitle(<span class=\"hljs-string\">'Perceptron decision boundaries'</span>)\n<span class=\"hljs-built_in\">hold</span> off\n</code></pre>\n\n<p>The results of training over the five sample you provided:</p>\n\n<pre class=\"lang-matlab s-code-block hljs\"><code>Iteration <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">0.447214</span> <span class=\"hljs-number\">0.632456</span> <span class=\"hljs-number\">0.632456</span> \nIteration <span class=\"hljs-number\">2</span>: <span class=\"hljs-number\">0.000000</span> <span class=\"hljs-number\">0.447214</span> <span class=\"hljs-number\">0.447214</span> \n...\nIteration <span class=\"hljs-number\">49</span>: <span class=\"hljs-number\">0.000000</span> <span class=\"hljs-number\">0.447214</span> <span class=\"hljs-number\">0.447214</span> \nIteration <span class=\"hljs-number\">50</span>: <span class=\"hljs-number\">0.000000</span> <span class=\"hljs-number\">0.632456</span> <span class=\"hljs-number\">0.000000</span> \nIteration <span class=\"hljs-number\">51</span>: <span class=\"hljs-number\">0.000000</span> <span class=\"hljs-number\">0.447214</span> <span class=\"hljs-number\">0.000000</span> \nIteration <span class=\"hljs-number\">52</span>: <span class=\"hljs-number\">0.000000</span> <span class=\"hljs-number\">0.000000</span> <span class=\"hljs-number\">0.000000</span> \n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/BZymo.png\" alt=\"plot\"></p>\n\n<p>Note that the data used in the example above only contains 5 samples. You would get more meaningful results if you had more training instances in each class.</p>\n    </div>",
          "vote": "225"
        }
      ]
    },
    {
      "question": "Why does i|= j|= k|= (j+= i) - - (k+++k) - - (i =+j) == 11? [closed]",
      "url": "https://stackoverflow.com/questions/13519990/why-does-i-j-k-j-i-kk-i-j-11",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Closed.</b> This question needs <a href=\"/help/closed-questions\">debugging details</a>. It is not currently accepting answers.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n            <hr class=\"my12 outline-none baw0 bb bc-powder-400\">\n        <div class=\"grid fw-nowrap fc-black-600\">\n                <div class=\"grid--cell mr8\">\n                    <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                </div>\n            <div class=\"grid--cell lh-md\">\n                <p class=\"mb0\">\n                    <b>Want to improve this question?</b> Update the question so it's <a href=\"/help/on-topic\">on-topic</a> for Stack Overflow.\n                </p>\n                    <p class=\"mb0 mt6\">Closed <span title=\"2021-03-15 21:49:09Z\" class=\"relativetime\">last month</span>.</p>\n            </div>\n        </div>\n            <div class=\"mt24 grid gsx gs8\">\n                    <a class=\"s-btn s-btn__outlined grid--cell js-post-notice-edit-post\" href=\"/posts/13519990/edit\">\n                        Improve this question\n                    </a>\n            </div>\n</aside>\n\n    </div>\n\n<p>I came across this code in a project I have started working on. The original developer is no longer available, and I can't make any sense of it:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>k = (j = (i = <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">return</span> i|= j|= k|= (j+= i) - - (k+++k) - - (i =+j);\n</code></pre>\n\n<p>It produces a value of <code>11</code>. How does this work?</p>\n\n<ul>\n<li>What is the <code>=+</code> operator?</li>\n<li>What is the <code>+++</code> operator?</li>\n<li>What is the <code>- -</code> operator?</li>\n<li>What is the <code>|=</code> operator?</li>\n</ul>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>What is the <code>=+</code> operator?</p>\n</blockquote>\n\n<p>That's two operators, one assignment operator, <code>=</code>, and one unary plus, <code>+</code>, which does nothing.</p>\n\n<p>Did you typo and mean the compund assignment operator <code>+=</code>?</p>\n\n<blockquote>\n  <p>What is the <code>+++</code> operator?</p>\n</blockquote>\n\n<p>Also two operators, one post-increment, <code>++</code>, and one addition, <code>+</code>, (per the maximal munch rule, the longest valid token is chosen, it would become one addition and two unary plus if the shortest valid token were chosen).</p>\n\n<blockquote>\n  <p>What is the <code>- -</code> operator?</p>\n</blockquote>\n\n<p>Again two operators, one subtraction, and one unary minus (negation).</p>\n\n<blockquote>\n  <p>What is the <code>|=</code> operator?</p>\n</blockquote>\n\n<p>A compound assignment, bitwise-oring [or, in the case of <code>boolean</code> values, logical-oring] the left-hand-side value with the right-hand-side value and storing that in the left-hand-side variable.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>a |= b;\n</code></pre>\n\n<p>is nearly equivalent to</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>a = a | b;\n</code></pre>\n\n<p>but the left-hand-side operand is evaluated only once, and the latter may need an explicit cast where the former doesn't.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>k = (j = (i = <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">return</span> i|= j|= k|= (j+= i) - - (k+++k) - - (i =+j);\n</code></pre>\n\n<blockquote>\n  <p>It produces a value of 11. How does this work?</p>\n</blockquote>\n\n<p>The first line is equivalent to</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>i = <span class=\"hljs-number\">0</span>;\nj = i+<span class=\"hljs-number\">2</span>;\nk = j+<span class=\"hljs-number\">1</span>;\n</code></pre>\n\n<p>The assignment (<code>i = 0</code> for example) evaluates to the value stored (in <code>i</code> here).</p>\n\n<p>The next line is, with proper spacing, and implicit parentheses added</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">return</span> i |= (j |= (k |= (((j += i) - (-(k++ + k))) - (-(i = +j)))));\n</code></pre>\n\n<ul>\n<li><p><code>i |= stuff_1</code>: <code>i</code> is evaluated (0), <code>stuff_1</code> is evaluated, the bitwise or is taken, and the result stored in <code>i</code>. Since <code>i</code> is originally 0, that is equivalent to <code>i = stuff_1</code>.</p></li>\n<li><p><code>j |= stuff_2</code>: <code>j</code> is evaluated (2), <code>stuff_2</code> is evaluated, the bitwise or is taken, and the result is stored in <code>j</code>.</p></li>\n<li><p><code>k |= stuff_3</code>: <code>k</code> is evaluated (3), then <code>stuff_3</code>, left-to-right.</p>\n\n<ul>\n<li><code>(j += i)</code> adds <code>i</code> to <code>j</code>, stores the sum in <code>j</code> and returns <code>j</code>'s new value.\nSince <code>i</code> is 0, <code>j</code> doesn't change and the value is 2.</li>\n<li><code>(k++ + k)</code> takes the old value of <code>k</code> (3), increments <code>k</code> and adds <code>k</code>'s new value (4), resulting in 7. That value is negated, and the negated value (-7) subtracted from 2, resulting in <code>2 - (-7) = 9</code>.</li>\n<li><p><code>(i = +j)</code> stores the value of <code>j</code> (2) in <code>i</code> and the value of the expression is also 2. The value is negated (-2) and subtracted from the 9 we got from the previous operations, so <code>stuff_3</code> evaluates to 11, with the side effects that</p>\n\n<ul>\n<li>the stored value of <code>i</code> is now 2</li>\n<li>the stored value of <code>j</code> is now 2 (didn't actually change, since <code>i</code> was 0 initially)</li>\n<li>the stored value of <code>k</code> is now 4</li>\n</ul></li>\n<li>the old value of <code>k</code> (3) is bitwise or'ed with 11, resulting in 11, that is stored in <code>k</code>, and 11 is the value of <code>stuff_2</code>, which is <code>k |= stuff_3</code>.</li>\n</ul></li>\n<li><p>the old value of <code>j</code> (2) is bitwise or'ed with the value of <code>stuff_2</code> (11), resulting in 11. The value is stored in <code>j</code>, and the value of <code>stuff_1</code> (<code>j |= stuff_2</code>) is 11.</p></li>\n<li><p>the old value of <code>i</code> (0) is bitwise or'ed with the value of <code>stuff_1</code> (11), the result sored in <code>i</code>, and the value of <code>i |= stuff_1</code> is 11. That value is then returned.</p></li>\n</ul>\n    </div>",
          "vote": "220"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<blockquote>\n  <p>The original developer is no longer available, and I can't make any sense of it.</p>\n</blockquote>\n\n<p>The original developer has deliberately left a torturous assignment question in the code.</p>\n\n<p>This is exactly the same answer given by Daniel Fischer, but to clearly explain, I'll evaluate in steps corresponding to the evaluation order.</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>k = (j = (i = <span class=\"hljs-number\">0</span>) + <span class=\"hljs-number\">2</span>) + <span class=\"hljs-number\">1</span>;\n</code></pre>\n\n<p>With parenthesis &amp; operator precedence, is evaluated as:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>i = <span class=\"hljs-number\">0</span>;    \nj = i + <span class=\"hljs-number\">2</span>;  <span class=\"hljs-comment\">// j = 2</span>\nk = j + <span class=\"hljs-number\">1</span>;  <span class=\"hljs-comment\">// k = 3</span>\n\n<span class=\"hljs-keyword\">return</span> i|= j|= k|= (j+= i) - - (k+++k) - - (i =+j);\n</code></pre>\n\n<p>Expanding the \"|=\" operators, this is equivalent to:</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">return</span> i = i | ( j = j | ( k = k | ( (j+= i) - - (k+++k) - - (i =+j) ) ) );\n</code></pre>\n\n<p>Left of \"|\" operator is always evaluated first and remembered, so substituting variable values into left side: </p>\n\n<pre class=\"lang-java s-code-block hljs\"><code><span class=\"hljs-keyword\">return</span> i = <span class=\"hljs-number\">0</span> | ( j = <span class=\"hljs-number\">2</span> | ( k = <span class=\"hljs-number\">3</span> | ( (j+= i) - - (k+++k) - - (i =+j) ) ) );\n</code></pre>\n\n<p>Then evaluating right side of each \"|\" operator (with parenthesis, operator and left-to-right precedence):</p>\n\n<pre class=\"lang-java s-code-block hljs\"><code>(j+= i):   pre-increments j = j + i;            <span class=\"hljs-comment\">//  j = 2 + 0 = 2</span>\n           then expression evaluates to j       <span class=\"hljs-comment\">//  evaluates to 2                   </span>\n\n(k+++k):   first evaluates k++                  <span class=\"hljs-comment\">//  sub-expression evaluates to 3, </span>\n                                                <span class=\"hljs-comment\">//  then post-increments k: k = 4 </span>\n           <span class=\"hljs-function\">then <span class=\"hljs-title\">evaluates</span> <span class=\"hljs-params\">(k++)</span>+k               <span class=\"hljs-comment\">//  evaluates to 3+4 = 7</span>\n\n<span class=\"hljs-params\">(i =+ j)</span>:  \"</span>=+<span class=\"hljs-string\">\" is not an java operator!!\n           it is evaluated as \"</span>=<span class=\"hljs-string\">\" operator followed by unary \"</span>+<span class=\"hljs-string\">\" operator\n           expression evaluates to +j           // evaluates to 2\n\nk = 3 | ( (j+= i) - - (k+++k) - - (i =+j) )\n  = 3 | ( 2 - -7 - -2) = 3 | 11 = (2+1) | (8+2+1) = (8+2+1) = 11\n\n\nj = 2 | k\n  = 2 | 11 = (2) | (8+2+1) = 8+2+1 = 11\n\n\ni = 1 | j;                    \n  = 1 | 11 = (1) | (8+2+1) = 8+2+1 = 11\n\nreturn i;  // return 11\n</span></code></pre>\n    </div>",
          "vote": "47"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>To me, the best answer is Mike Rylander's (in comment).</p>\n\n<blockquote>\n  <p>Replace it with <code>return 11;</code> and commit.</p>\n</blockquote>\n\n<p>I mean, the code is not dependent on anything written before, so it produces 11 everytime. It is a complex computation that takes time <strong>for nothing</strong> and produces 11. So you just have to return 11. Do not keep the useless code of a developper who was obviously having fun on you. It reminds me of a former colleague, who set a bomb in the code (something that seldom crashes, but sometimes crashes indeed), just before resigning...</p>\n\n<p><strong>Note :</strong> There might be a case where it is not equivalent: if i, j, and k are visible outside your method and reused somewhere else. But it is highly unlikely.</p>\n    </div>",
          "vote": "24"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Your program invokes undefined behavior in C. You are modifying <code>i</code> and  <code>j</code> more than one time between two sequence points.</p>\n\n<p>In Java and JavaScript the behavior is well-defined, and you have to look at the precedence and associativity of the operators.</p>\n    </div>",
          "vote": "15"
        }
      ]
    },
    {
      "question": "How do I remove a style element from an inline style using regex?",
      "url": "https://stackoverflow.com/questions/30791292/how-do-i-remove-a-style-element-from-an-inline-style-using-regex",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I am trying to remove only one property, <code>float</code>, and its value, from an inline style. I would like to start with this:</p>\n\n<pre class=\"default s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"first_line_info\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:490px; float:right;\"</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n\n<p>And make it like this:</p>\n\n<pre class=\"default s-code-block hljs xml\"><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"first_line_info\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"width:490px\"</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre>\n\n<p>So far I have tried this code:</p>\n\n<pre class=\"default s-code-block hljs swift\"><code><span class=\"hljs-type\">Regex</span> noInlineStylePattern <span class=\"hljs-operator\">=</span> new <span class=\"hljs-type\">Regex</span>(<span class=\"hljs-string\">\"style=<span class=\"hljs-subst\">\\\"</span>[^<span class=\"hljs-subst\">\\\"</span>]*<span class=\"hljs-subst\">\\\"</span>\"</span>, <span class=\"hljs-type\">RegexOptions</span>.<span class=\"hljs-type\">IgnoreCase</span>);\ndata <span class=\"hljs-operator\">=</span> noInlineStylePattern.<span class=\"hljs-type\">Replace</span>(data, <span class=\"hljs-string\">\"\"</span>);\n</code></pre>\n\n<p>This removes all of the inline styles. How can I just remove the float?</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This should remove all floats:</p>\n\n<pre class=\"default s-code-block hljs ruby\"><code>data = Regex.Replace(data, @<span class=\"hljs-string\">\"(style=\\\"\"</span>.*<span class=\"hljs-string\">?)</span>(<span class=\"hljs-symbol\">float:</span>\\s*[^;\\<span class=\"hljs-string\">\"\"</span>]+;<span class=\"hljs-string\">?)</span>(.*<span class=\"hljs-string\">?\\\"</span><span class=\"hljs-string\">\")\"</span>, <span class=\"hljs-string\">\"$1$3\"</span>, RegexOptions.IgnoreCase)\n</code></pre>\n    </div>",
          "vote": "16"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>This code <strong>removes all attributes</strong> in style element except first attribute</p>\n\n<pre class=\"default s-code-block hljs typescript\"><code><span class=\"hljs-built_in\">string</span> test = @<span class=\"hljs-string\">\" &lt;div id=\"</span><span class=\"hljs-string\">\"first_line_info\"</span><span class=\"hljs-string\">\" style=\"</span><span class=\"hljs-string\">\"width:490px; float:right;\"</span><span class=\"hljs-string\">\"&gt; &lt;/div&gt;\"</span>;\n\n<span class=\"hljs-keyword\">var</span> result = Regex.Replace(test,<span class=\"hljs-string\">\"(style=\\\")(.*?;).*\\\"\"</span>, <span class=\"hljs-keyword\">new</span> MatchEvaluator(<span class=\"hljs-function\">(<span class=\"hljs-params\">m</span>)=&gt;</span>\n    {\n        <span class=\"hljs-keyword\">return</span> m.Groups[<span class=\"hljs-number\">1</span>].Value + m.Groups[<span class=\"hljs-number\">2</span>].Value + @<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\"</span>;\n    }));\n</code></pre>\n\n<p>This code <strong>removes only float attribute</strong> from style element:</p>\n\n<pre class=\"default s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">var</span> result2 = Regex.Replace(test, <span class=\"hljs-string\">\"(style=\\\".*?;).*(float:.*?;)\\\"\"</span>, <span class=\"hljs-keyword\">new</span> MatchEvaluator(<span class=\"hljs-function\">(<span class=\"hljs-params\">m</span>) =&gt;</span>\n    {\n        <span class=\"hljs-keyword\">return</span> m.Groups[<span class=\"hljs-number\">1</span>].Value + @<span class=\"hljs-string\">\"\"</span><span class=\"hljs-string\">\"\"</span>;\n    }));\n</code></pre>\n    </div>",
          "vote": "11"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>We can achieve the same with dom manipulation:</p>\n<pre class=\"default s-code-block hljs csharp\"><code><span class=\"hljs-keyword\">var</span> dom = document.createElement(<span class=\"hljs-string\">'div'</span>);\ndom.innerHTML = `\n  &lt;div id=<span class=\"hljs-string\">\"first_line_info\"</span> style=<span class=\"hljs-string\">\"width:490px; float:right;\"</span>&gt; &lt;/div&gt;\n  &lt;div id=<span class=\"hljs-string\">\"first_line_info1\"</span> style=<span class=\"hljs-string\">\"width:490px;float:left;float:right\"</span>&gt; &lt;/div&gt;\n`;\n<span class=\"hljs-keyword\">var</span> elem = dom.getElementsByTagName(<span class=\"hljs-string\">'div'</span>);\n<span class=\"hljs-keyword\">var</span> len = elem.length;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n  elem[i].style.<span class=\"hljs-built_in\">float</span> = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-comment\">//float removed</span>\n}\n\nconsole.log(dom.innerHTML);\n</code></pre>\n<p>From dom-manipulation plus regex replace method:<br>\nadvantage: just need to match <strong>float</strong> not <strong>style and float</strong></p>\n<pre class=\"default s-code-block hljs csharp\"><code><span class=\"hljs-keyword\">var</span> dom = document.createElement(<span class=\"hljs-string\">'div'</span>);\ndom.innerHTML = `\n  &lt;div id=<span class=\"hljs-string\">\"first_line_info\"</span> style=<span class=\"hljs-string\">\"width:490px; float:right;\"</span>&gt; &lt;/div&gt;\n  &lt;div id=<span class=\"hljs-string\">\"first_line_info1\"</span> style=<span class=\"hljs-string\">\"width:490px; float:right;float:left\"</span>&gt; &lt;/div&gt;\n`;\n<span class=\"hljs-keyword\">var</span> elem = dom.getElementsByTagName(<span class=\"hljs-string\">'div'</span>);\n<span class=\"hljs-keyword\">var</span> len = elem.length;\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; len; i++) {\n  <span class=\"hljs-keyword\">var</span> style = elem[i].getAttribute(<span class=\"hljs-string\">'style'</span>);\n  <span class=\"hljs-keyword\">var</span> regex = /(<span class=\"hljs-built_in\">float</span>:\\w+;*)/g;\n\n  style = style.replace(regex, <span class=\"hljs-string\">\"\"</span>);\n  <span class=\"hljs-comment\">//float removed</span>\n\n  elem[i].setAttribute(<span class=\"hljs-string\">'style'</span>, style);\n}\n\nconsole.log(dom.innerHTML);\n</code></pre>\n    </div>",
          "vote": "3"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>In the match group value, you could replace it.</p>\n\n<pre class=\"default s-code-block hljs css\"><code>(<span class=\"hljs-attribute\">float</span>:.*?;)\n\n<span class=\"hljs-number\">1</span>.  <span class=\"hljs-attribute\">float</span><span class=\"hljs-selector-pseudo\">:right</span>;\n</code></pre>\n    </div>",
          "vote": "1"
        }
      ]
    },
    {
      "question": "Javascript performance, conditional statement vs assignment operator",
      "url": "https://stackoverflow.com/questions/17686749/javascript-performance-conditional-statement-vs-assignment-operator",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>Is there any difference in performance between the <strong><em>conditional operator <code>===</code> and the assignment operator <code>=</code></em></strong>?  I am writing some pre-save hook middleware in mongoose and I am wondering if there is much of a speed difference between:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>UserSchema.pre(<span class=\"hljs-string\">'save'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">next</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.isModified()) {\n        <span class=\"hljs-keyword\">return</span> next();\n    }\n    <span class=\"hljs-built_in\">this</span>.crm.isUpToDate = <span class=\"hljs-literal\">false</span>;\n    next();\n});\n</code></pre>\n\n<p>and</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>UserSchema.pre(<span class=\"hljs-string\">'save'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">next</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.isModified()) {\n        <span class=\"hljs-keyword\">return</span> next();\n    }\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.crm.update === <span class=\"hljs-literal\">true</span>) {\n        <span class=\"hljs-built_in\">this</span>.crm.isUpToDate = <span class=\"hljs-literal\">false</span>;\n    }\n    next();\n});\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>Thanks for the constructive comments.</p>\n\n<p>Basically, it doesn't look like there is much of a difference in the performance (as stated above it's negligible). Thanks for the cool tool for testing speed <a href=\"http://jsperf.com/\" rel=\"nofollow noreferrer\">http://jsperf.com/</a>, I had never heard of it before.</p>\n\n<p>For those of you who are wondering about the code, first off I made a blatant error in my original post, then when everyone tried to point it out to me I cried, that's probably the reason why everyone downvoted.</p>\n\n<p>Here is what I am doing:</p>\n\n<p>I have a mongoose pre-save middleware hook (for a mongo database) where the hook gets run every time a document is saved. At the point of save I check if the document was updated. If it was I set the <code>crmIsUpToDate</code> to false. The <code>crmIsUpToDate</code> will get set to true when a cron job gets. This hook can be run many times before the cron job gets to the document. </p>\n\n<p>I didn't think this was all that necessary for the question because the question was if there is a difference between doing a comparison <code>===</code> and doing an assignment <code>=</code>. I shouldn't have even put the code up because it really detracted from the main question.</p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>When you have a non-refcounting language (which JavaScript isn't) and doing an assignment ('=', resulting in a copy operation) of a big object it can be \"slow\". So a check if that copy operation is really necessary can save you a significant amount of time.</p>\n\n<p>But JavaScript is a native refcounting language:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code>object1 = {<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>};\nobject2 = object1;         <span class=\"hljs-comment\">// refcounting copy?</span>\nobject1.a = <span class=\"hljs-number\">3</span>;             <span class=\"hljs-comment\">// test by modifying the first object</span>\n<span class=\"hljs-built_in\">console</span>.log( object2.a );  <span class=\"hljs-comment\">// will return 3 =&gt; refcounting</span>\n</code></pre>\n\n<p>=&gt; so all assignment operations ('=') are quite cheap.</p>\n\n<p>And, even more, you are working with a native data type (bool, numbers would be the same) that might be even faster or at least as quick as objects.<br>\nNOTE: strings are not refcounted in JavaScript, they are an exception in this case.</p>\n\n<p>So, right now we have learned that the assignment is cheap. But what about the identity check (the '===')?</p>\n\n<p>In your code you must wind your way down through the object <code>this</code> -&gt; <code>crm</code> -&gt; <code>update</code> - this takes some additional time. And then the identicality of the type (bool) must be checked and then if the content (false) is the same.<br>\nAll of this are adding conditions in the program flow where modern CPUs with their long pipelines might guess the branch wrongly creating a stall and a reload of the full pipeline. This also wastes quite a lot of CPU cycles (although the modern CPUs are quite good at this now).</p>\n\n<p>=&gt; This comparison ('===') is quite expensive.</p>\n\n<p><strong>Conclusion #1:</strong><br>\nYou shouldn't protect a cheap code by an expensive test that can be easily avoided.<br>\nWhen the code gets more expensive a point will come where the test will save time at the end. This leads to:</p>\n\n<p><strong>Conclusion #2:</strong><br>\nPremature optimisation is evil! It can make code harder to read, introduce new bugs, makes code bigger (also bad for cache efficiency), ...<br>\n=&gt; Only optimize those parts of the code where you are sure you are running in a performance problem - and then only based on profiling informations. Humans are quite bad at guessing the effects here...</p>\n    </div>",
          "vote": "50"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>The current top answer is incorrect on an important point: <code>===</code> is similarly inexpensive to <code>=</code>, because it does not deeply compare objects; it simply checks whether they reference the same object in memory. (The <code>if</code> branch is the only real culprit here)</p>\n\n<blockquote>\n  <p>Is there any difference in performance between the conditional operator <code>===</code> and the assignment operator <code>=</code>?</p>\n</blockquote>\n\n<p><code>===</code> is not the conditional operator - <code>===</code> is \"Strict Equality Comparison\" (or \"identity\", or \"strict equals\"). (Javascript's conditional operator is of the form <code>condition ? expr1 : expr2</code>)</p>\n\n<p>It's already been covered that assignment with <code>varName = expression</code> is very cheap: essentially, it takes the location of where <code>expression</code> is in memory, and makes <code>varName</code> point to that location as well. No deep copying occurs, even when <code>expression</code> is a huge object.</p>\n\n<p>But the same sort of thing is true for Strict Equality Comparison, for the most part - <code>expr1 === expr2</code> will evaluate to <code>true</code> when either:</p>\n\n<ol>\n<li><p>Both expressions are primitives, and both are of the same type and same value (with the exception of <code>NaN</code>), or</p></li>\n<li><p>Both expressions are objects, and the objects are the <em>same object in memory</em>.</p></li>\n</ol>\n\n<p>Checking whether two object expressions refer to the same object in memory is extremely cheap - it's on the same order of magnitude as taking the memory reference of an object and having a variable point to that memory location (as <code>=</code> does). <code>===</code> does not deeply compare every nested property and value (unless you explicitly do so with something like <code>JSON.stringify</code>ing both sides of the <code>===</code>, but in that case, the bottleneck is the <code>JSON.stringify</code>, not the <code>===</code>)</p>\n\n<p>The code with the <code>if</code> branch:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.crm.update === <span class=\"hljs-literal\">true</span>) {\n    <span class=\"hljs-built_in\">this</span>.crm.isUpToDate = <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n\n<p>will be slower than the plain assignment:</p>\n\n<pre class=\"lang-js s-code-block hljs javascript\"><code><span class=\"hljs-built_in\">this</span>.crm.isUpToDate = <span class=\"hljs-literal\">false</span>;\n</code></pre>\n\n<p>because <em>logical branches are slow</em> (relatively); the <code>===</code> check and <code>=</code> assignment are quite fast:</p>\n\n<blockquote>\n  <p>As a general rule of thumb, branches are slower than straight-line code (on all CPUs, and with all programming languages). -<a href=\"https://stackoverflow.com/questions/54166875/why-are-two-calls-to-string-charcodeat-faster-than-having-one-with-another-one/54186960#54186960\">jmrk, V8 developer</a></p>\n</blockquote>\n\n<p>This is the same issue behind the famous question: <a href=\"https://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array\">Why is it faster to process a sorted array than an unsorted array?</a></p>\n\n<p>That said, while logical branches do require extra resources, on modern computers, the effect is rarely significant - it's better to strive for <em>clean, readable</em> code, and only consider changing such a section <em>after you're sure</em> that that section is causing a performance bottleneck, otherwise you'll make the code harder to read for what's often an imperceptible difference.</p>\n    </div>",
          "vote": "7"
        }
      ]
    },
    {
      "question": "Return Json object with Duplicate Keys using C#",
      "url": "https://stackoverflow.com/questions/42384565/return-json-object-with-duplicate-keys-using-c-sharp",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                \n<p>I'm using WEB API to receive the request from the Client application to save the Contact Information and I need to send the Error Message only if data has an error otherwise nothing TODO</p>\n\n<p>Early I Used Dictionary</p>\n\n<p>For Example:</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>Dictionary&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt; error = <span class=\"hljs-keyword\">new</span> Dictionary&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;\n{\n    {<span class=\"hljs-string\">\"SaveContactMethod_1\"</span>, <span class=\"hljs-string\">\"FirstName Invalid\"</span>},\n    {<span class=\"hljs-string\">\"SaveContactMethod_2\"</span>, <span class=\"hljs-string\">\"LastName Invalid\"</span>},\n    {<span class=\"hljs-string\">\"SaveContactMethod_3\"</span>, <span class=\"hljs-string\">\"MiddleName Invalid\"</span>},\n}\n</code></pre>\n\n<p>the respective JSON Object is</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>{\n    <span class=\"hljs-string\">\"error\"</span> : {\n        <span class=\"hljs-string\">\"SaveContactMethod_1\"</span>:<span class=\"hljs-string\">\"FirstName Invalid\"</span>,\n        <span class=\"hljs-string\">\"SaveContactMethod_2\"</span>:<span class=\"hljs-string\">\"LastName Invalid\"</span>,\n        <span class=\"hljs-string\">\"SaveContactMethod_3\"</span>:<span class=\"hljs-string\">\"MiddleName Invalid\"</span>\n    }\n}\n</code></pre>\n\n<p>But I need an UNIQUE Key (i.e., Duplicate Key), So I changed the <code>Dictionary&lt;string, string&gt;</code> to <code>List&lt;KeyValuePair&lt;string, string&gt;&gt;</code></p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>List&lt;KeyValuePair&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;&gt; error = <span class=\"hljs-keyword\">new</span> List&lt;KeyValuePair&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;&gt;\n{\n    <span class=\"hljs-keyword\">new</span> KeyValuePair&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">\"SaveContactMethod\"</span>, <span class=\"hljs-string\">\"FirstName Invalid\"</span>),\n    <span class=\"hljs-keyword\">new</span> KeyValuePair&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">\"SaveContactMethod\"</span>, <span class=\"hljs-string\">\"LastName Invalid\"</span>),\n    <span class=\"hljs-keyword\">new</span> KeyValuePair&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>&gt;(<span class=\"hljs-string\">\"SaveContactMethod\"</span>, <span class=\"hljs-string\">\"MiddleName Invalid\"</span>),\n}\n</code></pre>\n\n<p>the respective JSON Object is</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>{\n    <span class=\"hljs-string\">\"error\"</span> : [\n        { <span class=\"hljs-string\">\"key\"</span>:<span class=\"hljs-string\">\"SaveContactMethod\"</span>, <span class=\"hljs-string\">\"value\"</span>:<span class=\"hljs-string\">\"FirstName Invalid\"</span> },\n        { <span class=\"hljs-string\">\"key\"</span>:<span class=\"hljs-string\">\"SaveContactMethod\"</span>, <span class=\"hljs-string\">\"value\"</span>:<span class=\"hljs-string\">\"LastName Invalid\"</span> },\n        { <span class=\"hljs-string\">\"key\"</span>:<span class=\"hljs-string\">\"SaveContactMethod\"</span>, <span class=\"hljs-string\">\"value\"</span>:<span class=\"hljs-string\">\"MiddleName Invalid\"</span> }\n    ]\n}\n</code></pre>\n\n<p><strong>My Requirement</strong>: I need to add a Duplicate Key and I need the Json Output as like Dictionary. Kindly assist me.</p>\n\n<p>Expected Output: JSON</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>{\n    <span class=\"hljs-string\">\"error\"</span> : {\n        <span class=\"hljs-string\">\"SaveContactMethod\"</span>:<span class=\"hljs-string\">\"FirstName Invalid\"</span>,\n        <span class=\"hljs-string\">\"SaveContactMethod\"</span>:<span class=\"hljs-string\">\"LastName Invalid\"</span>,\n        <span class=\"hljs-string\">\"SaveContactMethod\"</span>:<span class=\"hljs-string\">\"MiddleName Invalid\"</span>\n    }\n}\n</code></pre>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>No</strong>, this is not possible.</p>\n\n<p>This would be invalid* JSON:</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>{\n    <span class=\"hljs-string\">\"error\"</span> : {\n        <span class=\"hljs-string\">\"SaveContactMethod\"</span>:<span class=\"hljs-string\">\"FirstName Invalid\"</span>,\n        <span class=\"hljs-string\">\"SaveContactMethod\"</span>:<span class=\"hljs-string\">\"LastName Invalid\"</span>,\n        <span class=\"hljs-string\">\"SaveContactMethod\"</span>:<span class=\"hljs-string\">\"MiddleName Invalid\"</span>\n    }\n}\n</code></pre>\n\n<p>You can check this <a href=\"https://jsonformatter.curiousconcept.com/\" rel=\"noreferrer\">here</a>:</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>Warning:Duplicate key, names should be unique.[Code <span class=\"hljs-number\">23</span>, Structure <span class=\"hljs-number\">9</span>]\nWarning:Duplicate key, names should be unique.[Code <span class=\"hljs-number\">23</span>, Structure <span class=\"hljs-number\">13</span>]\n</code></pre>\n\n<p><sub>*<a href=\"https://stackoverflow.com/a/23195243/2441442\">Depending on what you call valid</a></sub></p>\n\n<p><sub><sub>If you realy want to go this route, according to RFC 4627, you could use the <a href=\"https://msdn.microsoft.com/en-us/library/2839d5h5(v=vs.110).aspx\" rel=\"noreferrer\"><code>StringBuilder</code></a> class.</sub></sub></p>\n\n<hr>\n\n<p>Since you don't seem to understand, what <em>Depending on what you call valid</em> means.</p>\n\n<p><a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-internalizejsonproperty\" rel=\"noreferrer\">ECMA-262:</a></p>\n\n<blockquote>\n  <p>In the case where there are duplicate name Strings within an object,\n  lexically preceding values for the same key shall be overwritten.</p>\n</blockquote>\n\n<p>That means: If you get three <code>SaveContactMethod</code>'s, you only want <code>\"MiddleName Invalid\"</code> in ECMA Script (JS). With c# serialization, this would not even be possible. You need to write your own JsonSerializer for it.</p>\n    </div>",
          "vote": "105"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>You have a classic \"XY\" problem. You have asked \"How do I do X\", but you <em>really</em> need to do Y and you think that X is the only way to get to Y -- but X is either impossible or very hard. By changing your requirements a little, you can get to Y a different way, but you haven't seen that yet since you're stuck on X.</p>\n\n<p>Here's your X: the JSON format that you want to get:</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>{\n    <span class=\"hljs-string\">\"error\"</span> : {\n        <span class=\"hljs-string\">\"SaveContactMethod\"</span>:<span class=\"hljs-string\">\"FirstName Invalid\"</span>,\n        <span class=\"hljs-string\">\"SaveContactMethod\"</span>:<span class=\"hljs-string\">\"LastName Invalid\"</span>,\n        <span class=\"hljs-string\">\"SaveContactMethod\"</span>:<span class=\"hljs-string\">\"MiddleName Invalid\"</span>\n    }\n}\n</code></pre>\n\n<p>This will, as others have said, throw away all the error messages except for one when you load it into your C# code.</p>\n\n<p>However, there's a very simple way to get all the error messages. You simply need to change the JSON you're expecting to look something like <strong>this</strong> instead:</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>{\n    <span class=\"hljs-string\">\"error\"</span> : {\n        <span class=\"hljs-string\">\"SaveContactMethod\"</span>: [\n            <span class=\"hljs-string\">\"FirstName Invalid\"</span>,\n            <span class=\"hljs-string\">\"LastName Invalid\"</span>,\n            <span class=\"hljs-string\">\"MiddleName Invalid\"</span>\n        ]\n    }\n}\n</code></pre>\n\n<p>If you only had a single error message, <em>you should <strong>still</strong> use a list</em>:</p>\n\n<pre class=\"lang-cs s-code-block hljs csharp\"><code>{\n    <span class=\"hljs-string\">\"error\"</span> : {\n        <span class=\"hljs-string\">\"SaveContactMethod\"</span>: [\n            <span class=\"hljs-string\">\"FirstName Invalid\"</span>\n        ]\n    }\n}\n</code></pre>\n\n<p>That way when you load the JSON into your C# code, it will <em>always</em> have the same type, <code>Dictionary&lt;string,List&lt;string&gt;&gt;</code>, whether there was one error or many.</p>\n\n<p>That's the Y in your XY problem. Instead of beating your head against the wall of \"I want to have duplicate keys in JSON\", find a way around the wall: have a single key with a list of values. And now you can do what you <em>really</em> needed, which is to get all the error messages from your form with just a single key name for every single error message.</p>\n    </div>",
          "vote": "100"
        }
      ]
    },
    {
      "question": "How to send 100,000 emails weekly? [closed]",
      "url": "https://stackoverflow.com/questions/3905734/how-to-send-100-000-emails-weekly",
      "qDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n                    <div>\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLightbulb\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M15 6.38A6.48 6.48 0 007.78.04h-.02A6.49 6.49 0 002.05 5.6a6.31 6.31 0 002.39 5.75c.49.39.76.93.76 1.5v.24c0 1.07.89 1.9 1.92 1.9h2.75c1.04 0 1.92-.83 1.92-1.9v-.2c0-.6.26-1.15.7-1.48A6.32 6.32 0 0015 6.37zM4.03 5.85A4.49 4.49 0 018 2.02a4.48 4.48 0 015 4.36 4.3 4.3 0 01-1.72 3.44c-.98.74-1.5 1.9-1.5 3.08v.1H7.2v-.14c0-1.23-.6-2.34-1.53-3.07a4.32 4.32 0 01-1.64-3.94zM10 18a1 1 0 000-2H7a1 1 0 100 2h3z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        As it currently stands, this question is not a good fit for our Q&amp;A format. We expect answers to be supported by facts, references,   or expertise, but this question will likely solicit debate, arguments, polling, or extended discussion. If you feel that this question   can be improved and possibly reopened, <a href=\"/help/reopen-questions\">visit the help center</a> for guidance.\n                        \n                    </div>\n                </div>\n            </div>\n                <div class=\"grid--cell mb0 mt8\">Closed <span title=\"2012-12-10 10:34:09Z\" class=\"relativetime\">8 years ago</span>.</div>\n        </div>\n</aside>\n\n            <aside class=\"s-notice s-notice__info js-post-notice mb16\" role=\"status\">\n        <div class=\"grid fd-column fw-nowrap\">\n            <div class=\"grid fw-nowrap\">\n                    <div class=\"grid--cell mr8\">\n                        <svg aria-hidden=\"true\" class=\"svg-icon iconLock\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"><path d=\"M16 9a2 2 0 00-2-2V6A5 5 0 004 6v1a2 2 0 00-2 2v6c0 1.1.9 2 2 2h10a2 2 0 002-2V9zm-7 5a2 2 0 110-4 2 2 0 010 4zm3.1-7H5.9V6a3.1 3.1 0 016.2 0v1z\"></path></svg>\n                    </div>\n                <div class=\"grid--cell wmn0 fl1 lh-lg\">\n                    <div class=\"grid--cell fl1 lh-lg\">\n                        <b>Locked</b>. This question and its answers are <a href=\"/help/locked-posts\">locked</a> because the question is off-topic but has historical significance. It is not currently accepting new answers or interactions.\n                        \n                    </div>\n                </div>\n            </div>\n        </div>\n</aside>\n\n    </div>\n\n<p>How can one send an email to 100,000 users on a weekly basis in PHP? This includes mail to subscribers using the following providers:</p>\n\n<ul>\n<li>AOL</li>\n<li>G-Mail</li>\n<li>Hotmail</li>\n<li>Yahoo</li>\n</ul>\n\n<p>It is important that all e-mail actually be delivered, to the extent that it is possible. Obviously, just sending the mail conventionally would do nothing but create problems.</p>\n\n<p>Is there a library for PHP that makes this simpler? </p>\n    </div>",
      "answer": [
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p><strong>Short answer:</strong> While it's technically possible to send 100k e-mails each week yourself, the simplest, easiest and cheapest solution is to <strong>outsource this</strong> to one of the companies that specialize in it (I <em>did</em> say \"cheapest\": there's no limit to the amount of development time (and therefore money) that you can sink into this when trying to DIY).</p>\n\n<p><strong>Long answer:</strong> If you decide that you <em>absolutely want</em> to do this yourself, prepare for a world of hurt (after all, this is e-mail/e-fail we're talking about). You'll need:</p>\n\n<ul>\n<li>e-mail content that <em>is not</em> spam (otherwise you'll run into additional major roadblocks on every step, even legal repercussions)</li>\n<li>in addition, your content should be easy to <em>distinguish</em> from spam - that may be a bit hard to do in some cases (I heard that a certain pharmaceutical company had to all but abandon e-mail, as their brand names are quite common in spams)</li>\n<li>a configurable SMTP server of your own, one which won't buckle when you dump 100k e-mails onto it (your ISP's upstream server won't be sufficient here and you'll make the ISP violently unhappy; we used two dedicated boxes)</li>\n<li>some mail wrapper (e.g. PhpMailer if PHP's your poison of choice; using PHP's <code>mail()</code> is horrible enough by itself)</li>\n<li>your own sender function to run in a loop, create the mails and pass them to the wrapper (note that you may run into PHP's memory limits if your app has a memory leak; you may need to recycle the sending process periodically, or even better, decouple the \"creating e-mails\" and \"sending e-mails\" altogether)</li>\n</ul>\n\n<p>Surprisingly, that was the easy part. The hard part is actually sending it:</p>\n\n<ul>\n<li>some servers will ban you when you send too many mails close together, so you need to shuffle and watch your queue (e.g. send one mail to joe@example.com, then three to other domains, only then another to otheraddress@example.com)</li>\n<li>you need to have correct <a href=\"http://www.codinghorror.com/blog/2010/04/so-youd-like-to-send-some-email-through-code.html\" rel=\"nofollow noreferrer\">PTR, SPF, DKIM records</a></li>\n<li>handling remote server timeouts, misconfigured DNS records and other network pleasantries</li>\n<li>handling invalid e-mails (and no, <a href=\"https://stackoverflow.com/questions/201323/what-is-the-best-regular-expression-for-validating-email-addresses/201378#201378\">regex is the wrong tool for that</a>)</li>\n<li>handling unsubscriptions (many legitimate newsletters have been reclassified as spam due to many frustrated users who couldn't unsubscribe in one step and instead chose to \"mark as spam\" - the spam filters do learn, esp. with large e-mail providers)</li>\n<li>handling bounces and rejects (\"no such mailbox ojhn@example.com\",\"mailbox john@example.com full\")</li>\n<li>handling blacklisting and removal from blacklists (Sure, you're not sending spam. Some recipients won't be so sure - with such large list, it <em>will</em> happen sometimes, no matter what precautions you take. Some people (e.g. your not-so-scrupulous competitors) might even go as far to falsely report your mailings as spam - it does happen. On <em>average</em>, it takes weeks to get yourself removed from a blacklist.)</li>\n</ul>\n\n<p>And to top it off, you'll have to manage the legal part of it (various federal, state, and local laws; and even different tangles of laws once you send outside the U.S. (note: you have no way of finding if joe@hotmail.com lives in Southwest Elbonia, the country with world's most draconian antispam laws)).</p>\n\n<p>I'm pretty sure I missed a few heads of this hydra - are you still sure you want to do this yourself? If so, there'll be another wave, this time merely the annoying problems inherent in sending an e-mail. (You see, SMTP is a store-and-forward protocol, which means that your e-mail will be shuffled across many SMTP servers around the Internet, in the hope that the next one is a bit closer to the final recipient. Basically, the e-mail is sent to an SMTP server, which puts it into its forward queue; when time comes, it will forward it further to a different SMTP server, until it reaches the SMTP server for the given domain. This forward could happen immediately, or in a few minutes, or hours, or days, or never.) Thus, you'll see the following issues - most of which could happen en route as well as at the destination:</p>\n\n<ul>\n<li>the remote SMTP servers don't want to talk to your SMTP server</li>\n<li>your mails are getting marked as spam (<code>&lt;blink&gt;</code> is not your friend here, nor is <code>&lt;font color=...&gt;</code>)</li>\n<li>your mails are delivered days, even weeks late (contrary to popular opinion, SMTP is designed to make a best effort to deliver the message sometime in the future - not to deliver it now)</li>\n<li>your mails are not delivered at all (already sent from e-mail server on hop #4, not sent yet from server on hop #5, the server that currently holds the message crashes, data is lost)</li>\n<li>your mails are mangled by some braindead server en route (this one is somewhat solvable with base64 encoding, but then the size goes up and the e-mail <em>looks</em> more suspicious)</li>\n<li>your mails are delivered and the recipients seem not to want them (\"I'm sure I didn't sign up for this, I remember exactly what I did a year ago\" (of course you do, sir))</li>\n<li>users with various versions of Microsoft Outlook and its <em>special</em> handling of Internet mail</li>\n<li>wizard's apprentice mode (a self-reinforcing positive feedback loop - in other words, automated e-mails as replies to automated e-mails as replies to...; you <strong>really</strong> don't want to be the one to set this off, as you'd anger half the internet at yourself)</li>\n</ul>\n\n<p>and it'll be <em>your</em> job to troubleshoot and solve this (hint: you can't, mostly). The people who run a legit mass-mailing businesses know that in the end you can't solve it, and that they can't solve it either - and they have the reasons well researched, documented and outlined (maybe even as a Powerpoint presentation - complete with sounds and cool transitions - that your bosses can understand), as they've had to explain this a million times before. Plus, for the problems that are actually solvable, they know very well how to solve them.</p>\n\n<p>If, after all this, you are not discouraged and still want to do this, go right ahead: it's even possible that you'll find a better way to do this. Just know that the road ahead won't be easy - sending e-mail is trivial, getting it delivered is hard.</p>\n    </div>",
          "vote": "679"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>People have recommended MailChimp which is a good vendor for bulk email.  If you're looking for a good vendor for transactional email, I might be able to help.</p>\n\n<p>Over the past 6 months, we used four different SMTP vendors with the goal of figuring out which was the best one.</p>\n\n<p>Here's a summary of what we found...</p>\n\n<p><a href=\"http://www.authsmtp.com/\" rel=\"nofollow\">AuthSMTP</a></p>\n\n<ul>\n<li>Cheapest around</li>\n<li>No analysis/reporting</li>\n<li>No tracking for opens/clicks</li>\n<li>Had slight hesitation on some sends </li>\n</ul>\n\n<p><a href=\"http://postmarkapp.com/\" rel=\"nofollow\">Postmark</a></p>\n\n<ul>\n<li>Very cheap, but not as cheap as AuthSMTP</li>\n<li>Beautiful cpanel but no tracking on opens/clicks</li>\n<li>Send-level activity tracking so you can open a single email that was sent and look at how it looked and the delivery data.</li>\n<li>Have to use API.  Sending by SMTP was recently introduced but it's buggy.  For instance, we noticed that quotes (\") in the subject line are stripped.</li>\n<li>Cannot send any attachment you want.  Must be on approved list of file types and under a certain size.  (10 MB I think)</li>\n<li>Requires a set list of from names/addresses.</li>\n</ul>\n\n<p><a href=\"http://www.jangosmtp.com/\" rel=\"nofollow\">JangoSMTP</a></p>\n\n<ul>\n<li>Expensive in relation to the others – more than 10 times in some cases</li>\n<li>Ugly cpanel but great tracking on opens/clicks with email-level detail</li>\n<li>Had hesitation, at times, when sending.  On two occasions, sends took an hour to be delivered</li>\n<li>Requires a set list of from name/addresses.</li>\n</ul>\n\n<p><a href=\"http://sendgrid.com/\" rel=\"nofollow\">SendGrid</a></p>\n\n<ul>\n<li>Not quite a cheap as AuthSMTP but still very cheap.  Many customers can exist on 200 free sends per day.</li>\n<li>Decent cpanel but no in-depth detail on open/click tracking</li>\n<li>Lots of API options.  Options (open/click tracking, etc) can be custom defined on an email-by-email basis.  Inbound (reply) email can be posted to our HTTP end point.</li>\n<li>Absolutely zero hesitation on sends.  Every email sent landed in the inbox almost immediately.</li>\n<li>Can send from any from name/address.</li>\n</ul>\n\n<p><strong>Conclusion</strong></p>\n\n<p>SendGrid was the best with Postmark coming in second place.  We never saw any hesitation in send times with either of those two - in some cases we sent several hundred emails at once - and they both have the best ROI, given a solid featureset.</p>\n    </div>",
          "vote": "46"
        },
        {
          "aDetail": "<div class=\"s-prose js-post-body\" itemprop=\"text\">\n<p>Here is what I did recently in PHP on one of my bigger systems:</p>\n\n<ol>\n<li><p>User inputs newsletter text and selects the recipients (which generates a query to retrieve the email addresses for later).</p></li>\n<li><p>Add the newsletter text and recipients query to a row in mysql table called *email_queue*</p>\n\n<ul>\n<li>(The table email_queue has the columns \"to\" \"subject\" \"body\" \"priority\")</li>\n</ul></li>\n<li><p>I created another script, which runs every minute as a cron job. It uses the <a href=\"http://swiftmailer.org/\">SwiftMailer</a> class. This script simply:</p>\n\n<ul>\n<li><p>during business hours, sends all email with priority == 0 </p></li>\n<li><p>after hours, send other emails by priority</p></li>\n</ul></li>\n</ol>\n\n<p>Depending on the hosts settings, I can now have it throttle using standard swiftmailers plugins like antiflood and throttle...</p>\n\n<pre class=\"lang-php s-code-block hljs\"><code><span class=\"hljs-variable\">$mailer</span>-&gt;registerPlugin(<span class=\"hljs-keyword\">new</span> Swift_Plugins_AntiFloodPlugin(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">30</span>));\n</code></pre>\n\n<p>and</p>\n\n<pre class=\"lang-php s-code-block hljs\"><code><span class=\"hljs-variable\">$mailer</span>-&gt;registerPlugin(<span class=\"hljs-keyword\">new</span> Swift_Plugins_ThrottlerPlugin( <span class=\"hljs-number\">100</span>, Swift_Plugins_ThrottlerPlugin::MESSAGES_PER_MINUTE ));\n</code></pre>\n\n<p>etc, etc..</p>\n\n<p>I have expanded it way beyond this pseudocode, with attachments, and many other configurable settings, but it works very well as long as your server is setup correctly to send email. (Probably wont work on shared hosting, but in theory it should...) Swiftmailer even has a setting</p>\n\n<pre class=\"lang-php s-code-block hljs\"><code><span class=\"hljs-variable\">$message</span>-&gt;setReturnPath\n</code></pre>\n\n<p>Which I now use to track bounces...</p>\n\n<p>Happy Trails! (Happy Emails?)</p>\n    </div>",
          "vote": "4"
        }
      ]
    }
  ]
}
